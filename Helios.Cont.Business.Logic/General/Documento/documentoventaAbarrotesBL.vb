Imports Helios.Cont.Business.Entity
Imports System.Transactions
Imports Helios.General.Constantes
Imports System.Data.Entity.DbFunctions
Imports System.Data.Entity
Imports System.Data.Entity.Migrations

Public Class documentoventaAbarrotesBL
    Inherits BaseBL

    Public Function GetVentasXDistribuirSelDate(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL

        Dim Lista As New List(Of documentoventaAbarrotes)

        Dim listTipo As New List(Of String)
        listTipo.Add("VELC")
        listTipo.Add("NTCE")
        listTipo.Add(TIPO_VENTA.VENTA_GENERAL)

        Dim objRecurso As New documentoventaAbarrotes

        Select Case be.documento.TipoEnvio
            Case "HOY"
                Dim conVenta = HeliosData.documentoventaAbarrotes _
                                    .Join(HeliosData.entidad, Function(tot) tot.idCliente, Function(al) al.idEntidad, Function(tot, al) _
                                                                                           New With {
                                                                                           .Entidad = al,
                                                                                           .venta = tot
                                                                                           }) _
                                   .Include(Function(o) o.venta.documentoventaAbarrotesDet
                                    ).Select(Function(t) New With
                                                 {
                                                 .Entidad = t.Entidad,
                                                 .venta = t.venta
                                                 }) _
                                    .Where(Function(o) o.venta.idEstablecimiento = be.idEstablecimiento And
                                    o.venta.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                    o.venta.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                    o.venta.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                    o.venta.estadoEntrega <> be.estadoEntrega).ToList()

                For Each obj In conVenta
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.venta.idDocumento
                    objRecurso.tipoOperacion = obj.venta.tipoOperacion
                    objRecurso.fechaDoc = obj.venta.fechaDoc
                    objRecurso.tipoDocumento = obj.venta.tipoDocumento
                    objRecurso.serie = obj.venta.serie
                    objRecurso.serieVenta = obj.venta.serieVenta
                    objRecurso.numeroDoc = obj.venta.numeroDoc
                    objRecurso.numeroVenta = obj.venta.numeroVenta
                    objRecurso.numeroDocNormal = obj.venta.numeroDocNormal
                    objRecurso.nombrePedido = obj.venta.nombrePedido
                    objRecurso.importeCostoMN = obj.venta.importeCostoMN
                    objRecurso.idCliente = obj.Entidad.idEntidad
                    If Not IsNothing(obj.Entidad) Then
                        objRecurso.CustomEntidad = New entidad() With
                        {
                        .idEntidad = obj.Entidad.idEntidad,
                        .tipoDoc = obj.Entidad.tipoDoc,
                        .nrodoc = obj.Entidad.nrodoc,
                        .nombreCompleto = obj.Entidad.nombreCompleto,
                        .tipoPersona = obj.Entidad.tipoPersona
                        }
                        objRecurso.tipoDocEntidad = obj.Entidad.tipoDoc
                        objRecurso.NroDocEntidad = obj.Entidad.nrodoc
                        objRecurso.NombreEntidad = obj.Entidad.nombreCompleto
                        objRecurso.TipoPersona = obj.Entidad.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.venta.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.venta.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.venta.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.venta.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.venta.tipoCambio
                    objRecurso.moneda = obj.venta.moneda
                    objRecurso.estadoCobro = obj.venta.estadoCobro
                    objRecurso.tipoVenta = obj.venta.tipoVenta
                    objRecurso.notaCredito = obj.venta.notaCredito
                    objRecurso.usuarioActualizacion = obj.venta.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.venta.estadoEntrega
                    objRecurso.idPadre = obj.venta.idPadre
                    objRecurso.EnvioSunat = obj.venta.EnvioSunat
                    objRecurso.documentoventaAbarrotesDet = ventaDetalleBL.MappingDetalleVentaList(obj.venta.documentoventaAbarrotesDet.ToList())
                    ''For Each d In obj.ventaDetalle
                    ''    Dim o = New documentoventaAbarrotesDet
                    ''    o.secuencia = d.secuencia
                    ''    o.idItem = d.idItem
                    ''    o.nombreItem = d.nombreItem
                    ''    o.unidad1 = d.unidad
                    ''    o.monto1 = d.cantidad.GetValueOrDefault()
                    ''    o.CustomTotalMovimientosGuia = New List(Of documentoguiaDetalle)
                    ''    If d.TotalMovimientosGuia IsNot Nothing Then
                    ''        If d.TotalMovimientosGuia.ToList()(0) IsNot Nothing Then
                    ''            o.CustomTotalMovimientosGuia = GetMovimientosGuiaSelItem(d.TotalMovimientosGuia.ToList())
                    ''        End If
                    ''    End If
                    ''Next
                    'objRecurso.documentoventaAbarrotesDet = ventaDetalleBL.MappingDetalleVentaList(obj.ventaDetalle.ToList())
                    Lista.Add(objRecurso)
                Next

            Case "ULTIMOS 7 DIAS"

                Dim dateInit = DateTime.Now.Date
                Dim dateFinish = dateInit.AddDays(7)

                Dim conVenta = HeliosData.documentoventaAbarrotes _
                                   .Join(HeliosData.entidad, Function(tot) tot.idCliente, Function(al) al.idEntidad, Function(tot, al) _
                                                                                          New With {
                                                                                          .Entidad = al,
                                                                                          .venta = tot
                                                                                          }) _
                                  .Include(Function(o) o.venta.documentoventaAbarrotesDet
                                   ).Select(Function(t) New With
                                                {
                                                .Entidad = t.Entidad,
                                                .venta = t.venta
                                                }) _
                                   .Where(Function(o) o.venta.idEstablecimiento = be.idEstablecimiento And
                                   DbFunctions.TruncateTime(o.venta.fechaDoc) >= dateInit And
                                   DbFunctions.TruncateTime(o.venta.fechaDoc) <= dateFinish And
                                   o.venta.estadoEntrega <> be.estadoEntrega).ToList()

                For Each obj In conVenta
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.venta.idDocumento
                    objRecurso.tipoOperacion = obj.venta.tipoOperacion
                    objRecurso.fechaDoc = obj.venta.fechaDoc
                    objRecurso.tipoDocumento = obj.venta.tipoDocumento
                    objRecurso.serie = obj.venta.serie
                    objRecurso.serieVenta = obj.venta.serieVenta
                    objRecurso.numeroDoc = obj.venta.numeroDoc
                    objRecurso.numeroVenta = obj.venta.numeroVenta
                    objRecurso.numeroDocNormal = obj.venta.numeroDocNormal
                    objRecurso.nombrePedido = obj.venta.nombrePedido
                    objRecurso.importeCostoMN = obj.venta.importeCostoMN
                    objRecurso.idCliente = obj.Entidad.idEntidad
                    If Not IsNothing(obj.Entidad) Then
                        objRecurso.CustomEntidad = New entidad() With
                        {
                            .idEntidad = obj.Entidad.idEntidad,
                        .tipoDoc = obj.Entidad.tipoDoc,
                        .nrodoc = obj.Entidad.nrodoc,
                        .nombreCompleto = obj.Entidad.nombreCompleto,
                        .tipoPersona = obj.Entidad.tipoPersona
                        }
                        objRecurso.tipoDocEntidad = obj.Entidad.tipoDoc
                        objRecurso.NroDocEntidad = obj.Entidad.nrodoc
                        objRecurso.NombreEntidad = obj.Entidad.nombreCompleto
                        objRecurso.TipoPersona = obj.Entidad.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.venta.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.venta.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.venta.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.venta.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.venta.tipoCambio
                    objRecurso.moneda = obj.venta.moneda
                    objRecurso.estadoCobro = obj.venta.estadoCobro
                    objRecurso.tipoVenta = obj.venta.tipoVenta
                    objRecurso.notaCredito = obj.venta.notaCredito
                    objRecurso.usuarioActualizacion = obj.venta.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.venta.estadoEntrega
                    objRecurso.idPadre = obj.venta.idPadre
                    objRecurso.EnvioSunat = obj.venta.EnvioSunat
                    objRecurso.documentoventaAbarrotesDet = ventaDetalleBL.MappingDetalleVentaList(obj.venta.documentoventaAbarrotesDet.ToList())
                    ''For Each d In obj.ventaDetalle
                    ''    Dim o = New documentoventaAbarrotesDet
                    ''    o.secuencia = d.secuencia
                    ''    o.idItem = d.idItem
                    ''    o.nombreItem = d.nombreItem
                    ''    o.unidad1 = d.unidad
                    ''    o.monto1 = d.cantidad.GetValueOrDefault()
                    ''    o.CustomTotalMovimientosGuia = New List(Of documentoguiaDetalle)
                    ''    If d.TotalMovimientosGuia IsNot Nothing Then
                    ''        If d.TotalMovimientosGuia.ToList()(0) IsNot Nothing Then
                    ''            o.CustomTotalMovimientosGuia = GetMovimientosGuiaSelItem(d.TotalMovimientosGuia.ToList())
                    ''        End If
                    ''    End If
                    ''Next
                    'objRecurso.documentoventaAbarrotesDet = ventaDetalleBL.MappingDetalleVentaList(obj.ventaDetalle.ToList())
                    Lista.Add(objRecurso)
                Next

            Case "ULTIMOS 30 DIAS"
                Dim dateInit = DateTime.Now.Date
                Dim dateFinish = dateInit.AddDays(30)

                ''Dim conVenta = HeliosData.documentoventaAbarrotes _
                ''                   .Join(HeliosData.entidad, Function(tot) tot.idCliente, Function(al) al.idEntidad, Function(tot, al) _
                ''                                                                          New With {
                ''                                                                          .Entidad = al,
                ''                                                                          .venta = tot
                ''                                                                          }) _
                ''                  .Include(Function(o) o.venta.documentoventaAbarrotesDet
                ''                   ).Select(Function(t) New With
                ''                                {
                ''                                .Entidad = t.Entidad,
                ''                                .venta = t.venta
                ''                                }) _
                ''                   .Where(Function(o) o.venta.idEstablecimiento = be.idEstablecimiento And
                ''                   o.venta.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                ''                   o.venta.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                ''                   o.venta.estadoEntrega <> be.estadoEntrega).ToList()

                Dim conVenta = HeliosData.documentoventaAbarrotes _
                                   .Join(HeliosData.entidad, Function(tot) tot.idCliente, Function(al) al.idEntidad, Function(tot, al) _
                                                                                          New With {
                                                                                          .Entidad = al,
                                                                                          .venta = tot
                                                                                          }) _
                                  .Include(Function(o) o.venta.documentoventaAbarrotesDet
                                   ).Select(Function(t) New With
                                                {
                                                .Entidad = t.Entidad,
                                                .venta = t.venta
                                                }) _
                                   .Where(Function(o) o.venta.idEstablecimiento = be.idEstablecimiento And
                                   DbFunctions.TruncateTime(o.venta.fechaDoc) >= dateInit And
                                   DbFunctions.TruncateTime(o.venta.fechaDoc) <= dateFinish And
                                   o.venta.estadoEntrega <> be.estadoEntrega).ToList()


                For Each obj In conVenta
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.venta.idDocumento
                    objRecurso.tipoOperacion = obj.venta.tipoOperacion
                    objRecurso.fechaDoc = obj.venta.fechaDoc
                    objRecurso.tipoDocumento = obj.venta.tipoDocumento
                    objRecurso.serie = obj.venta.serie
                    objRecurso.serieVenta = obj.venta.serieVenta
                    objRecurso.numeroDoc = obj.venta.numeroDoc
                    objRecurso.numeroVenta = obj.venta.numeroVenta
                    objRecurso.numeroDocNormal = obj.venta.numeroDocNormal
                    objRecurso.nombrePedido = obj.venta.nombrePedido
                    objRecurso.importeCostoMN = obj.venta.importeCostoMN
                    objRecurso.idCliente = obj.Entidad.idEntidad
                    If Not IsNothing(obj.Entidad) Then
                        objRecurso.CustomEntidad = New entidad() With
                        {
                            .idEntidad = obj.Entidad.idEntidad,
                        .tipoDoc = obj.Entidad.tipoDoc,
                        .nrodoc = obj.Entidad.nrodoc,
                        .nombreCompleto = obj.Entidad.nombreCompleto,
                        .tipoPersona = obj.Entidad.tipoPersona
                        }
                        objRecurso.tipoDocEntidad = obj.Entidad.tipoDoc
                        objRecurso.NroDocEntidad = obj.Entidad.nrodoc
                        objRecurso.NombreEntidad = obj.Entidad.nombreCompleto
                        objRecurso.TipoPersona = obj.Entidad.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.venta.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.venta.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.venta.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.venta.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.venta.tipoCambio
                    objRecurso.moneda = obj.venta.moneda
                    objRecurso.estadoCobro = obj.venta.estadoCobro
                    objRecurso.tipoVenta = obj.venta.tipoVenta
                    objRecurso.notaCredito = obj.venta.notaCredito
                    objRecurso.usuarioActualizacion = obj.venta.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.venta.estadoEntrega
                    objRecurso.idPadre = obj.venta.idPadre
                    objRecurso.EnvioSunat = obj.venta.EnvioSunat
                    objRecurso.documentoventaAbarrotesDet = ventaDetalleBL.MappingDetalleVentaList(obj.venta.documentoventaAbarrotesDet.ToList())
                    ''For Each d In obj.ventaDetalle
                    ''    Dim o = New documentoventaAbarrotesDet
                    ''    o.secuencia = d.secuencia
                    ''    o.idItem = d.idItem
                    ''    o.nombreItem = d.nombreItem
                    ''    o.unidad1 = d.unidad
                    ''    o.monto1 = d.cantidad.GetValueOrDefault()
                    ''    o.CustomTotalMovimientosGuia = New List(Of documentoguiaDetalle)
                    ''    If d.TotalMovimientosGuia IsNot Nothing Then
                    ''        If d.TotalMovimientosGuia.ToList()(0) IsNot Nothing Then
                    ''            o.CustomTotalMovimientosGuia = GetMovimientosGuiaSelItem(d.TotalMovimientosGuia.ToList())
                    ''        End If
                    ''    End If
                    ''Next
                    'objRecurso.documentoventaAbarrotesDet = ventaDetalleBL.MappingDetalleVentaList(obj.ventaDetalle.ToList())
                    Lista.Add(objRecurso)
                Next
        End Select


        Return Lista
    End Function

    Public Function GetVentasXDistribuirSelCliente(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL

        Dim Lista As New List(Of documentoventaAbarrotes)

        Dim listTipo As New List(Of String)
        listTipo.Add("VELC")
        listTipo.Add("NTCE")
        listTipo.Add(TIPO_VENTA.VENTA_GENERAL)

        Dim objRecurso As New documentoventaAbarrotes

        Dim conVenta = HeliosData.documentoventaAbarrotes _
                                      .Join(HeliosData.entidad, Function(tot) tot.idCliente, Function(al) al.idEntidad, Function(tot, al) _
                                                                                             New With {
                                                                                             .Entidad = al,
                                                                                             .venta = tot
                                                                                             }) _
                                     .Include(Function(o) o.venta.documentoventaAbarrotesDet
                                      ).Select(Function(t) New With
                                                   {
                                                   .Entidad = t.Entidad,
                                                   .venta = t.venta
                                                   }) _
                                      .Where(Function(o) o.venta.idEstablecimiento = be.idEstablecimiento And
                                      o.venta.idCliente = be.idCliente And
                                      o.venta.estadoEntrega <> be.estadoEntrega).ToList()

        'Dim conVenta2 = HeliosData.documentoventaAbarrotes _
        '                              .Join(HeliosData.entidad, Function(tot) tot.idCliente, Function(al) al.idEntidad, Function(tot, al) _
        '                                                                                     New With {
        '                                                                                     .Entidad = al,
        '                                                                                     .venta = tot
        '                                                                                     }) _
        '                             .Include(Function(o) o.venta.documentoventaAbarrotesDet _
        '                             .GroupJoin(HeliosData.documentoguiaDetalle, Function(tot1) tot1.secuencia, Function(al1) al1.secuenciaRef, Function(tot1, al1) _
        '                                                                                     New With {
        '                                                                                     .GuiaDetalle = al1.DefaultIfEmpty,
        '                                                                                     .ventaDetalle = tot1
        '                                                                                     }).GroupBy(Function(g) New With
        '                                                                                                    {
        '                                                                                                    g.ventaDetalle.secuencia,
        '                                                                                                    g.ventaDetalle.idItem,
        '                                                                                                    g.ventaDetalle.nombreItem,
        '                                                                                                    g.ventaDetalle.unidad1,
        '                                                                                                    g.ventaDetalle.monto1
        '                                                                                                    }) _
        '                                                                                     .Select(Function(group) New With
        '                                                                                                 {
        '                                                                                                 .secuencia = group.Key.secuencia,
        '                                                                                                 .iditem = group.Key.idItem,
        '                                                                                                 .nombreItem = group.Key.nombreItem,
        '                                                                                                 .unidad = group.Key.unidad1,
        '                                                                                                 .cantidad = group.Key.monto1,
        '                                                                                                 .TotalMovimientosGuia = group.SelectMany(Function(a) a.GuiaDetalle)
        '                                                                                                 })
        '                              ).Select(Function(t) New With
        '                                           {
        '                                           .Entidad = t.Entidad,
        '                                           .venta = t.venta,
        '                                           .ventaDetalle = t.venta.documentoventaAbarrotesDet
        '                                           }) _
        '                              .Where(Function(o) o.venta.idEstablecimiento = be.idEstablecimiento And
        '                              o.venta.idCliente = be.idCliente And
        '                              o.venta.estadoEntrega <> be.estadoEntrega).ToList()



        'Dim con3 = From venta In HeliosData.documentoventaAbarrotes.Include(Function(o) o.documentoventaAbarrotesDet)
        '           Where venta.estadoEntrega <> be.estadoEntrega
        '           Select
        '              venta,
        '              venta.documentoventaAbarrotesDet.GroupJoin(HeliosData.documentoguiaDetalle, Function(p) p.secuencia, Function(c) c.secuenciaRef, Function(Patient, Claims) New With {
        '               Patient,
        '               Claims
        '               }).ToList()






        'Dim con = (From caja In HeliosData.documentoventaAbarrotesDet
        '                                                                                                                                                                        Group Join mov In HeliosData.documentoguiaDetalle On caja.secuencia Equals mov.secuenciaRef Into mov_join = Group
        '                                                                                                                                                                        From mov In mov_join.DefaultIfEmpty()
        '                                                                                                                                                                        Where
        '           caja.idDocumento = be.idDocumento
        '                                                                                                                                                                        Group New With {caja, mov} By
        '           caja.secuencia,
        '           caja.idItem,
        '           caja.nombreItem,
        '           caja.tipoExistencia,
        '           caja.unidad1,
        '           caja.monto1
        '           Into g = Group
        '                                                                                                                                                                        Select
        '           secuencia,
        '           idItem,
        '           nombreItem,
        '           tipoExistencia,
        '           unidad1,
        '           monto1,
        '           movCant = CType(g.Sum(Function(p) p.mov.cantidad), Decimal?)).ToList


        For Each obj In conVenta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.venta.idDocumento
            objRecurso.tipoOperacion = obj.venta.tipoOperacion
            objRecurso.fechaDoc = obj.venta.fechaDoc
            objRecurso.tipoDocumento = obj.venta.tipoDocumento
            objRecurso.serie = obj.venta.serie
            objRecurso.serieVenta = obj.venta.serieVenta
            objRecurso.numeroDoc = obj.venta.numeroDoc
            objRecurso.numeroVenta = obj.venta.numeroVenta
            objRecurso.numeroDocNormal = obj.venta.numeroDocNormal
            objRecurso.nombrePedido = obj.venta.nombrePedido
            objRecurso.importeCostoMN = obj.venta.importeCostoMN
            If Not IsNothing(obj.Entidad) Then
                objRecurso.CustomEntidad = New entidad() With
                {
                .tipoDoc = obj.Entidad.tipoDoc,
                .nrodoc = obj.Entidad.nrodoc,
                .nombreCompleto = obj.Entidad.nombreCompleto,
                .tipoPersona = obj.Entidad.tipoPersona
                }
                objRecurso.tipoDocEntidad = obj.Entidad.tipoDoc
                objRecurso.NroDocEntidad = obj.Entidad.nrodoc
                objRecurso.NombreEntidad = obj.Entidad.nombreCompleto
                objRecurso.TipoPersona = obj.Entidad.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.venta.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.venta.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.venta.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.venta.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.venta.tipoCambio
            objRecurso.moneda = obj.venta.moneda
            objRecurso.estadoCobro = obj.venta.estadoCobro
            objRecurso.tipoVenta = obj.venta.tipoVenta
            objRecurso.notaCredito = obj.venta.notaCredito
            objRecurso.usuarioActualizacion = obj.venta.usuarioActualizacion
            objRecurso.estadoEntrega = obj.venta.estadoEntrega
            objRecurso.idPadre = obj.venta.idPadre
            objRecurso.EnvioSunat = obj.venta.EnvioSunat
            objRecurso.documentoventaAbarrotesDet = ventaDetalleBL.MappingDetalleVentaList(obj.venta.documentoventaAbarrotesDet.ToList())
            ''For Each d In obj.ventaDetalle
            ''    Dim o = New documentoventaAbarrotesDet
            ''    o.secuencia = d.secuencia
            ''    o.idItem = d.idItem
            ''    o.nombreItem = d.nombreItem
            ''    o.unidad1 = d.unidad
            ''    o.monto1 = d.cantidad.GetValueOrDefault()
            ''    o.CustomTotalMovimientosGuia = New List(Of documentoguiaDetalle)
            ''    If d.TotalMovimientosGuia IsNot Nothing Then
            ''        If d.TotalMovimientosGuia.ToList()(0) IsNot Nothing Then
            ''            o.CustomTotalMovimientosGuia = GetMovimientosGuiaSelItem(d.TotalMovimientosGuia.ToList())
            ''        End If
            ''    End If
            ''Next
            'objRecurso.documentoventaAbarrotesDet = ventaDetalleBL.MappingDetalleVentaList(obj.ventaDetalle.ToList())
            Lista.Add(objRecurso)
        Next



        Return Lista
    End Function

    Private Function GetMovimientosGuiaSelItem(list As List(Of documentoguiaDetalle)) As List(Of documentoguiaDetalle)
        GetMovimientosGuiaSelItem = New List(Of documentoguiaDetalle)
        For Each i In list
            GetMovimientosGuiaSelItem.Add(New documentoguiaDetalle() With
                                      {
                                      .idDocumento = i.idDocumento,
                                      .secuencia = i.secuencia,
                                      .idItem = i.idItem,
                                      .tipoExistencia = i.tipoExistencia,
                                      .descripcionItem = i.descripcionItem,
                                      .destino = i.destino,
                                      .unidadMedida = i.unidadMedida,
                                      .cantidad = i.cantidad,
                                      .almacenRef = i.almacenRef,
                                      .idDocumentoPadre = i.idDocumentoPadre,
                                      .secuenciaRef = i.secuenciaRef,
                                      .estado = i.estado,
                                      .puntoLlegada = i.puntoLlegada,
                                      .observaciones = i.observaciones,
                                      .ubigeo = i.ubigeo,
                                      .nombreRecepcion = i.nombreRecepcion,
                                      .dniRecepcion = i.dniRecepcion
                                      })
        Next
    End Function

    Public Function GetListarTodasVentasProductosTipoDoc(be As documentoventaAbarrotes, tipoConsulta As String) As List(Of documentoventaAbarrotesDet)
        Dim objRecurso As documentoventaAbarrotesDet
        Dim Lista As New List(Of documentoventaAbarrotesDet)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)

        Select Case tipoConsulta
            Case "PERIODO"
                Dim consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                                          On doc.idDocumento Equals compra.idDocumento
                                      Join ventaDetalle In HeliosData.documentoventaAbarrotesDet
                                          On ventaDetalle.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                                          On compra.idCliente Equals entidad.idEntidad
                                          Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where
                                          doc.idCentroCosto = be.idEstablecimiento And
                                          compra.fechaPeriodo = be.fechaPeriodo And
                                          ListaTipo.Contains(compra.tipoVenta) And
                                          compra.estadoCobro <> "ANU" And
                                          compra.tipoDocumento = be.tipoDocumento
                                      Order By compra.fechaDoc Descending).ToList


                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotesDet
                    objRecurso = obj.ventaDetalle

                    objRecurso.documentoventaAbarrotes = New documentoventaAbarrotes
                    objRecurso.documentoventaAbarrotes.idDocumento = obj.compra.idDocumento
                    objRecurso.documentoventaAbarrotes.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.documentoventaAbarrotes.fechaDoc = obj.compra.fechaDoc
                    objRecurso.documentoventaAbarrotes.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.documentoventaAbarrotes.serie = obj.compra.serie
                    objRecurso.documentoventaAbarrotes.serieVenta = obj.compra.serieVenta
                    objRecurso.documentoventaAbarrotes.numeroDoc = obj.compra.numeroDoc
                    objRecurso.documentoventaAbarrotes.numeroVenta = obj.compra.numeroVenta
                    objRecurso.documentoventaAbarrotes.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.documentoventaAbarrotes.nombrePedido = obj.compra.nombrePedido

                    If Not IsNothing(obj.e) Then
                        objRecurso.documentoventaAbarrotes.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.documentoventaAbarrotes.NroDocEntidad = obj.e.nrodoc
                        objRecurso.documentoventaAbarrotes.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.documentoventaAbarrotes.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.documentoventaAbarrotes.tipoDocEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.NroDocEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.NombreEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select
                    objRecurso.documentoventaAbarrotes.tipoCambio = obj.compra.tipoCambio
                    objRecurso.documentoventaAbarrotes.moneda = obj.compra.moneda
                    objRecurso.documentoventaAbarrotes.estadoCobro = obj.compra.estadoCobro
                    objRecurso.documentoventaAbarrotes.tipoVenta = obj.compra.tipoVenta
                    objRecurso.documentoventaAbarrotes.notaCredito = obj.compra.notaCredito
                    objRecurso.documentoventaAbarrotes.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.documentoventaAbarrotes.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.documentoventaAbarrotes.idPadre = obj.compra.idPadre
                    objRecurso.documentoventaAbarrotes.EnvioSunat = obj.compra.EnvioSunat


                    Lista.Add(objRecurso)
                Next

            Case "DIA"

                Dim consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                                          On doc.idDocumento Equals compra.idDocumento
                                      Join ventaDetalle In HeliosData.documentoventaAbarrotesDet
                                          On ventaDetalle.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                                          On compra.idCliente Equals entidad.idEntidad
                                          Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where
                                          doc.idCentroCosto = be.idEstablecimiento And
                                          compra.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                          compra.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                          compra.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                          ListaTipo.Contains(compra.tipoVenta) And
                                          compra.estadoCobro <> "ANU" And
                                          compra.tipoDocumento = be.tipoDocumento
                                      Order By compra.fechaDoc Descending).ToList

                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotesDet
                    objRecurso = obj.ventaDetalle

                    objRecurso.documentoventaAbarrotes = New documentoventaAbarrotes
                    objRecurso.documentoventaAbarrotes.idDocumento = obj.compra.idDocumento
                    objRecurso.documentoventaAbarrotes.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.documentoventaAbarrotes.fechaDoc = obj.compra.fechaDoc
                    objRecurso.documentoventaAbarrotes.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.documentoventaAbarrotes.serie = obj.compra.serie
                    objRecurso.documentoventaAbarrotes.serieVenta = obj.compra.serieVenta
                    objRecurso.documentoventaAbarrotes.numeroDoc = obj.compra.numeroDoc
                    objRecurso.documentoventaAbarrotes.numeroVenta = obj.compra.numeroVenta
                    objRecurso.documentoventaAbarrotes.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.documentoventaAbarrotes.nombrePedido = obj.compra.nombrePedido

                    If Not IsNothing(obj.e) Then
                        objRecurso.documentoventaAbarrotes.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.documentoventaAbarrotes.NroDocEntidad = obj.e.nrodoc
                        objRecurso.documentoventaAbarrotes.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.documentoventaAbarrotes.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.documentoventaAbarrotes.tipoDocEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.NroDocEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.NombreEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select
                    objRecurso.documentoventaAbarrotes.tipoCambio = obj.compra.tipoCambio
                    objRecurso.documentoventaAbarrotes.moneda = obj.compra.moneda
                    objRecurso.documentoventaAbarrotes.estadoCobro = obj.compra.estadoCobro
                    objRecurso.documentoventaAbarrotes.tipoVenta = obj.compra.tipoVenta
                    objRecurso.documentoventaAbarrotes.notaCredito = obj.compra.notaCredito
                    objRecurso.documentoventaAbarrotes.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.documentoventaAbarrotes.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.documentoventaAbarrotes.idPadre = obj.compra.idPadre
                    objRecurso.documentoventaAbarrotes.EnvioSunat = obj.compra.EnvioSunat

                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetTransferenciaEnTransitoCount(be As documentoventaAbarrotes) As Integer
        Dim consulta = HeliosData.documentoventaAbarrotes _
         .Include(Function(o) o.documentoventaAbarrotesDet) _
            .Where(Function(o) o.idEmpresa = be.idEmpresa And o.estadoEntrega = be.estadoEntrega And o.tipoVenta = "TEA").Count

        Return consulta
    End Function

    Public Function GetTransferenciaEnTransito(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        GetTransferenciaEnTransito = New List(Of documentoventaAbarrotes)
        Dim obj As documentoventaAbarrotes

        Dim consulta = HeliosData.documentoventaAbarrotes _
         .Include(Function(o) o.documentoventaAbarrotesDet) _
            .Where(Function(o) o.idEmpresa = be.idEmpresa And o.estadoEntrega = be.estadoEntrega And o.tipoVenta = "TEA") _
             .Select(Function(o) New With
                                 {
                                 .venta = o,
                                 .ventaDetalle = o.documentoventaAbarrotesDet.Join(HeliosData.almacen, Function(det) det.idAlmacenOrigen, Function(alo) alo.idAlmacen, Function(det, alo) _
                                                                                   New With {
                                                                                   .venta = o,
                                                                                   .ventaDetalle = det,
                                                                                   .almacenOrigen = alo
                                                                                   }) _
                                 .Join(HeliosData.almacen, Function(det) det.ventaDetalle.categoria, Function(ald) ald.idAlmacen, Function(det, ald) _
                                                                     New With {
                                                                     .venta = det.venta,
                                                                     .ventaDetalle = det.ventaDetalle,
                                                                     .almacenOrigen = det.almacenOrigen,
                                                                     .almacenDestino = ald
                                                                     }).Join(HeliosData.detalleitems, Function(det) CInt(det.ventaDetalle.idItem), Function(prod) prod.codigodetalle, Function(det, prod) _
                                                                             New With {
                                                                             .venta = det.venta,
                                                                             .ventaDetalle = det.ventaDetalle,
                                                                             .almacenOrigen = det.almacenOrigen,
                                                                             .almacenDestino = det.almacenDestino,
                                                                             .detalleitems = prod
                                                                             }).Join(HeliosData.detalleitem_equivalencias, Function(det) det.ventaDetalle.equivalencia_id, Function(eq) eq.equivalencia_id, Function(det, eq) _
                                                                             New With {
                                                                             .venta = det.venta,
                                                                             .ventaDetalle = det.ventaDetalle,
                                                                             .almacenOrigen = det.almacenOrigen,
                                                                             .almacenDestino = det.almacenDestino,
                                                                             .detalleitems = det.detalleitems,
                                                                             .detalleitem_equivalencias = eq
                                                                             })
                                 }).ToList

        For Each i In consulta
            obj = New documentoventaAbarrotes With
            {
            .idDocumento = i.venta.idDocumento,
            .tipoOperacion = i.venta.tipoOperacion,
            .tipoDocumento = i.venta.tipoDocumento,
            .fechaDoc = i.venta.fechaDoc,
            .horaVenta = i.venta.horaVenta,
            .fechaPeriodo = i.venta.fechaPeriodo,
            .serie = i.venta.serie,
            .numeroDoc = i.venta.numeroDoc,
            .numeroDocNormal = i.venta.numeroDocNormal,
            .serieVenta = i.venta.serieVenta,
            .numeroVenta = i.venta.numeroVenta,
            .idClientePedido = i.venta.idClientePedido,
            .nombrePedido = i.venta.nombrePedido,
            .idCliente = i.venta.idCliente,
            .moneda = i.venta.moneda,
            .tipoCambio = i.venta.tipoCambio,
            .tasaIgv = i.venta.tasaIgv,
            .ImporteNacional = i.venta.ImporteNacional,
            .ImporteExtranjero = i.venta.ImporteExtranjero,
            .importeCostoMN = i.venta.importeCostoMN,
            .importeCostoME = i.venta.importeCostoME,
            .glosa = i.venta.glosa,
            .terminos = i.venta.terminos,
            .tipoVenta = i.venta.tipoVenta,
            .modulo = i.venta.modulo,
            .idPadre = i.venta.idPadre,
            .estado = i.venta.estado,
            .estadoEntrega = i.venta.estadoEntrega,
            .nroGuia = i.venta.nroGuia,
            .usuarioActualizacion = i.venta.usuarioActualizacion,
            .fechaActualizacion = i.venta.fechaActualizacion
            }

            obj.documentoventaAbarrotesDet = New List(Of documentoventaAbarrotesDet)
            For Each det In i.ventaDetalle.ToList

                obj.documentoventaAbarrotesDet.Add(New documentoventaAbarrotesDet With
                                                   {
                                                   .CustomEquivalencia = New detalleitem_equivalencias With
                                                   {
                                                   .codigodetalle = det.detalleitem_equivalencias.codigodetalle,
                                                   .equivalencia_id = det.detalleitem_equivalencias.equivalencia_id,
                                                   .detalle = det.detalleitem_equivalencias.detalle,
                                                   .unidadComercial = det.detalleitem_equivalencias.unidadComercial,
                                                   .contenido = det.detalleitem_equivalencias.contenido,
                                                   .fraccionUnidad = det.detalleitem_equivalencias.fraccionUnidad,
                                                   .estado = det.detalleitem_equivalencias.estado,
                                                   .contenido_neto = det.detalleitem_equivalencias.contenido_neto,
                                                   .flag = det.detalleitem_equivalencias.flag
                                                   },
                                                   .CustomProducto = New detalleitems With
                                                   {
                                                   .codigodetalle = det.detalleitems.codigodetalle,
                                                   .idItem = det.detalleitems.idItem,
                                                   .descripcionItem = det.detalleitems.descripcionItem,
                                                   .presentacion = det.detalleitems.presentacion,
                                                   .unidad1 = det.detalleitems.unidad1,
                                                   .unidad2 = det.detalleitems.unidad2,
                                                   .tipoExistencia = det.detalleitems.tipoExistencia,
                                                   .origenProducto = det.detalleitems.origenProducto,
                                                   .tipoProducto = det.detalleitems.tipoProducto,
                                                   .nroOrden = det.detalleitems.nroOrden,
                                                   .codigo = det.detalleitems.codigo,
                                                   .marcaRef = det.detalleitems.marcaRef,
                                                   .AfectoCompra = det.detalleitems.AfectoCompra,
                                                   .AfectoVenta = det.detalleitems.AfectoVenta,
                                                   .AfectoStock = det.detalleitems.AfectoStock,
                                                   .precioCompra = det.detalleitems.precioCompra,
                                                   .productoRestringido = det.detalleitems.productoRestringido,
                                                   .igv = det.detalleitems.igv,
                                                   .tipoOtroImpuesto = det.detalleitems.tipoOtroImpuesto,
                                                   .otroImpuesto = det.detalleitems.otroImpuesto,
                                                   .cantidadMaxima = det.detalleitems.cantidadMaxima,
                                                   .cantidadMinima = det.detalleitems.cantidadMinima,
                                                   .estado = det.detalleitems.estado,
                                                   .usuarioActualizacion = det.detalleitems.usuarioActualizacion,
                                                   .fechaActualizacion = det.detalleitems.fechaActualizacion
                                                   },
                                                   .CustomAlmacenPartida = New almacen With {
                                                       .idAlmacen = det.almacenOrigen.idAlmacen,
                                                       .descripcionAlmacen = det.almacenOrigen.descripcionAlmacen,
                                                       .encargado = det.almacenOrigen.encargado,
                                                       .tipo = det.almacenOrigen.tipo,
                                                       .estado = det.almacenOrigen.estado,
                                                       .predeterminado = det.almacenOrigen.predeterminado,
                                                       .porcentajeUtilidad = det.almacenOrigen.porcentajeUtilidad,
                                                       .direccionAlmacen = det.almacenOrigen.direccionAlmacen
                                                   },
                                                   .CustomAlmacenLlegada = New almacen With {
                                                       .idAlmacen = det.almacenDestino.idAlmacen,
                                                       .descripcionAlmacen = det.almacenDestino.descripcionAlmacen,
                                                       .encargado = det.almacenDestino.encargado,
                                                       .tipo = det.almacenDestino.tipo,
                                                       .estado = det.almacenDestino.estado,
                                                       .predeterminado = det.almacenDestino.predeterminado,
                                                       .porcentajeUtilidad = det.almacenDestino.porcentajeUtilidad,
                                                       .direccionAlmacen = det.almacenDestino.direccionAlmacen
                                                   },
                                                   .idDocumento = det.ventaDetalle.idDocumento,
                                                   .secuencia = det.ventaDetalle.secuencia,
                                                   .idAlmacenOrigen = det.ventaDetalle.idAlmacenOrigen,
                                                   .idItem = det.ventaDetalle.idItem,
                                                   .nombreItem = det.ventaDetalle.nombreItem,
                                                   .tipoExistencia = det.ventaDetalle.tipoExistencia,
                                                   .destino = det.ventaDetalle.destino,
                                                   .equivalencia_id = det.ventaDetalle.equivalencia_id,
                                                   .unidad2 = det.ventaDetalle.unidad2,
                                                   .unidad1 = det.ventaDetalle.unidad1,
                                                   .monto1 = det.ventaDetalle.monto1,
                                                   .monto2 = det.ventaDetalle.monto2,
                                                   .preEvento = det.ventaDetalle.preEvento,
                                                   .idPadreDTVenta = det.ventaDetalle.idPadreDTVenta,
                                                   .estadoMovimiento = det.ventaDetalle.estadoMovimiento,
                                                   .tipoVenta = det.ventaDetalle.tipoVenta,
                                                   .entregado = det.ventaDetalle.entregado,
                                                   .estadoPago = det.ventaDetalle.estadoPago,
                                                   .categoria = det.ventaDetalle.categoria,
                                                   .estadoEntrega = det.ventaDetalle.estadoEntrega,
                                                   .idCajaUsuario = det.ventaDetalle.idCajaUsuario,
                                                   .codigoLote = det.ventaDetalle.codigoLote,
                                                   .usuarioModificacion = det.ventaDetalle.usuarioModificacion,
                                                   .fechaModificacion = det.ventaDetalle.fechaModificacion
                                                   })
            Next
            GetTransferenciaEnTransito.Add(obj)
        Next
    End Function

    Public Function GetTransferenciasPeriodo(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        GetTransferenciasPeriodo = New List(Of documentoventaAbarrotes)


        Dim obj As documentoventaAbarrotes

        Dim consulta = HeliosData.documentoventaAbarrotes _
            .Include(Function(o) o.documentoventaAbarrotesDet) _
            .Where(Function(o) o.idEmpresa = be.idEmpresa And o.fechaDoc.Value.Year = be.fechaDoc.Value.Year And o.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
            o.tipoVenta = "TEA" And o.idEstablecimiento = be.idEstablecimiento) _
             .Select(Function(o) New With
                                 {
                                 .venta = o,
                                 .ventaDetalle = o.documentoventaAbarrotesDet.Join(HeliosData.almacen, Function(det) det.idAlmacenOrigen, Function(alo) alo.idAlmacen, Function(det, alo) _
                                                                                   New With {
                                                                                   .venta = o,
                                                                                   .ventaDetalle = det,
                                                                                   .almacenOrigen = alo
                                                                                   }) _
                                 .Join(HeliosData.almacen, Function(det) det.ventaDetalle.categoria, Function(ald) ald.idAlmacen, Function(det, ald) _
                                                                     New With {
                                                                     .venta = det.venta,
                                                                     .ventaDetalle = det.ventaDetalle,
                                                                     .almacenOrigen = det.almacenOrigen,
                                                                     .almacenDestino = ald
                                                                     }).Join(HeliosData.detalleitems, Function(det) CInt(det.ventaDetalle.idItem), Function(prod) prod.codigodetalle, Function(det, prod) _
                                                                             New With {
                                                                             .venta = det.venta,
                                                                             .ventaDetalle = det.ventaDetalle,
                                                                             .almacenOrigen = det.almacenOrigen,
                                                                             .almacenDestino = det.almacenDestino,
                                                                             .detalleitems = prod
                                                                             }).Join(HeliosData.detalleitem_equivalencias, Function(det) det.ventaDetalle.equivalencia_id, Function(eq) eq.equivalencia_id, Function(det, eq) _
                                                                             New With {
                                                                             .venta = det.venta,
                                                                             .ventaDetalle = det.ventaDetalle,
                                                                             .almacenOrigen = det.almacenOrigen,
                                                                             .almacenDestino = det.almacenDestino,
                                                                             .detalleitems = det.detalleitems,
                                                                             .detalleitem_equivalencias = eq
                                                                             })
                                 }).ToList

        For Each i In consulta
            obj = New documentoventaAbarrotes With
            {
            .idDocumento = i.venta.idDocumento,
            .tipoOperacion = i.venta.tipoOperacion,
            .tipoDocumento = i.venta.tipoDocumento,
            .fechaDoc = i.venta.fechaDoc,
            .horaVenta = i.venta.horaVenta,
            .fechaPeriodo = i.venta.fechaPeriodo,
            .serie = i.venta.serie,
            .numeroDoc = i.venta.numeroDoc,
            .numeroDocNormal = i.venta.numeroDocNormal,
            .serieVenta = i.venta.serieVenta,
            .numeroVenta = i.venta.numeroVenta,
            .idClientePedido = i.venta.idClientePedido,
            .nombrePedido = i.venta.nombrePedido,
            .idCliente = i.venta.idCliente,
            .moneda = i.venta.moneda,
            .tipoCambio = i.venta.tipoCambio,
            .tasaIgv = i.venta.tasaIgv,
            .ImporteNacional = i.venta.ImporteNacional,
            .ImporteExtranjero = i.venta.ImporteExtranjero,
            .importeCostoMN = i.venta.importeCostoMN,
            .importeCostoME = i.venta.importeCostoME,
            .glosa = i.venta.glosa,
            .terminos = i.venta.terminos,
            .tipoVenta = i.venta.tipoVenta,
            .modulo = i.venta.modulo,
            .idPadre = i.venta.idPadre,
            .estado = i.venta.estado,
            .estadoEntrega = i.venta.estadoEntrega,
            .nroGuia = i.venta.nroGuia,
            .usuarioActualizacion = i.venta.usuarioActualizacion,
            .fechaActualizacion = i.venta.fechaActualizacion
            }

            obj.documentoventaAbarrotesDet = New List(Of documentoventaAbarrotesDet)
            For Each det In i.ventaDetalle.ToList

                obj.documentoventaAbarrotesDet.Add(New documentoventaAbarrotesDet With
                                                   {
                                                   .CustomEquivalencia = New detalleitem_equivalencias With
                                                   {
                                                   .codigodetalle = det.detalleitem_equivalencias.codigodetalle,
                                                   .equivalencia_id = det.detalleitem_equivalencias.equivalencia_id,
                                                   .detalle = det.detalleitem_equivalencias.detalle,
                                                   .unidadComercial = det.detalleitem_equivalencias.unidadComercial,
                                                   .contenido = det.detalleitem_equivalencias.contenido,
                                                   .fraccionUnidad = det.detalleitem_equivalencias.fraccionUnidad,
                                                   .estado = det.detalleitem_equivalencias.estado,
                                                   .contenido_neto = det.detalleitem_equivalencias.contenido_neto,
                                                   .flag = det.detalleitem_equivalencias.flag
                                                   },
                                                   .CustomProducto = New detalleitems With
                                                   {
                                                   .codigodetalle = det.detalleitems.codigodetalle,
                                                   .idItem = det.detalleitems.idItem,
                                                   .descripcionItem = det.detalleitems.descripcionItem,
                                                   .presentacion = det.detalleitems.presentacion,
                                                   .unidad1 = det.detalleitems.unidad1,
                                                   .unidad2 = det.detalleitems.unidad2,
                                                   .tipoExistencia = det.detalleitems.tipoExistencia,
                                                   .origenProducto = det.detalleitems.origenProducto,
                                                   .tipoProducto = det.detalleitems.tipoProducto,
                                                   .nroOrden = det.detalleitems.nroOrden,
                                                   .codigo = det.detalleitems.codigo,
                                                   .marcaRef = det.detalleitems.marcaRef,
                                                   .AfectoCompra = det.detalleitems.AfectoCompra,
                                                   .AfectoVenta = det.detalleitems.AfectoVenta,
                                                   .AfectoStock = det.detalleitems.AfectoStock,
                                                   .precioCompra = det.detalleitems.precioCompra,
                                                   .productoRestringido = det.detalleitems.productoRestringido,
                                                   .igv = det.detalleitems.igv,
                                                   .tipoOtroImpuesto = det.detalleitems.tipoOtroImpuesto,
                                                   .otroImpuesto = det.detalleitems.otroImpuesto,
                                                   .cantidadMaxima = det.detalleitems.cantidadMaxima,
                                                   .cantidadMinima = det.detalleitems.cantidadMinima,
                                                   .estado = det.detalleitems.estado,
                                                   .usuarioActualizacion = det.detalleitems.usuarioActualizacion,
                                                   .fechaActualizacion = det.detalleitems.fechaActualizacion
                                                   },
                                                   .CustomAlmacenPartida = New almacen With {
                                                       .idAlmacen = det.almacenOrigen.idAlmacen,
                                                       .descripcionAlmacen = det.almacenOrigen.descripcionAlmacen,
                                                       .encargado = det.almacenOrigen.encargado,
                                                       .tipo = det.almacenOrigen.tipo,
                                                       .estado = det.almacenOrigen.estado,
                                                       .predeterminado = det.almacenOrigen.predeterminado,
                                                       .porcentajeUtilidad = det.almacenOrigen.porcentajeUtilidad,
                                                       .direccionAlmacen = det.almacenOrigen.direccionAlmacen
                                                   },
                                                   .CustomAlmacenLlegada = New almacen With {
                                                       .idAlmacen = det.almacenDestino.idAlmacen,
                                                       .descripcionAlmacen = det.almacenDestino.descripcionAlmacen,
                                                       .encargado = det.almacenDestino.encargado,
                                                       .tipo = det.almacenDestino.tipo,
                                                       .estado = det.almacenDestino.estado,
                                                       .predeterminado = det.almacenDestino.predeterminado,
                                                       .porcentajeUtilidad = det.almacenDestino.porcentajeUtilidad,
                                                       .direccionAlmacen = det.almacenDestino.direccionAlmacen
                                                   },
                                                   .idDocumento = det.ventaDetalle.idDocumento,
                                                   .secuencia = det.ventaDetalle.secuencia,
                                                   .idAlmacenOrigen = det.ventaDetalle.idAlmacenOrigen,
                                                   .idItem = det.ventaDetalle.idItem,
                                                   .nombreItem = det.ventaDetalle.nombreItem,
                                                   .tipoExistencia = det.ventaDetalle.tipoExistencia,
                                                   .destino = det.ventaDetalle.destino,
                                                   .equivalencia_id = det.ventaDetalle.equivalencia_id,
                                                   .unidad2 = det.ventaDetalle.unidad2,
                                                   .unidad1 = det.ventaDetalle.unidad1,
                                                   .monto1 = det.ventaDetalle.monto1,
                                                   .monto2 = det.ventaDetalle.monto2,
                                                   .preEvento = det.ventaDetalle.preEvento,
                                                   .idPadreDTVenta = det.ventaDetalle.idPadreDTVenta,
                                                   .estadoMovimiento = det.ventaDetalle.estadoMovimiento,
                                                   .tipoVenta = det.ventaDetalle.tipoVenta,
                                                   .entregado = det.ventaDetalle.entregado,
                                                   .estadoPago = det.ventaDetalle.estadoPago,
                                                   .categoria = det.ventaDetalle.categoria,
                                                   .estadoEntrega = det.ventaDetalle.estadoEntrega,
                                                   .idCajaUsuario = det.ventaDetalle.idCajaUsuario,
                                                   .codigoLote = det.ventaDetalle.codigoLote,
                                                   .usuarioModificacion = det.ventaDetalle.usuarioModificacion,
                                                   .fechaModificacion = det.ventaDetalle.fechaModificacion
                                                   })
            Next
            GetTransferenciasPeriodo.Add(obj)
        Next

    End Function

    Function ListaCpePendientes(fecha As DateTime, idEmpresa As String) As List(Of documentoventaAbarrotes)
        Dim lista = ListaCpePendientesDeEnvio(fecha, idEmpresa).Union(ListaCpePendientesDeEnvioGuia(fecha, idEmpresa)).ToList()
        Return lista
    End Function

    Function ListaCpePendientesDeEnvioGuia(fecha As DateTime, idEmpresa As String) As List(Of documentoventaAbarrotes)

        '  Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoGuia)

        Dim MyList As New List(Of documentoventaAbarrotes)
        Dim MyObjet As New documentoventaAbarrotes


        Dim list As New List(Of String)

        list.Add("VELC") 'envio anulado y validado
        list.Add("NTCE")  'enviado anulado 

        lista = (From i In HeliosData.documentoGuia
                 Where i.fechaDoc.Value.Year = fecha.Year And i.fechaDoc.Value.Month = fecha.Month And Not i.EnvioSunat = "SI" And Not i.EnvioSunat = "VA" _
                                And Not i.EnvioSunat = "PE" And i.idEmpresa = idEmpresa And i.estado = "VG").ToList

        For Each i In lista

            MyObjet = New documentoventaAbarrotes

            MyObjet.idDocumento = i.idDocumento
            MyObjet.fechaDoc = i.fechaDoc
            MyObjet.tipoDocumento = i.tipoDoc
            MyObjet.serieVenta = i.serie
            MyObjet.numeroVenta = i.numeroDoc
            MyObjet.ImporteNacional = 0
            MyObjet.EnvioSunat = i.EnvioSunat

            MyList.Add(MyObjet)
        Next


        Return MyList
    End Function

    Function ListaCpePendientesDeEnvio(fecha As DateTime, idEmpresa As String) As List(Of documentoventaAbarrotes)

        '  Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim list As New List(Of String)

        list.Add("VELC") 'envio anulado y validado
        list.Add("NTCE")  'enviado anulado 

        lista = (From i In HeliosData.documentoventaAbarrotes
                 Where i.fechaDoc.Value.Year = fecha.Year And i.fechaDoc.Value.Month = fecha.Month And
                                list.Contains(i.tipoVenta) And Not i.EnvioSunat = "SI" And Not i.EnvioSunat = "VA" _
                                And Not i.EnvioSunat = "PE" And i.idEmpresa = idEmpresa).ToList
        Return lista
    End Function

    Function AnuladosPendientesCPE(fecha As DateTime, ruc As String) As List(Of documentoventaAbarrotes)

        Dim lista = DocumentosAnuladosPendientes(fecha, ruc).Union(DocumentosAnuladosPendientesGuia(fecha, ruc)).ToList


        Return lista
    End Function

    Function DocumentosAnuladosPendientesGuia(fecha As DateTime, ruc As String) As List(Of documentoventaAbarrotes)


        Dim myList As New List(Of documentoventaAbarrotes)
        Dim myObjecy As documentoventaAbarrotes

        Dim consulta = (From i In HeliosData.documentoGuia
                        Where i.fechaDoc.Value.Year = fecha.Year And
                             i.fechaDoc.Value.Month = fecha.Month And
                            i.EnvioSunat = "PE" And
                            i.idEmpresa = ruc And i.estado = "AN").ToList

        For Each i In consulta

            myObjecy = New documentoventaAbarrotes


            myObjecy.idDocumento = i.idDocumento
            myObjecy.fechaDoc = i.fechaDoc
            myObjecy.tipoDocumento = i.tipoDoc
            myObjecy.serieVenta = i.serie
            myObjecy.numeroVenta = i.numeroDoc
            myObjecy.ImporteNacional = 0
            myObjecy.EnvioSunat = i.EnvioSunat
            myList.Add(myObjecy)

        Next

        Return myList
    End Function

    Function DocumentosAnuladosPendientes(fecha As DateTime, ruc As String) As List(Of documentoventaAbarrotes)


        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where i.fechaDoc.Value.Year = fecha.Year And
                             i.fechaDoc.Value.Month = fecha.Month And
                             i.tipoVenta = "VELC" And i.EnvioSunat = "PE" And
                            i.idEmpresa = ruc And i.estadoCobro = "ANU").ToList

        Return consulta
    End Function

    Public Function AlertaEnvioPSE(Empresa As String) As documentoventaAbarrotes

        Dim obj As documentoventaAbarrotes

        Dim noenv As New List(Of String)
        noenv.Add("VA") 'envio anulado y validado
        noenv.Add("PE")  'enviado anulado 
        noenv.Add("SI") 'enviado sin anular

        Dim list As New List(Of String)
        list.Add("VELC")
        list.Add("NTCE")

        Dim consulta = (From tip In HeliosData.entidad
                        Where tip.idEmpresa = Empresa
                        Select
                    tip.idEmpresa, tip.nombreCompleto,
                   CPEPEN = (CType((Aggregate t1 In
                    (From w In HeliosData.documentoventaAbarrotes
                     Where
                   list.Contains(w.tipoVenta) And Not noenv.Contains(w.EnvioSunat) And w.idEmpresa = tip.idEmpresa
                     Select New With {
                    w.idDocumento
                    }) Into Count(t1.idDocumento)), Integer?)),
                     ANUPEN = (CType((Aggregate t1 In
                    (From w In HeliosData.documentoventaAbarrotes
                     Where
                    list.Contains(w.tipoVenta) And w.EnvioSunat = "PE" And w.idEmpresa = tip.idEmpresa _
                    And w.estadoCobro = "ANU"
                     Select New With {
                    w.idDocumento
                    }) Into Count(t1.idDocumento)), Integer?)),
                            ANUPENGUIA = (CType((Aggregate t1 In
                    (From w In HeliosData.documentoGuia
                     Where
                     w.EnvioSunat = "PE" And w.idEmpresa = tip.idEmpresa _
                    And w.estado = "AN"
                     Select New With {
                    w.idDocumento
                    }) Into Count(t1.idDocumento)), Integer?)),
                            CPEPENGUIA = (CType((Aggregate t1 In
                    (From w In HeliosData.documentoGuia
                     Where
                    w.idEmpresa = tip.idEmpresa And Not noenv.Contains(w.EnvioSunat) _
                         And w.estado = "VG"
                     Select New With {
                    w.idDocumento
                    }) Into Count(t1.idDocumento)), Integer?))).Distinct().FirstOrDefault

        If Not IsNothing(consulta) Then
            obj = New documentoventaAbarrotes
            obj.CpePen = consulta.CPEPEN + consulta.CPEPENGUIA
            obj.AnuPen = consulta.ANUPEN + consulta.ANUPENGUIA

        Else
            obj = New documentoventaAbarrotes
            obj.CpePen = 0
            obj.AnuPen = 0

        End If



        Return obj

    End Function

    Public Function RankingVentas(opcion As String, be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim listaVenta As New List(Of String)
        listaVenta.Add(TIPO_VENTA.NOTA_DE_VENTA)
        listaVenta.Add(TIPO_VENTA.VENTA_GENERAL)
        listaVenta.Add(TIPO_VENTA.VENTA_AL_TICKET)
        listaVenta.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        listaVenta.Add(TIPO_VENTA.VENTA_ELECTRONICA)

        RankingVentas = New List(Of documentoventaAbarrotes)
        Select Case opcion
            Case "CLIENTES"
                Dim con = (From cli In HeliosData.entidad
                           Group Join venta In HeliosData.documentoventaAbarrotes On venta.idCliente Equals cli.idEntidad Into mov_join = Group
                           From mov In mov_join.DefaultIfEmpty()
                           Where
                               mov.idEmpresa = be.idEmpresa And
                               CLng(mov.idEstablecimiento) = be.idEstablecimiento And
                               listaVenta.Contains(mov.tipoVenta) And
                               mov.fechaPeriodo = be.fechaPeriodo And
                               mov.estadoCobro <> "ANU"
                           Group New With {mov, cli} By
                               cli.idEntidad,
                               cli.nombreCompleto,
                               cli.nrodoc,
                               cli.tipoDoc,
                               cli.tipoPersona
                               Into g = Group
                           Select
                               idEntidad,
                               nombreCompleto,
                               nrodoc,
                               tipoDoc,
                               tipoPersona,
                               totalVentaIncIva = CType(g.Sum(Function(p) p.mov.ImporteNacional), Decimal?)).ToList


                For Each i In con
                    RankingVentas.Add(New documentoventaAbarrotes With
                                      {
                                      .CustomEntidad = New entidad With
                                        {
                                        .idEntidad = i.idEntidad,
                                        .nombreCompleto = i.nombreCompleto,
                                        .nrodoc = i.nrodoc,
                                        .tipoDoc = i.tipoDoc,
                                        .tipoPersona = i.tipoPersona
                                        },
                                        .ImporteNacional = i.totalVentaIncIva.GetValueOrDefault
                                      })
                Next


            Case "PRODUCTOS"
                Dim ventaDOc As New documentoventaAbarrotes
                Dim ventaDEt As New List(Of documentoventaAbarrotesDet)

                Dim con = (From PROD In HeliosData.detalleitems
                           Group Join venta In HeliosData.documentoventaAbarrotesDet On venta.idItem Equals PROD.codigodetalle Into mov_join = Group
                           From mov In mov_join.DefaultIfEmpty()
                           Where
                               mov.documentoventaAbarrotes.idEmpresa = be.idEmpresa And
                               CLng(mov.documentoventaAbarrotes.idEstablecimiento) = be.idEstablecimiento And
                               listaVenta.Contains(mov.documentoventaAbarrotes.tipoVenta) And
                               mov.documentoventaAbarrotes.fechaPeriodo = be.fechaPeriodo And
                               mov.documentoventaAbarrotes.estadoCobro <> "ANU"
                           Group New With {mov, PROD} By
                               PROD.codigodetalle,
                               PROD.origenProducto,
                               PROD.descripcionItem,
                               PROD.unidad1,
                               PROD.tipoExistencia,
                               PROD.codigo
                               Into g = Group
                           Select
                               codigo,
                               codigodetalle,
                               origenProducto,
                               descripcionItem,
                               unidad1,
                               tipoExistencia,
                               totalCantidad = CType(g.Sum(Function(p) p.mov.monto1), Decimal?),
                               totalVentaIncIva = CType(g.Sum(Function(p) p.mov.importeMN), Decimal?)).ToList


                For Each i In con

                    ventaDEt.Add(New documentoventaAbarrotesDet With {.CustomProducto = New detalleitems With
                                            {
                                                .codigodetalle = i.codigodetalle,
                                                .codigo = i.codigo,
                                                .origenProducto = i.origenProducto,
                                                .descripcionItem = i.descripcionItem,
                                                .unidad1 = i.unidad1,
                                                .tipoExistencia = i.tipoExistencia
                                            },
                                            .monto1 = i.totalCantidad.GetValueOrDefault,
                                            .importeMN = i.totalVentaIncIva.GetValueOrDefault
                                            })


                    'RankingVentas.Add(New documentoventaAbarrotes With
                    '                  {
                    '                  .documentoventaAbarrotesDet = New List(Of documentoventaAbarrotesDet) From
                    '                    {
                    '                  New documentoventaAbarrotesDet With {.CustomProducto = New detalleitems With
                    '                        {
                    '                            .codigodetalle = i.codigodetalle,
                    '                            .descripcionItem = i.descripcionItem,
                    '                            .unidad1 = i.unidad1,
                    '                            .tipoExistencia = i.tipoExistencia
                    '                        },
                    '                        .importeMN = i.totalVentaIncIva.GetValueOrDefault
                    '                        }
                    '                    }
                    '                  })
                Next
                If ventaDOc IsNot Nothing Then
                    ventaDOc.documentoventaAbarrotesDet = ventaDEt
                    RankingVentas.Add(ventaDOc)
                End If

            Case "VENDEDOR"
                Dim con = (From cli In HeliosData.entidad
                           Group Join venta In HeliosData.documentoventaAbarrotes On venta.idCliente Equals cli.idEntidad Into mov_join = Group
                           From mov In mov_join.DefaultIfEmpty()
                           Where
                               mov.idEmpresa = be.idEmpresa And
                               CLng(mov.idEstablecimiento) = be.idEstablecimiento And
                               listaVenta.Contains(mov.tipoVenta) And
                               mov.fechaPeriodo = be.fechaPeriodo And
                               mov.estadoCobro <> "ANU"
                           Group New With {mov, cli} By
                               mov.usuarioActualizacion,
                               cli.idEntidad,
                               cli.nombreCompleto,
                               cli.nrodoc,
                               cli.tipoDoc,
                               cli.tipoPersona
                               Into g = Group
                           Select
                               Vendedor = usuarioActualizacion,
                               idEntidad,
                               nombreCompleto,
                               nrodoc,
                               tipoDoc,
                               tipoPersona,
                               totalVentaIncIva = CType(g.Sum(Function(p) p.mov.ImporteNacional), Decimal?)).ToList


                For Each i In con
                    RankingVentas.Add(New documentoventaAbarrotes With
                                      {
                                      .CustomEntidad = New entidad With
                                        {
                                        .idEntidad = i.idEntidad,
                                        .nombreCompleto = i.nombreCompleto,
                                        .nrodoc = i.nrodoc,
                                        .tipoDoc = i.tipoDoc,
                                        .tipoPersona = i.tipoPersona
                                        },
                                        .usuarioActualizacion = i.Vendedor,
                                        .ImporteNacional = i.totalVentaIncIva.GetValueOrDefault
                                      })
                Next
        End Select
    End Function


    Public Function NotasActivas(idDoc As Integer) As Integer
        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where i.idPadre = idDoc And i.tipoDocumento = "07" And i.estadoCobro <> "ANU").Count
        Return consulta
    End Function

    Public Function ConteoNotasVenta(idDoc As Integer) As Integer

        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where i.idPadre = idDoc And i.tipoDocumento = "07").Count


        Return consulta

    End Function

    Function BuscarNotasBoletasPeriodo(fecha As DateTime, tipoDoc As String, idEmpresa As String) As List(Of documentoventaAbarrotes)

        '  Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim list As New List(Of String)

        list.Add("VA") 'envio anulado y validado
        list.Add("PE")  'enviado anulado 
        list.Add("SI") 'enviado sin anular

        lista = New List(Of documentoventaAbarrotes)
        If tipoDoc = "07" Then

            lista = (From i In HeliosData.documentoventaAbarrotes
                     Join x In HeliosData.documentoventaAbarrotes On i.idPadre Equals x.idDocumento
                     Where i.fechaDoc.Value.Year = fecha.Year And i.fechaDoc.Value.Month = fecha.Month And
                                i.tipoDocumento = tipoDoc And i.tipoVenta = "NTCE" And Not i.EnvioSunat = "SI" And x.tipoDocumento = "03" And x.tipoVenta = "VELC" And i.idEmpresa = idEmpresa And
                                list.Contains(x.EnvioSunat)
                     Select i).ToList
            '    Return lista

        End If

        Return lista
    End Function


    Public Function VoucherCompromiso(tipoDoc As String, tipoventa As String)

        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where i.tipoDocumento = tipoDoc And i.tipoVenta = tipoventa).Count

        Return consulta + 1

    End Function

    Public Function GrabarReclamacionCompromiso(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim docuemntoAnticipoBL As New documentoAnticipoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Try
            Using ts As New TransactionScope()
                Dim codigoAnticipo = objDocumento.documentoventaAbarrotes.idPadre

                Dim numeracion = VoucherCompromiso(objDocumento.documentoventaAbarrotes.tipoDocumento, objDocumento.documentoventaAbarrotes.tipoVenta)

                objDocumento.nroDoc = "COMP" & "-" & numeracion
                objDocumento.documentoventaAbarrotes.serie = "COMP"
                objDocumento.documentoventaAbarrotes.serieVenta = "COMP"
                objDocumento.documentoventaAbarrotes.numeroVenta = numeracion
                objDocumento.documentoventaAbarrotes.numeroDocNormal = numeracion

                GrabarVentaDocumentoGeneralSPK(objDocumento)

                Dim anticipoDoc = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = codigoAnticipo).Single


                Dim docEstado = docuemntoAnticipoBL.ObtenerSaldoReclamacion(codigoAnticipo)
                If docEstado.Saldo <= 0 Then
                    anticipoDoc.estado = General.Anticipo.Estado.Compensado
                Else
                    If docEstado.MontoPagadoSoles > 0 Then
                        anticipoDoc.estado = General.Anticipo.Estado.NotaCreditoParcial
                    Else
                        anticipoDoc.estado = General.Anticipo.Estado.NotaCredito
                    End If
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetReclamacionesXClientes(parametro As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim con = (From c In HeliosData.documentoventaAbarrotes
                   Join cli In HeliosData.entidad
                           On cli.idEntidad Equals c.idCliente
                   Where
                  (New String() {"EXD"}).Contains(c.tipoVenta) And
                   c.idEmpresa = parametro.idEmpresa And c.idEstablecimiento = parametro.idEstablecimiento _
                       And c.idCliente = parametro.idCliente _
                       And c.fechaDoc.Value.Year = parametro.fechaDoc.Value.Year _
                       And c.fechaDoc.Value.Month = parametro.fechaDoc.Value.Month _
                       And c.moneda = parametro.moneda And c.tipoDocumento = "9910" _
                       And c.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO _
                       And Not c.estado = 4
                   Select
                  c.idDocumento,
                       c.idCliente,
                       cli.nombreCompleto,
                       cli.nrodoc,
                  c.tipoVenta,
                  c.fechaPeriodo,
                  c.fechaDoc,
                  c.serieVenta,
                  c.numeroVenta,
                  c.tipoDocumento,
                  c.moneda,
                  c.ImporteNacional,
                  c.tipoCambio,
                  c.ImporteExtranjero,
                  c.estadoCobro,
                       MontoUsado = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"9911"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "VRC"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       MontoUsadoME = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"9911"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "VRC"
                                           Select New With {
                                               Documentocompra.ImporteExtranjero
                                           }) Into Sum(t1.ImporteExtranjero)), Decimal?))).ToList

        '  PagosMN = (CType((Aggregate t1 In
        '                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
        '                     Where
        '                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
        '                     Select New With {
        '                         DocumentoCajaDetalle.montoSoles
        '                     }) Into Sum(t1.montoSoles)), Decimal?)),
        ' PagosME = (CType((Aggregate t1 In
        '                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
        '                    Where
        '                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
        '                    Select New With {
        '                        DocumentoCajaDetalle.montoUsd
        '                    }) Into Sum(t1.montoUsd)), Decimal?)),
        'PagoNotaCredito = (CType((Aggregate t1 In
        '                          (From Documentocompra In HeliosData.documentoventaAbarrotes
        '                           Where
        '                           (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
        '                           Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
        '                           Select New With {
        '                               Documentocompra.ImporteNacional
        '                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
        '       Exedente = (CType((Aggregate t1 In
        '                          (From Documentocompra In HeliosData.documentoventaAbarrotes
        '                           Where
        '                           (New String() {"9910", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
        '                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
        '                           Select New With {
        '                               Documentocompra.ImporteNacional
        '                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
        '       PagoNotaDebito = (CType((Aggregate t1 In
        '                                (From Documentocompra In HeliosData.documentoventaAbarrotes
        '                                 Where
        '                                 (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
        '                                 Documentocompra.idPadre = c.idDocumento
        '                                 Select New With {
        '                                     Documentocompra.ImporteNacional
        '                                 }) Into Sum(t1.ImporteNacional)), Decimal?)),
        '             Conteo = ((Aggregate t1 In
        '                        (From cro In HeliosData.Cronograma
        '                         Where
        '                         cro.idDocumentoRef = c.idDocumento And
        '                         cro.estado = "PN"
        '                         Select New With {
        '                                cro
        '                         }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.idCliente = i.idCliente
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serieVenta
            doccompra.numeroDoc = i.numeroVenta
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoSumaMN = i.MontoUsado.GetValueOrDefault 'i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.MontoUsadoME.GetValueOrDefault 'i.PagosME.GetValueOrDefault
            'doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            ' doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            'doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Function GetCuentasPagarReclamacionesClientes(parametro As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim con = (From c In HeliosData.documentoventaAbarrotes
                   Join cli In HeliosData.entidad
                           On cli.idEntidad Equals c.idCliente
                   Where
                  (New String() {"EXD"}).Contains(c.tipoVenta) And
                   c.idEmpresa = parametro.idEmpresa And c.idEstablecimiento = parametro.idEstablecimiento _
                       And c.fechaDoc.Value.Year = parametro.fechaDoc.Value.Year _
                       And c.fechaDoc.Value.Month = parametro.fechaDoc.Value.Month _
                       And c.moneda = parametro.moneda And c.tipoDocumento = "9910" _
                       And c.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO _
                       And Not c.estado = 4
                   Select
                  c.idDocumento,
                       c.idCliente,
                       cli.nombreCompleto,
                       cli.nrodoc,
                  c.tipoVenta,
                  c.fechaPeriodo,
                  c.fechaDoc,
                  c.serieVenta,
                  c.numeroVenta,
                  c.tipoDocumento,
                  c.moneda,
                  c.ImporteNacional,
                  c.tipoCambio,
                  c.ImporteExtranjero,
                  c.estadoCobro,
                       MontoUsado = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"9911"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "VRC"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       MontoUsadoME = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"9911"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "VRC"
                                           Select New With {
                                               Documentocompra.ImporteExtranjero
                                           }) Into Sum(t1.ImporteExtranjero)), Decimal?))).ToList

        '  PagosMN = (CType((Aggregate t1 In
        '                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
        '                     Where
        '                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
        '                     Select New With {
        '                         DocumentoCajaDetalle.montoSoles
        '                     }) Into Sum(t1.montoSoles)), Decimal?)),
        ' PagosME = (CType((Aggregate t1 In
        '                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
        '                    Where
        '                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
        '                    Select New With {
        '                        DocumentoCajaDetalle.montoUsd
        '                    }) Into Sum(t1.montoUsd)), Decimal?)),
        'PagoNotaCredito = (CType((Aggregate t1 In
        '                          (From Documentocompra In HeliosData.documentoventaAbarrotes
        '                           Where
        '                           (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
        '                           Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
        '                           Select New With {
        '                               Documentocompra.ImporteNacional
        '                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
        '       Exedente = (CType((Aggregate t1 In
        '                          (From Documentocompra In HeliosData.documentoventaAbarrotes
        '                           Where
        '                           (New String() {"9910", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
        '                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
        '                           Select New With {
        '                               Documentocompra.ImporteNacional
        '                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
        '       PagoNotaDebito = (CType((Aggregate t1 In
        '                                (From Documentocompra In HeliosData.documentoventaAbarrotes
        '                                 Where
        '                                 (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
        '                                 Documentocompra.idPadre = c.idDocumento
        '                                 Select New With {
        '                                     Documentocompra.ImporteNacional
        '                                 }) Into Sum(t1.ImporteNacional)), Decimal?)),
        '             Conteo = ((Aggregate t1 In
        '                        (From cro In HeliosData.Cronograma
        '                         Where
        '                         cro.idDocumentoRef = c.idDocumento And
        '                         cro.estado = "PN"
        '                         Select New With {
        '                                cro
        '                         }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.idCliente = i.idCliente
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serieVenta
            doccompra.numeroDoc = i.numeroVenta
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoSumaMN = i.MontoUsado.GetValueOrDefault 'i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.MontoUsadoME.GetValueOrDefault 'i.PagosME.GetValueOrDefault
            'doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            ' doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            'doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Sub CambiarEstadoRecCompra(be As documentocompra)
        Using ts As New TransactionScope
            Dim nota = HeliosData.documentocompra.Where(Function(o) o.idDocumento = be.idDocumento).Single
            nota.estadoPago = be.estadoPago

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function DocumentoAfectadoNC(be As documentoventaAbarrotes) As documentoventaAbarrotes
        Try

            Dim documento As New documentoventaAbarrotes
            Dim cabezera As documentoventaAbarrotes

            Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                            Join e In HeliosData.entidad On i.idCliente Equals e.idEntidad
                            Where i.idDocumento = be.idDocumento).SingleOrDefault


            cabezera = New documentoventaAbarrotes
            cabezera.idDocumento = consulta.i.idDocumento
            cabezera.tipoCambio = consulta.i.tipoCambio
            cabezera.moneda = consulta.i.moneda
            cabezera.tasaIgv = consulta.i.tasaIgv
            cabezera.igv01 = consulta.i.igv01
            cabezera.ImporteNacional = consulta.i.ImporteNacional
            cabezera.serieVenta = consulta.i.serieVenta
            cabezera.numeroVenta = consulta.i.numeroVenta
            cabezera.idCliente = consulta.i.idCliente
            cabezera.nombreCliente = consulta.e.nombreCompleto
            cabezera.rucCliente = consulta.e.nrodoc
            cabezera.tipoDocumento = consulta.i.tipoDocumento
            cabezera.icbper = consulta.i.icbper.GetValueOrDefault
            cabezera.icbperus = consulta.i.icbperus.GetValueOrDefault

            documento = cabezera
            Dim detalle = GetDetalleNotaAfectada(be)
            documento.documentoventaAbarrotesDet = detalle


            Return documento

        Catch ex As Exception
            Throw ex
        End Try


    End Function



    Public Function GetDetalleNotaAfectada(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotesDet)
        Dim doccompra As New documentoventaAbarrotesDet
        Dim lista As New List(Of documentoventaAbarrotesDet)

        Dim listaNC As New List(Of String)
        listaNC.Add("07")
        listaNC.Add("87")

        Dim detalle = (From p In HeliosData.documentoventaAbarrotesDet
                       Group Join c In HeliosData.documentoCajaDetalle
                      On p.idDocumento Equals c.documentoAfectado _
                      And p.secuencia Equals c.documentoAfectadodetalle
                      Into ords = Group
                       From c In ords.DefaultIfEmpty
                       Where p.idDocumento = be.idDocumento
                       Group c By
                      p.idDocumento, p.secuencia, p.destino, p.tipoExistencia, p.equivalencia_id, p.catalogo_id,
                      p.idItem, p.nombreItem, p.importeMN, p.importeME,
                     p.monto1, p.idAlmacenOrigen, p.estadoPago, p.montokardex, p.montokardexUS, p.montoIgv, p.montoIgvUS, p.unidad1, p.importeMNK, p.importeMEK, p.precioUnitario, p.precioUnitarioUS, p.montoIcbper, p.tasaIcbper, p.montoIcbperUS
                      Into g = Group
                       Select New With {.iditem = idItem,
                           .equivalencia_id = equivalencia_id,
                           .contenidoneto = (From i In HeliosData.detalleitem_equivalencias
                                             Where i.equivalencia_id = equivalencia_id Select i.contenido_neto).FirstOrDefault,
                           .catalogo = catalogo_id,
                                       .iddocumento = idDocumento,
                                       .Descripcion = nombreItem,
                                       .ImporteDeudaSoles = importeMN,
                                       .ImporteDeudaUSD = importeME,
                                       g, .TotalImportePagadoSoles = g.Sum(Function(c) c.montoSoles),
                                       .TotalImportePagadoDolares = g.Sum(Function(c) c.montoUsd),
                                       .secuencia = secuencia,
                                       .destino = destino,
                                       .tipoex = tipoExistencia,
                                       .cantidad = monto1,
                                       .almacenRef = idAlmacenOrigen,
                                       .estadoPago = estadoPago,
                                       .montoKardex = montokardex,
                                       .montoKardexUS = montokardexUS,
                                       .montoIgv = montoIgv,
                                       .montoIgvUS = montoIgvUS,
                                       .pmMN = importeMNK,
                                       .pmME = importeMEK,
                                        .preciounitario = precioUnitario,
                                        .preciounitariome = precioUnitarioUS,
                                        .unidad1 = unidad1,
                                     .montoicbper = montoIcbper,
                                     .montoicbperus = montoIcbperUS,
                           .tasaicbper = tasaIcbper
                                   }
                               ).ToList


        For Each i In detalle
            doccompra = New documentoventaAbarrotesDet

            'doccompra = DetalleAfectacionporItem()


            doccompra.tasaIcbper = i.tasaicbper.GetValueOrDefault

            doccompra.idDocumento = i.iddocumento
            doccompra.equivalencia_id = i.equivalencia_id
            doccompra.catalogo_id = i.catalogo
            doccompra.secuencia = i.secuencia
            doccompra.destino = i.destino
            doccompra.codigoLote = 0 'i.codigoLote
            doccompra.tipoExistencia = i.tipoex
            doccompra.idAlmacenOrigen = 0 ' i.almacenRef
            doccompra.idItem = i.iditem
            doccompra.nombreItem = i.Descripcion
            doccompra.unidad1 = i.unidad1
            doccompra.estadoPago = i.estadoPago
            'doccompra.estadoEntrega = i.c.estadoEntrega

            doccompra.precioUnitario = i.preciounitario
            doccompra.precioUnitarioUS = i.preciounitariome


            Dim afectacion = MontosAfectadosItems(i.secuencia, i.iddocumento)

            doccompra.montoIcbper = i.montoicbper.GetValueOrDefault - afectacion.montoIcbper
            doccompra.montoIcbperUS = i.montoicbperus.GetValueOrDefault - afectacion.montoIcbperUS


            'doccompra.canDisponible = i.cantidad
            'doccompra.cantidadCredito = afectacion.cantNC


            doccompra.cantidadInventario = i.preciounitario
            If i.tipoex = "GS" Then
                doccompra.monto1 = i.cantidad - afectacion.cantNC
            Else
                doccompra.monto1 = (i.cantidad * i.contenidoneto) - afectacion.cantNC
            End If
            doccompra.montoIgv = i.montoIgv - afectacion.igvNC
            doccompra.montoIgvUS = i.montoIgvUS - afectacion.igvNCME

            doccompra.montokardex = i.montoKardex - afectacion.biNC
            doccompra.montokardexUS = i.montoKardexUS - afectacion.biNCME

            doccompra.importeMN = i.ImporteDeudaSoles - afectacion.montoNC ' - afectacion.montoCompesacion  '- i.PagosMN.GetValueOrDefault - i.NotaCreMN.GetValueOrDefault - i.MontoCompensado.GetValueOrDefault
            doccompra.importeME = i.ImporteDeudaUSD - afectacion.montoNCME ' - afectacion.montoCompesacionme

            doccompra.PagoSumaMN = i.TotalImportePagadoSoles.GetValueOrDefault - afectacion.montoDevuelto + afectacion.montoCompesacion
            doccompra.PagoSumaME = i.TotalImportePagadoDolares.GetValueOrDefault - afectacion.montoDevueltome + afectacion.montoCompesacionme


            lista.Add(doccompra)
        Next


        Return lista
    End Function

    'Public Function GetDetalleNotaAfectada(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotesDet)
    '    Dim doccompra As New documentoventaAbarrotesDet
    '    Dim lista As New List(Of documentoventaAbarrotesDet)

    '    Dim listaNC As New List(Of String)
    '    listaNC.Add("07")
    '    listaNC.Add("87")

    '    Dim detalle = (From p In HeliosData.documentoventaAbarrotesDet
    '                   Group Join c In HeliosData.documentoCajaDetalle
    '                  On p.idDocumento Equals c.documentoAfectado _
    '                  And p.secuencia Equals c.documentoAfectadodetalle
    '                  Into ords = Group
    '                   From c In ords.DefaultIfEmpty
    '                   Where p.idDocumento = be.idDocumento
    '                   Group c By
    '                  p.idDocumento, p.secuencia, p.destino, p.tipoExistencia, p.equivalencia_id, p.catalogo_id,
    '                  p.idItem, p.nombreItem, p.importeMN, p.importeME,
    '                 p.monto1, p.idAlmacenOrigen, p.estadoPago, p.montokardex, p.montokardexUS, p.montoIgv, p.montoIgvUS, p.unidad1, p.importeMNK, p.importeMEK, p.precioUnitario, p.precioUnitarioUS
    '                  Into g = Group
    '                   Select New With {.iditem = idItem,
    '                       .equivalencia_id = equivalencia_id,
    '                       .catalogo = catalogo_id,
    '                                   .iddocumento = idDocumento,
    '                                   .Descripcion = nombreItem,
    '                                   .ImporteDeudaSoles = importeMN,
    '                                   .ImporteDeudaUSD = importeME,
    '                                   g, .TotalImportePagadoSoles = g.Sum(Function(c) c.montoSoles),
    '                                   .TotalImportePagadoDolares = g.Sum(Function(c) c.montoUsd),
    '                                   .secuencia = secuencia,
    '                                   .destino = destino,
    '                                   .tipoex = tipoExistencia,
    '                                   .cantidad = monto1,
    '                                   .almacenRef = idAlmacenOrigen,
    '                                   .estadoPago = estadoPago,
    '                                   .montoKardex = montokardex,
    '                                   .montoKardexUS = montokardexUS,
    '                                   .montoIgv = montoIgv,
    '                                   .montoIgvUS = montoIgvUS,
    '                                   .pmMN = importeMNK,
    '                                   .pmME = importeMEK,
    '                                    .preciounitario = precioUnitario,
    '                                    .preciounitariome = precioUnitarioUS,
    '                                    .unidad1 = unidad1
    '                               }
    '                           ).ToList


    '    For Each i In detalle
    '        doccompra = New documentoventaAbarrotesDet

    '        'doccompra = DetalleAfectacionporItem()

    '        doccompra.idDocumento = i.iddocumento
    '        doccompra.equivalencia_id = i.equivalencia_id
    '        doccompra.catalogo_id = i.catalogo
    '        doccompra.secuencia = i.secuencia
    '        doccompra.destino = i.destino
    '        doccompra.codigoLote = 0 'i.codigoLote
    '        doccompra.tipoExistencia = i.tipoex
    '        doccompra.idAlmacenOrigen = 0 ' i.almacenRef
    '        doccompra.idItem = i.iditem
    '        doccompra.nombreItem = i.Descripcion
    '        doccompra.unidad1 = i.unidad1
    '        doccompra.estadoPago = i.estadoPago
    '        'doccompra.estadoEntrega = i.c.estadoEntrega

    '        doccompra.precioUnitario = i.preciounitario
    '        doccompra.precioUnitarioUS = i.preciounitariome


    '        Dim afectacion = MontosAfectadosItems(i.secuencia, i.iddocumento)

    '        doccompra.canDisponible = i.cantidad
    '        doccompra.cantidadCredito = afectacion.cantNC

    '        doccompra.monto1 = i.cantidad - afectacion.cantNC
    '        doccompra.montoIgv = i.montoIgv - afectacion.igvNC
    '        doccompra.montoIgvUS = i.montoIgvUS - afectacion.igvNCME

    '        doccompra.montokardex = i.montoKardex - afectacion.biNC
    '        doccompra.montokardexUS = i.montoKardexUS - afectacion.biNCME

    '        doccompra.importeMN = i.ImporteDeudaSoles - afectacion.montoNC ' - afectacion.montoCompesacion  '- i.PagosMN.GetValueOrDefault - i.NotaCreMN.GetValueOrDefault - i.MontoCompensado.GetValueOrDefault
    '        doccompra.importeME = i.ImporteDeudaUSD - afectacion.montoNCME ' - afectacion.montoCompesacionme

    '        doccompra.PagoSumaMN = i.TotalImportePagadoSoles.GetValueOrDefault - afectacion.montoDevuelto + afectacion.montoCompesacion
    '        doccompra.PagoSumaME = i.TotalImportePagadoDolares.GetValueOrDefault - afectacion.montoDevueltome + afectacion.montoCompesacionme


    '        lista.Add(doccompra)
    '    Next


    '    Return lista
    'End Function
    'Public Function GetDetalleNotaAfectada(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotesDet)
    '    Dim doccompra As New documentoventaAbarrotesDet
    '    Dim lista As New List(Of documentoventaAbarrotesDet)

    '    Dim listaNC As New List(Of String)
    '    listaNC.Add("07")
    '    listaNC.Add("87")

    '    Dim detalle = (From p In HeliosData.documentoventaAbarrotesDet
    '                   Group Join c In HeliosData.documentoCajaDetalle
    '                  On p.idDocumento Equals c.documentoAfectado _
    '                  And p.secuencia Equals c.documentoAfectadodetalle
    '                  Into ords = Group
    '                   From c In ords.DefaultIfEmpty
    '                   Where p.idDocumento = be.idDocumento
    '                   Group c By
    '                  p.idDocumento, p.secuencia, p.destino, p.tipoExistencia, p.equivalencia_id, p.catalogo_id,
    '                  p.idItem, p.nombreItem, p.importeMN, p.importeME,
    '                 p.monto1, p.idAlmacenOrigen, p.estadoPago, p.montokardex, p.montokardexUS, p.montoIgv, p.montoIgvUS, p.unidad1, p.importeMNK, p.importeMEK, p.precioUnitario, p.precioUnitarioUS
    '                  Into g = Group
    '                   Select New With {.iditem = idItem,
    '                       .equivalencia_id = equivalencia_id,
    '                       .catalogo = catalogo_id,
    '                                   .iddocumento = idDocumento,
    '                                   .Descripcion = nombreItem,
    '                                   .ImporteDeudaSoles = importeMN,
    '                                   .ImporteDeudaUSD = importeME,
    '                                   g, .TotalImportePagadoSoles = g.Sum(Function(c) c.montoSoles),
    '                                   .TotalImportePagadoDolares = g.Sum(Function(c) c.montoUsd),
    '                                   .secuencia = secuencia,
    '                                   .destino = destino,
    '                                   .tipoex = tipoExistencia,
    '                                   .cantidad = monto1,
    '                                   .almacenRef = idAlmacenOrigen,
    '                                   .estadoPago = estadoPago,
    '                                   .montoKardex = montokardex,
    '                                   .montoKardexUS = montokardexUS,
    '                                   .montoIgv = montoIgv,
    '                                   .montoIgvUS = montoIgvUS,
    '                                   .pmMN = importeMNK,
    '                                   .pmME = importeMEK,
    '                                    .preciounitario = precioUnitario,
    '                                    .preciounitariome = precioUnitarioUS,
    '                                    .unidad1 = unidad1
    '                               }
    '                           ).ToList


    '    For Each i In detalle
    '        doccompra = New documentoventaAbarrotesDet

    '        'doccompra = DetalleAfectacionporItem()

    '        doccompra.idDocumento = i.iddocumento
    '        doccompra.equivalencia_id = i.equivalencia_id
    '        doccompra.catalogo_id = i.catalogo
    '        doccompra.secuencia = i.secuencia
    '        doccompra.destino = i.destino
    '        doccompra.codigoLote = 0 'i.codigoLote
    '        doccompra.tipoExistencia = i.tipoex
    '        doccompra.idAlmacenOrigen = 0 ' i.almacenRef
    '        doccompra.idItem = i.iditem
    '        doccompra.nombreItem = i.Descripcion
    '        doccompra.unidad1 = i.unidad1
    '        doccompra.estadoPago = i.estadoPago
    '        'doccompra.estadoEntrega = i.c.estadoEntrega

    '        doccompra.precioUnitario = i.preciounitario
    '        doccompra.precioUnitarioUS = i.preciounitariome


    '        Dim afectacion = MontosAfectadosItems(i.secuencia, i.iddocumento)
    '        doccompra.monto1 = i.cantidad - afectacion.cantNC
    '        doccompra.montoIgv = i.montoIgv - afectacion.igvNC
    '        doccompra.montoIgvUS = i.montoIgvUS - afectacion.igvNCME

    '        doccompra.montokardex = i.montoKardex - afectacion.biNC
    '        doccompra.montokardexUS = i.montoKardexUS - afectacion.biNCME

    '        doccompra.importeMN = i.ImporteDeudaSoles - afectacion.montoNC ' - afectacion.montoCompesacion  '- i.PagosMN.GetValueOrDefault - i.NotaCreMN.GetValueOrDefault - i.MontoCompensado.GetValueOrDefault
    '        doccompra.importeME = i.ImporteDeudaUSD - afectacion.montoNCME ' - afectacion.montoCompesacionme

    '        doccompra.PagoSumaMN = i.TotalImportePagadoSoles.GetValueOrDefault - afectacion.montoDevuelto + afectacion.montoCompesacion
    '        doccompra.PagoSumaME = i.TotalImportePagadoDolares.GetValueOrDefault - afectacion.montoDevueltome + afectacion.montoCompesacionme


    '        lista.Add(doccompra)
    '    Next


    '    Return lista
    'End Function

    Public Function MontosAfectadosItems(secuencia As Integer, idPadre As Integer) As documentoventaAbarrotesDet

        Dim objeto As documentoventaAbarrotesDet

        Dim lista As New List(Of String)
        lista.Add("07")
        'lista.Add("87")

        Dim notasCredito = Aggregate p In HeliosData.documentoventaAbarrotesDet
                      Join compra In HeliosData.documentoventaAbarrotes
                      On p.idDocumento Equals compra.idDocumento
                                 Where p.idPadreDTVenta = secuencia And Not compra.tipoVenta = "EXD" _
                                 And compra.tipoVenta = "NTCE" And Not compra.estadoCobro = "ANU" _
                                 And lista.Contains(compra.tipoDocumento)
                                 Into monto = Sum(p.importeMN),
                                      montous = Sum(p.importeME),
                                      cantidad = Sum(p.monto1),
                                      kard = Sum(p.montokardex),
                                      kardme = Sum(p.montokardexUS),
                                      igv = Sum(p.montoIgv),
                                      igvme = Sum(p.montoIgvUS),
                               icbper = Sum(p.montoIcbper),
                               icbperus = Sum(p.montoIcbperUS)

        Dim PagoDevuelto = Aggregate p In HeliosData.documentoventaAbarrotesDet
                      Join compra In HeliosData.documentoventaAbarrotes
                      On p.idDocumento Equals compra.idDocumento
                                 Where p.idPadreDTVenta = secuencia _
                                 And compra.tipoDocumento = "9910" And compra.tipoVenta = "EXD"
                                 Into comp = Sum(p.importeMN),
                                 compme = Sum(p.importeME)


        Dim Compensacion = Aggregate p In HeliosData.documentoAnticipoConciliacion
                                 Where p.idDetalle = secuencia And p.idDocumentoPadre = idPadre
                                 Into comp = Sum(p.importe),
                                 compme = Sum(p.importe)

        objeto = New documentoventaAbarrotesDet

        objeto.montoNC = notasCredito.monto.GetValueOrDefault
        objeto.montoNCME = notasCredito.montous.GetValueOrDefault
        objeto.cantNC = notasCredito.cantidad.GetValueOrDefault
        objeto.igvNC = notasCredito.igv.GetValueOrDefault
        objeto.igvNCME = notasCredito.igvme.GetValueOrDefault
        objeto.biNC = notasCredito.kard.GetValueOrDefault
        objeto.biNCME = notasCredito.kardme.GetValueOrDefault

        objeto.montoIcbper = notasCredito.icbper.GetValueOrDefault
        objeto.montoIcbperUS = notasCredito.icbperus.GetValueOrDefault

        objeto.montoDevuelto = PagoDevuelto.comp.GetValueOrDefault
        objeto.montoDevueltome = PagoDevuelto.compme.GetValueOrDefault

        objeto.montoCompesacion = Compensacion.comp.GetValueOrDefault
        objeto.montoCompesacionme = Compensacion.compme.GetValueOrDefault


        Return objeto


    End Function

    Public Sub CambiarEstadoNotaCreditoAnticipoCompra(be As documentocompra)
        Using ts As New TransactionScope
            Dim nota = HeliosData.documentocompra.Where(Function(o) o.idDocumento = be.idDocumento).Single
            nota.estadoPago = be.estadoPago

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function HistorialDeCobranza(iNtPadre As Integer) As List(Of documentoventaAbarrotes)

        'Dim listaCobros = New List(Of documentoventaAbarrotes)


        Dim listaCobros = (Me.NotasDocumento(iNtPadre)).Concat(Me.CobrosxDocumento(iNtPadre)).Concat(Me.Compensaciones(iNtPadre)).ToList()


        Return listaCobros
    End Function

    Public Function CobrosxDocumento(iNtPadre As Integer) As List(Of documentoventaAbarrotes)
        Dim lista As New List(Of documentoventaAbarrotes)
        Dim a As New documentoventaAbarrotes

        Dim cc = (From c In HeliosData.documentoCaja
                  Join det In HeliosData.documentoCajaDetalle
                      On c.idDocumento Equals det.idDocumento
                  Join des In HeliosData.tabladetalle On des.codigoDetalle Equals c.tipoDocPago
                  Where det.documentoAfectado = iNtPadre And des.idtabla = 10
                  Group det By
                      c.idDocumento,
                      c.idEmpresa,
                      c.idEstablecimiento,
                      c.codigoLibro,
                      c.tipoMovimiento,
                      c.codigoProveedor,
                      c.idPersonal,
                      c.tipoPersona,
                      c.fechaProceso,
                      c.periodo,
                      c.fechaCobro,
                      c.tipoDocPago,
                      c.formapago,
                      c.numeroDoc,
                      c.moneda,
                      c.entidadFinanciera,
                      c.entidadFinancieraDestino,
                      c.tipoOperacion,
                      c.numeroOperacion,
                       c.montoSoles,
                      c.montoUsd,
                      des.descripcion
                      Into g = Group
                  Select New With {
                      .idDocumento = idDocumento,
                      .idEmpresa = idEmpresa,
                      .idEstablecimiento = idEstablecimiento,
                      .codigoLibro = codigoLibro,
                      .tipoMovimiento = tipoMovimiento,
                      .codigoProveedor = codigoProveedor,
                      .idPersonal = idPersonal,
                      .tipoPersona = tipoPersona,
                      .fechaProceso = fechaProceso,
                      .periodo = periodo,
                      .fechaCobro = fechaCobro,
                      .tipoDocPago = tipoDocPago,
                      .formapago = formapago,
                      .numeroDoc = numeroDoc,
                      .moneda = moneda,
                      .entidadFinanciera = entidadFinanciera,
                      .entidadFinancieraDestino = entidadFinancieraDestino,
                      .tipoOperacion = tipoOperacion,
                      .numeroOperacion = numeroOperacion,
                      .terminos = descripcion,
                      .modulo = (From x In HeliosData.tabladetalle
                                 Where x.codigoDetalle = tipoOperacion And x.idtabla = 12 Select descrip = x.descripcion).FirstOrDefault,
                      g, .importeMN = g.Sum(Function(c) c.montoSoles),
                      .importeME = g.Sum(Function(c) c.montoUsd)
                      }
                      ).ToList

        For Each i In cc
            a = New documentoventaAbarrotes
            a.idDocumento = i.idDocumento
            a.tipoDocumento = i.tipoDocPago
            a.tipoOperacion = i.tipoOperacion
            a.numeroDocNormal = i.numeroDoc
            a.ImporteNacional = i.importeMN
            a.ImporteExtranjero = i.importeME
            a.terminos = i.terminos
            a.fechaDoc = i.fechaProceso
            a.tipoVenta = i.tipoMovimiento
            a.modulo = i.modulo

            lista.Add(a)
        Next
        Return lista
    End Function

    Public Function CobrosxDocumentoCuota(iNtPadre As Integer, idCuota As Integer) As List(Of documentoventaAbarrotes)
        Dim lista As New List(Of documentoventaAbarrotes)
        Dim a As New documentoventaAbarrotes

        Dim cc = (From c In HeliosData.documentoCaja
                  Join det In HeliosData.documentoCajaDetalle
                      On c.idDocumento Equals det.idDocumento
                  Join des In HeliosData.tabladetalle On des.codigoDetalle Equals c.tipoDocPago
                  Where det.documentoAfectado = iNtPadre And des.idtabla = 10 And c.idcosto = idCuota
                  Group det By
                      c.idDocumento,
                      c.idEmpresa,
                      c.idEstablecimiento,
                      c.codigoLibro,
                      c.tipoMovimiento,
                      c.codigoProveedor,
                      c.idPersonal,
                      c.tipoPersona,
                      c.fechaProceso,
                      c.periodo,
                      c.fechaCobro,
                      c.tipoDocPago,
                      c.formapago,
                      c.numeroDoc,
                      c.moneda,
                      c.entidadFinanciera,
                      c.entidadFinancieraDestino,
                      c.tipoOperacion,
                      c.numeroOperacion,
                       c.montoSoles,
                      c.montoUsd,
                      des.descripcion
                      Into g = Group
                  Select New With {
                      .idDocumento = idDocumento,
                      .idEmpresa = idEmpresa,
                      .idEstablecimiento = idEstablecimiento,
                      .codigoLibro = codigoLibro,
                      .tipoMovimiento = tipoMovimiento,
                      .codigoProveedor = codigoProveedor,
                      .idPersonal = idPersonal,
                      .tipoPersona = tipoPersona,
                      .fechaProceso = fechaProceso,
                      .periodo = periodo,
                      .fechaCobro = fechaCobro,
                      .tipoDocPago = tipoDocPago,
                      .formapago = formapago,
                      .numeroDoc = numeroDoc,
                      .moneda = moneda,
                      .entidadFinanciera = entidadFinanciera,
                      .entidadFinancieraDestino = entidadFinancieraDestino,
                      .tipoOperacion = tipoOperacion,
                      .numeroOperacion = numeroOperacion,
                      .terminos = descripcion,
                      .modulo = (From x In HeliosData.tabladetalle
                                 Where x.codigoDetalle = tipoOperacion And x.idtabla = 12 Select descrip = x.descripcion).FirstOrDefault,
                      g, .importeMN = g.Sum(Function(c) c.montoSoles),
                      .importeME = g.Sum(Function(c) c.montoUsd)
                      }
                      ).ToList

        For Each i In cc
            a = New documentoventaAbarrotes
            a.idDocumento = i.idDocumento
            a.tipoDocumento = i.tipoDocPago
            a.tipoOperacion = i.tipoOperacion
            a.numeroDocNormal = i.numeroDoc
            a.ImporteNacional = i.importeMN
            a.ImporteExtranjero = i.importeME
            a.terminos = i.terminos
            a.fechaDoc = i.fechaProceso
            a.tipoVenta = i.tipoMovimiento
            a.modulo = i.modulo

            lista.Add(a)
        Next
        Return lista
    End Function

    Public Function Compensaciones(iNtPadre As Integer) As List(Of documentoventaAbarrotes)

        Dim lista As New List(Of documentoventaAbarrotes)
        Dim a As New documentoventaAbarrotes

        Dim cc = (From i In HeliosData.documentoAnticipoConciliacion
                  Join h In HeliosData.tabladetalle
                  On h.codigoDetalle Equals i.tipoOperacion
                  Where i.idDocumentoPadre = iNtPadre And h.idtabla = 12).ToList

        For Each i In cc
            a = New documentoventaAbarrotes
            a.idDocumento = i.i.idDocumento
            a.tipoDocumento = i.i.tipoDocumento
            a.tipoOperacion = i.i.tipoOperacion
            a.modulo = i.h.descripcion
            a.numeroDocNormal = "1"
            a.terminos = i.i.tipoConciliacion
            a.fechaDoc = i.i.fechaRegistro
            a.tipoVenta = i.i.tipoConciliacion



            a.ImporteNacional = i.i.importe  '- i.exedente.GetValueOrDefault
            a.ImporteExtranjero = 0  '- i.exedenteme.GetValueOrDefault
            a.numeroDocNormal = "1"

            'If i.tipo = "EXD" Then
            '    a.ImporteNacional = -1 * i.importe  '- i.exedente.GetValueOrDefault
            '    a.ImporteExtranjero = -1 * i.importeme   '- i.exedenteme.GetValueOrDefault
            '    a.numeroDocNormal = i.numeroventa
            'Else
            '    a.ImporteNacional = i.importe   '- i.exedente.GetValueOrDefault
            '    a.ImporteExtranjero = i.importeme   '- i.exedenteme.GetValueOrDefault
            '    a.numeroDocNormal = i.serie & "-" & i.numeroventa
            'End If



            lista.Add(a)
        Next
        Return lista


    End Function


    Public Function NotasDocumento(iNtPadre As Integer) As List(Of documentoventaAbarrotes)

        Dim lista As New List(Of documentoventaAbarrotes)
        Dim a As New documentoventaAbarrotes

        Dim docs As New List(Of String)
        docs.Add("07")
        docs.Add("9910")

        Dim CC = (From i In HeliosData.documentoventaAbarrotes
                  Join h In HeliosData.tabladetalle
                  On h.codigoDetalle Equals i.tipoDocumento
                  Where docs.Contains(i.tipoDocumento) And
                  i.idPadre = iNtPadre And h.idtabla = 10
                  Select
                     iddocumento = i.idDocumento,
                      tipoDocumento = i.tipoDocumento,
                  terminos = h.descripcion,
                     fecha = i.fechaDoc,
                     numeroventa = i.numeroVenta,
                  serie = i.serieVenta,
                     operacion = i.tipoOperacion,
                     tipooperacion = i.tipoOperacion,
                  importe = i.ImporteNacional,
                  importeme = i.ImporteExtranjero,
                  opDescripcion = (From x In HeliosData.tabladetalle
                                   Where x.codigoDetalle = i.tipoOperacion And x.idtabla = 12
                                   Select
                                   descripcion = x.descripcion).FirstOrDefault,
                  tipo = i.tipoVenta).ToList()




        'exedente = (From H In HeliosData.documentoventaAbarrotes
        '                             Where H.idPadre = i.idDocumento And H.tipoVenta = "EXD"
        '                             Select H.ImporteNacional).FirstOrDefault,
        '              exedenteme = (From H In HeliosData.documentoventaAbarrotes
        '                            Where H.idPadre = i.idDocumento And H.tipoVenta = "EXD"
        '                            Select H.ImporteExtranjero).FirstOrDefault).ToList()

        For Each i In CC
            a = New documentoventaAbarrotes
            a.idDocumento = i.iddocumento
            a.tipoDocumento = i.tipoDocumento
            a.tipoOperacion = i.tipooperacion
            a.modulo = i.opDescripcion
            a.numeroDocNormal = i.numeroventa
            a.terminos = i.terminos
            a.fechaDoc = i.fecha
            a.tipoVenta = i.tipo
            If i.tipo = "EXD" Then
                a.ImporteNacional = -1 * i.importe  '- i.exedente.GetValueOrDefault
                a.ImporteExtranjero = -1 * i.importeme   '- i.exedenteme.GetValueOrDefault
                a.numeroDocNormal = i.numeroventa
            Else
                a.ImporteNacional = i.importe   '- i.exedente.GetValueOrDefault
                a.ImporteExtranjero = i.importeme   '- i.exedenteme.GetValueOrDefault
                a.numeroDocNormal = i.serie & "-" & i.numeroventa
            End If
            lista.Add(a)
        Next
        Return lista
    End Function

    Public Function GetDevolucionesByDocumentoNotaOtor(be As documentocompra) As documentocompra
        GetDevolucionesByDocumentoNotaOtor = New documentocompra

        Dim lista As New List(Of String)
        lista.Add(General.Anticipo.EstadoCobroNotaCredito.DevolucionTramitePendiente)
        lista.Add(General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteParcial)
        lista.Add(General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteCompleto)

        Dim obj As documentocompra
        Dim consulta = (From doc In HeliosData.documentocompra
                        Join ent In HeliosData.entidad
                              On ent.idEntidad Equals doc.idProveedor
                        Group Join caja In HeliosData.documentoCajaDetalle
                            On caja.documentoAfectado Equals doc.idDocumento
                            Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where
                            doc.idDocumento = be.idDocumento And
                            lista.Contains(doc.estadoPago)
                        Group c By
                            doc.idDocumento,
                            doc.numeroDoc,
                            doc.fechaDoc,
                            doc.serie,
                            ent.idEntidad,
                            ent.tipoEntidad,
                            ent.nombreCompleto,
                            ent.nrodoc,
                            doc.importeTotal,
                            doc.importeUS,
                            doc.estadoPago
                            Into g = Group
                        Select New With
                            {
                             idDocumento,
                             numeroDoc,
                             fechaDoc,
                            serie,
                            idEntidad,
                            tipoEntidad,
                            nombreCompleto,
                            nrodoc,
                            importeTotal,
                            importeUS,
                            estadoPago,
                            g, .sumaDevoluciones = g.Sum(Function(c) c.montoSoles)
                            }).FirstOrDefault

        obj = New documentocompra
        If consulta IsNot Nothing Then
            obj.idDocumento = consulta.idDocumento
            obj.fechaDoc = consulta.fechaDoc
            obj.numeroDoc = $"{consulta.serie}-{consulta.numeroDoc}"
            obj.CustomEntidad = New entidad With
                    {
                    .idEntidad = consulta.idEntidad,
                    .tipoEntidad = consulta.tipoEntidad,
                    .nombreCompleto = consulta.nombreCompleto,
                    .nrodoc = consulta.nrodoc
                    }
            obj.importeTotal = consulta.importeTotal
            obj.importeUS = consulta.importeUS
            obj.ImporteDevMN = consulta.sumaDevoluciones.GetValueOrDefault
            obj.estadoPago = consulta.estadoPago
            GetDevolucionesByDocumentoNotaOtor = obj
        End If

    End Function

    Public Sub GrabarDocumentoCajaDevolucionAntOtor(be As documento)
        Dim anticipoBL As New documentoventaAbarrotesBL
        Using ts As New TransactionScope
            PagoDeLaDevolucion(be)
            Dim docSaldo = anticipoBL.GetDevolucionesByDocumentoNotaOtor(New documentocompra With {.idDocumento = be.idDocumento})

            Dim documentoDev = HeliosData.documentocompra.Where(Function(o) o.idDocumento = be.idDocumento).Single

            If docSaldo.SaldoReclamacion.GetValueOrDefault <= 0 Then
                documentoDev.estadoPago = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteCompleto
            Else
                If docSaldo.ImporteDevMN.GetValueOrDefault > 0 Then
                    documentoDev.estadoPago = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteParcial
                Else
                    documentoDev.estadoPago = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramitePendiente
                End If
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Function FacturasAnuPendientesEnv(fecha As DateTime, tipoDoc As String, ruc As String) As List(Of documentoventaAbarrotes)


        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where i.fechaDoc.Value.Year = fecha.Year And
                             i.fechaDoc.Value.Month = fecha.Month And
                             i.tipoDocumento = tipoDoc And i.tipoVenta = "VELC" And
                             i.EnvioSunat = "PE" And i.idEmpresa = ruc And i.estadoCobro = "ANU").ToList

        Return consulta
    End Function

    Function BoletasAnuPendEnvio(fecha As DateTime, IdEmpresa As String) As List(Of documentoventaAbarrotes)

        Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Join x In HeliosData.entidad On i.idCliente Equals x.idEntidad
                        Where i.fechaDoc.Value.Year = fecha.Year And
                            i.fechaDoc.Value.Month = fecha.Month And
                          i.tipoDocumento = "03" And i.tipoVenta = "VELC" And i.EnvioSunat = "PE" And i.estadoCobro = "ANU" _
                            And i.idEmpresa = IdEmpresa
                        Select
                                idDoc = i.idDocumento,
                            fechaDoc = i.fechaDoc,
                                tipodDoc = i.tipoDocumento,
                                serie = i.serieVenta,
                            numero = i.numeroVenta,
                            nrodoc = x.nrodoc,
                            tipDocClie = x.tipoDoc,
                            moneda = i.moneda,
                            gravada = i.bi01,
                            exonerada = i.bi02,
                            igv = i.igv01,
                            icbper = i.icbper,
                            importe = i.ImporteNacional).Take(250)

        For Each i In consulta

            objeto = New documentoventaAbarrotes
            objeto.idDocumento = i.idDoc
            objeto.tipoDocumento = i.tipodDoc
            objeto.serieVenta = i.serie
            objeto.numeroVenta = i.numero
            objeto.NroDocEntidad = i.nrodoc
            objeto.tipoDocEntidad = i.tipDocClie
            objeto.moneda = i.moneda
            objeto.bi01 = i.gravada
            objeto.bi02 = i.exonerada
            objeto.igv01 = i.igv
            objeto.ImporteNacional = i.importe
            objeto.fechaDoc = i.fechaDoc
            objeto.icbper = i.icbper


            lista.Add(objeto)
        Next

        Return lista

    End Function

    Public Sub UpdateAnulacionEnviada(objDocumento As Integer, idNum As Integer, nroTicket As String)

        Try
            Using ts As New TransactionScope()
                Dim documento As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) _
                                            o.idDocumento = objDocumento).First()

                documento.EnvioSunat = "SI"
                documento.ticketElectronico = nroTicket
                documento.numeracionElectronica = idNum

                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function GrabarVentaEquivalencia(be As documento) As documento
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                If ValidacionCierreMensual(be) Then
                    'Validando Registro de venta
                    ValidarVentaElectronica(be.documentoventaAbarrotes.idCliente, be.documentoventaAbarrotes.tipoDocumento)

                    Dim afectoInventario = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Any(Function(o) o.AfectoInventario = True)

                    RegistrarVentaV2(be)

                    'ParaCalzados
                    '  RegistrarTotalesAlmacenTallas(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList())

                    ' If be.AfectaInventario = True Then
                    If afectoInventario = True Then
                        RegistrarEnInventario(be)
                    End If
                    ' End If
                    RegistrarPagos(be)
                    ActualizarEstadoPreVenta(be)
                    'RegistrarComisiones(be)

                    'If afectoInventario Then
                    '    ActualizarInventario(be)
                    'End If
                End If
                HeliosData.SaveChanges()
                ts.Complete()
                be = LimpiarEntidades(be)
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return be
    End Function

    'Private Sub RegistrarTotalesAlmacenTallas(list As List(Of documentoventaAbarrotesDet))
    '    Using ts As New TransactionScope
    '        For Each i In list
    '            HeliosData.totalesAlmacenOthers.Add(i.CustomtotalesAlmacenOthers)
    '        Next
    '        HeliosData.SaveChanges()
    '        ts.Complete()
    '    End Using
    'End Sub

    Private Sub RegistrarComisiones(be As documento)
        Dim listaDetalle As List(Of registrocomision_usuarios_detalle) = Nothing
        Dim detalleitemcatalogo_comisionBL As New detalleitemcatalogo_comisionBL
        Dim registroComisionBL As New registrocomision_usuariosBL
        Using ts As New TransactionScope

            'Mapeando comisiones encontradas por  item de venta
            Dim usuarioVenta = be.documentoventaAbarrotes.usuarioActualizacion

            For Each i In be.documentoventaAbarrotes.documentoventaAbarrotesDet

                Dim usuariosBeneficiados = detalleitemcatalogo_comisionBL.detalleitemcatalogo_comisionSelCatalogo(
                    New detalleitemcatalogo_comision With {
                    .codigodetalle = i.CustomProducto.codigodetalle,
                    .equivalencia_id = i.CustomEquivalencia.equivalencia_id,
                    .idCatalogo = i.CustomCatalogo.idCatalogo
                    })

                If usuariosBeneficiados IsNot Nothing Then
                    If usuariosBeneficiados.detalleitemcatalogo_comisiondetalle IsNot Nothing AndAlso usuariosBeneficiados.detalleitemcatalogo_comisiondetalle.Count > 0 Then

                        Dim UsuarioComision = usuariosBeneficiados.detalleitemcatalogo_comisiondetalle.Where(Function(u) u.IdUsuario = usuarioVenta).SingleOrDefault()


                        listaDetalle = New List(Of registrocomision_usuarios_detalle)
                        For Each comi In usuariosBeneficiados.detalleitemcatalogo_comisiondetalle

                            If UsuarioComision IsNot Nothing Then
                                If i.importeMN >= usuariosBeneficiados.apartir_de Then
                                    listaDetalle.Add(New registrocomision_usuarios_detalle With {
                                                   .idDocumentoRef = be.idDocumento,
                                                   .IdUsuario = comi.IdUsuario,
                                                   .tipoComision = usuariosBeneficiados.tipo_comision,
                                                   .valorComision = usuariosBeneficiados.apartir_de,
                                                   .idProducto = i.CustomProducto.codigodetalle,
                                                   .unidadComercial = i.CustomEquivalencia.equivalencia_id,
                                                   .unidadprincipal = i.CustomProducto.unidad1,
                                                   .catalogo = i.CustomCatalogo.idCatalogo,
                                                   .precioTotalVenta = i.importeMN,
                                                   .precioComision = comi.importe_comisionMN,
                                                   .estadoVenta = be.documentoventaAbarrotes.estadoCobro,
                                                   .estadoComision = "PN"
                                                   })
                                End If
                            End If



                            '      Dim tieneComisiones = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Any(Function(o) o.importeMN >= usuariosBeneficiados.apartir_de)
                            'Dim tieneComisiones = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Any(Function(o) o.importeMN >= usuariosBeneficiados.apartir_de)
                            'If tieneComisiones Then

                            'End If
                        Next
                    End If
                End If
            Next

            'Rgistrando comisiones mapeadas si existen
            If listaDetalle IsNot Nothing AndAlso listaDetalle.Count > 0 Then
                Dim reg As New registrocomision_usuarios
                reg.idDocumentoRef = be.idDocumento
                reg.idEmpresa = be.idEmpresa
                reg.unidadNegocio = be.idCentroCosto
                reg.fechaRegistro = be.fechaProceso
                reg.moneda = be.moneda
                reg.importeTotalVenta = be.documentoventaAbarrotes.ImporteNacional
                reg.importeTotalGanadoMN = listaDetalle.Sum(Function(o) o.precioComision).GetValueOrDefault
                reg.importeTotalGanadoME = 0
                reg.estadoVenta = be.documentoventaAbarrotes.estadoCobro
                reg.estadoComision = "PN"
                reg.fechaVence = DateTime.Now.AddMonths(1)
                reg.fechaprogramadaPago = DateTime.Now.AddMonths(1)
                reg.otrosConceptos = 0

                reg.registrocomision_usuarios_detalle = listaDetalle

                registroComisionBL.registrocomision_usuariosSave(reg)
            End If

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    ''' <summary>
    ''' Grabar operaciones de otras sálidas y transferencias de almacenes.
    ''' </summary>
    ''' <param name="be"></param>
    ''' <returns></returns>
    Public Function GrabarInventarioEquivalencia(be As documento) As documento
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                If ValidacionCierreMensual(be) Then
                    'Validando Registro de venta
                    ValidarVentaElectronica(be.documentoventaAbarrotes.idCliente, be.documentoventaAbarrotes.tipoDocumento)

                    'Dim afectoInventario = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Any(Function(o) o.AfectoInventario = True)

                    RegistrarVentaV2(be)
                    ' If be.AfectaInventario = True Then
                    'If afectoInventario = True Then
                    RegistrarEnInventarioOperations(be)
                    ' End If
                    ' End If
                    'RegistrarPagos(be)
                    'ActualizarEstadoPreVenta(be)


                    'If afectoInventario Then
                    '    ActualizarInventario(be)
                    'End If
                End If
                HeliosData.SaveChanges()
                ts.Complete()
                be = LimpiarEntidades(be)
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return be
    End Function

    Public Function GrabarInventarioEquivalenciaTranferencia(be As documento) As documento
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                If ValidacionCierreMensual(be) Then
                    'Validando Registro de venta
                    ValidarVentaElectronica(be.documentoventaAbarrotes.idCliente, be.documentoventaAbarrotes.tipoDocumento)

                    'Dim afectoInventario = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Any(Function(o) o.AfectoInventario = True)

                    RegistrarVentaV2(be)
                    ' If be.AfectaInventario = True Then
                    'If afectoInventario = True Then
                    RegistrarEnInventarioOperationsTransferencia(be)
                    ' End If
                    ' End If
                    'RegistrarPagos(be)
                    'ActualizarEstadoPreVenta(be)


                    'If afectoInventario Then
                    '    ActualizarInventario(be)
                    'End If
                End If
                HeliosData.SaveChanges()
                ts.Complete()
                be = LimpiarEntidades(be)
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return be
    End Function

    Public Function GrabarTransferencia(be As documento) As documento
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                If ValidacionCierreMensual(be) Then
                    'Validando Registro de venta
                    ' ValidarVentaElectronica(be.documentoventaAbarrotes.idCliente, be.documentoventaAbarrotes.tipoDocumento)

                    'Dim afectoInventario = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Any(Function(o) o.AfectoInventario = True)
                    RegistrarVentaV2(be)
                    If be.documentoventaAbarrotes.estadoEntrega = "1" Then
                        RegistrarEnInventarioOperations(be)
                    End If

                    ' If be.AfectaInventario = True Then
                    'If afectoInventario = True Then

                    ' End If
                    ' End If
                    'RegistrarPagos(be)
                    'ActualizarEstadoPreVenta(be)


                    'If afectoInventario Then
                    '    ActualizarInventario(be)
                    'End If
                End If
                HeliosData.SaveChanges()
                ts.Complete()
                be = LimpiarEntidades(be)
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return be
    End Function

    Public Sub ConfirmarTransferencia(be As documento)
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                Dim documento = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).SingleOrDefault
                If documento IsNot Nothing Then
                    documento.estadoEntrega = "1"
                End If

                Dim venta = GetVentaID(New Entity.documento With {.idDocumento = documento.idDocumento})
                Dim doc As New documento With
                    {
                    .idEmpresa = venta.idEmpresa,
                    .idCentroCosto = venta.idEstablecimiento,
                    .idDocumento = venta.idDocumento,
                    .fechaProceso = venta.fechaDoc,
                    .tipoDoc = venta.tipoDocumento
                    }
                doc.ventaConLotes = False
                doc.documentoventaAbarrotes = venta
                doc.documentoventaAbarrotes.fechaConfirmacion = venta.fechaDoc
                doc.documentoventaAbarrotes.documentoventaAbarrotesDet = venta.documentoventaAbarrotesDet.ToList
                doc.documentoventaAbarrotes.CustomEntidad = venta.CustomEntidad

                doc.CustomSerie = venta.serieVenta
                doc.CustomNumero = venta.numeroVenta

                If ValidacionCierreMensual(doc) Then
                    RegistrarEnInventarioOperations(doc)
                End If
                HeliosData.SaveChanges()
                ts.Complete()
                '    be = LimpiarEntidades(be)
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        '    Return be
    End Sub

    Public Sub ConfirmarTraslado(be As documento, DocumentoGuiaDetalleList As List(Of documentoguiaDetalle))
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                '    Dim documento = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).SingleOrDefault
                'If documento IsNot Nothing Then
                '    documento.estadoEntrega = EstadoTrasladoVenta.
                'End If

                Dim venta = GetVentaID(New Entity.documento With {.idDocumento = be.idDocumento})
                Dim listaVenta = venta.documentoventaAbarrotesDet.ToList
                Dim doc As New documento With
                    {
                    .idEmpresa = venta.idEmpresa,
                    .idCentroCosto = venta.idEstablecimiento,
                    .idDocumento = venta.idDocumento,
                    .fechaProceso = venta.fechaDoc,
                    .tipoDoc = venta.tipoDocumento
                    }
                doc.ventaConLotes = False
                doc.documentoventaAbarrotes = venta
                doc.documentoventaAbarrotes.fechaConfirmacion = be.documentoGuia.fechaTraslado ' venta.fechaDoc
                doc.documentoventaAbarrotes.fechaDoc = be.documentoGuia.fechaTraslado

                doc.documentoventaAbarrotes.documentoventaAbarrotesDet = New List(Of documentoventaAbarrotesDet)
                For Each i In DocumentoGuiaDetalleList.Where(Function(s) s.AfectoInventario = True).ToList
                    Dim itemSel = listaVenta.Where(Function(o) o.secuencia.Equals(i.secuenciaRef)).SingleOrDefault()
                    If itemSel IsNot Nothing Then
                        itemSel.monto1 = i.cantidad
                        itemSel.idAlmacenOrigen = i.almacenRef
                        doc.documentoventaAbarrotes.documentoventaAbarrotesDet.Add(itemSel)
                    End If
                Next

                'doc.documentoventaAbarrotes.documentoventaAbarrotesDet = venta.documentoventaAbarrotesDet.ToList
                doc.documentoventaAbarrotes.CustomEntidad = venta.CustomEntidad

                doc.CustomSerie = venta.serieVenta
                doc.CustomNumero = venta.numeroVenta

                'If ValidacionCierreMensual(doc) Then
                '    RegistrarEnInventarioTraslados(doc)
                'End If
                HeliosData.SaveChanges()
                ts.Complete()
                '    be = LimpiarEntidades(be)
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        '    Return be
    End Sub

    Private Sub ActualizarEstadoPreVenta(be As documento)
        Using ts As New TransactionScope
            If be.TipoEnvio = "PREVENTA" Then
                Dim codigoPedido = be.documentoventaAbarrotes.idPadre
                Dim pedido = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = codigoPedido).SingleOrDefault
                If pedido IsNot Nothing Then
                    pedido.tipoVenta = "VNPE"
                End If
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub RegistrarPagos(be As documento)
        Dim documentoBL As New documentoBL
        Dim documentocajaBL As New documentoCajaBL
        Dim documentocajadetalleBL As New documentoCajaDetalleBL
        Using ts As New TransactionScope
            Dim codigoVenta = be.idDocumento

            Select Case be.tipoDoc
                Case "01", "03", "9907"
                    If be.ListaCustomDocumento IsNot Nothing Then
                        If be.ListaCustomDocumento.Count > 0 Then
                            For Each i In be.ListaCustomDocumento.ToList
                                Dim nroDocVoucher = HeliosData.documentoCaja.Where(Function(o) o.tipoDocPago = "9903").Count
                                nroDocVoucher = nroDocVoucher + 1
                                i.nroDoc = nroDocVoucher
                                i.documentoCaja.numeroDoc = nroDocVoucher
                                documentoBL.Insert(i)
                                documentocajaBL.Insert(i.documentoCaja, i.idDocumento)

                                ''Dim nroDocVoucher = HeliosData.documentoCaja.Where(Function(o) o.tipoDocPago = "9903").Count
                                ''nroDocVoucher = nroDocVoucher + 1

                                'Dim codigoSeguridad = "VC"

                                'Dim nroDocVoucher = numeracionBL.NumeracionBoletasSel(be.idCentroCosto, codigoSeguridad, "9903")
                                'Dim serie = nroDocVoucher.serie
                                'Dim cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nroDocVoucher.IdEnumeracion))

                                'i.nroDoc = cval
                                'i.documentoCaja.numeroDoc = cval
                                ''i.documentoCaja.formapago = serie

                                For Each det In i.documentoCaja.documentoCajaDetalle.ToList
                                    Dim ventaItem = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Where(Function(o) o.CodigoCosto = det.destino).FirstOrDefault

                                    det.idDocumento = i.idDocumento
                                    det.documentoAfectado = codigoVenta
                                    det.documentoAfectadodetalle = ventaItem.secuencia
                                    HeliosData.documentoCajaDetalle.Add(det)
                                Next
                            Next
                            'HeliosData.documento.AddRange(be.ListaCustomDocumento)
                        End If
                    End If
                Case "9903" ' PROFORMA

                Case "1000" ' PRE VENTA

            End Select

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub




    Private Sub ActualizarInventario(be As documento)
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL

        Using ts As New TransactionScope
            Select Case be.tipoDoc
                Case "01", "03", "9907"
                    Dim ventaDetalle = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = be.idDocumento).Distinct.ToList

                    For Each i In ventaDetalle
                        Dim lista = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                                            New InventarioMovimiento With {
                                            .idAlmacen = i.idAlmacen,
                                            .fecha = Date.Now,
                                            .tipoProducto = i.tipoProducto,
                                            .idItem = i.idItem,
                                            .nrolote = i.nrolote
                                            }, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(lista)

                        ' totalesBL.GetTotalizarInventario(lista)
                    Next
                Case "9903" ' PROFORMA

                Case "1000" ' PRE VENTA

            End Select
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub ActualizarInventarioPorItem(be As documentoventaAbarrotes, idproducto As Integer, codigoLote As Integer)
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL

        Using ts As New TransactionScope
            Select Case be.tipoDocumento
                Case "01", "03", "9907"
                    'Dim i = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = be.idDocumento And o.idItem = idproducto And o.nrolote = codigoLote).SingleOrDefault
                    Dim listaVenta = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = be.idDocumento And o.idItem = idproducto And o.nrolote = codigoLote).Distinct.ToList '.SingleOrDefault
                    For Each i In listaVenta
                        Dim lista = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                                            New InventarioMovimiento With {
                                            .idAlmacen = i.idAlmacen,
                                            .fecha = Date.Now,
                                            .tipoProducto = i.tipoProducto,
                                            .idItem = i.idItem,
                                            .nrolote = i.nrolote
                                            }, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(lista)

                        ' totalesBL.GetTotalizarInventario(lista)
                    Next
                Case "9903" ' PROFORMA

                Case "1000" ' PRE VENTA

            End Select
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Function ValidacionCierreMensual(be As documento) As Boolean
        ValidacionCierreMensual = True

        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim codDoc As Integer = 0
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL


        Dim fechaActual = New Date(be.documentoventaAbarrotes.fechaDoc.Value.Year, be.documentoventaAbarrotes.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(be.idEmpresa, fechaActual, be.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                ValidacionCierreMensual = False
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = be.idEmpresa,
                                                .idCentroCosto = be.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                ValidacionCierreMensual = False
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            ValidacionCierreMensual = False
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                ValidacionCierreMensual = False
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If
    End Function

    Private Shared Function LimpiarEntidades(be As documento) As documento
        be.ListaCustomDocumento = New List(Of documento)
        be.Cronograma = New List(Of Cronograma)
        For Each i In be.documentoventaAbarrotes.documentoventaAbarrotesDet
            i.documentoventaAbarrotes = Nothing
            i.CustomListaInventarioMovimiento = New List(Of InventarioMovimiento)
            i.CustomProducto = Nothing
            'i.CustomPrecios = New List(Of configuracionPrecioProducto)
            'i.CustomListaDocumentoGuia = New List(Of documento)
            'i.CustomRecursoCostoLote = Nothing
            'i.CustomProducto_equivalencia = Nothing
            'i.recursoCosto_compraDetalle = New List(Of recursoCosto_compraDetalle)
            'i.inventarioTransito = New List(Of inventarioTransito)
            'i.documentoventaAbarrotes.documento = Nothing
            'i = Nothing
        Next
        be.documentoventaAbarrotes.documento = Nothing
        be.documentoventaAbarrotes = Nothing
        Return be
    End Function

    Private Sub RegistrarEnInventario(be As documento)
        Using ts As New TransactionScope
            Select Case be.tipoDoc
                Case "01", "03", "9907"

                    Dim numeroVenta = be.CustomNumero

                    Dim ListaProductosConInventario = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Where(Function(o) o.AfectoInventario = True).ToList
                    'DetalleInventarioJiuni(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList(), be.documentoventaAbarrotes, numeroVenta)
                    If ListaProductosConInventario.Count > 0 Then
                        DetalleInventarioJiuni(ListaProductosConInventario, be.documentoventaAbarrotes, numeroVenta)
                    End If
                Case "9903" ' PROFORMA

                Case "1000" ' PRE VENTA

            End Select
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub RegistrarEnInventarioOperations(be As documento)
        Using ts As New TransactionScope
            Select Case be.tipoDoc
                Case "01", "03", "9907"

                    Dim numeroVenta = be.CustomNumero

                    'Dim ListaProductosConInventario = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Where(Function(o) o.AfectoInventario = True).ToList
                    'DetalleInventarioJiuni(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList(), be.documentoventaAbarrotes, numeroVenta)
                    'If ListaProductosConInventario.Count > 0 Then
                    If be.ventaConLotes Then
                        CommitInventoryOperationsLote(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList, be.documentoventaAbarrotes, numeroVenta)
                    Else
                        CommitInventoryOperations(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList, be.documentoventaAbarrotes, numeroVenta)
                    End If
                   ' End If
                Case "9903" ' PROFORMA

                Case "1000" ' PRE VENTA

            End Select
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub RegistrarEnInventarioOperationsTransferencia(be As documento)
        Using ts As New TransactionScope
            Select Case be.tipoDoc
                Case "01", "03", "9907"

                    Dim numeroVenta = be.CustomNumero

                    'Dim ListaProductosConInventario = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Where(Function(o) o.AfectoInventario = True).ToList
                    'DetalleInventarioJiuni(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList(), be.documentoventaAbarrotes, numeroVenta)
                    'If ListaProductosConInventario.Count > 0 Then
                    If be.ventaConLotes Then
                        CommitInventoryOperationsLote(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList, be.documentoventaAbarrotes, numeroVenta)
                    Else
                        CommitInventoryOperationsTransferencia(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList, be.documentoventaAbarrotes, numeroVenta)
                    End If
                   ' End If
                Case "9903" ' PROFORMA

                Case "1000" ' PRE VENTA

            End Select
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub RegistrarEnInventarioTraslados(be As documento)
        Using ts As New TransactionScope
            Dim numeroVenta = be.CustomNumero
            CommitInventoryTrasladoClientes(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList, be.documentoventaAbarrotes, numeroVenta)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    'Private Sub RegistrarVenta(be As documento)
    '    Dim cval As Integer = 0
    '    Dim numeracionBL As New numeracionBoletasBL
    '    Dim nuevoNumero As Object = Nothing
    '    Dim serie As String = String.Empty
    '    Using ts As New TransactionScope
    '        Dim codigoSeguridad As String = Nothing

    '        Select Case be.tipoDoc
    '            Case "03"
    '                '      serieConfigurada = "B001"
    '                codigoSeguridad = "VT2E"


    '                If be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.VENTA_ELECTRONICA Then
    '                    nuevoNumero = numeracionBL.NumeracionBoletasSel(be.idCentroCosto, codigoSeguridad, be.tipoDoc)
    '                    serie = nuevoNumero.serie
    '                    cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))

    '                ElseIf be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.VENTA_GENERAL Then
    '                    cval = be.documentoventaAbarrotes.numeroVenta
    '                    serie = be.documentoventaAbarrotes.serieVenta
    '                End If

    '            Case "01"
    '                '     serieConfigurada = "F001"
    '                codigoSeguridad = "VT3E"


    '                If be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.VENTA_ELECTRONICA Then
    '                    nuevoNumero = numeracionBL.NumeracionBoletasSel(be.idCentroCosto, codigoSeguridad, be.tipoDoc)
    '                    serie = nuevoNumero.serie
    '                    cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))

    '                ElseIf be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.VENTA_GENERAL Then
    '                    cval = be.documentoventaAbarrotes.numeroVenta
    '                    serie = be.documentoventaAbarrotes.serieVenta
    '                End If

    '            Case "9907" ' NOTA DE VENTA

    '                'codigoSeguridad = "NOTE"

    '                'If be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.NOTA_DE_VENTA Then
    '                '    nuevoNumero = numeracionBL.NumeracionBoletasSel(be.idCentroCosto, codigoSeguridad, be.tipoDoc)
    '                '    serie = nuevoNumero.serie
    '                '    cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))
    '                'End If

    '                Dim conteo = HeliosData.documentoventaAbarrotes.Where(Function(o) o.tipoDocumento = "9907").Count
    '                serie = "9907"
    '                cval = conteo + 1
    '            Case "9903" ' PROFORMA

    '                'codigoSeguridad = "PRF"

    '                'If be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.PROFORMA Then
    '                '    nuevoNumero = numeracionBL.NumeracionBoletasSel(be.idCentroCosto, codigoSeguridad, be.tipoDoc)
    '                '    serie = nuevoNumero.serie
    '                '    cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))
    '                'End If

    '                serie = "9903"
    '                Dim conteo = HeliosData.documentoventaAbarrotes.Where(Function(o) o.tipoDocumento = "9903").Count
    '                cval = conteo + 1

    '            Case "1000" ' PRE VENTA - SIN SUSTENTO
    '                'codigoSeguridad = "PV"

    '                'If be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.PRE_VENTA Then
    '                '    nuevoNumero = numeracionBL.NumeracionBoletasSel(be.idCentroCosto, codigoSeguridad, be.tipoDoc)
    '                '    serie = nuevoNumero.serie
    '                '    cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))
    '                'End If

    '                serie = "1000"
    '                Dim conteo = HeliosData.documentoventaAbarrotes.Where(Function(o) o.tipoDocumento = "1000").Count
    '                cval = conteo + 1
    '        End Select

    '        cval = cval
    '        be.nroDoc = serie & "-" & cval 'serieConfigurada
    '        be.documentoventaAbarrotes.serieVenta = serie 'serieConfigurada
    '        be.documentoventaAbarrotes.numeroVenta = cval

    '        be.CustomSerie = serie 'serieConfigurada
    '        be.CustomNumero = cval

    '        HeliosData.documento.Add(be)
    '        HeliosData.SaveChanges()
    '        ts.Complete()
    '    End Using
    'End Sub

    Private Sub RegistrarVentaV2(be As documento)
        Dim cval As Integer = 0
        Dim numeracionBL As New numeracionBoletasBL
        Dim nuevoNumero As Object = Nothing
        Dim serie As String = String.Empty
        Using ts As New TransactionScope
            Dim codigoSeguridad As String = Nothing

            Select Case be.tipoDoc
                Case "03"
                    '      serieConfigurada = "B001"
                    codigoSeguridad = "VT2E"


                    If be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.VENTA_ELECTRONICA Then
                        nuevoNumero = numeracionBL.NumeracionBoletasSelV2(be.idCentroCosto, codigoSeguridad, be.tipoDoc, be.IdPerfil)
                        serie = nuevoNumero.serie
                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))

                    ElseIf be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.VENTA_GENERAL Then
                        cval = be.documentoventaAbarrotes.numeroVenta
                        serie = be.documentoventaAbarrotes.serieVenta
                    End If

                Case "01"
                    '     serieConfigurada = "F001"
                    codigoSeguridad = "VT3E"


                    If be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.VENTA_ELECTRONICA Then
                        nuevoNumero = numeracionBL.NumeracionBoletasSelV2(be.idCentroCosto, codigoSeguridad, be.tipoDoc, be.IdPerfil)
                        serie = nuevoNumero.serie
                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))

                    ElseIf be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.VENTA_GENERAL Then
                        cval = be.documentoventaAbarrotes.numeroVenta
                        serie = be.documentoventaAbarrotes.serieVenta
                    End If

                Case "9907" ' NOTA DE VENTA



                    If be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.NOTA_DE_VENTA Then
                        codigoSeguridad = "NOTE"
                        nuevoNumero = numeracionBL.NumeracionBoletasSelV2(be.idCentroCosto, codigoSeguridad, be.tipoDoc, be.IdPerfil)
                        serie = nuevoNumero.serie
                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))
                    ElseIf be.documentoventaAbarrotes.tipoVenta = "OSA" Then
                        codigoSeguridad = "OSA"
                        nuevoNumero = numeracionBL.NumeracionBoletasSelV2(be.idCentroCosto, codigoSeguridad, be.tipoDoc, be.IdPerfil)
                        serie = nuevoNumero.serie
                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))
                    ElseIf (be.documentoventaAbarrotes.tipoVenta = "TEA") Then
                        codigoSeguridad = "TEA"
                        nuevoNumero = numeracionBL.NumeracionBoletasSelV2(be.idCentroCosto, codigoSeguridad, be.tipoDoc, be.IdPerfil)
                        serie = nuevoNumero.serie
                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))
                    End If

                    'Dim conteo = HeliosData.documentoventaAbarrotes.Where(Function(o) o.tipoDocumento = "9907").Count
                    'serie = "9907"
                    'cval = conteo + 1
                Case "9903" ' PROFORMA

                    codigoSeguridad = "CTZ"

                    If be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.COTIZACION Then
                        nuevoNumero = numeracionBL.NumeracionBoletasSelV2(be.idCentroCosto, codigoSeguridad, be.tipoDoc, be.IdPerfil)
                        serie = nuevoNumero.serie
                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))
                    End If

                    'serie = "9903"
                    'Dim conteo = HeliosData.documentoventaAbarrotes.Where(Function(o) o.tipoDocumento = "9903").Count
                    'cval = conteo + 1

                Case "1000" ' PRE VENTA - SIN SUSTENTO
                    codigoSeguridad = "PV"

                    If be.documentoventaAbarrotes.tipoVenta = TIPO_VENTA.VENTA_NOTA_PEDIDO Then
                        nuevoNumero = numeracionBL.NumeracionBoletasSelV2(be.idCentroCosto, codigoSeguridad, be.tipoDoc, be.IdPerfil)
                        serie = nuevoNumero.serie
                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))
                    End If

                    'serie = "1000"
                    'Dim conteo = HeliosData.documentoventaAbarrotes.Where(Function(o) o.tipoDocumento = "1000").Count
                    'cval = conteo + 1
            End Select

            cval = cval
            be.nroDoc = serie & "-" & cval 'serieConfigurada
            be.documentoventaAbarrotes.serieVenta = serie 'serieConfigurada
            be.documentoventaAbarrotes.numeroVenta = cval

            be.CustomSerie = serie 'serieConfigurada
            be.CustomNumero = cval

            HeliosData.documento.Add(be)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub EditarDocumentoVenta(be As documento)
        Using ts As New TransactionScope
            HeliosData.documento.AddOrUpdate(be)
            HeliosData.documentoventaAbarrotes.AddOrUpdate(be.documentoventaAbarrotes)

            Dim ventaDetalle = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = be.idDocumento).ToList
            HeliosData.documentoventaAbarrotesDet.RemoveRange(ventaDetalle)

            HeliosData.documentoventaAbarrotesDet.AddRange(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)


            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function GetVentaID(be As documento) As documentoventaAbarrotes

        'Dim venta = (From v In HeliosData.documentoventaAbarrotes
        '            Join det In HeliosData.documentoventaAbarrotesDet On det.idDocumento Equals v.idDocumento
        '            Join ent In HeliosData.entidad On ent.idEntidad Equals v.idCliente
        '            Join prod In HeliosData.detalleitems.Include("detalleitem_equivalencias") On prod.codigodetalle Equals det.idItem
        '            Where v.idDocumento = be.idDocumento).SIN

        Dim i = HeliosData.documentoventaAbarrotes.Join(HeliosData.entidad.Include(Function(u) u.entidadAtributos), Function(venta) venta.idCliente, Function(cli) cli.idEntidad, Function(venta, cli) New With {
                                                                                                                                    .vent = venta,
                                                                                                                                    .cliente = cli,
                                                                                                                                    .Atributos = cli.entidadAtributos
                                                                                                                                          }) _
            .Include(Function(det) det.vent.documentoventaAbarrotesDet) _
            .Where(Function(o) o.vent.idDocumento = be.idDocumento).Select(Function(x) New With
                                                          {
                                                          .cliente = x.cliente,
                                                          .ClienteAtributos = x.Atributos,
                                                          .documentoventa = x,
                                                          .documentoventaAbarrotesDetalle = x.vent.documentoventaAbarrotesDet.GroupJoin _
                                                            (HeliosData.detalleitem_equivalencias, Function(vt) vt.equivalencia_id, Function(eq) eq.equivalencia_id, Function(vt, eq) New With {
                                                            .detalleitem_equivalencias = eq.FirstOrDefault,
                                                            .detalle_venta = vt
                                                            }).GroupJoin(HeliosData.detalleitems, Function(g) CInt(g.detalle_venta.idItem), Function(gg) gg.codigodetalle, Function(g, gg) New With
                                                              {
                                                              .cliente = x.cliente,
                                                              .ClienteAtributos = x.Atributos,
                                                              .documentoventa = x,
                                                              .ventaDetail = g.detalle_venta,
                                                              .equivalencia = g.detalleitem_equivalencias,
                                                              .Producto = gg.FirstOrDefault
                                                              }).GroupJoin(HeliosData.detalleitemequivalencia_catalogos, Function(t) t.ventaDetail.catalogo_id, Function(tt) tt.idCatalogo, Function(t, tt) New With
                                                                                                                                                {
                                                                                                                                                .cliente = x.cliente,
                                                                                                                                                .ClienteAtributos = x.Atributos,
                                                                                                                                                .documentoventa = x,
                                                                                                                                                .ventaDetail = t.ventaDetail,
                                                                                                                                                .equivalencia = t.equivalencia,
                                                                                                                                                .Producto = t.Producto,
                                                                                                                                                .catalogo = tt.FirstOrDefault
                                                                                                                                                })
                                                                          }).SingleOrDefault

        'Dim i = HeliosData.documentoventaAbarrotes _
        '    .Include(Function(det) det.documentoventaAbarrotesDet) _
        '    .Where(Function(o) o.idDocumento = be.idDocumento).Select(Function(x) New With
        '                                                  {
        '                                                  .documentoventa = x,
        '                                                  .documentoventaAbarrotesDetalle = x.documentoventaAbarrotesDet.Join _
        '                                                    (HeliosData.detalleitem_equivalencias, Function(vt) vt.equivalencia_id, Function(eq) eq.equivalencia_id, Function(vt, eq) New With {
        '                                                    .detalleitem_equivalencias = eq,
        '                                                    .detalle_venta = vt
        '                                                    })
        '                                                   }).SingleOrDefault


        GetVentaID = New documentoventaAbarrotes
        Dim ListVenta As New List(Of documentoventaAbarrotesDet)

        Dim equivalencia_table As detalleitem_equivalencias
        Dim producto_table As detalleitems
        Dim catalogo_table As detalleitemequivalencia_catalogos
        Dim listadoAtributos As List(Of entidadAtributos)

        For Each o In i.documentoventaAbarrotesDetalle.ToList
            If o.equivalencia IsNot Nothing Then
                equivalencia_table = New detalleitem_equivalencias With
                            {
                            .codigodetalle = o.equivalencia.codigodetalle,
                            .equivalencia_id = o.equivalencia.equivalencia_id,
                            .detalle = o.equivalencia.detalle,
                            .unidadComercial = o.equivalencia.unidadComercial,
                            .contenido = o.equivalencia.contenido,
                            .fraccionUnidad = o.equivalencia.fraccionUnidad,
                            .contenido_neto = o.equivalencia.contenido_neto,
                            .estado = o.equivalencia.estado
                            }
            Else
                equivalencia_table = Nothing
            End If

            If o.Producto IsNot Nothing Then
                producto_table = New detalleitems With
                            {
                            .codigodetalle = o.Producto.codigodetalle,
                            .fotoUrl = o.Producto.fotoUrl,
                            .AfectoStock = o.Producto.AfectoStock,
                            .codigo = o.Producto.codigo,
                            .idItem = o.Producto.idItem,
                            .idEmpresa = o.Producto.idEmpresa,
                            .idEstablecimiento = o.Producto.idEstablecimiento,
                            .descripcionItem = o.Producto.descripcionItem,
                            .presentacion = o.Producto.presentacion,
                            .unidad1 = o.Producto.unidad1,
                            .unidad2 = o.Producto.unidad2,
                            .tipoExistencia = o.Producto.tipoExistencia,
                            .origenProducto = o.Producto.origenProducto,
                            .tipoProducto = o.Producto.tipoProducto,
                            .composicion = o.Producto.composicion,
                            .productoRestringido = o.Producto.productoRestringido,
                            .estado = o.Producto.estado
                            }
            Else
                producto_table = Nothing
            End If


            If o.catalogo IsNot Nothing Then
                catalogo_table = New detalleitemequivalencia_catalogos With
                          {
                          .idCatalogo = o.catalogo.idCatalogo,
                          .codigodetalle = o.catalogo.codigodetalle,
                          .equivalencia_id = o.catalogo.equivalencia_id,
                          .nombre_corto = o.catalogo.nombre_corto,
                          .nombre_largo = o.catalogo.nombre_largo,
                          .predeterminado = o.catalogo.predeterminado,
                          .estado = o.catalogo.estado
                          }
            Else
                catalogo_table = Nothing
            End If

            Dim afectoInv As Boolean
            If o.ventaDetail.tipoExistencia = "GS" Then
                afectoInv = False
            Else
                If producto_table.AfectoStock.HasValue Then
                    afectoInv = producto_table.AfectoStock
                Else
                    afectoInv = False
                End If
            End If

            ListVenta.Add(New documentoventaAbarrotesDet With
                          {
                          .AfectoInventario = afectoInv,'producto_table.AfectoStock,' True,
                          .CustomEquivalencia = equivalencia_table,
                          .CustomProducto = producto_table,
                          .CustomCatalogo = catalogo_table,
                          .CodigoCosto = o.ventaDetail.secuencia,
                          .ContenidoNetoUnidadComercialMaxima = If(o.equivalencia IsNot Nothing, o.equivalencia.contenido, 0),  'esto cambie martin
                          .idDocumento = o.ventaDetail.idDocumento,
                          .equivalencia_id = If(o.equivalencia IsNot Nothing, o.equivalencia.equivalencia_id, 0),
                          .secuencia = o.ventaDetail.secuencia,
                          .idAlmacenOrigen = o.ventaDetail.idAlmacenOrigen,
                          .establecimientoOrigen = o.ventaDetail.establecimientoOrigen.GetValueOrDefault(),
                          .idalmacenDestino = o.ventaDetail.categoria.GetValueOrDefault(),
                          .cuentaOrigen = o.ventaDetail.cuentaOrigen,
                          .idItem = o.ventaDetail.idItem,
                          .nombreItem = o.ventaDetail.nombreItem,
                          .fechaVcto = o.ventaDetail.fechaVcto,
                          .tipoExistencia = o.ventaDetail.tipoExistencia,
                          .destino = o.ventaDetail.destino,
                          .unidad1 = o.ventaDetail.unidad1,
                          .monto1 = o.ventaDetail.monto1,
                          .unidad2 = o.ventaDetail.unidad2,
                          .monto2 = o.ventaDetail.monto2,
                          .precioUnitario = o.ventaDetail.precioUnitario,
                          .precioUnitarioUS = o.ventaDetail.precioUnitarioUS,
                          .importeMN = o.ventaDetail.importeMN,
                          .importeME = o.ventaDetail.importeME,
                          .importeMNK = o.ventaDetail.importeMNK.GetValueOrDefault,
                          .importeMEK = o.ventaDetail.importeMEK.GetValueOrDefault,
                          .descuentoMN = o.ventaDetail.descuentoMN,
                          .descuentoME = o.ventaDetail.descuentoME.GetValueOrDefault,
                          .montokardex = o.ventaDetail.montokardex,
                          .montoIsc = o.ventaDetail.montoIsc,
                          .montoIgv = o.ventaDetail.montoIgv,
                          .otrosTributos = o.ventaDetail.otrosTributos,
                          .montokardexUS = o.ventaDetail.montokardexUS,
                          .montoIscUS = o.ventaDetail.montoIscUS,
                          .montoIgvUS = o.ventaDetail.montoIgvUS,
                          .otrosTributosUS = o.ventaDetail.otrosTributosUS,
                          .salidaCostoMN = o.ventaDetail.salidaCostoMN.GetValueOrDefault,
                          .salidaCostoME = o.ventaDetail.salidaCostoME.GetValueOrDefault,
                          .cantidadCredito = o.ventaDetail.cantidadCredito.GetValueOrDefault,
                          .cantidadDebito = o.ventaDetail.cantidadDebito.GetValueOrDefault,
                          .notaCreditoMN = o.ventaDetail.notaCreditoMN.GetValueOrDefault,
                          .notaCreditoME = o.ventaDetail.notaCreditoME.GetValueOrDefault,
                          .notaDebitoMN = o.ventaDetail.notaDebitoMN.GetValueOrDefault,
                          .notaDebitoME = o.ventaDetail.notaDebitoME.GetValueOrDefault,
                          .preEvento = o.ventaDetail.preEvento,
                          .idPadreDTVenta = o.ventaDetail.idPadreDTVenta.GetValueOrDefault,
                          .estadoMovimiento = o.ventaDetail.estadoMovimiento,
                          .tipoVenta = o.ventaDetail.tipoVenta,
                          .entregado = o.ventaDetail.entregado,
                          .estadoPago = o.ventaDetail.estadoPago,
                          .categoria = o.ventaDetail.categoria.GetValueOrDefault,
                          .estadoEntrega = o.ventaDetail.estadoEntrega,
                          .idCajaUsuario = o.ventaDetail.idCajaUsuario.GetValueOrDefault,
                          .codigoLote = o.ventaDetail.codigoLote.GetValueOrDefault,
                          .idbeneficio = o.ventaDetail.idbeneficio,
                          .tipobeneficio = o.ventaDetail.tipobeneficio,
                          .beneficiobase = o.ventaDetail.beneficiobase,
                          .bonificacion = o.ventaDetail.bonificacion,
                          .montoIcbper = o.ventaDetail.montoIcbper,
                          .montoIcbperUS = o.ventaDetail.montoIcbperUS,
                          .tasaIcbper = o.ventaDetail.tasaIcbper,
                          .detalleAdicional = o.ventaDetail.detalleAdicional,
                          .usuarioModificacion = o.ventaDetail.usuarioModificacion,
                          .fechaModificacion = o.ventaDetail.fechaModificacion})
        Next


        listadoAtributos = New List(Of entidadAtributos)
        For Each at In i.ClienteAtributos.ToList
            Dim atributo As New entidadAtributos With
            {
            .idEntidad = at.idEntidad,
            .idAtributo = at.idAtributo,
            .tipo = at.tipo,
            .valorAtributo = at.valorAtributo
            }
            listadoAtributos.Add(atributo)
        Next

        GetVentaID = New documentoventaAbarrotes With
                           {
                           .CustomEntidad = New entidad With
                                {
                                .idEntidad = i.cliente.idEntidad,
                                .email = i.cliente.email,
                                .nombreCompleto = i.cliente.nombreCompleto,
                                .nrodoc = i.cliente.nrodoc,
                                .tipoEntidad = i.cliente.tipoEntidad,
                                .tipoDoc = i.cliente.tipoDoc,
                                .direccion = i.cliente.direccion,
                                .entidadAtributos = listadoAtributos
                            },
                           .idDocumento = i.documentoventa.vent.idDocumento,
                           .tipoOperacion = i.documentoventa.vent.tipoOperacion,
                           .codigoLibro = i.documentoventa.vent.codigoLibro,
                           .idEmpresa = i.documentoventa.vent.idEmpresa,
                           .idEstablecimiento = i.documentoventa.vent.idEstablecimiento,
                           .tipoDocumento = i.documentoventa.vent.tipoDocumento,
                           .fechaLaboral = i.documentoventa.vent.fechaLaboral,
                           .fechaDoc = i.documentoventa.vent.fechaDoc,
                           .fechaVcto = i.documentoventa.vent.fechaVcto,
                           .horaVenta = i.documentoventa.vent.horaVenta,
                           .fechaConfirmacion = i.documentoventa.vent.fechaConfirmacion,
                           .fechaPeriodo = i.documentoventa.vent.fechaPeriodo,
                           .serie = i.documentoventa.vent.serie,
                           .numeroDoc = i.documentoventa.vent.numeroDoc,
                           .numeroDocNormal = i.documentoventa.vent.numeroDocNormal,
                           .serieVenta = i.documentoventa.vent.serieVenta,
                           .numeroVenta = i.documentoventa.vent.numeroVenta,
                           .idClientePedido = i.documentoventa.vent.idClientePedido,
                           .nombrePedido = i.documentoventa.vent.nombrePedido,
                           .idCliente = i.documentoventa.vent.idCliente,
                           .moneda = i.documentoventa.vent.moneda,
                           .tipoCambio = i.documentoventa.vent.tipoCambio,
                           .tasaIgv = i.documentoventa.vent.tasaIgv,
                           .bi01 = i.documentoventa.vent.bi01,
                           .bi02 = i.documentoventa.vent.bi02,
                           .isc01 = i.documentoventa.vent.isc01,
                           .isc02 = i.documentoventa.vent.isc02,
                           .igv01 = i.documentoventa.vent.igv01,
                           .igv02 = i.documentoventa.vent.igv02,
                           .otc01 = i.documentoventa.vent.otc01,
                           .otc02 = i.documentoventa.vent.otc02,
                           .bi01us = i.documentoventa.vent.bi01us,
                           .bi02us = i.documentoventa.vent.bi02us,
                           .isc01us = i.documentoventa.vent.isc01us,
                           .isc02us = i.documentoventa.vent.isc02us,
                           .igv01us = i.documentoventa.vent.igv01us,
                           .igv02us = i.documentoventa.vent.igv02us,
                           .otc01us = i.documentoventa.vent.otc01us,
                           .otc02us = i.documentoventa.vent.otc02us,
                           .ImporteNacional = i.documentoventa.vent.ImporteNacional,
                           .ImporteExtranjero = i.documentoventa.vent.ImporteExtranjero,
                           .importeCostoMN = i.documentoventa.vent.importeCostoMN,
                           .importeCostoME = i.documentoventa.vent.importeCostoME,
                           .estadoCobro = i.documentoventa.vent.estadoCobro,
                           .establecimientoCobro = i.documentoventa.vent.establecimientoCobro,
                           .entidadFinanciera = i.documentoventa.vent.entidadFinanciera,
                           .glosa = i.documentoventa.vent.glosa,
                           .terminos = i.documentoventa.vent.terminos,
                           .notaCredito = i.documentoventa.vent.notaCredito,
                           .tipoVenta = i.documentoventa.vent.tipoVenta,
                           .modulo = i.documentoventa.vent.modulo,
                           .idPadre = i.documentoventa.vent.idPadre,
                           .notificacionAsiento = i.documentoventa.vent.notificacionAsiento,
                           .estado = i.documentoventa.vent.estado,
                           .estadoEntrega = i.documentoventa.vent.estadoEntrega,
                           .nroImpresion = i.documentoventa.vent.nroImpresion,
                           .usuarioActualizacion = i.documentoventa.vent.usuarioActualizacion,
                           .fechaActualizacion = i.documentoventa.vent.fechaActualizacion,
                           .EnvioSunat = i.documentoventa.vent.EnvioSunat,
                           .ticketElectronico = i.documentoventa.vent.ticketElectronico,
                           .numeracionElectronica = i.documentoventa.vent.numeracionElectronica,
                           .icbper = i.documentoventa.vent.icbper,
                           .icbperus = i.documentoventa.vent.icbperus,
                           .descripcionVenta = i.documentoventa.vent.descripcionVenta,
                           .documentoventaAbarrotesDet = ListVenta
                           }



        '  Dim result = warmCountries.Join(europeanCountries, Function(warm) warm, Function(european) european, Function(warm, european) warm)

    End Function

    Public Function GetProformaCode(be As documento) As documentoventaAbarrotes
        Dim i = HeliosData.documentoventaAbarrotes.Join(HeliosData.entidad, Function(venta) venta.idCliente, Function(cli) cli.idEntidad, Function(venta, cli) New With {
                                                                                                                                    .vent = venta,
                                                                                                                                    .cliente = cli
                                                                                                                                          }) _
            .Include(Function(det) det.vent.documentoventaAbarrotesDet) _
            .Where(Function(o) o.vent.tipoDocumento = "9903" And o.vent.numeroVenta = be.nroDoc).Select(Function(x) New With
                                                          {
                                                          .cliente = x.cliente,
                                                          .documentoventa = x,
                                                          .documentoventaAbarrotesDetalle = x.vent.documentoventaAbarrotesDet.GroupJoin _
                                                            (HeliosData.detalleitem_equivalencias, Function(vt) vt.equivalencia_id, Function(eq) eq.equivalencia_id, Function(vt, eq) New With {
                                                            .detalleitem_equivalencias = eq.FirstOrDefault,
                                                            .detalle_venta = vt
                                                            }).GroupJoin(HeliosData.detalleitems, Function(g) CInt(g.detalle_venta.idItem), Function(gg) gg.codigodetalle, Function(g, gg) New With
                                                              {
                                                              .cliente = x.cliente,
                                                              .documentoventa = x,
                                                              .ventaDetail = g.detalle_venta,
                                                              .equivalencia = g.detalleitem_equivalencias,
                                                              .Producto = gg.FirstOrDefault
                                                              }).GroupJoin(HeliosData.detalleitemequivalencia_catalogos, Function(t) t.ventaDetail.catalogo_id, Function(tt) tt.idCatalogo, Function(t, tt) New With
                                                                                                                                                {
                                                                                                                                                .cliente = x.cliente,
                                                                                                                                                .documentoventa = x,
                                                                                                                                                .ventaDetail = t.ventaDetail,
                                                                                                                                                .equivalencia = t.equivalencia,
                                                                                                                                                .Producto = t.Producto,
                                                                                                                                                .catalogo = tt.FirstOrDefault
                                                                                                                                                })
                                                                          }).SingleOrDefault

        'Dim i = HeliosData.documentoventaAbarrotes _
        '    .Include(Function(det) det.documentoventaAbarrotesDet) _
        '    .Where(Function(o) o.idDocumento = be.idDocumento).Select(Function(x) New With
        '                                                  {
        '                                                  .documentoventa = x,
        '                                                  .documentoventaAbarrotesDetalle = x.documentoventaAbarrotesDet.Join _
        '                                                    (HeliosData.detalleitem_equivalencias, Function(vt) vt.equivalencia_id, Function(eq) eq.equivalencia_id, Function(vt, eq) New With {
        '                                                    .detalleitem_equivalencias = eq,
        '                                                    .detalle_venta = vt
        '                                                    })
        '                                                   }).SingleOrDefault


        If i Is Nothing Then Return Nothing

        GetProformaCode = New documentoventaAbarrotes
        Dim ListVenta As New List(Of documentoventaAbarrotesDet)

        Dim equivalencia_table As detalleitem_equivalencias
        Dim producto_table As detalleitems
        Dim catalogo_table As detalleitemequivalencia_catalogos


        For Each o In i.documentoventaAbarrotesDetalle.ToList
            If o.equivalencia IsNot Nothing Then
                equivalencia_table = New detalleitem_equivalencias With
                            {
                            .codigodetalle = o.equivalencia.codigodetalle,
                            .equivalencia_id = o.equivalencia.equivalencia_id,
                            .detalle = o.equivalencia.detalle,
                            .unidadComercial = o.equivalencia.unidadComercial,
                            .contenido = o.equivalencia.contenido,
                            .fraccionUnidad = o.equivalencia.fraccionUnidad,
                            .estado = o.equivalencia.estado
                            }
            Else
                equivalencia_table = Nothing
            End If

            If o.Producto IsNot Nothing Then
                producto_table = New detalleitems With
                            {
                            .codigodetalle = o.Producto.codigodetalle,
                            .idItem = o.Producto.idItem,
                            .idEmpresa = o.Producto.idEmpresa,
                            .idEstablecimiento = o.Producto.idEstablecimiento,
                            .descripcionItem = o.Producto.descripcionItem,
                            .presentacion = o.Producto.presentacion,
                            .unidad1 = o.Producto.unidad1,
                            .unidad2 = o.Producto.unidad2,
                            .tipoExistencia = o.Producto.tipoExistencia,
                            .origenProducto = o.Producto.origenProducto,
                            .tipoProducto = o.Producto.tipoProducto,
                            .composicion = o.Producto.composicion,
                            .productoRestringido = o.Producto.productoRestringido,
                            .estado = o.Producto.estado
                            }
            Else
                producto_table = Nothing
            End If


            If o.catalogo IsNot Nothing Then
                catalogo_table = New detalleitemequivalencia_catalogos With
                          {
                          .idCatalogo = o.catalogo.idCatalogo,
                          .codigodetalle = o.catalogo.codigodetalle,
                          .equivalencia_id = o.catalogo.equivalencia_id,
                          .nombre_corto = o.catalogo.nombre_corto,
                          .nombre_largo = o.catalogo.nombre_largo,
                          .predeterminado = o.catalogo.predeterminado,
                          .estado = o.catalogo.estado
                          }
            Else
                catalogo_table = Nothing
            End If

            ListVenta.Add(New documentoventaAbarrotesDet With
                          {
                          .CustomEquivalencia = equivalencia_table,
                          .CustomProducto = producto_table,
                          .CustomCatalogo = catalogo_table,
                          .CodigoCosto = o.ventaDetail.secuencia,
                          .idDocumento = o.ventaDetail.idDocumento,
                          .equivalencia_id = If(o.equivalencia IsNot Nothing, o.equivalencia.equivalencia_id, 0),
                          .secuencia = o.ventaDetail.secuencia,
                          .idAlmacenOrigen = o.ventaDetail.idAlmacenOrigen,
                          .establecimientoOrigen = o.ventaDetail.establecimientoOrigen,
                          .cuentaOrigen = o.ventaDetail.cuentaOrigen,
                          .idItem = o.ventaDetail.idItem,
                          .nombreItem = o.ventaDetail.nombreItem,
                          .fechaVcto = o.ventaDetail.fechaVcto,
                          .tipoExistencia = o.ventaDetail.tipoExistencia,
                          .destino = o.ventaDetail.destino,
                          .unidad1 = o.ventaDetail.unidad1,
                          .monto1 = o.ventaDetail.monto1,
                          .unidad2 = o.ventaDetail.unidad2,
                          .monto2 = o.ventaDetail.monto2,
                          .precioUnitario = o.ventaDetail.precioUnitario,
                          .precioUnitarioUS = o.ventaDetail.precioUnitarioUS,
                          .importeMN = o.ventaDetail.importeMN,
                          .importeME = o.ventaDetail.importeME,
                          .importeMNK = o.ventaDetail.importeMNK,
                          .importeMEK = o.ventaDetail.importeMEK,
                          .descuentoMN = o.ventaDetail.descuentoMN,
                          .descuentoME = o.ventaDetail.descuentoME,
                          .montokardex = o.ventaDetail.montokardex,
                          .montoIsc = o.ventaDetail.montoIsc,
                          .montoIgv = o.ventaDetail.montoIgv,
                          .otrosTributos = o.ventaDetail.otrosTributos,
                          .montokardexUS = o.ventaDetail.montokardexUS,
                          .montoIscUS = o.ventaDetail.montoIscUS,
                          .montoIgvUS = o.ventaDetail.montoIgvUS,
                          .otrosTributosUS = o.ventaDetail.otrosTributosUS,
                          .salidaCostoMN = o.ventaDetail.salidaCostoMN,
                          .salidaCostoME = o.ventaDetail.salidaCostoME,
                          .cantidadCredito = o.ventaDetail.cantidadCredito,
                          .cantidadDebito = o.ventaDetail.cantidadDebito,
                          .notaCreditoMN = o.ventaDetail.notaCreditoMN,
                          .notaCreditoME = o.ventaDetail.notaCreditoME,
                          .notaDebitoMN = o.ventaDetail.notaDebitoMN,
                          .notaDebitoME = o.ventaDetail.notaDebitoME,
                          .preEvento = o.ventaDetail.preEvento,
                          .idPadreDTVenta = o.ventaDetail.idPadreDTVenta,
                          .estadoMovimiento = o.ventaDetail.estadoMovimiento,
                          .tipoVenta = o.ventaDetail.tipoVenta,
                          .entregado = o.ventaDetail.entregado,
                          .estadoPago = o.ventaDetail.estadoPago,
                          .categoria = o.ventaDetail.categoria,
                          .estadoEntrega = o.ventaDetail.estadoEntrega,
                          .idCajaUsuario = o.ventaDetail.idCajaUsuario,
                          .codigoLote = o.ventaDetail.codigoLote,
                          .idbeneficio = o.ventaDetail.idbeneficio,
                          .tipobeneficio = o.ventaDetail.tipobeneficio,
                          .beneficiobase = o.ventaDetail.beneficiobase,
                          .bonificacion = o.ventaDetail.bonificacion,
                          .usuarioModificacion = o.ventaDetail.usuarioModificacion,
                          .fechaModificacion = o.ventaDetail.fechaModificacion})
        Next

        GetProformaCode = New documentoventaAbarrotes With
                           {
                           .CustomEntidad = New entidad With
                                {
                                .idEntidad = i.cliente.idEntidad,
                                .email = i.cliente.email,
                                .nombreCompleto = i.cliente.nombreCompleto,
                                .nrodoc = i.cliente.nrodoc,
                                .tipoEntidad = i.cliente.tipoEntidad,
                                .tipoDoc = i.cliente.tipoDoc,
                                .direccion = i.cliente.direccion
                            },
                           .idDocumento = i.documentoventa.vent.idDocumento,
                           .tipoOperacion = i.documentoventa.vent.tipoOperacion,
                           .codigoLibro = i.documentoventa.vent.codigoLibro,
                           .idEmpresa = i.documentoventa.vent.idEmpresa,
                           .idEstablecimiento = i.documentoventa.vent.idEstablecimiento,
                           .tipoDocumento = i.documentoventa.vent.tipoDocumento,
                           .fechaLaboral = i.documentoventa.vent.fechaLaboral,
                           .fechaDoc = i.documentoventa.vent.fechaDoc,
                           .fechaVcto = i.documentoventa.vent.fechaVcto,
                           .horaVenta = i.documentoventa.vent.horaVenta,
                           .fechaConfirmacion = i.documentoventa.vent.fechaConfirmacion,
                           .fechaPeriodo = i.documentoventa.vent.fechaPeriodo,
                           .serie = i.documentoventa.vent.serie,
                           .numeroDoc = i.documentoventa.vent.numeroDoc,
                           .numeroDocNormal = i.documentoventa.vent.numeroDocNormal,
                           .serieVenta = i.documentoventa.vent.serieVenta,
                           .numeroVenta = i.documentoventa.vent.numeroVenta,
                           .idClientePedido = i.documentoventa.vent.idClientePedido,
                           .nombrePedido = i.documentoventa.vent.nombrePedido,
                           .idCliente = i.documentoventa.vent.idCliente,
                           .moneda = i.documentoventa.vent.moneda,
                           .tipoCambio = i.documentoventa.vent.tipoCambio,
                           .tasaIgv = i.documentoventa.vent.tasaIgv,
                           .bi01 = i.documentoventa.vent.bi01,
                           .bi02 = i.documentoventa.vent.bi02,
                           .isc01 = i.documentoventa.vent.isc01,
                           .isc02 = i.documentoventa.vent.isc02,
                           .igv01 = i.documentoventa.vent.igv01,
                           .igv02 = i.documentoventa.vent.igv02,
                           .otc01 = i.documentoventa.vent.otc01,
                           .otc02 = i.documentoventa.vent.otc02,
                           .bi01us = i.documentoventa.vent.bi01us,
                           .bi02us = i.documentoventa.vent.bi02us,
                           .isc01us = i.documentoventa.vent.isc01us,
                           .isc02us = i.documentoventa.vent.isc02us,
                           .igv01us = i.documentoventa.vent.igv01us,
                           .igv02us = i.documentoventa.vent.igv02us,
                           .otc01us = i.documentoventa.vent.otc01us,
                           .otc02us = i.documentoventa.vent.otc02us,
                           .ImporteNacional = i.documentoventa.vent.ImporteNacional,
                           .ImporteExtranjero = i.documentoventa.vent.ImporteExtranjero,
                           .importeCostoMN = i.documentoventa.vent.importeCostoMN,
                           .importeCostoME = i.documentoventa.vent.importeCostoME,
                           .estadoCobro = i.documentoventa.vent.estadoCobro,
                           .establecimientoCobro = i.documentoventa.vent.establecimientoCobro,
                           .entidadFinanciera = i.documentoventa.vent.entidadFinanciera,
                           .glosa = i.documentoventa.vent.glosa,
                           .terminos = i.documentoventa.vent.terminos,
                           .notaCredito = i.documentoventa.vent.notaCredito,
                           .tipoVenta = i.documentoventa.vent.tipoVenta,
                           .modulo = i.documentoventa.vent.modulo,
                           .idPadre = i.documentoventa.vent.idPadre,
                           .notificacionAsiento = i.documentoventa.vent.notificacionAsiento,
                           .estado = i.documentoventa.vent.estado,
                           .estadoEntrega = i.documentoventa.vent.estadoEntrega,
                           .nroImpresion = i.documentoventa.vent.nroImpresion,
                           .usuarioActualizacion = i.documentoventa.vent.usuarioActualizacion,
                           .fechaActualizacion = i.documentoventa.vent.fechaActualizacion,
                           .EnvioSunat = i.documentoventa.vent.EnvioSunat,
                           .ticketElectronico = i.documentoventa.vent.ticketElectronico,
                           .numeracionElectronica = i.documentoventa.vent.numeracionElectronica,
                           .documentoventaAbarrotesDet = ListVenta
                           }



        '  Dim result = warmCountries.Join(europeanCountries, Function(warm) warm, Function(european) european, Function(warm, european) warm)

    End Function

    Public Function SaveNotaCreditoFE(objDocumento As documento, nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()

                Dim codVentaOriginal = objDocumento.documentoventaAbarrotes.idPadre
                Dim listaArticulosVendidos = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = codVentaOriginal).ToList

                Dim codDoc = InsertNotaCreditoFE(objDocumento, nDocumentoNota, nDocumentoSaldoVenta)
                If listaArticulosVendidos.Count > 0 Then
                    Dim fechaEnvioAlmacen = objDocumento.documentoventaAbarrotes.fechaDoc.Value
                    For Each a In listaArticulosVendidos
                        Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                        New InventarioMovimiento With {
                        .idAlmacen = a.idAlmacen,
                        .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                        .tipoProducto = a.tipoProducto,
                        .idItem = a.idItem,
                        .nrolote = a.nrolote}, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(lista)
                    Next
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDoc
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Function InsertNotaCreditoFE(objDocumento As documento, nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
        Dim DocumentoBL As New documentoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim CAN_BOF As Decimal = 0
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0

        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0
        Dim cajaBL As New documentoCajaDetalleBL

        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer = 0
        Dim InventarioMovimientoBL As New InventarioMovimientoBL
        Dim t As New totalesAlmacen



        Try
            Using ts As New TransactionScope()


                Dim num = numeracionBL.GenerarNumero(objDocumento.documentoventaAbarrotes.idEstablecimiento, objDocumento.documentoventaAbarrotes.TipoAfectado, "07") '"NTC", "07")
                objDocumento.nroDoc = num.serie & "-" & num.valorInicial
                objDocumento.documentoventaAbarrotes.serieVenta = num.serie
                objDocumento.documentoventaAbarrotes.numeroVenta = num.valorInicial
                'cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentoventaAbarrotes.IdNumeracion))
                'objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
                'objDocumento.documentoventaAbarrotes.numeroVenta = cval



                DocumentoBL.Insert(objDocumento)
                Dim venta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.idPadre).FirstOrDefault

                Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                Dim IdDocNotaCab = objDocumento.idDocumento

                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    cajaBL.ActualizarItemsPagos(i, objDocumento.documentoventaAbarrotes.idPadre)
                Next

                Select Case objDocumento.documentoventaAbarrotes.notaCredito
                    Case "01", "02", "06"

                        Dim idDocVenta = objDocumento.documentoventaAbarrotes.idPadre

                        Dim lista = (From i In HeliosData.InventarioMovimiento
                                     Where i.idDocumento = idDocVenta).ToList

                        For Each i In lista

                            If objDocumento.documentoventaAbarrotes.notaCredito = "01" Then

                                GetEntradaInventarioNC(i, objDocumento.documentoventaAbarrotes, "9933")
                            ElseIf objDocumento.documentoventaAbarrotes.notaCredito = "02" Then

                                GetEntradaInventarioNC(i, objDocumento.documentoventaAbarrotes, "9915")
                            ElseIf objDocumento.documentoventaAbarrotes.notaCredito = "06" Then
                                GetEntradaInventarioNC(i, objDocumento.documentoventaAbarrotes, "9916")
                            End If
                        Next

                    Case "07"

                        For Each i In (From z In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                                       Where Not z.tipoExistencia = TipoExistencia.ServicioGasto).ToList

                            Dim pm As Decimal = 0
                            Dim cant As Decimal = 0
                            Dim costo As Decimal = 0
                            Dim codigolote As Integer = 0
                            Dim cantidadEnviada As Decimal = 0

                            cantidadEnviada = i.monto1

                            Dim idDocVenta = objDocumento.documentoventaAbarrotes.idPadre

                            Dim lista2 = (From Y In HeliosData.InventarioMovimiento
                                          Where Y.idDocumento = idDocVenta
                                          Select Y.idItem,
                                                 Y.nrolote,
                                                 Y.cantidad,
                                                Y.montoOther,
                                              Y.idAlmacen,
                                                nota = (Aggregate k In HeliosData.documentoventaAbarrotes
                                                        Join p In HeliosData.documentoventaAbarrotes On k.idPadre Equals p.idDocumento
                                                        Join inv In HeliosData.InventarioMovimiento On k.idDocumento Equals inv.idDocumento
                                                        Where p.idDocumento = idDocVenta And k.tipoDocumento = "07" And
                                                        inv.nrolote = Y.nrolote And inv.tipoRegistro = "E" And inv.idItem = Y.idItem
                                                        Into NCmn = Sum(inv.cantidad))).ToList

                            For Each h In lista2
                                If cantidadEnviada > 0 Then

                                    If i.idItem = h.idItem Then

                                        Dim cantAct As Decimal = 0

                                        cantAct = (h.cantidad * -1) - h.nota.GetValueOrDefault

                                        If cantAct > 0 Then

                                            If cantAct >= cantidadEnviada Then
                                                cant = cantidadEnviada
                                            ElseIf cantAct <= cantidadEnviada Then
                                                cant = cantAct

                                            End If

                                            pm = h.montoOther / (h.cantidad * -1)
                                            codigolote = h.nrolote

                                            costo = cant * pm

                                            i.salidaCostoMN = costo
                                            i.precioUnitario = pm
                                            i.codigoLote = codigolote
                                            i.monto1 = cant
                                            i.idAlmacenOrigen = h.idAlmacen
                                            i.idDocuemntoNotaInv = idDocVenta


                                            GetEntradaInventarioParcialNC(i, objDocumento.documentoventaAbarrotes)

                                            cantidadEnviada = cantidadEnviada - cant

                                        End If


                                    End If
                                End If
                            Next

                        Next

                End Select

                'If objDocumento.documentoventaAbarrotes.idPSE > 0 Then
                '    If My.Computer.Network.IsAvailable = True Then
                '        If My.Computer.Network.Ping("148.102.27.231") Then
                '            If Gempresas.ubigeo > 0 Then
                '                EnviarNotaCreditoElectronico(objDocumento.documentoventaAbarrotes)
                '            End If
                '        End If
                '    End If
                'End If


                If Not IsNothing(objDocumento.documentoGuia) Then
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If
                End If

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If
                'Cobrando Saldo de la venta cuando es una venta al credito
                '    If objDocumento.documentoventaAbarrotes.ImporteDevMN > 0 Then
                'If objDocumento.documentoventaAbarrotes.SaldoVentaMN > 0 Then
                If Not IsNothing(nDocumentoSaldoVenta.documentoCaja) Then
                    If Not IsNothing(nDocumentoSaldoVenta.documentoCaja.idEmpresa) Then
                        SaveCaja(nDocumentoSaldoVenta, objDocumento.documentoventaAbarrotes.idPadre)
                    End If
                End If
                '-----------------------------------------------------------------------------------
                'creando documento de excendente por devolucion de dinero
                If Not IsNothing(objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion) Then

                    objDocumento.documentoventaAbarrotes.idPadre = IdDocNotaCab
                    Dim codGenerado = GrabarDocumentoDevolucion(objDocumento)
                    'Select Case objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion
                    '    Case TIPO_VENTA.PAGO.COBRADO
                    '        If Not IsNothing(nDocumentoNota.idEmpresa) Then
                    '            Dim listaPagos As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = codGenerado).ToList
                    '            SaveCajaVenta(nDocumentoNota, codGenerado, listaPagos)
                    '        End If
                    '    Case TIPO_VENTA.PAGO.PENDIENTE_PAGO

                    'End Select

                End If


                Dim ventaDetalle = (From n In HeliosData.documentoventaAbarrotesDet
                                    Where n.idDocumento = venta.idDocumento AndAlso n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO).Count

                If ventaDetalle > 0 Then
                    venta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                Else
                    'venta.estadoCobro = TIPO_VENTA.PAGO.COBRADO
                    venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito
                End If
                'venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito




                HeliosData.SaveChanges()
                ts.Complete()
                Return IdDocNotaCab 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    'Function InsertNotaCreditoFE(objDocumento As documento, nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
    '    Dim DocumentoBL As New documentoBL
    '    Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
    '    Dim inventario As New InventarioMovimientoBL
    '    Dim asientoBL As New AsientoBL
    '    Dim totalesBL As New totalesAlmacenBL
    '    Dim guiaBL As New documentoGuiaBL
    '    Dim docVenta As New documentoventaAbarrotesBL
    '    Dim CAN_BOF As Decimal = 0
    '    Dim saldo_Final As Decimal = 0
    '    Dim saldo_Finalme As Decimal = 0
    '    Dim saldo_Pago As Decimal = 0
    '    Dim saldo_Pagome As Decimal = 0

    '    Dim saldoItem As Decimal = 0
    '    Dim saldoItemME As Decimal = 0
    '    Dim cajaBL As New documentoCajaDetalleBL

    '    Dim numeracionBL As New numeracionBoletasBL
    '    Dim cval As Integer = 0
    '    Dim InventarioMovimientoBL As New InventarioMovimientoBL
    '    Dim t As New totalesAlmacen



    '    Try
    '        Using ts As New TransactionScope()


    '            Dim num = numeracionBL.GenerarNumero(objDocumento.documentoventaAbarrotes.idEstablecimiento, objDocumento.documentoventaAbarrotes.TipoAfectado, "07") '"NTC", "07")
    '            objDocumento.nroDoc = num.serie & "-" & num.valorInicial
    '            objDocumento.documentoventaAbarrotes.serieVenta = num.serie
    '            objDocumento.documentoventaAbarrotes.numeroVenta = num.valorInicial
    '            'cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentoventaAbarrotes.IdNumeracion))
    '            'objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
    '            'objDocumento.documentoventaAbarrotes.numeroVenta = cval



    '            DocumentoBL.Insert(objDocumento)
    '            Dim venta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.idPadre).FirstOrDefault

    '            Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

    '            Dim IdDocNotaCab = objDocumento.idDocumento

    '            For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
    '                ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
    '                cajaBL.ActualizarItemsPagos(i, objDocumento.documentoventaAbarrotes.idPadre)
    '            Next

    '            Select Case objDocumento.documentoventaAbarrotes.notaCredito
    '                Case "01", "02", "06"

    '                    Dim idDocVenta = objDocumento.documentoventaAbarrotes.idPadre

    '                    Dim lista = (From i In HeliosData.InventarioMovimiento
    '                                 Where i.idDocumento = idDocVenta).ToList

    '                    For Each i In lista

    '                        If objDocumento.documentoventaAbarrotes.notaCredito = "01" Then

    '                            GetEntradaInventarioNC(i, objDocumento.documentoventaAbarrotes, "9933")
    '                        ElseIf objDocumento.documentoventaAbarrotes.notaCredito = "02" Then

    '                            GetEntradaInventarioNC(i, objDocumento.documentoventaAbarrotes, "9915")
    '                        ElseIf objDocumento.documentoventaAbarrotes.notaCredito = "06" Then
    '                            GetEntradaInventarioNC(i, objDocumento.documentoventaAbarrotes, "9916")
    '                        End If
    '                    Next

    '                Case "07"

    '                    For Each i In (From z In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
    '                                   Where Not z.tipoExistencia = TipoExistencia.ServicioGasto).ToList

    '                        Dim pm As Decimal = 0
    '                        Dim cant As Decimal = 0
    '                        Dim costo As Decimal = 0
    '                        Dim codigolote As Integer = 0
    '                        Dim cantidadEnviada As Decimal = 0

    '                        cantidadEnviada = i.monto1

    '                        Dim idDocVenta = objDocumento.documentoventaAbarrotes.idPadre

    '                        Dim lista2 = (From Y In HeliosData.InventarioMovimiento
    '                                      Where Y.idDocumento = idDocVenta
    '                                      Select Y.idItem,
    '                                             Y.nrolote,
    '                                             Y.cantidad,
    '                                            Y.montoOther,
    '                                          Y.idAlmacen,
    '                                            nota = (Aggregate k In HeliosData.documentoventaAbarrotes
    '                                                    Join p In HeliosData.documentoventaAbarrotes On k.idPadre Equals p.idDocumento
    '                                                    Join inv In HeliosData.InventarioMovimiento On k.idDocumento Equals inv.idDocumento
    '                                                    Where p.idDocumento = idDocVenta And k.tipoDocumento = "07" And
    '                                                    inv.nrolote = Y.nrolote And inv.tipoRegistro = "E" And inv.idItem = Y.idItem
    '                                                    Into NCmn = Sum(inv.cantidad))).ToList

    '                        For Each h In lista2
    '                            If cantidadEnviada > 0 Then

    '                                If i.idItem = h.idItem Then

    '                                    Dim cantAct As Decimal = 0

    '                                    cantAct = (h.cantidad * -1) - h.nota.GetValueOrDefault

    '                                    If cantAct > 0 Then

    '                                        If cantAct >= cantidadEnviada Then
    '                                            cant = cantidadEnviada
    '                                        ElseIf cantAct <= cantidadEnviada Then
    '                                            cant = cantAct

    '                                        End If

    '                                        pm = h.montoOther / (h.cantidad * -1)
    '                                        codigolote = h.nrolote

    '                                        costo = cant * pm

    '                                        i.salidaCostoMN = costo
    '                                        i.precioUnitario = pm
    '                                        i.codigoLote = codigolote
    '                                        i.monto1 = cant
    '                                        i.idAlmacenOrigen = h.idAlmacen
    '                                        i.idDocuemntoNotaInv = idDocVenta


    '                                        GetEntradaInventarioParcialNC(i, objDocumento.documentoventaAbarrotes)

    '                                        cantidadEnviada = cantidadEnviada - cant

    '                                    End If


    '                                End If
    '                            End If
    '                        Next

    '                    Next

    '            End Select

    '            'If objDocumento.documentoventaAbarrotes.idPSE > 0 Then
    '            '    If My.Computer.Network.IsAvailable = True Then
    '            '        If My.Computer.Network.Ping("148.102.27.231") Then
    '            '            If Gempresas.ubigeo > 0 Then
    '            '                EnviarNotaCreditoElectronico(objDocumento.documentoventaAbarrotes)
    '            '            End If
    '            '        End If
    '            '    End If
    '            'End If


    '            If Not IsNothing(objDocumento.documentoGuia) Then
    '                If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
    '                    guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
    '                End If
    '            End If

    '            'guardando asientos contables
    '            If Not IsNothing(objDocumento.asiento) Then
    '                If objDocumento.asiento.Count > 0 Then
    '                    asientoBL.SavebyGroupDoc(objDocumento)
    '                End If
    '            End If
    '            'Cobrando Saldo de la venta cuando es una venta al credito
    '            '    If objDocumento.documentoventaAbarrotes.ImporteDevMN > 0 Then
    '            'If objDocumento.documentoventaAbarrotes.SaldoVentaMN > 0 Then
    '            If Not IsNothing(nDocumentoSaldoVenta.documentoCaja) Then
    '                If Not IsNothing(nDocumentoSaldoVenta.documentoCaja.idEmpresa) Then
    '                    SaveCaja(nDocumentoSaldoVenta, objDocumento.documentoventaAbarrotes.idPadre)
    '                End If
    '            End If
    '            '-----------------------------------------------------------------------------------
    '            'creando documento de excendente por devolucion de dinero
    '            If Not IsNothing(objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion) Then
    '                Dim codGenerado = GrabarDocumentoDevolucion(objDocumento)
    '                'Select Case objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion
    '                '    Case TIPO_VENTA.PAGO.COBRADO
    '                '        If Not IsNothing(nDocumentoNota.idEmpresa) Then
    '                '            Dim listaPagos As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = codGenerado).ToList
    '                '            SaveCajaVenta(nDocumentoNota, codGenerado, listaPagos)
    '                '        End If
    '                '    Case TIPO_VENTA.PAGO.PENDIENTE_PAGO

    '                'End Select

    '            End If


    '            Dim ventaDetalle = (From n In HeliosData.documentoventaAbarrotesDet
    '                                Where n.idDocumento = venta.idDocumento AndAlso n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO).Count

    '            If ventaDetalle > 0 Then
    '                venta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO
    '            Else
    '                'venta.estadoCobro = TIPO_VENTA.PAGO.COBRADO
    '                venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito
    '            End If
    '            'venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito




    '            HeliosData.SaveChanges()
    '            ts.Complete()
    '            Return IdDocNotaCab 'objDocumento.idDocumento
    '        End Using
    '    Catch ex As Exception
    '        Throw ex
    '    End Try
    'End Function


    Private Sub GetEntradaInventarioParcialNC(i As documentoventaAbarrotesDet, venta As documentoventaAbarrotes)
        Dim obj As New InventarioMovimiento

        'Dim prod = i.CustomProducto
        'Dim eq = i.CustomEquivalencia
        'Dim representacion = eq.contenido.GetValueOrDefault
        'Dim equivalencia = 1 / representacion        'Dim itemventa = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.secuencia = i.secuencia).SingleOrDefault
        ''Dim equivalencia = HeliosData.detalleitem_equivalencias.Where(Function(u) u.equivalencia_id = itemventa.equivalencia_id).SingleOrDefault
        'Dim cantidaTotal = i.notaCreditoMN * equivalencia ' i.monto1 * equivalencia

        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = i.secuencia
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idEstablecimiento
            obj.idAlmacen = i.idAlmacenOrigen
            obj.nrolote = i.codigoLote ' i.codigoLote
            'obj.tipoOperacion = "07"
            obj.tipoOperacion = i.TipoOperacion
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serieVenta
            obj.numero = venta.numeroVenta
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = i.idDocuemntoNotaInv
            obj.descripcion = i.nombreItem
            obj.fechaLaboral = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.fecha = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.tipoRegistro = "E"
            obj.destinoGravadoItem = i.destino
            obj.tipoProducto = i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = i.monto1 'i.notaCreditoMN ' cantidaTotal ' i.monto1 '* equivalencia.fraccionUnidad)   't.CantidadUsada  -1 ' i.monto1  -1
            obj.unidad = i.unidad1  'i.unidad1
            obj.cantidad2 = 0
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = i.salidaCostoMN 't.CantidadUsada * i.precioUnitario
            obj.montoUSD = i.salidaCostoME.GetValueOrDefault 't.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = i.precioUnitario 't.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now

            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub GetEntradaInventarioNC(i As InventarioMovimiento, venta As documentoventaAbarrotes, operacion As String)
        'Dim itemventa = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.secuencia = i.idorigenDetalle).SingleOrDefault
        'Dim equivalencia = HeliosData.detalleitem_equivalencias.Where(Function(u) u.equivalencia_id = itemventa.equivalencia_id).SingleOrDefault


        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = i.idorigenDetalle 'i.Secuencia
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idEstablecimiento
            obj.idAlmacen = i.idAlmacen 'i.idAlmacenOrigen
            obj.nrolote = i.nrolote  ' t.codigoLote ' i.codigoLote
            obj.tipoOperacion = operacion '"07"
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serieVenta
            obj.numero = venta.numeroVenta
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idDocumento
            obj.descripcion = i.descripcion 'i.nombreItem
            obj.fechaLaboral = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.fecha = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.tipoRegistro = "E"
            obj.destinoGravadoItem = i.destinoGravadoItem 'i.destino
            obj.tipoProducto = i.tipoProducto  'i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = i.cantidad * -1 ' (i.cantidad * equivalencia.fraccionUnidad) * -1 'i.cantidad - 1 't.CantidadUsada  -1 ' i.monto1 * -1
            obj.unidad = i.unidad  'i.unidad1
            obj.cantidad2 = 0
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = i.montoOther 'i.monto 't.CantidadUsada * i.precioUnitario
            obj.montoUSD = 0 'i.montoUSD 't.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = i.montoOther 't.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now
            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function GetDevolucionesByDocumentoNota(be As documentoventaAbarrotes) As documentoventaAbarrotes
        GetDevolucionesByDocumentoNota = New documentoventaAbarrotes

        Dim lista As New List(Of String)
        lista.Add(General.Anticipo.EstadoCobroNotaCredito.DevolucionTramitePendiente)
        lista.Add(General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteParcial)
        lista.Add(General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteCompleto)

        Dim obj As documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documentoventaAbarrotes
                        Join ent In HeliosData.entidad
                              On ent.idEntidad Equals doc.idCliente
                        Group Join caja In HeliosData.documentoCajaDetalle
                            On caja.documentoAfectado Equals doc.idDocumento
                            Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where
                            doc.idDocumento = be.idDocumento And
                            lista.Contains(doc.estadoCobro)
                        Group c By
                            doc.idDocumento,
                            doc.numeroDoc,
                            doc.fechaDoc,
                            doc.serie,
                            doc.numeroDocNormal,
                            doc.serieVenta,
                            doc.numeroVenta,
                            ent.idEntidad,
                            ent.tipoEntidad,
                            ent.nombreCompleto,
                            ent.nrodoc,
                            doc.ImporteNacional,
                            doc.ImporteExtranjero,
                            doc.estadoCobro
                            Into g = Group
                        Select New With
                            {
                             idDocumento,
                             numeroDoc,
                             fechaDoc,
                            serie,
                             serieVenta,
                            numeroVenta,
                            numeroDocNormal,
                            idEntidad,
                            tipoEntidad,
                            nombreCompleto,
                            nrodoc,
                            ImporteNacional,
                            ImporteExtranjero,
                            estadoCobro,
                            g, .sumaDevoluciones = g.Sum(Function(c) c.montoSoles)
                            }).FirstOrDefault

        obj = New documentoventaAbarrotes
        If consulta IsNot Nothing Then
            obj.idDocumento = consulta.idDocumento
            obj.fechaDoc = consulta.fechaDoc
            obj.numeroDocNormal = $"{consulta.serie}-{consulta.numeroDocNormal}"
            obj.CustomEntidad = New entidad With
                    {
                    .idEntidad = consulta.idEntidad,
                    .tipoEntidad = consulta.tipoEntidad,
                    .nombreCompleto = consulta.nombreCompleto,
                    .nrodoc = consulta.nrodoc
                    }
            obj.ImporteNacional = consulta.ImporteNacional
            obj.ImporteExtranjero = consulta.ImporteExtranjero
            obj.ImporteDevMN = consulta.sumaDevoluciones.GetValueOrDefault
            obj.estadoCobro = consulta.estadoCobro
            GetDevolucionesByDocumentoNota = obj
        End If

    End Function

    Public Sub GrabarDocumentoCajaDevolucionAnt(be As documento)
        Dim anticipoBL As New documentoventaAbarrotesBL
        Using ts As New TransactionScope
            PagoDeLaDevolucion(be)
            Dim docSaldo = anticipoBL.GetDevolucionesByDocumentoNota(New documentoventaAbarrotes With {.idDocumento = be.idDocumento})

            Dim documentoDev = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).Single

            If docSaldo.SaldoReclamacion.GetValueOrDefault <= 0 Then
                documentoDev.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteCompleto
            Else
                If docSaldo.ImporteDevMN.GetValueOrDefault > 0 Then
                    documentoDev.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteParcial
                Else
                    documentoDev.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramitePendiente
                End If
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub EliminarPagoDevolucion(be As documento)
        Dim anticipoBL As New documentoventaAbarrotesBL
        Dim documentoBL As New documentoBL
        Using ts As New TransactionScope
            documentoBL.DeleteSingleVariable(be.idDocumento)
            Dim docSaldo = anticipoBL.GetDevolucionesByDocumentoNota(New documentoventaAbarrotes With {.idDocumento = be.idPrestamo})

            Dim documentoDev = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idPrestamo).Single

            If docSaldo.SaldoReclamacion.GetValueOrDefault <= 0 Then
                documentoDev.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteCompleto
            Else
                If docSaldo.ImporteDevMN.GetValueOrDefault > 0 Then
                    documentoDev.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteParcial
                Else
                    documentoDev.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramitePendiente
                End If
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub PagoDeLaDevolucion(be As documento)
        Using ts As New TransactionScope
            If Not IsNothing(be.ListaCustomDocumento) Then
                For Each i In be.ListaCustomDocumento
                    SaveCajaDev(i)
                Next
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub SaveCajaDev(nCaja As documento)
        Dim nDetalle As documentoCajaDetalle
        Dim DocumentoBL As New documentoBL
        Dim documentoCajaBL As New documentoCajaBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Using ts As New TransactionScope
            DocumentoBL.Insert(nCaja)
            nCaja.documentoCaja.numeroDoc = nCaja.nroDoc
            documentoCajaBL.Insert(nCaja.documentoCaja, nCaja.idDocumento)
            For Each i In nCaja.documentoCaja.documentoCajaDetalle
                nDetalle = New documentoCajaDetalle
                nDetalle.idDocumento = nCaja.idDocumento
                nDetalle.documentoAfectado = i.documentoAfectado
                nDetalle.documentoAfectadodetalle = i.documentoAfectadodetalle
                nDetalle.secuencia = i.secuencia
                nDetalle.fecha = i.fecha
                nDetalle.idItem = i.idItem
                nDetalle.DetalleItem = i.DetalleItem
                nDetalle.montoSoles = i.montoSoles
                nDetalle.montoSolesTransacc = i.montoSoles
                nDetalle.montoUsd = i.montoUsd
                nDetalle.montoUsdTransacc = i.montoUsd
                nDetalle.entregado = i.entregado
                nDetalle.diferTipoCambio = i.diferTipoCambio
                nDetalle.tipoCambioTransacc = i.tipoCambioTransacc
                nDetalle.idCajaUsuario = i.idCajaUsuario
                nDetalle.otroMN = i.otroMN
                nDetalle.usuarioModificacion = i.usuarioModificacion
                nDetalle.fechaModificacion = i.fechaModificacion
                HeliosData.documentoCajaDetalle.Add(nDetalle)
            Next
            '   documentoCajaDetalleBL.Insert(nCaja, nCaja.idDocumento, intIdCompra)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Public Sub CambiarEstadoNotaCreditoAnticipo(be As documentoventaAbarrotes)
        Using ts As New TransactionScope
            Dim nota = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).Single
            nota.estadoCobro = be.estadoCobro

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function GetCobrosByDocumento(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotesDet)
        Dim doccompra As New documentoventaAbarrotesDet
        Dim lista As New List(Of documentoventaAbarrotesDet)
        'c.fechaContable = be.fechaContable _
        Dim con = (From c In HeliosData.documentoventaAbarrotesDet
                   Join prod In HeliosData.detalleitems
                       On prod.codigodetalle Equals c.idItem
                   Where
                       c.idDocumento = be.idDocumento _
                       And c.estadoPago <> "ANU" _
                       And c.estadoPago = be.estadoCobro
                   Select
                       c.secuencia,
                       c.idDocumento,
                       prod.codigodetalle,
                       prod.descripcionItem,
                       prod.unidad1,
                       c.montoIcbper,
                       c.montoIcbperUS,
                       c.importeMN,
                       c.importeME,
                       c.estadoEntrega,
                       c.estadoPago,
                  PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento And
                                         DocumentoCajaDetalle.documentoAfectadodetalle = c.secuencia
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento And
                                         DocumentoCajaDetalle.documentoAfectadodetalle = c.secuencia
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?))).ToList


        For Each i In con
            doccompra = New documentoventaAbarrotesDet
            doccompra.idDocumento = i.idDocumento
            doccompra.secuencia = i.secuencia
            doccompra.idItem = i.codigodetalle
            doccompra.nombreItem = i.descripcionItem
            doccompra.unidad1 = i.unidad1
            doccompra.importeMN = i.importeMN - i.PagosMN.GetValueOrDefault + i.montoIcbper.GetValueOrDefault
            doccompra.importeME = i.importeME - i.PagosME.GetValueOrDefault + i.montoIcbperUS.GetValueOrDefault
            doccompra.estadoPago = i.estadoPago
            doccompra.estadoEntrega = i.estadoEntrega
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            'doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
            'doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            'doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            'doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            'doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function




    Public Function GetVentaxCobrarVenc(be As documentoventaAbarrotes, opcion As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)
        Dim listaVenta As New List(Of String)
        listaVenta.Add(TIPO_VENTA.NOTA_DE_VENTA)
        listaVenta.Add(TIPO_VENTA.VENTA_GENERAL)
        listaVenta.Add(TIPO_VENTA.VENTA_AL_TICKET)
        listaVenta.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        listaVenta.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        'c.fechaContable = be.fechaContable _
        Select Case opcion
            Case "0-30V"

                'Consulta de 1 a 30 dias
                Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))

                Dim con = (From c In HeliosData.documentoventaAbarrotes
                           Join cli In HeliosData.entidad
                               On cli.idEntidad Equals c.idCliente
                           Where
                               listaVenta.Contains(c.tipoVenta) And
                               c.idEmpresa = be.idEmpresa And
                               c.idEstablecimiento = be.idEstablecimiento And
                               c.moneda = be.moneda And
                               c.estadoCobro <> "ANU" And
                               c.fechaVcto >= s And
                               c.fechaVcto <= addDay And
                               c.estadoCobro = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                           Select
                               c.idDocumento,
                       c.idCliente,
                       cli.nombreCompleto,
                       cli.nrodoc,
                  c.tipoVenta,
                  c.fechaPeriodo,
                  c.fechaDoc,
                  c.serieVenta,
                  c.numeroVenta,
                  c.tipoDocumento,
                  c.moneda,
                  c.ImporteNacional,
                  c.tipoCambio,
                  c.ImporteExtranjero,
                  c.estadoCobro,
                  PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       Exedente = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                 Where
                                                 (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.ImporteNacional
                                                 }) Into Sum(t1.ImporteNacional)), Decimal?)),
                             Conteo = ((Aggregate t1 In
                                        (From cro In HeliosData.Cronograma
                                         Where
                                         cro.idDocumentoRef = c.idDocumento And
                                         cro.estado = "PN"
                                         Select New With {
                                                cro
                                         }) Into Count()))).ToList

                For Each i In con
                    doccompra = New documentoventaAbarrotes
                    doccompra.idDocumento = i.idDocumento
                    doccompra.idCliente = i.idCliente
                    doccompra.NombreEntidad = i.nombreCompleto
                    doccompra.NroDocEntidad = i.nrodoc
                    doccompra.tipoVenta = i.tipoVenta
                    doccompra.fechaPeriodo = i.fechaPeriodo
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.serie = i.serieVenta
                    doccompra.numeroDoc = i.numeroVenta
                    doccompra.tipoDocumento = i.tipoDocumento
                    doccompra.moneda = i.moneda
                    doccompra.ImporteNacional = i.ImporteNacional
                    doccompra.tipoCambio = i.tipoCambio
                    doccompra.ImporteExtranjero = i.ImporteExtranjero
                    doccompra.estadoCobro = i.estadoCobro
                    doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
                    doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
                    doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
                    doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
                    doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
                    doccompra.conteoCuotas = i.Conteo
                    lista.Add(doccompra)
                Next
            Case "31-60V"

                'Consulta de 31 a 60 dias
                Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))

                Dim s1 As DateTime = s.AddDays(CInt(1)) '31
                Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

                Dim con = (From c In HeliosData.documentoventaAbarrotes
                           Join cli In HeliosData.entidad
                               On cli.idEntidad Equals c.idCliente
                           Where
                               listaVenta.Contains(c.tipoVenta) And
                               c.idEmpresa = be.idEmpresa And
                               c.idEstablecimiento = be.idEstablecimiento And
                               c.moneda = be.moneda And
                               c.estadoCobro <> "ANU" And
                               c.fechaVcto >= s1 And
                               c.fechaVcto <= addDay30 And
                               c.estadoCobro = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                           Select
                               c.idDocumento,
                               c.idCliente,
                               cli.nombreCompleto,
                               cli.nrodoc,
                              c.tipoVenta,
                              c.fechaPeriodo,
                              c.fechaDoc,
                              c.serieVenta,
                              c.numeroVenta,
                              c.tipoDocumento,
                              c.moneda,
                              c.ImporteNacional,
                              c.tipoCambio,
                              c.ImporteExtranjero,
                              c.estadoCobro,
                              PagosMN = (CType((Aggregate t1 In
                                                (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                                 Where
                                                 DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                                 Select New With {
                                                     DocumentoCajaDetalle.montoSoles
                                                 }) Into Sum(t1.montoSoles)), Decimal?)),
                             PagosME = (CType((Aggregate t1 In
                                               (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                                Where
                                                DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                                Select New With {
                                                    DocumentoCajaDetalle.montoUsd
                                                }) Into Sum(t1.montoUsd)), Decimal?)),
                            PagoNotaCredito = (CType((Aggregate t1 In
                                                      (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                       Where
                                                       (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
                                                       Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
                                                       Select New With {
                                                           Documentocompra.ImporteNacional
                                                       }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                   Exedente = (CType((Aggregate t1 In
                                                      (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                       Where
                                                       (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                                       Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
                                                       Select New With {
                                                           Documentocompra.ImporteNacional
                                                       }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                   PagoNotaDebito = (CType((Aggregate t1 In
                                                            (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                             Where
                                                             (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                             Documentocompra.idPadre = c.idDocumento
                                                             Select New With {
                                                                 Documentocompra.ImporteNacional
                                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                         Conteo = ((Aggregate t1 In
                                                    (From cro In HeliosData.Cronograma
                                                     Where
                                                     cro.idDocumentoRef = c.idDocumento And
                                                     cro.estado = "PN"
                                                     Select New With {
                                                            cro
                                                     }) Into Count()))).ToList

                For Each i In con
                    doccompra = New documentoventaAbarrotes
                    doccompra.idDocumento = i.idDocumento
                    doccompra.idCliente = i.idCliente
                    doccompra.NombreEntidad = i.nombreCompleto
                    doccompra.NroDocEntidad = i.nrodoc
                    doccompra.tipoVenta = i.tipoVenta
                    doccompra.fechaPeriodo = i.fechaPeriodo
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.serie = i.serieVenta
                    doccompra.numeroDoc = i.numeroVenta
                    doccompra.tipoDocumento = i.tipoDocumento
                    doccompra.moneda = i.moneda
                    doccompra.ImporteNacional = i.ImporteNacional
                    doccompra.tipoCambio = i.tipoCambio
                    doccompra.ImporteExtranjero = i.ImporteExtranjero
                    doccompra.estadoCobro = i.estadoCobro
                    doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
                    doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
                    doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
                    doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
                    doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
                    doccompra.conteoCuotas = i.Conteo
                    lista.Add(doccompra)
                Next

            Case "61+masV"
                'Consulta de 61 a  mas dias
                Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))

                Dim s1 As DateTime = s.AddDays(CInt(1)) '31
                Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

                Dim s2 As DateTime = addDay30.AddDays(CInt(1)) '61
                Dim addDay90 As DateTime = addDay30.AddDays(CInt(30)) '90
                Dim addDay90Max As DateTime = New Date(be.fechaDoc.Value.Year, 12, 31)

                Dim con = (From c In HeliosData.documentoventaAbarrotes
                           Join cli In HeliosData.entidad
                               On cli.idEntidad Equals c.idCliente
                           Where
                               listaVenta.Contains(c.tipoVenta) And
                               c.idEmpresa = be.idEmpresa And
                               c.idEstablecimiento = be.idEstablecimiento And
                               c.moneda = be.moneda And
                               c.estadoCobro <> "ANU" And
                               c.fechaVcto >= s2 And
                               c.fechaVcto <= addDay90Max And
                               c.estadoCobro = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                           Select
                               c.idDocumento,
                               c.idCliente,
                               cli.nombreCompleto,
                               cli.nrodoc,
                              c.tipoVenta,
                              c.fechaPeriodo,
                              c.fechaDoc,
                              c.serieVenta,
                              c.numeroVenta,
                              c.tipoDocumento,
                              c.moneda,
                              c.ImporteNacional,
                              c.tipoCambio,
                              c.ImporteExtranjero,
                              c.estadoCobro,
                              PagosMN = (CType((Aggregate t1 In
                                                (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                                 Where
                                                 DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                                 Select New With {
                                                     DocumentoCajaDetalle.montoSoles
                                                 }) Into Sum(t1.montoSoles)), Decimal?)),
                             PagosME = (CType((Aggregate t1 In
                                               (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                                Where
                                                DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                                Select New With {
                                                    DocumentoCajaDetalle.montoUsd
                                                }) Into Sum(t1.montoUsd)), Decimal?)),
                            PagoNotaCredito = (CType((Aggregate t1 In
                                                      (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                       Where
                                                       (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
                                                       Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
                                                       Select New With {
                                                           Documentocompra.ImporteNacional
                                                       }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                   Exedente = (CType((Aggregate t1 In
                                                      (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                       Where
                                                       (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                                       Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
                                                       Select New With {
                                                           Documentocompra.ImporteNacional
                                                       }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                   PagoNotaDebito = (CType((Aggregate t1 In
                                                            (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                             Where
                                                             (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                             Documentocompra.idPadre = c.idDocumento
                                                             Select New With {
                                                                 Documentocompra.ImporteNacional
                                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                         Conteo = ((Aggregate t1 In
                                                    (From cro In HeliosData.Cronograma
                                                     Where
                                                     cro.idDocumentoRef = c.idDocumento And
                                                     cro.estado = "PN"
                                                     Select New With {
                                                            cro
                                                     }) Into Count()))).ToList

                For Each i In con
                    doccompra = New documentoventaAbarrotes
                    doccompra.idDocumento = i.idDocumento
                    doccompra.idCliente = i.idCliente
                    doccompra.NombreEntidad = i.nombreCompleto
                    doccompra.NroDocEntidad = i.nrodoc
                    doccompra.tipoVenta = i.tipoVenta
                    doccompra.fechaPeriodo = i.fechaPeriodo
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.serie = i.serieVenta
                    doccompra.numeroDoc = i.numeroVenta
                    doccompra.tipoDocumento = i.tipoDocumento
                    doccompra.moneda = i.moneda
                    doccompra.ImporteNacional = i.ImporteNacional
                    doccompra.tipoCambio = i.tipoCambio
                    doccompra.ImporteExtranjero = i.ImporteExtranjero
                    doccompra.estadoCobro = i.estadoCobro
                    doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
                    doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
                    doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
                    doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
                    doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
                    doccompra.conteoCuotas = i.Conteo
                    lista.Add(doccompra)
                Next
        End Select
        Return lista
    End Function

    Public Function GetComprasPorCobrarOpcion(be As documentoventaAbarrotes, opcion As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)
        Dim listaVenta As New List(Of String)
        listaVenta.Add(TIPO_VENTA.NOTA_DE_VENTA)
        listaVenta.Add(TIPO_VENTA.VENTA_GENERAL)
        listaVenta.Add(TIPO_VENTA.VENTA_AL_TICKET)
        listaVenta.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        listaVenta.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        'c.fechaContable = be.fechaContable _
        Select Case opcion
            Case "0-30"

                'Consulta de 1 a 30 dias
                Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))

                Dim con = (From c In HeliosData.documentoventaAbarrotes
                           Join cli In HeliosData.entidad
                               On cli.idEntidad Equals c.idCliente
                           Where
                               listaVenta.Contains(c.tipoVenta) And
                               c.idEmpresa = be.idEmpresa And
                               c.idEstablecimiento = be.idEstablecimiento And
                               c.moneda = be.moneda And
                               c.estadoCobro <> "ANU" And
                               c.fechaDoc >= s And
                               c.fechaDoc <= addDay And
                               c.estadoCobro = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                           Select
                               c.idDocumento,
                       c.idCliente,
                       cli.nombreCompleto,
                       cli.nrodoc,
                  c.tipoVenta,
                  c.fechaPeriodo,
                  c.fechaDoc,
                  c.serieVenta,
                  c.numeroVenta,
                  c.tipoDocumento,
                  c.moneda,
                  c.ImporteNacional,
                  c.tipoCambio,
                  c.ImporteExtranjero,
                  c.estadoCobro,
                  PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       Exedente = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                 Where
                                                 (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.ImporteNacional
                                                 }) Into Sum(t1.ImporteNacional)), Decimal?)),
                             Conteo = ((Aggregate t1 In
                                        (From cro In HeliosData.Cronograma
                                         Where
                                         cro.idDocumentoRef = c.idDocumento And
                                         cro.estado = "PN"
                                         Select New With {
                                                cro
                                         }) Into Count()))).ToList

                For Each i In con
                    doccompra = New documentoventaAbarrotes
                    doccompra.idDocumento = i.idDocumento
                    doccompra.idCliente = i.idCliente
                    doccompra.NombreEntidad = i.nombreCompleto
                    doccompra.NroDocEntidad = i.nrodoc
                    doccompra.tipoVenta = i.tipoVenta
                    doccompra.fechaPeriodo = i.fechaPeriodo
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.serie = i.serieVenta
                    doccompra.numeroDoc = i.numeroVenta
                    doccompra.tipoDocumento = i.tipoDocumento
                    doccompra.moneda = i.moneda
                    doccompra.ImporteNacional = i.ImporteNacional
                    doccompra.tipoCambio = i.tipoCambio
                    doccompra.ImporteExtranjero = i.ImporteExtranjero
                    doccompra.estadoCobro = i.estadoCobro
                    doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
                    doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
                    doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
                    doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
                    doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
                    doccompra.conteoCuotas = i.Conteo
                    lista.Add(doccompra)
                Next
            Case "31-60"

                'Consulta de 31 a 60 dias
                Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))

                Dim s1 As DateTime = s.AddDays(CInt(1)) '31
                Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

                Dim con = (From c In HeliosData.documentoventaAbarrotes
                           Join cli In HeliosData.entidad
                               On cli.idEntidad Equals c.idCliente
                           Where
                               listaVenta.Contains(c.tipoVenta) And
                               c.idEmpresa = be.idEmpresa And
                               c.idEstablecimiento = be.idEstablecimiento And
                               c.moneda = be.moneda And
                               c.estadoCobro <> "ANU" And
                               c.fechaDoc >= s1 And
                               c.fechaDoc <= addDay30 And
                               c.estadoCobro = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                           Select
                               c.idDocumento,
                               c.idCliente,
                               cli.nombreCompleto,
                               cli.nrodoc,
                              c.tipoVenta,
                              c.fechaPeriodo,
                              c.fechaDoc,
                              c.serieVenta,
                              c.numeroVenta,
                              c.tipoDocumento,
                              c.moneda,
                              c.ImporteNacional,
                              c.tipoCambio,
                              c.ImporteExtranjero,
                              c.estadoCobro,
                              PagosMN = (CType((Aggregate t1 In
                                                (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                                 Where
                                                 DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                                 Select New With {
                                                     DocumentoCajaDetalle.montoSoles
                                                 }) Into Sum(t1.montoSoles)), Decimal?)),
                             PagosME = (CType((Aggregate t1 In
                                               (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                                Where
                                                DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                                Select New With {
                                                    DocumentoCajaDetalle.montoUsd
                                                }) Into Sum(t1.montoUsd)), Decimal?)),
                            PagoNotaCredito = (CType((Aggregate t1 In
                                                      (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                       Where
                                                       (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
                                                       Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
                                                       Select New With {
                                                           Documentocompra.ImporteNacional
                                                       }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                   Exedente = (CType((Aggregate t1 In
                                                      (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                       Where
                                                       (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                                       Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
                                                       Select New With {
                                                           Documentocompra.ImporteNacional
                                                       }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                   PagoNotaDebito = (CType((Aggregate t1 In
                                                            (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                             Where
                                                             (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                             Documentocompra.idPadre = c.idDocumento
                                                             Select New With {
                                                                 Documentocompra.ImporteNacional
                                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                         Conteo = ((Aggregate t1 In
                                                    (From cro In HeliosData.Cronograma
                                                     Where
                                                     cro.idDocumentoRef = c.idDocumento And
                                                     cro.estado = "PN"
                                                     Select New With {
                                                            cro
                                                     }) Into Count()))).ToList

                For Each i In con
                    doccompra = New documentoventaAbarrotes
                    doccompra.idDocumento = i.idDocumento
                    doccompra.idCliente = i.idCliente
                    doccompra.NombreEntidad = i.nombreCompleto
                    doccompra.NroDocEntidad = i.nrodoc
                    doccompra.tipoVenta = i.tipoVenta
                    doccompra.fechaPeriodo = i.fechaPeriodo
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.serie = i.serieVenta
                    doccompra.numeroDoc = i.numeroVenta
                    doccompra.tipoDocumento = i.tipoDocumento
                    doccompra.moneda = i.moneda
                    doccompra.ImporteNacional = i.ImporteNacional
                    doccompra.tipoCambio = i.tipoCambio
                    doccompra.ImporteExtranjero = i.ImporteExtranjero
                    doccompra.estadoCobro = i.estadoCobro
                    doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
                    doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
                    doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
                    doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
                    doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
                    doccompra.conteoCuotas = i.Conteo
                    lista.Add(doccompra)
                Next

            Case "61+mas"
                'Consulta de 61 a  mas dias
                Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))

                Dim s1 As DateTime = s.AddDays(CInt(1)) '31
                Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

                Dim s2 As DateTime = addDay30.AddDays(CInt(1)) '61
                Dim addDay90 As DateTime = addDay30.AddDays(CInt(30)) '90
                Dim addDay90Max As DateTime = New Date(be.fechaDoc.Value.Year, 12, 31)

                Dim con = (From c In HeliosData.documentoventaAbarrotes
                           Join cli In HeliosData.entidad
                               On cli.idEntidad Equals c.idCliente
                           Where
                               listaVenta.Contains(c.tipoVenta) And
                               c.idEmpresa = be.idEmpresa And
                               c.idEstablecimiento = be.idEstablecimiento And
                               c.moneda = be.moneda And
                               c.estadoCobro <> "ANU" And
                               c.fechaDoc >= s2 And
                               c.fechaDoc <= addDay90Max And
                               c.estadoCobro = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                           Select
                               c.idDocumento,
                               c.idCliente,
                               cli.nombreCompleto,
                               cli.nrodoc,
                              c.tipoVenta,
                              c.fechaPeriodo,
                              c.fechaDoc,
                              c.serieVenta,
                              c.numeroVenta,
                              c.tipoDocumento,
                              c.moneda,
                              c.ImporteNacional,
                              c.tipoCambio,
                              c.ImporteExtranjero,
                              c.estadoCobro,
                              PagosMN = (CType((Aggregate t1 In
                                                (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                                 Where
                                                 DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                                 Select New With {
                                                     DocumentoCajaDetalle.montoSoles
                                                 }) Into Sum(t1.montoSoles)), Decimal?)),
                             PagosME = (CType((Aggregate t1 In
                                               (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                                Where
                                                DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                                Select New With {
                                                    DocumentoCajaDetalle.montoUsd
                                                }) Into Sum(t1.montoUsd)), Decimal?)),
                            PagoNotaCredito = (CType((Aggregate t1 In
                                                      (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                       Where
                                                       (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
                                                       Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
                                                       Select New With {
                                                           Documentocompra.ImporteNacional
                                                       }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                   Exedente = (CType((Aggregate t1 In
                                                      (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                       Where
                                                       (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                                       Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
                                                       Select New With {
                                                           Documentocompra.ImporteNacional
                                                       }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                   PagoNotaDebito = (CType((Aggregate t1 In
                                                            (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                             Where
                                                             (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                             Documentocompra.idPadre = c.idDocumento
                                                             Select New With {
                                                                 Documentocompra.ImporteNacional
                                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                         Conteo = ((Aggregate t1 In
                                                    (From cro In HeliosData.Cronograma
                                                     Where
                                                     cro.idDocumentoRef = c.idDocumento And
                                                     cro.estado = "PN"
                                                     Select New With {
                                                            cro
                                                     }) Into Count()))).ToList

                For Each i In con
                    doccompra = New documentoventaAbarrotes
                    doccompra.idDocumento = i.idDocumento
                    doccompra.idCliente = i.idCliente
                    doccompra.NombreEntidad = i.nombreCompleto
                    doccompra.NroDocEntidad = i.nrodoc
                    doccompra.tipoVenta = i.tipoVenta
                    doccompra.fechaPeriodo = i.fechaPeriodo
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.serie = i.serieVenta
                    doccompra.numeroDoc = i.numeroVenta
                    doccompra.tipoDocumento = i.tipoDocumento
                    doccompra.moneda = i.moneda
                    doccompra.ImporteNacional = i.ImporteNacional
                    doccompra.tipoCambio = i.tipoCambio
                    doccompra.ImporteExtranjero = i.ImporteExtranjero
                    doccompra.estadoCobro = i.estadoCobro
                    doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
                    doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
                    doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
                    doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
                    doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
                    doccompra.conteoCuotas = i.Conteo
                    lista.Add(doccompra)
                Next
        End Select
        Return lista
    End Function

    Public Function GetAcumuladoCuentasCobrarByAnio(be As documentoventaAbarrotes) As documentoventaAbarrotes
        Dim doccompra As New documentoventaAbarrotes
        Dim listaVenta As New List(Of String)
        listaVenta.Add(TIPO_VENTA.VENTA_GENERAL)
        listaVenta.Add(TIPO_VENTA.VENTA_AL_TICKET)
        listaVenta.Add(TIPO_VENTA.VENTA_POS_DIRECTA)

        Dim ObligacionsPorpagar = Aggregate c In HeliosData.documentoventaAbarrotes
                                      Where
                                          listaVenta.Contains(c.tipoVenta) And
                                          c.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                          c.idEmpresa = be.idEmpresa And
                                          c.idEstablecimiento = be.idEstablecimiento And
                                          c.moneda = be.moneda And
                                          c.estadoCobro <> "ANU" Into
                                      SumaTotalPagos = Sum(CType(c.ImporteNacional, Decimal?))

        Dim abonados = Aggregate cajadet In HeliosData.documentoCajaDetalle
                          Join caja In HeliosData.documentoCaja
                              On caja.idDocumento Equals cajadet.idDocumento
                              Where caja.fechaProceso.Value.Year = be.fechaDoc.Value.Year And
                                  caja.idEmpresa = be.idEmpresa And
                                  caja.idEstablecimiento = be.idEstablecimiento And
                                  caja.tipoMovimiento = "DC" And
                                  caja.movimientoCaja <> "CIE" And
                                  caja.moneda = be.moneda Into
                           SumaTotalAbonados = Sum(CType(cajadet.montoSoles, Decimal?))

        Dim pagosAbonados = 0
        If abonados IsNot Nothing Then
            pagosAbonados = abonados.GetValueOrDefault
        Else
            pagosAbonados = 0
        End If
        doccompra = New documentoventaAbarrotes
        doccompra.ImporteNacional = ObligacionsPorpagar.GetValueOrDefault ' i.GetValueOrDefault
        doccompra.PagoSumaMN = pagosAbonados
        'doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
        'doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
        'doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
        'doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
        'doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
        'doccompra.PagoNotaDebitoME = 0 'i.PagoNotaDebitoME.GetValueOrDefault
        'doccompra.conteoCuotas = i.Conteo

        Return doccompra
    End Function


    Public Function GetResumenAnualCuentasVenc(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim listaVenta As New List(Of String)
        listaVenta.Add(TIPO_VENTA.NOTA_DE_VENTA)
        listaVenta.Add(TIPO_VENTA.VENTA_GENERAL)
        listaVenta.Add(TIPO_VENTA.VENTA_AL_TICKET)
        listaVenta.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        listaVenta.Add(TIPO_VENTA.VENTA_ELECTRONICA)


        GetResumenAnualCuentasVenc = New List(Of documentoventaAbarrotes)

        'Consulta de 1 a 30 dias
        Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
        Dim addDay As DateTime = s.AddDays(CInt(30))

        '--------------------------- de 1 a 30 dias -------------------------------------------------------
        Dim consulta30 = (From n In HeliosData.documentoventaAbarrotes
                          Where
                             n.idEmpresa = be.idEmpresa And n.idEstablecimiento = be.idEstablecimiento And
                             listaVenta.Contains(n.tipoVenta) And
                              n.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO And
                             n.fechaVcto >= s _
                         And n.fechaVcto <= addDay).Count

        GetResumenAnualCuentasVenc.Add(New documentoventaAbarrotes With
                                  {
                                  .estado = "0-30",
                                  .conteoCuotas = consulta30
                                  })

        '--------------------------- de 31 - 60 dias ---------------------------------------------------------
        Dim s1 As DateTime = s.AddDays(CInt(1)) '31
        Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

        Dim consulta31a60 = (From n In HeliosData.documentoventaAbarrotes
                             Where
                            n.idEmpresa = be.idEmpresa And n.idEstablecimiento = be.idEstablecimiento And
                             listaVenta.Contains(n.tipoVenta) And
                              n.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO And
                             n.fechaVcto >= s1 _
                         And n.fechaVcto <= addDay30).Count

        GetResumenAnualCuentasVenc.Add(New documentoventaAbarrotes With
                                  {
                                  .estado = "31-60",
                                  .conteoCuotas = consulta31a60
                                  })

        '--------------------------- de 61 - 90 dias ---------------------------------------------------------
        Dim s2 As DateTime = addDay30.AddDays(CInt(1)) '61
        Dim addDay90 As DateTime = addDay30.AddDays(CInt(30)) '90
        Dim addDay90Max As DateTime = New Date(be.fechaDoc.Value.Year, 12, 31)
        Dim consulta61a90 = (From n In HeliosData.documentoventaAbarrotes
                             Where
                             n.idEmpresa = be.idEmpresa And n.idEstablecimiento = be.idEstablecimiento And
                             listaVenta.Contains(n.tipoVenta) And
                              n.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO And
                             n.fechaVcto >= s2 _
                         And n.fechaVcto <= addDay90Max).Count

        GetResumenAnualCuentasVenc.Add(New documentoventaAbarrotes With
                                  {
                                  .estado = "61-mas",
                                  .conteoCuotas = consulta61a90
                                  })




    End Function

    Public Function GetResumenAnualCuentasCobrar(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim listaVenta As New List(Of String)
        listaVenta.Add(TIPO_VENTA.NOTA_DE_VENTA)
        listaVenta.Add(TIPO_VENTA.VENTA_GENERAL)
        listaVenta.Add(TIPO_VENTA.VENTA_AL_TICKET)
        listaVenta.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        listaVenta.Add(TIPO_VENTA.VENTA_ELECTRONICA)


        GetResumenAnualCuentasCobrar = New List(Of documentoventaAbarrotes)

        'Consulta de 1 a 30 dias
        Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
        Dim addDay As DateTime = s.AddDays(CInt(30))

        '--------------------------- de 1 a 30 dias -------------------------------------------------------
        Dim consulta30 = (From n In HeliosData.documentoventaAbarrotes
                          Where
                             n.idEmpresa = be.idEmpresa And n.idEstablecimiento = be.idEstablecimiento And
                             listaVenta.Contains(n.tipoVenta) And
                              n.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO And
                             n.fechaDoc >= s _
                         And n.fechaDoc <= addDay).Count

        GetResumenAnualCuentasCobrar.Add(New documentoventaAbarrotes With
                                  {
                                  .estado = "0-30",
                                  .conteoCuotas = consulta30
                                  })

        '--------------------------- de 31 - 60 dias ---------------------------------------------------------
        Dim s1 As DateTime = s.AddDays(CInt(1)) '31
        Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

        Dim consulta31a60 = (From n In HeliosData.documentoventaAbarrotes
                             Where
                            n.idEmpresa = be.idEmpresa And n.idEstablecimiento = be.idEstablecimiento And
                             listaVenta.Contains(n.tipoVenta) And
                              n.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO And
                             n.fechaDoc >= s1 _
                         And n.fechaDoc <= addDay30).Count

        GetResumenAnualCuentasCobrar.Add(New documentoventaAbarrotes With
                                  {
                                  .estado = "31-60",
                                  .conteoCuotas = consulta31a60
                                  })

        '--------------------------- de 61 - 90 dias ---------------------------------------------------------
        Dim s2 As DateTime = addDay30.AddDays(CInt(1)) '61
        Dim addDay90 As DateTime = addDay30.AddDays(CInt(30)) '90
        Dim addDay90Max As DateTime = New Date(be.fechaDoc.Value.Year, 12, 31)
        Dim consulta61a90 = (From n In HeliosData.documentoventaAbarrotes
                             Where
                             n.idEmpresa = be.idEmpresa And n.idEstablecimiento = be.idEstablecimiento And
                             listaVenta.Contains(n.tipoVenta) And
                              n.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO And
                             n.fechaDoc >= s2 _
                         And n.fechaDoc <= addDay90Max).Count

        GetResumenAnualCuentasCobrar.Add(New documentoventaAbarrotes With
                                  {
                                  .estado = "61-mas",
                                  .conteoCuotas = consulta61a90
                                  })

        '--------------------------------- de 90 +dias--------------------------------------------------------
        'Dim s3 As DateTime = addDay90 '90
        'Dim addDay90Max As DateTime = New Date(be.fechaDoc.Value.Year, 12, 31) '90

        'Dim consulta90amas = (From n In HeliosData.documentocompra
        '                      Where
        '                     n.idEmpresa = be.idEmpresa And n.idCentroCosto = be.idCentroCosto And
        '                     n.tipoCompra = be.tipoCompra And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO And
        '                     n.fechaDoc >= s3 _
        '                 And n.fechaDoc <= addDay90Max).Count

        'GetResumenAnualCuentasPagar.Add(New documentocompra With
        '                          {
        '                          .referenciaDestino = "61-mas",
        '                          .conteoCuotas = consulta61a90
        '                          })
        'Dim consulta2 = (From n In HeliosData.documentocompra
        '                 Group Join cajadet In HeliosData.documentoCajaDetalle
        '                     On n.idDocumento Equals cajadet.documentoAfectado
        '                     Into ords = Group
        '                 From c In ords.DefaultIfEmpty
        '                 Where
        '                     n.idEmpresa = be.idEmpresa And n.idCentroCosto = be.idCentroCosto And
        '                     n.tipoCompra = be.tipoCompra And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO And
        '                     n.fechaDoc >= s _
        '                 And n.fechaDoc <= addDay
        '                 Group c By
        '                     n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, n.fechaVcto,
        '                     n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
        '                     n.importeUS, n.estadoPago Into g = Group
        '                 Select New With {
        '                      .idDocumento = idDocumento,
        '                      .tipoVenta = tipoCompra,
        '                      .fechaPeriodo = fechaContable,
        '                      .fechaDoc = fechaDoc,
        '                      .fechaVcto = fechaVcto,
        '                      .serie = serie,
        '                      .numeroDoc = numeroDoc,
        '                      .tipoDocumento = tipoDoc,
        '                      .moneda = monedaDoc,
        '                      .ImporteNacional = importeTotal,
        '                      .tipoCambio = tcDolLoc,
        '                      .ImporteExtranjero = importeUS,
        '                      .estadoCobro = estadoPago,
        '                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
        '                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).Count


    End Function

    Function FacturasAnuladasPeriodo(fecha As DateTime, tipoDoc As String, ruc As String) As List(Of documentoventaAbarrotes)

        Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        'Dim consulta = (From i In HeliosData.documentoventaAbarrotes
        '                Where i.fechaDoc.Value.Year = fecha.Year _
        '                    And i.fechaDoc.Value.Month = fecha.Month _
        '                    And i.tipoDocumento = tipoDoc And i.tipoVenta = "VELC" _
        '                    And i.EnvioSunat = "PE" And i.idEmpresa = ruc And i.estadoCobro = "ANU"
        '                Group i By i.fechaDoc, i.tipoDocumento Into g = Group
        '                Select New With {
        '                                .fechaDocumento = fechaDoc,
        '                                .tipoDoc = tipoDocumento,
        '                                .Conteo = g.Count(Function(o) o.idDocumento)}).OrderBy(Function(o) o.fechaDocumento).ToList


        Dim consulta2 = (From x In HeliosData.documentoventaAbarrotes
                         Where x.fechaDoc.Value.Year = fecha.Year _
                            And x.fechaDoc.Value.Month = fecha.Month _
                            And x.tipoDocumento = tipoDoc And x.tipoVenta = "VELC" _
                            And x.EnvioSunat = "PE" And x.idEmpresa = ruc And x.estadoCobro = "ANU"
                         Group x By
                        tipoanio = CType(x.fechaDoc.Value.Year, Integer?),
                        tipmes = CType(x.fechaDoc.Value.Month, Integer?),
                            tipdia = CType(x.fechaDoc.Value.Day, Integer?)
                             Into g = Group
                         Select New With {
                         .tipoanio = tipoanio,
                         .tipmes = tipmes,
                         .tipdia = tipdia,
                         .cantidad = CType(g.Count(Function(p) p.fechaDoc <> Nothing), Int64?)}).ToList



        For Each i In consulta2

            objeto = New documentoventaAbarrotes

            objeto.fechaDoc = DateSerial(i.tipoanio, i.tipmes, i.tipdia)
            objeto.tipoDocumento = tipoDoc
            objeto.CantFactAnu = i.cantidad
            lista.Add(objeto)
        Next



        Return lista
    End Function

    Function BoletasAnuladasPeriodo(fecha As DateTime, tipoDoc As String, ruc As String) As List(Of documentoventaAbarrotes)

        Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        'Dim consulta = (From i In HeliosData.documentoventaAbarrotes
        '                Where i.fechaDoc.Value.Year = fecha.Year _
        '                    And i.fechaDoc.Value.Month = fecha.Month _
        '                    And i.tipoDocumento = tipoDoc And i.tipoVenta = "VELC" _
        '                    And i.EnvioSunat = "SI" And i.idEmpresa = ruc And i.estadoCobro = "ANU"
        '                Group i By i.fechaDoc, i.tipoDocumento Into g = Group
        '                Select New With {
        '                                .fechaDocumento = fechaDoc,
        '                                .tipoDoc = tipoDocumento,
        '                                .Conteo = g.Count(Function(o) o.idDocumento)}).OrderBy(Function(o) o.fechaDocumento).ToList


        Dim consulta2 = (From x In HeliosData.documentoventaAbarrotes
                         Where x.fechaDoc.Value.Year = fecha.Year _
                            And x.fechaDoc.Value.Month = fecha.Month _
                            And x.tipoDocumento = tipoDoc And x.tipoVenta = "VELC" _
                            And x.EnvioSunat = "PE" And x.idEmpresa = ruc And x.estadoCobro = "ANU"
                         Group x By
                        tipoanio = CType(x.fechaDoc.Value.Year, Integer?),
                        tipmes = CType(x.fechaDoc.Value.Month, Integer?),
                            tipdia = CType(x.fechaDoc.Value.Day, Integer?)
        Into g = Group
                         Select New With {
                         .tipoanio = tipoanio,
                         .tipmes = tipmes,
                         .tipdia = tipdia,
                         .cantidad = CType(g.Count(Function(p) p.fechaDoc <> Nothing), Int64?)}).ToList



        For Each i In consulta2

            objeto = New documentoventaAbarrotes

            objeto.fechaDoc = DateSerial(i.tipoanio, i.tipmes, i.tipdia)
            objeto.tipoDocumento = tipoDoc
            objeto.CantBolAnu = i.cantidad
            lista.Add(objeto)
        Next



        Return lista
    End Function

    Function NotasBoletasPeriodo(fecha As DateTime, tipoDoc As String, ruc As String) As List(Of documentoventaAbarrotes)

        Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        'Dim consulta = (From i In HeliosData.documentoventaAbarrotes
        '                Join padre In HeliosData.documentoventaAbarrotes On i.idPadre Equals padre.idDocumento
        '                Where i.fechaDoc.Value.Year = fecha.Year _
        '                    And i.fechaDoc.Value.Month = fecha.Month _
        '                    And i.tipoDocumento = tipoDoc And i.tipoVenta = "NTCE" _
        '                    And Not i.EnvioSunat = "SI" And i.idEmpresa = ruc And padre.tipoDocumento = "03"
        '                Group i By i.fechaDoc, i.tipoDocumento Into g = Group
        '                Select New With {
        '                                .fechaDocumento = fechaDoc,
        '                                .tipoDoc = tipoDocumento,
        '                                .Conteo = g.Count(Function(o) o.idDocumento)}).OrderBy(Function(o) o.fechaDocumento).ToList


        Dim consulta2 = (From x In HeliosData.documentoventaAbarrotes
                         Join padre In HeliosData.documentoventaAbarrotes On x.idPadre Equals padre.idDocumento
                         Where x.fechaDoc.Value.Year = fecha.Year _
                            And x.fechaDoc.Value.Month = fecha.Month _
                            And x.tipoDocumento = tipoDoc And x.tipoVenta = "NTCE" _
                            And Not x.EnvioSunat = "SI" And x.idEmpresa = ruc And padre.tipoDocumento = "03"
                         Group x By
                        tipoanio = CType(x.fechaDoc.Value.Year, Integer?),
                        tipmes = CType(x.fechaDoc.Value.Month, Integer?),
                            tipdia = CType(x.fechaDoc.Value.Day, Integer?)
                             Into g = Group
                         Select New With {
                         .tipoanio = tipoanio,
                         .tipmes = tipmes,
                         .tipdia = tipdia,
                         .cantidad = CType(g.Count(Function(p) p.fechaDoc <> Nothing), Int64?)}).ToList


        For Each i In consulta2

            objeto = New documentoventaAbarrotes

            objeto.fechaDoc = DateSerial(i.tipoanio, i.tipmes, i.tipdia)
            objeto.tipoDocumento = tipoDoc
            objeto.CantNotaBol = i.cantidad
            lista.Add(objeto)
        Next



        Return lista
    End Function

    Function BoletasPeriodo(fecha As DateTime, tipoDoc As String, ruc As String) As List(Of documentoventaAbarrotes)

        Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        'Dim consulta = (From i In HeliosData.documentoventaAbarrotes
        '                Where i.fechaDoc.Value.Year = fecha.Year _
        '                    And i.fechaDoc.Value.Month = fecha.Month _
        '                    And i.tipoDocumento = tipoDoc And i.tipoVenta = "VELC" _
        '                    And Not i.EnvioSunat = "SI" And i.idEmpresa = ruc
        '                Group i By fechaG = CStr(i.fechaDoc), i.tipoDocumento Into g = Group
        '                Select New With {
        '                                .fechaDocumento = fechaG,
        '                                .tipoDoc = tipoDocumento,
        '                                .Conteo = CType(g.Count(), Int64?)}).OrderBy(Function(o) o.fechaDocumento).ToList


        Dim consulta2 = (From x In HeliosData.documentoventaAbarrotes
                         Where x.fechaDoc.Value.Year = fecha.Year _
                            And x.fechaDoc.Value.Month = fecha.Month _
                            And x.tipoDocumento = tipoDoc And x.tipoVenta = "VELC" _
                            And Not x.EnvioSunat = "SI" And x.idEmpresa = ruc
                         Group x By
                        tipoanio = CType(x.fechaDoc.Value.Year, Integer?),
                        tipmes = CType(x.fechaDoc.Value.Month, Integer?),
                            tipdia = CType(x.fechaDoc.Value.Day, Integer?)
        Into g = Group
                         Select New With {
                         .tipoanio = tipoanio,
                         .tipmes = tipmes,
                         .tipdia = tipdia,
                         .cantidad = CType(g.Count(Function(p) p.fechaDoc <> Nothing), Int64?)}).ToList

        For Each i In consulta2

            objeto = New documentoventaAbarrotes

            objeto.fechaDoc = DateSerial(i.tipoanio, i.tipmes, i.tipdia) 'i.fechaDocumento
            objeto.tipoDocumento = tipoDoc
            objeto.CantBol = i.cantidad
            lista.Add(objeto)
        Next



        Return lista
    End Function

    Public Function AlertaPSE(Empresa As String) As documentoventaAbarrotes

        Dim obj As documentoventaAbarrotes

        Dim noenv As New List(Of String)
        noenv.Add("VA") 'envio anulado y validado
        noenv.Add("PE")  'enviado anulado 
        noenv.Add("SI") 'enviado sin anular

        Dim consulta = (From tip In HeliosData.entidad
                        Where tip.idEmpresa = Empresa
                        Select
                    tip.idEmpresa, tip.nombreCompleto,
                   FACTURAS = (CType((Aggregate t1 In
                    (From w In HeliosData.documentoventaAbarrotes
                     Where
                    w.tipoDocumento = "01" And
                    w.tipoVenta = "VELC" And Not noenv.Contains(w.EnvioSunat) And w.idEmpresa = tip.idEmpresa
                     Select New With {
                    w.idDocumento
                    }) Into Count(t1.idDocumento)), Integer?)),
                   BOLETAS = (CType((Aggregate t1 In
                    (From w In HeliosData.documentoventaAbarrotes
                     Where
                    w.tipoDocumento = "03" And
                    w.tipoVenta = "VELC" And Not noenv.Contains(w.EnvioSunat) And w.idEmpresa = tip.idEmpresa
                     Select New With {
                    w.idDocumento
                    }) Into Count(t1.idDocumento)), Integer?)),
                  NOTAFACTURA = (CType((Aggregate t1 In
                    (From w In HeliosData.documentoventaAbarrotes
                     Join padre In HeliosData.documentoventaAbarrotes
                   On w.idPadre Equals padre.idDocumento
                     Where
                   w.tipoDocumento = "07" And
                    w.tipoVenta = "NTCE" And Not noenv.Contains(w.EnvioSunat) And w.idEmpresa = tip.idEmpresa _
                         And padre.tipoDocumento = "01"
                     Select New With {
                    w.idDocumento
                    }) Into Count(t1.idDocumento)), Integer?)),
                 NOTABOLETA = (CType((Aggregate t1 In
                    (From w In HeliosData.documentoventaAbarrotes
                     Join padre In HeliosData.documentoventaAbarrotes
                   On w.idPadre Equals padre.idDocumento
                     Where
                   w.tipoDocumento = "07" And
                    w.tipoVenta = "NTCE" And Not noenv.Contains(w.EnvioSunat) And w.idEmpresa = tip.idEmpresa _
                         And padre.tipoDocumento = "03"
                     Select New With {
                    w.idDocumento
                    }) Into Count(t1.idDocumento)), Integer?)),
                     FACTURAANU = (CType((Aggregate t1 In
                    (From w In HeliosData.documentoventaAbarrotes
                     Where
                    w.tipoDocumento = "01" And
                    w.tipoVenta = "VELC" And w.EnvioSunat = "PE" And w.idEmpresa = tip.idEmpresa _
                    And w.estadoCobro = "ANU"
                     Select New With {
                    w.idDocumento
                    }) Into Count(t1.idDocumento)), Integer?)),
                     BOLETAANU = (CType((Aggregate t1 In
                    (From w In HeliosData.documentoventaAbarrotes
                     Where
                    w.tipoDocumento = "03" And
                    w.tipoVenta = "VELC" And w.EnvioSunat = "PE" And w.idEmpresa = tip.idEmpresa _
                    And w.estadoCobro = "ANU"
                     Select New With {
                    w.idDocumento
                    }) Into Count(t1.idDocumento)), Integer?))).Distinct().FirstOrDefault

        If Not IsNothing(consulta) Then
            obj = New documentoventaAbarrotes
            obj.CantFact = consulta.FACTURAS
            obj.CantBol = consulta.BOLETAS
            obj.CantNotaFact = consulta.NOTAFACTURA
            obj.CantNotaBol = consulta.NOTABOLETA
            obj.CantFactAnu = consulta.FACTURAANU
            obj.CantBolAnu = consulta.BOLETAANU

        Else
            obj = New documentoventaAbarrotes
            obj.CantFact = 0
            obj.CantBol = 0
            obj.CantNotaFact = 0
            obj.CantNotaBol = 0
            obj.CantFactAnu = 0
            obj.CantBolAnu = 0
        End If



        Return obj

    End Function


    Public Function ListarVentasTipoClientePeriodo(be As documentoventaAbarrotes, ListaTipo As List(Of String)) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        'Dim ListaTipo As New List(Of String)

        'ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        'ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        'ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        'ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        'ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        'ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        'ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = be.idEstablecimiento And
                       compra.fechaPeriodo = be.fechaPeriodo And ListaTipo.Contains(compra.tipoVenta) And
                                  compra.idCliente = be.idCliente
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                    objRecurso.igv01 = obj.compra.igv01 * -1
                    objRecurso.bi01 = obj.compra.bi01 * -1
                    objRecurso.bi02 = obj.compra.bi02 * -1
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault * -1


                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.icbper = obj.compra.icbper
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
            End Select
            If obj.compra.estadoCobro = "ANU" Then
                objRecurso.ImporteNacional = 0
                objRecurso.ImporteExtranjero = 0
                objRecurso.igv01 = 0.00
                objRecurso.icbper = 0.00
                objRecurso.bi01 = 0.00
                objRecurso.bi02 = 0.00
                'Else

                '    objRecurso.igv01 = obj.compra.igv01
                '    objRecurso.bi01 = obj.compra.bi01
                '    objRecurso.bi02 = obj.compra.bi02
            End If

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next



        Return Lista
    End Function


    Public Function GetBuscarComprobante(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)


        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = be.idEstablecimiento And
                       compra.serieVenta = be.serieVenta And compra.numeroVenta = be.numeroVenta And compra.tipoDocumento = be.tipoDocumento
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                    objRecurso.igv01 = obj.compra.igv01 * -1
                    objRecurso.bi01 = obj.compra.bi01 * -1
                    objRecurso.bi02 = obj.compra.bi02 * -1
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault * -1


                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.icbper = obj.compra.icbper
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
            End Select
            If obj.compra.estadoCobro = "ANU" Then
                objRecurso.ImporteNacional = 0
                objRecurso.ImporteExtranjero = 0
                objRecurso.igv01 = 0.00
                objRecurso.icbper = 0.00
                objRecurso.bi01 = 0.00
                objRecurso.bi02 = 0.00
                'Else

                '    objRecurso.igv01 = obj.compra.igv01
                '    objRecurso.bi01 = obj.compra.bi01
                '    objRecurso.bi02 = obj.compra.bi02
            End If

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next



        Return Lista
    End Function

    Public Function GetListarRegistroVentasXTipo(intIdEstablec As Integer, strPeriodo As String, ListaTipo As List(Of String)) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        'Dim ListaTipo As New List(Of String)

        'ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        'ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        'ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        'ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        'ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        'ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        'ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta)
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                    objRecurso.igv01 = obj.compra.igv01 * -1
                    objRecurso.bi01 = obj.compra.bi01 * -1
                    objRecurso.bi02 = obj.compra.bi02 * -1
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault * -1


                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.icbper = obj.compra.icbper
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
            End Select
            If obj.compra.estadoCobro = "ANU" Then
                objRecurso.ImporteNacional = 0
                objRecurso.ImporteExtranjero = 0
                objRecurso.igv01 = 0.00
                objRecurso.icbper = 0.00
                objRecurso.bi01 = 0.00
                objRecurso.bi02 = 0.00
                'Else

                '    objRecurso.igv01 = obj.compra.igv01
                '    objRecurso.bi01 = obj.compra.bi01
                '    objRecurso.bi02 = obj.compra.bi02
            End If

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next



        Return Lista
    End Function


    Public Function GetListarRegistroNotasVentas(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta)
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                    objRecurso.igv01 = obj.compra.igv01 * -1
                    objRecurso.bi01 = obj.compra.bi01 * -1
                    objRecurso.bi02 = obj.compra.bi02 * -1
                    objRecurso.icbper = obj.compra.icbper * -1

                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
                    objRecurso.icbper = obj.compra.icbper
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.icbper = obj.compra.icbper
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
            End Select
            If obj.compra.estadoCobro = "ANU" Then
                objRecurso.ImporteNacional = 0
                objRecurso.ImporteExtranjero = 0
                objRecurso.igv01 = 0.00
                objRecurso.bi01 = 0.00
                objRecurso.bi02 = 0.00
                objRecurso.icbper = 0.00
                'Else

                '    objRecurso.igv01 = obj.compra.igv01
                '    objRecurso.bi01 = obj.compra.bi01
                '    objRecurso.bi02 = obj.compra.bi02
            End If

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarRegistroVentas(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta)
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                    objRecurso.igv01 = obj.compra.igv01 * -1
                    objRecurso.bi01 = obj.compra.bi01 * -1
                    objRecurso.bi02 = obj.compra.bi02 * -1
                    objRecurso.icbper = obj.compra.icbper * -1

                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
                    objRecurso.icbper = obj.compra.icbper
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.icbper = obj.compra.icbper
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
            End Select
            If obj.compra.estadoCobro = "ANU" Then
                objRecurso.ImporteNacional = 0
                objRecurso.ImporteExtranjero = 0
                objRecurso.igv01 = 0.00
                objRecurso.bi01 = 0.00
                objRecurso.bi02 = 0.00
                objRecurso.icbper = 0.00
                'Else

                '    objRecurso.igv01 = obj.compra.igv01
                '    objRecurso.bi01 = obj.compra.bi01
                '    objRecurso.bi02 = obj.compra.bi02
            End If

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetInventoryProductoID(idProducto As Integer, almacen As Integer) As usp_GetProductInventoryID_Result
        Return HeliosData.usp_GetProductInventoryID(idProducto, almacen).SingleOrDefault
    End Function

    Public Function GetContadorVentas(be As documentoventaAbarrotes) As Integer()
        Dim ultimas24 = be.fechaDoc.Value.Date
        Dim ultimas48 = be.fechaDoc.Value.Date.AddHours(-24)
        Dim ultimas72 = be.fechaDoc.Value.Date.AddHours(-48)

        Dim ventas24 = HeliosData.documentoventaAbarrotes.Where(Function(o) TruncateTime(o.fechaDoc.Value.Date) = be.fechaDoc.Value.Date And o.idEmpresa = be.idEmpresa).Count

        Dim ventas48 = HeliosData.documentoventaAbarrotes.Where(
            Function(o) TruncateTime(o.fechaDoc.Value.Date) >= be.fechaDoc.Value.Date And
            TruncateTime(o.fechaDoc.Value.Date) <= ultimas48 And
            o.idEmpresa = be.idEmpresa).Count

        Dim ventas72 = HeliosData.documentoventaAbarrotes.Where(
            Function(o) TruncateTime(o.fechaDoc.Value.Date) >= be.fechaDoc.Value.Date And
            TruncateTime(o.fechaDoc.Value.Date) <= ultimas72 And
            o.idEmpresa = be.idEmpresa).Count

        Dim arrays() As Integer = Nothing
        arrays(0) = ventas24
        arrays(1) = ventas48
        arrays(2) = ventas72

        Return arrays
    End Function

    Public Function SaveVentaNotaCredito2Electronica(objDocumento As documento, nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()

                Dim codVentaOriginal = objDocumento.documentoventaAbarrotes.idPadre
                Dim listaArticulosVendidos = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = codVentaOriginal).ToList

                Dim codDoc = InsertNotaCreditoVentaElectronica(objDocumento, nDocumentoNota, nDocumentoSaldoVenta)
                If listaArticulosVendidos.Count > 0 Then
                    Dim fechaEnvioAlmacen = objDocumento.documentoventaAbarrotes.fechaDoc.Value 'be.documentoventaAbarrotes.fechaConfirmacion.Value.Date
                    For Each a In listaArticulosVendidos
                        Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                        New InventarioMovimiento With {
                        .idAlmacen = a.idAlmacen,
                        .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                        .tipoProducto = a.tipoProducto,
                        .idItem = a.idItem,
                        .nrolote = a.nrolote}, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(lista)
                    Next
                End If
                'Dim ListaArticulos = (From n In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                '                      Where n.tipoExistencia <> "GS"
                '                      Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct.ToList


                'For Each a In ListaArticulos
                '    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.idAlmacenOrigen,
                '                                                                                                     .fecha = New DateTime(objDocumento.documentoventaAbarrotes.fechaDoc.Value.Year,
                '                                                                                                                           objDocumento.documentoventaAbarrotes.fechaDoc.Value.Month, 1),
                '                                                                                                     .tipoProducto = a.tipoExistencia,
                '                                                                                                     .idItem = a.idItem,
                '                                                                                                     .nrolote = a.codigoLote}, Nothing)
                '    totalesBL.GetCurarKardexCaberas(listaAcurar)
                'Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return codDoc
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Function GetListarVentasNotasPeriodo(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)

        Dim listTipo As New List(Of String)
        listTipo.Add("VELC")
        listTipo.Add("NTCE")



        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And listTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro <> "ANU"
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            objRecurso.importeCostoMN = obj.compra.importeCostoMN
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next



        Return Lista
    End Function


    Public Function GetListarVentasPeriodoXTipo(IDempresa As String, intIdEstablec As Integer, strPeriodo As String, tipo As String, TipoConsulta As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim objRecurso As New documentoventaAbarrotes


        Select Case TipoConsulta
            Case "EMPRESA"

                Dim consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                              On doc.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                              On compra.idCliente Equals entidad.idEntidad
                              Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where doc.idEmpresa = IDempresa And
                              compra.fechaPeriodo = strPeriodo And compra.tipoVenta = tipo _
                              And compra.estadoCobro <> "ANU"
                                      Order By compra.fechaDoc Ascending).ToList

                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault * -1
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault * -1
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault * -1
                            objRecurso.icbper = obj.compra.icbper.GetValueOrDefault * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                            objRecurso.icbper = obj.compra.icbper.GetValueOrDefault
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                            objRecurso.icbper = obj.compra.icbper.GetValueOrDefault
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next


            Case "UNIDAD_ORGANICA"

                Dim consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                              On doc.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                              On compra.idCliente Equals entidad.idEntidad
                              Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where doc.idCentroCosto = intIdEstablec And
                                          doc.idEmpresa = IDempresa And
                              compra.fechaPeriodo = strPeriodo And compra.tipoVenta = tipo _
                              And compra.estadoCobro <> "ANU"
                                      Order By compra.fechaDoc Ascending).ToList

                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault * -1
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault * -1
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault * -1
                            objRecurso.icbper = obj.compra.icbper.GetValueOrDefault * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                            objRecurso.icbper = obj.compra.icbper.GetValueOrDefault
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                            objRecurso.icbper = obj.compra.icbper.GetValueOrDefault
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next

        End Select

        Return Lista
    End Function

    Public Function GetVentasCriterio(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas As Object = Nothing
        Select Case be.terminos
            Case "CLIENTE"
                consultaVentas = (From doc In HeliosData.documento
                                  Join compra In HeliosData.documentoventaAbarrotes
                               On doc.idDocumento Equals compra.idDocumento
                                  Group Join entidad In HeliosData.entidad
                               On compra.idCliente Equals entidad.idEntidad
                               Into ords = Group
                                  From e In ords.DefaultIfEmpty
                                  Where doc.idCentroCosto = be.idEstablecimiento And
                                          compra.fechaPeriodo = be.fechaPeriodo And
                                          compra.tipoVenta = be.tipoVenta And
                                          compra.idCliente = be.idCliente And
                                          compra.estadoCobro <> "ANU"
                                  Order By compra.fechaDoc Ascending).ToList
            Case "COMPROBANTE"
                consultaVentas = (From doc In HeliosData.documento
                                  Join compra In HeliosData.documentoventaAbarrotes
                               On doc.idDocumento Equals compra.idDocumento
                                  Group Join entidad In HeliosData.entidad
                               On compra.idCliente Equals entidad.idEntidad
                               Into ords = Group
                                  From e In ords.DefaultIfEmpty
                                  Where doc.idCentroCosto = be.idEstablecimiento And
                                      compra.fechaPeriodo = be.fechaPeriodo And
                                      compra.tipoVenta = be.tipoVenta And
                                      compra.tipoDocumento = be.tipoDocumento And
                                      compra.numeroVenta = be.numeroVenta And
                                      compra.estadoCobro <> "ANU"
                                  Order By compra.fechaDoc Ascending).ToList
        End Select



        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next

        '.idEmpresa = Gempresas.IdEmpresaRuc,
        'Dim consultaMembresia = entidadembresiaBL.GetRegistroMembresiasByPeriodo(New Entidadmembresia_Gym With {
        '                                                                         .idEstablecimiento = intIdEstablec,
        '                                                                         .periodo = strPeriodo})

        'For Each i In consultaMembresia
        '    objRecurso = New documentoventaAbarrotes

        '    objRecurso.idDocumento = i.idDocumento
        '    objRecurso.tipoOperacion = StatusTipoOperacion.VENTA
        '    objRecurso.fechaDoc = i.fechaRegistro
        '    objRecurso.tipoDocumento = i.tipodoc
        '    objRecurso.serie = i.serie
        '    objRecurso.serieVenta = i.serie
        '    objRecurso.numeroDoc = i.numero
        '    objRecurso.numeroVenta = i.numero
        '    objRecurso.numeroDocNormal = i.numero
        '    objRecurso.nombrePedido = "-"
        '    objRecurso.tipoDocEntidad = i.CustomEntidad.tipoDoc
        '    objRecurso.NroDocEntidad = i.CustomEntidad.nrodoc
        '    objRecurso.NombreEntidad = i.CustomEntidad.nombreCompleto
        '    objRecurso.TipoPersona = "Socio"
        '    objRecurso.ImporteNacional = i.importe
        '    objRecurso.ImporteExtranjero = 0
        '    objRecurso.tipoCambio = 1
        '    objRecurso.moneda = "NAC"
        '    objRecurso.estadoCobro = i.statusPago
        '    objRecurso.tipoVenta = TIPO_VENTA.VENTA_MEMBRESIAS_GIMANSIO
        '    objRecurso.notaCredito = 0
        '    objRecurso.usuarioActualizacion = "" ' i.usuarioActualizacion
        '    objRecurso.estadoEntrega = "E"
        '    Lista.Add(objRecurso)
        'Next

        Return Lista
    End Function

    Public Function GetListarTodasVentas(be As documentoventaAbarrotes, tipoConsulta As String) As List(Of documentoventaAbarrotes)
        Dim objRecurso As documentoventaAbarrotes
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        Dim consultaVentas As Object

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        ListaTipo.Add(TIPO_VENTA.VENTA_NOTA_PEDIDO)
        ListaTipo.Add(TIPO_VENTA.VENTA_NOTA_PEDIDO_ESPECIAL)

        Select Case tipoConsulta
            Case "PERIODO"

                If be.tipoDocumento = "0" Then
                    consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                                   On doc.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                                   On compra.idCliente Equals entidad.idEntidad
                                   Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where
                                              doc.idCentroCosto = be.idEstablecimiento And
                                              compra.fechaPeriodo = be.fechaPeriodo And
                                              ListaTipo.Contains(compra.tipoVenta) And
                                              compra.estadoCobro <> "ANU"
                                      Order By compra.fechaDoc Descending).ToList
                Else
                    consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                                   On doc.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                                   On compra.idCliente Equals entidad.idEntidad
                                   Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where
                                              doc.idCentroCosto = be.idEstablecimiento And
                                              compra.tipoDocumento = be.tipoDocumento And
                                              compra.fechaPeriodo = be.fechaPeriodo And
                                              ListaTipo.Contains(compra.tipoVenta) And
                                              compra.estadoCobro <> "ANU"
                                      Order By compra.fechaDoc Descending).ToList
                End If




                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotes
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next

            Case "DIA"

                If be.tipoDocumento = "0" Then
                    consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                                   On doc.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                                   On compra.idCliente Equals entidad.idEntidad
                                   Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where
                                              doc.idCentroCosto = be.idEstablecimiento And
                                              compra.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                              compra.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                              compra.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                              ListaTipo.Contains(compra.tipoVenta) And
                                              compra.estadoCobro <> "ANU"
                                      Order By compra.fechaDoc Descending).ToList
                Else
                    consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                                   On doc.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                                   On compra.idCliente Equals entidad.idEntidad
                                   Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where
                                          doc.idCentroCosto = be.idEstablecimiento And
                                          compra.tipoDocumento = be.tipoDocumento And
                                          compra.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                          compra.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                          compra.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                          ListaTipo.Contains(compra.tipoVenta) And
                                          compra.estadoCobro <> "ANU"
                                      Order By compra.fechaDoc Descending).ToList
                End If



                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotes
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetListarTodasVentasProductos(be As documentoventaAbarrotes, tipoConsulta As String) As List(Of documentoventaAbarrotesDet)
        Dim objRecurso As documentoventaAbarrotesDet
        Dim Lista As New List(Of documentoventaAbarrotesDet)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)

        Select Case tipoConsulta
            Case "PERIODO"
                Dim consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                                          On doc.idDocumento Equals compra.idDocumento
                                      Join ventaDetalle In HeliosData.documentoventaAbarrotesDet
                                          On ventaDetalle.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                                          On compra.idCliente Equals entidad.idEntidad
                                          Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where
                                          doc.idCentroCosto = be.idEstablecimiento And
                                          compra.fechaPeriodo = be.fechaPeriodo And
                                          ListaTipo.Contains(compra.tipoVenta) And
                                          compra.estadoCobro <> "ANU"
                                      Order By compra.fechaDoc Descending).ToList


                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotesDet
                    objRecurso = obj.ventaDetalle

                    objRecurso.documentoventaAbarrotes = New documentoventaAbarrotes
                    objRecurso.documentoventaAbarrotes.idDocumento = obj.compra.idDocumento
                    objRecurso.documentoventaAbarrotes.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.documentoventaAbarrotes.fechaDoc = obj.compra.fechaDoc
                    objRecurso.documentoventaAbarrotes.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.documentoventaAbarrotes.serie = obj.compra.serie
                    objRecurso.documentoventaAbarrotes.serieVenta = obj.compra.serieVenta
                    objRecurso.documentoventaAbarrotes.numeroDoc = obj.compra.numeroDoc
                    objRecurso.documentoventaAbarrotes.numeroVenta = obj.compra.numeroVenta
                    objRecurso.documentoventaAbarrotes.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.documentoventaAbarrotes.nombrePedido = obj.compra.nombrePedido

                    If Not IsNothing(obj.e) Then
                        objRecurso.documentoventaAbarrotes.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.documentoventaAbarrotes.NroDocEntidad = obj.e.nrodoc
                        objRecurso.documentoventaAbarrotes.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.documentoventaAbarrotes.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.documentoventaAbarrotes.tipoDocEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.NroDocEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.NombreEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select
                    objRecurso.documentoventaAbarrotes.tipoCambio = obj.compra.tipoCambio
                    objRecurso.documentoventaAbarrotes.moneda = obj.compra.moneda
                    objRecurso.documentoventaAbarrotes.estadoCobro = obj.compra.estadoCobro
                    objRecurso.documentoventaAbarrotes.tipoVenta = obj.compra.tipoVenta
                    objRecurso.documentoventaAbarrotes.notaCredito = obj.compra.notaCredito
                    objRecurso.documentoventaAbarrotes.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.documentoventaAbarrotes.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.documentoventaAbarrotes.idPadre = obj.compra.idPadre
                    objRecurso.documentoventaAbarrotes.EnvioSunat = obj.compra.EnvioSunat


                    Lista.Add(objRecurso)
                Next

            Case "DIA"

                Dim consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                                          On doc.idDocumento Equals compra.idDocumento
                                      Join ventaDetalle In HeliosData.documentoventaAbarrotesDet
                                          On ventaDetalle.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                                          On compra.idCliente Equals entidad.idEntidad
                                          Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where
                                          doc.idCentroCosto = be.idEstablecimiento And
                                          compra.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                          compra.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                          compra.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                          ListaTipo.Contains(compra.tipoVenta) And
                                          compra.estadoCobro <> "ANU"
                                      Order By compra.fechaDoc Descending).ToList

                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotesDet
                    objRecurso = obj.ventaDetalle

                    objRecurso.documentoventaAbarrotes = New documentoventaAbarrotes
                    objRecurso.documentoventaAbarrotes.idDocumento = obj.compra.idDocumento
                    objRecurso.documentoventaAbarrotes.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.documentoventaAbarrotes.fechaDoc = obj.compra.fechaDoc
                    objRecurso.documentoventaAbarrotes.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.documentoventaAbarrotes.serie = obj.compra.serie
                    objRecurso.documentoventaAbarrotes.serieVenta = obj.compra.serieVenta
                    objRecurso.documentoventaAbarrotes.numeroDoc = obj.compra.numeroDoc
                    objRecurso.documentoventaAbarrotes.numeroVenta = obj.compra.numeroVenta
                    objRecurso.documentoventaAbarrotes.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.documentoventaAbarrotes.nombrePedido = obj.compra.nombrePedido

                    If Not IsNothing(obj.e) Then
                        objRecurso.documentoventaAbarrotes.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.documentoventaAbarrotes.NroDocEntidad = obj.e.nrodoc
                        objRecurso.documentoventaAbarrotes.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.documentoventaAbarrotes.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.documentoventaAbarrotes.tipoDocEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.NroDocEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.NombreEntidad = String.Empty
                        objRecurso.documentoventaAbarrotes.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.documentoventaAbarrotes.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.documentoventaAbarrotes.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select
                    objRecurso.documentoventaAbarrotes.tipoCambio = obj.compra.tipoCambio
                    objRecurso.documentoventaAbarrotes.moneda = obj.compra.moneda
                    objRecurso.documentoventaAbarrotes.estadoCobro = obj.compra.estadoCobro
                    objRecurso.documentoventaAbarrotes.tipoVenta = obj.compra.tipoVenta
                    objRecurso.documentoventaAbarrotes.notaCredito = obj.compra.notaCredito
                    objRecurso.documentoventaAbarrotes.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.documentoventaAbarrotes.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.documentoventaAbarrotes.idPadre = obj.compra.idPadre
                    objRecurso.documentoventaAbarrotes.EnvioSunat = obj.compra.EnvioSunat

                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetListarTodasVentasProductosAcumulado(be As documentoventaAbarrotes, tipoConsulta As String) As List(Of documentoventaAbarrotesDet)
        Dim objRecurso As documentoventaAbarrotesDet
        Dim Lista As New List(Of documentoventaAbarrotesDet)
        Dim ListaTipo As New List(Of String)
        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)

        Select Case tipoConsulta
            Case "PERIODO"
                Dim consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                                          On doc.idDocumento Equals compra.idDocumento
                                      Join ventaDetalle In HeliosData.documentoventaAbarrotesDet
                                          On ventaDetalle.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                                          On compra.idCliente Equals entidad.idEntidad
                                          Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where
                                          doc.idCentroCosto = be.idEstablecimiento And
                                          compra.fechaPeriodo = be.fechaPeriodo And
                                          ListaTipo.Contains(compra.tipoVenta) And
                                          compra.estadoCobro <> "ANU"
                                      Order By compra.fechaDoc Descending
                                      Group New With {doc, compra, ventaDetalle, e} By
                                          ventaDetalle.idItem,
                                          ventaDetalle.nombreItem,
                                          ventaDetalle.destino,
                                          ventaDetalle.tipoExistencia
                                          Into g = Group
                                      Select
                                          idItem = CType(idItem, Int32?),
                                          nombreItem,
                                          destino,
                                          tipoExistencia,
                                          TotalCantidad = CType(g.Sum(Function(p) p.ventaDetalle.monto1), Decimal?),
                                          Total = CType(g.Sum(Function(p) p.ventaDetalle.importeMN), Decimal?)).ToList


                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotesDet With
                    {
                    .idItem = obj.idItem,
                    .nombreItem = obj.nombreItem,
                    .destino = obj.destino,
                    .tipoExistencia = obj.tipoExistencia,
                    .monto1 = obj.TotalCantidad.GetValueOrDefault,
                    .importeMN = obj.Total.GetValueOrDefault
                    }
                    Lista.Add(objRecurso)
                Next

            Case "DIA"

                Dim consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                                          On doc.idDocumento Equals compra.idDocumento
                                      Join ventaDetalle In HeliosData.documentoventaAbarrotesDet
                                          On ventaDetalle.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                                          On compra.idCliente Equals entidad.idEntidad
                                          Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where
                                          doc.idCentroCosto = be.idEstablecimiento And
                                          compra.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                          compra.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                          compra.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                          ListaTipo.Contains(compra.tipoVenta) And
                                          compra.estadoCobro <> "ANU"
                                      Order By compra.fechaDoc Descending
                                      Group New With {doc, compra, ventaDetalle, e} By
                                          ventaDetalle.idItem,
                                          ventaDetalle.nombreItem,
                                          ventaDetalle.destino,
                                          ventaDetalle.tipoExistencia
                                          Into g = Group
                                      Select
                                          idItem = CType(idItem, Int32?),
                                          nombreItem,
                                          destino,
                                          tipoExistencia,
                                          TotalCantidad = CType(g.Sum(Function(p) p.ventaDetalle.monto1), Decimal?),
                                          Total = CType(g.Sum(Function(p) p.ventaDetalle.importeMN), Decimal?)).ToList

                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotesDet With
                    {
                    .idItem = obj.idItem,
                    .nombreItem = obj.nombreItem,
                    .destino = obj.destino,
                    .tipoExistencia = obj.tipoExistencia,
                    .monto1 = obj.TotalCantidad.GetValueOrDefault,
                    .importeMN = obj.Total.GetValueOrDefault
                    }
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetListarVentasPeriodoXTipoAnulados(intIdEstablec As Integer, strPeriodo As String, tipo As String) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And compra.tipoVenta = tipo _
                       And compra.estadoCobro = "ANU"
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            objRecurso.importeCostoMN = obj.compra.importeCostoMN
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                    objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault * -1
                    objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault * -1
                    objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault * -1
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                    objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                    objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                    objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                    objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next

        '.idEmpresa = Gempresas.IdEmpresaRuc,
        Dim consultaMembresia = entidadembresiaBL.GetRegistroMembresiasByPeriodo(New Entidadmembresia_Gym With {
                                                                                 .idEstablecimiento = intIdEstablec,
                                                                                 .periodo = strPeriodo})

        For Each i In consultaMembresia
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = i.idDocumento
            objRecurso.tipoOperacion = StatusTipoOperacion.VENTA
            objRecurso.fechaDoc = i.fechaRegistro
            objRecurso.tipoDocumento = i.tipodoc
            objRecurso.serie = i.serie
            objRecurso.serieVenta = i.serie
            objRecurso.numeroDoc = i.numero
            objRecurso.numeroVenta = i.numero
            objRecurso.numeroDocNormal = i.numero
            objRecurso.nombrePedido = "-"
            objRecurso.tipoDocEntidad = i.CustomEntidad.tipoDoc
            objRecurso.NroDocEntidad = i.CustomEntidad.nrodoc
            objRecurso.NombreEntidad = i.CustomEntidad.nombreCompleto
            objRecurso.TipoPersona = "Socio"
            objRecurso.ImporteNacional = i.importe
            objRecurso.ImporteExtranjero = 0
            objRecurso.tipoCambio = 1
            objRecurso.moneda = "NAC"
            objRecurso.estadoCobro = i.statusPago
            objRecurso.tipoVenta = TIPO_VENTA.VENTA_MEMBRESIAS_GIMANSIO
            objRecurso.notaCredito = 0
            objRecurso.usuarioActualizacion = "" ' i.usuarioActualizacion
            objRecurso.estadoEntrega = "E"
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function
    Public Function GetListarVentasPeriodoXTipoAnuladosDia(intIdEstablec As Integer, fechaLab As Date, tipo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where
                                  doc.idCentroCosto = intIdEstablec And
                                  compra.fechaDoc.Value.Year = fechaLab.Year And
                                  compra.fechaDoc.Value.Month = fechaLab.Month And
                                  compra.fechaDoc.Value.Day = fechaLab.Day And
                                  compra.tipoVenta = tipo And
                                  compra.estadoCobro = "ANU"
                              Order By compra.fechaDoc Descending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            objRecurso.importeCostoMN = obj.compra.importeCostoMN
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                    objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault * -1
                    objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault * -1
                    objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault * -1
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                    objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                    objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                    objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                    objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next

        '.idEmpresa = Gempresas.IdEmpresaRuc,
        'Dim consultaMembresia = entidadembresiaBL.GetRegistroMembresiasByPeriodo(New Entidadmembresia_Gym With {
        '                                                                         .idEstablecimiento = intIdEstablec,
        '                                                                         .periodo = strPeriodo})

        'For Each i In consultaMembresia
        '    objRecurso = New documentoventaAbarrotes

        '    objRecurso.idDocumento = i.idDocumento
        '    objRecurso.tipoOperacion = StatusTipoOperacion.VENTA
        '    objRecurso.fechaDoc = i.fechaRegistro
        '    objRecurso.tipoDocumento = i.tipodoc
        '    objRecurso.serie = i.serie
        '    objRecurso.serieVenta = i.serie
        '    objRecurso.numeroDoc = i.numero
        '    objRecurso.numeroVenta = i.numero
        '    objRecurso.numeroDocNormal = i.numero
        '    objRecurso.nombrePedido = "-"
        '    objRecurso.tipoDocEntidad = i.CustomEntidad.tipoDoc
        '    objRecurso.NroDocEntidad = i.CustomEntidad.nrodoc
        '    objRecurso.NombreEntidad = i.CustomEntidad.nombreCompleto
        '    objRecurso.TipoPersona = "Socio"
        '    objRecurso.ImporteNacional = i.importe
        '    objRecurso.ImporteExtranjero = 0
        '    objRecurso.tipoCambio = 1
        '    objRecurso.moneda = "NAC"
        '    objRecurso.estadoCobro = i.statusPago
        '    objRecurso.tipoVenta = TIPO_VENTA.VENTA_MEMBRESIAS_GIMANSIO
        '    objRecurso.notaCredito = 0
        '    objRecurso.usuarioActualizacion = "" ' i.usuarioActualizacion
        '    objRecurso.estadoEntrega = "E"
        '    Lista.Add(objRecurso)
        'Next

        Return Lista
    End Function


    Function InsertNotaCreditoVentaElectronica(objDocumento As documento, nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
        Dim DocumentoBL As New documentoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim CAN_BOF As Decimal = 0
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0

        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0
        Dim cajaBL As New documentoCajaDetalleBL

        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer = 0

        Dim t As New totalesAlmacen
        Try
            Using ts As New TransactionScope()

                cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentoventaAbarrotes.IdNumeracion))
                'cval = cval + 1
                objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
                objDocumento.documentoventaAbarrotes.numeroVenta = cval

                DocumentoBL.Insert(objDocumento)
                Dim venta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.idPadre).FirstOrDefault

                Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    Dim itemDetalle = ventaDetalleBL.GetUbicar_documentoventaAbarrotesDetPorID(i.secuencia)
                    i.codigoLote = itemDetalle.codigoLote
                    ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                    'VALIDANDO ITEMS INGRESADOS COMO NOTA DE CREDITO
                    cajaBL.ActualizarItemsPagos(i, objDocumento.documentoventaAbarrotes.idPadre)
                    '--------------------------------------------------------

                    If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                        Select Case i.TipoOperacion
                            Case "9916" ' DEVOLUCION DE EXISTENCIAS
                                i.codigoLote = itemDetalle.codigoLote
                                inventario.InsertNotaCreditoVenta(i, objDocumento)

                                't = New totalesAlmacen
                                't.idEmpresa = i.IdEmpresa
                                't.idEstablecimiento = i.IdEstablecimiento
                                't.idAlmacen = i.idAlmacenOrigen
                                't.origenRecaudo = i.destino
                                't.idItem = i.idItem
                                ''t.cantidad = i.monto1
                                ''t.precioUnitarioCompra = 0
                                't.importeSoles = i.salidaCostoMN
                                't.importeDolares = i.salidaCostoME
                                't.cantidad = i.monto1
                                ''t.precioUnitarioCompra = i.precioUnitario
                                't.precioUnitarioCompra = 0
                                ''t.importeSoles = i.montokardex
                                ''t.importeDolares = i.montokardexUS

                                'totalesBL.UpdateSingle2(t)

                        End Select
                    End If
                Next

                If Not IsNothing(objDocumento.documentoGuia) Then
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If
                End If

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If
                'Cobrando Saldo de la venta cuando es una venta al credito
                '    If objDocumento.documentoventaAbarrotes.ImporteDevMN > 0 Then
                'If objDocumento.documentoventaAbarrotes.SaldoVentaMN > 0 Then
                If Not IsNothing(nDocumentoSaldoVenta.documentoCaja) Then
                    If Not IsNothing(nDocumentoSaldoVenta.documentoCaja.idEmpresa) Then
                        SaveCaja(nDocumentoSaldoVenta, objDocumento.documentoventaAbarrotes.idPadre)
                    End If
                End If

                '-----------------------------------------------------------------------------------
                'creando documento de excendente por devolucion de dinero
                If Not IsNothing(objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion) Then
                    Dim codGenerado = GrabarDocumentoDevolucion(objDocumento)
                    Select Case objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion
                        Case TIPO_VENTA.PAGO.COBRADO
                            If Not IsNothing(nDocumentoNota.idEmpresa) Then
                                Dim listaPagos As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = codGenerado).ToList
                                SaveCajaVenta(nDocumentoNota, codGenerado, listaPagos)
                            End If
                        Case TIPO_VENTA.PAGO.PENDIENTE_PAGO

                    End Select

                End If


                Dim ventaDetalle = (From n In HeliosData.documentoventaAbarrotesDet
                                    Where n.idDocumento = venta.idDocumento AndAlso n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO).Count

                If ventaDetalle > 0 Then
                    venta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                Else
                    'venta.estadoCobro = TIPO_VENTA.PAGO.COBRADO
                    venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito
                End If
                'venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito

                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Function BuscarDocumentosAnuladosFechaTicket(tipoDoc As String, ruc As String, ticket As String) As List(Of documentoventaAbarrotes)


        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where i.tipoDocumento = tipoDoc And i.tipoVenta = "VELC" _
                            And i.EnvioSunat = "SI" And i.idEmpresa = ruc And i.estadoCobro = "ANU" And i.ticketElectronico = ticket).ToList

        Return consulta
    End Function

    Public Sub ListaReenvioSunatAnulados(lista As List(Of documentoventaAbarrotes), nroTicket As String)

        Dim numeracionBL As New numeracionBoletasBL
        'Dim cval As Integer = 0
        Try

            Using ts As New TransactionScope()

                'cval = numeracionBL.GenerarNumeroPorID(idNum)

                For Each i In lista
                    Me.UpdateReenvioSunatResumen(i.idDocumento, nroTicket)
                Next



                HeliosData.SaveChanges()
                ts.Complete()
            End Using

        Catch ex As Exception
            Throw ex
        End Try

    End Sub

    Public Sub ValidarEnviosSunat(lista As List(Of documentoventaAbarrotes))

        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer = 0
        Try

            Using ts As New TransactionScope()
                For Each i In lista
                    Me.UpdateEnvioSunatValidado(i.idDocumento)
                Next

                HeliosData.SaveChanges()
                ts.Complete()
            End Using

        Catch ex As Exception
            Throw ex
        End Try

    End Sub

    Public Sub UpdateEnvioSunatValidado(objDocumento As Integer)

        Try
            Using ts As New TransactionScope()
                Dim documento As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) _
                                            o.idDocumento = objDocumento).First()

                documento.EnvioSunat = "VA"
                'documento.ticketElectronico = nroTicket


                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub ListaReenvioSunatResumen(lista As List(Of documentoventaAbarrotes), nroTicket As String)



        Try

            Using ts As New TransactionScope()



                For Each i In lista
                    Me.UpdateReenvioSunatResumen(i.idDocumento, nroTicket)
                Next




                HeliosData.SaveChanges()
                ts.Complete()
            End Using

        Catch ex As Exception
            Throw ex
        End Try

    End Sub

    Public Sub UpdateReenvioSunatResumen(objDocumento As Integer, nroTicket As String)

        Try
            Using ts As New TransactionScope()
                Dim documento As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) _
                                            o.idDocumento = objDocumento).First()

                documento.ticketElectronico = nroTicket

                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Function BuscarBoletasXTicketSunat(ticket As String) As List(Of documentoventaAbarrotes)

        Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)



        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Join x In HeliosData.entidad On i.idCliente Equals x.idEntidad
                        Where i.ticketElectronico = ticket
                        Select
                                    idDoc = i.idDocumento,
                                    tipodDoc = i.tipoDocumento,
                                    serie = i.serieVenta,
                            fechadoc = i.fechaDoc,
                                numero = i.numeroVenta,
                                nrodoc = x.nrodoc,
                                tipDocClie = x.tipoDoc,
                                moneda = i.moneda,
                                gravada = i.bi01,
                                igv = i.igv01,
                            numeracionelectronica = i.numeracionElectronica,
                                importe = i.ImporteNacional).Take(250)

        For Each i In consulta

            objeto = New documentoventaAbarrotes
            objeto.idDocumento = i.idDoc
            objeto.tipoDocumento = i.tipodDoc
            objeto.serieVenta = i.serie
            objeto.numeroVenta = i.numero
            objeto.NroDocEntidad = i.nrodoc
            objeto.tipoDocEntidad = i.tipDocClie
            objeto.moneda = i.moneda
            objeto.bi01 = i.gravada
            objeto.numeracionElectronica = i.numeracionelectronica
            objeto.igv01 = i.igv
            objeto.fechaDoc = i.fechadoc
            objeto.ImporteNacional = i.importe


            lista.Add(objeto)
        Next

        Return lista






    End Function

    Function BuscarBoletasXTicketSunatNotas(ticket As String) As List(Of documentoventaAbarrotes)
        Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)
        'Dim consulta = (From i In HeliosData.documentoventaAbarrotes
        '                Join x In HeliosData.documentoventaAbarrotes On i.idPadre Equals x.idDocumento
        '                Where TruncateTime(i.fechaDoc) = fecha.Date And i.tipoDocumento = "07" And i.tipoVenta = "NTC" And Not i.EnvioSunat = "SI" And x.tipoDocumento = "03"
        '                Select i).ToList

        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Join Z In HeliosData.documentoventaAbarrotes On i.idPadre Equals Z.idDocumento
                        Join x In HeliosData.entidad On i.idCliente Equals x.idEntidad
                        Where i.ticketElectronico = ticket And i.tipoVenta = "NTCE"
                        Select
                                idDoc = i.idDocumento,
                                tipodDoc = i.tipoDocumento,
                                serie = i.serieVenta,
                            numero = i.numeroVenta,
                            nrodoc = x.nrodoc,
                            tipDocClie = x.tipoDoc,
                            moneda = i.moneda,
                            fecha = i.fechaDoc,
                            gravada = i.bi01,
                            igv = i.igv01,
                            docRel = Z.tipoDocumento,
                            numRel = Z.numeroVenta,
                            serRel = Z.serieVenta,
                            numeracionelectronica = i.numeracionElectronica,
                            importe = i.ImporteNacional).ToList

        For Each i In consulta

            objeto = New documentoventaAbarrotes
            objeto.idDocumento = i.idDoc
            objeto.tipoDocumento = i.tipodDoc
            objeto.serieVenta = i.serie
            objeto.numeroVenta = i.numero
            objeto.NroDocEntidad = i.nrodoc
            objeto.tipoDocEntidad = i.tipDocClie
            objeto.moneda = i.moneda
            objeto.bi01 = i.gravada
            objeto.igv01 = i.igv
            objeto.fechaDoc = i.fecha
            objeto.ImporteNacional = i.importe
            objeto.TipoDocNota = i.docRel
            objeto.serie = i.serRel
            objeto.numeroDoc = i.numRel
            objeto.numeracionElectronica = i.numeracionelectronica


            lista.Add(objeto)
        Next

        Return lista




    End Function

    Function FacturaBajasPendiente(docVentaAbarrotes As documentoventaAbarrotes) As Integer


        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where i.tipoDocumento = "01" _
                            And i.tipoVenta = "VELC" _
                                And i.EnvioSunat = "PE" _
                            And i.idEmpresa = docVentaAbarrotes.idEmpresa _
                            And i.estadoCobro = "ANU").Count

        Return consulta

    End Function

    Function BoletasBaja(docVentaAbarrotes As documentoventaAbarrotes) As Integer

        Dim lista As New List(Of documentoventaAbarrotes)

        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Join x In HeliosData.entidad On i.idCliente Equals x.idEntidad
                        Where i.tipoDocumento = "03" And
                            i.tipoVenta = "VELC" And
                            i.EnvioSunat = "PE" And
                            i.estadoCobro = "ANU" And
                            i.idEmpresa = docVentaAbarrotes.idEmpresa
                        Select
                                idDoc = i.idDocumento,
                                tipodDoc = i.tipoDocumento,
                                serie = i.serieVenta,
                            numero = i.numeroVenta,
                            nrodoc = x.nrodoc,
                            tipDocClie = x.tipoDoc,
                            moneda = i.moneda,
                            gravada = i.bi01,
                            igv = i.igv01,
                            importe = i.ImporteNacional).Count



        Return consulta

    End Function

    Function BoletasBajaValidar(docVentaAbarrotes As documentoventaAbarrotes) As Integer


        Dim consulta = (From x In HeliosData.documentoventaAbarrotes
                        Where
                        CStr(x.EnvioSunat) = "SI" And x.tipoDocumento = "03" And x.estadoCobro = "ANU" And
                            x.idEmpresa = docVentaAbarrotes.idEmpresa And
                         (Not x.ticketElectronico = Nothing)
                        Group x By x.ticketElectronico Into g = Group
                        Select New With {
                        ticketElectronico}).Count

        Return consulta
    End Function

    Function FacturasBajasValidar(docVentaAbarrotes As documentoventaAbarrotes) As Integer


        Dim consulta = (From x In HeliosData.documentoventaAbarrotes
                        Where
                        CStr(x.EnvioSunat) = "SI" And x.tipoDocumento = "01" And x.estadoCobro = "ANU" And
                            x.idEmpresa = docVentaAbarrotes.idEmpresa And
                         (Not x.ticketElectronico = Nothing)
                        Group x By x.ticketElectronico Into g = Group
                        Select New With {
                        ticketElectronico}).Count


        Return consulta
    End Function

    Function ResumenBoletasPendiente(docVentaAbarrotes As documentoventaAbarrotes) As Integer

        Dim consulta = (From x In HeliosData.documentoventaAbarrotes
                        Where
                        CStr(x.EnvioSunat) = "SI" And x.tipoDocumento = "03" And Not x.estadoCobro = "ANU" And
                            x.idEmpresa = docVentaAbarrotes.idEmpresa And
                         (Not x.ticketElectronico = Nothing)
                        Group x By x.ticketElectronico Into g = Group
                        Select New With {
                        ticketElectronico}).Count

        Return consulta

    End Function

    Function BoletasPendientesEnvio(docVentaAbarrotes As documentoventaAbarrotes) As Integer

        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where i.tipoDocumento = "03" And i.tipoVenta = "VELC" And
                            i.idEmpresa = docVentaAbarrotes.idEmpresa And
                            Not i.EnvioSunat = "SI" And Not i.EnvioSunat = "VA" And
                            Not i.estadoCobro = "ANU").Count



        Return consulta

    End Function

    Function NotasPendientesSunat(docVentaAbarrotes As documentoventaAbarrotes) As Integer
        Dim list As New List(Of String)

        list.Add("VA") 'envio anulado y validado
        list.Add("PE")  'enviado anulado 
        list.Add("SI") 'enviado sin anular

        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Join x In HeliosData.documentoventaAbarrotes On i.idPadre Equals x.idDocumento
                        Where i.tipoDocumento = "07" And
                            i.tipoVenta = "NTCE" And
                            Not i.EnvioSunat = "SI" And
                            x.tipoDocumento = "01" And
                            x.tipoVenta = "VELC" And
                            i.idEmpresa = docVentaAbarrotes.idEmpresa And
                                list.Contains(x.EnvioSunat)
                        Select i).Count

        Return consulta

    End Function

    Function FacturasPendientesSunat(docVentaAbarrotes As documentoventaAbarrotes) As Integer
        Dim list As New List(Of String)

        list.Add("VA") 'envio anulado y validado
        list.Add("PE")  'enviado anulado 
        list.Add("SI") 'enviado sin anular

        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where i.tipoDocumento = "01" And
                            i.tipoVenta = "VELC" And
                            i.idEmpresa = docVentaAbarrotes.idEmpresa And
                            Not list.Contains(i.EnvioSunat)).Count

        Return consulta

    End Function

    Function TicketsXvalidarBajasFactura(docVentaAbarrotes As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)

        Dim obj As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim consulta = (From x In HeliosData.documentoventaAbarrotes
                        Where
                        CStr(x.EnvioSunat) = "SI" And x.tipoDocumento = "01" And x.estadoCobro = "ANU" And x.tipoVenta = "VELC" And
                         (Not x.ticketElectronico = Nothing) _
                           And x.idEmpresa = docVentaAbarrotes.idEmpresa
                        Group x By x.ticketElectronico Into g = Group
                        Select New With {
                        ticketElectronico}).ToList

        For Each i In consulta
            obj = New documentoventaAbarrotes

            obj.ticketElectronico = i.ticketElectronico
            lista.Add(obj)
        Next



        Return lista

    End Function

    Function TicketsXvalidar(docVentaAbarrotes As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)

        Dim obj As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim consulta = (From x In HeliosData.documentoventaAbarrotes
                        Where
                        CStr(x.EnvioSunat) = "SI" And x.tipoDocumento = "03" And Not x.estadoCobro = "ANU" And x.tipoVenta = "VELC" And
                         (Not x.ticketElectronico = Nothing) _
                            And x.idEmpresa = docVentaAbarrotes.idEmpresa
                        Group x By x.ticketElectronico Into g = Group
                        Select New With {
                        ticketElectronico}).ToList

        For Each i In consulta
            obj = New documentoventaAbarrotes

            obj.ticketElectronico = i.ticketElectronico
            lista.Add(obj)
        Next



        Return lista

    End Function

    Function TicketsXvalidarNotasBoleta(docVentaAbarrotes As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)

        Dim obj As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim consulta = (From x In HeliosData.documentoventaAbarrotes
                        Join i In HeliosData.documentoventaAbarrotes On i.idDocumento Equals x.idPadre
                        Where
                        CStr(x.EnvioSunat) = "SI" And x.tipoDocumento = "07" And i.tipoDocumento = "03" And x.tipoVenta = "NTCE" And i.tipoVenta = "VELC" And
                         (Not x.ticketElectronico = Nothing) _
                            And x.idEmpresa = docVentaAbarrotes.idEmpresa
                        Group x By x.ticketElectronico Into g = Group
                        Select New With {
                        ticketElectronico}).ToList

        For Each i In consulta
            obj = New documentoventaAbarrotes

            obj.ticketElectronico = i.ticketElectronico
            lista.Add(obj)
        Next



        Return lista

    End Function

    Function TicketsXvalidarBajasBoletas(docVentaAbarrotes As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)

        Dim obj As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim consulta = (From x In HeliosData.documentoventaAbarrotes
                        Where
                        CStr(x.EnvioSunat) = "SI" And x.tipoDocumento = "03" And x.estadoCobro = "ANU" And x.tipoVenta = "VELC" And
                         (Not x.ticketElectronico = Nothing) _
                            And x.idEmpresa = docVentaAbarrotes.idEmpresa
                        Group x By x.ticketElectronico Into g = Group
                        Select New With {
                        ticketElectronico}).ToList

        For Each i In consulta
            obj = New documentoventaAbarrotes

            obj.ticketElectronico = i.ticketElectronico
            lista.Add(obj)
        Next



        Return lista

    End Function

    Function BuscarBoletasAnuladas(fecha As DateTime, IdEmpresa As String) As List(Of documentoventaAbarrotes)

        Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Join x In HeliosData.entidad On i.idCliente Equals x.idEntidad
                        Where TruncateTime(i.fechaDoc) = fecha.Date _
                         And i.tipoDocumento = "03" And i.tipoVenta = "VELC" And i.EnvioSunat = "PE" And i.estadoCobro = "ANU" _
                            And i.idEmpresa = IdEmpresa
                        Select
                                idDoc = i.idDocumento,
                                tipodDoc = i.tipoDocumento,
                                serie = i.serieVenta,
                            numero = i.numeroVenta,
                            nrodoc = x.nrodoc,
                            tipDocClie = x.tipoDoc,
                            moneda = i.moneda,
                            gravada = i.bi01,
                            exonerada = i.bi02,
                            igv = i.igv01,
                            importe = i.ImporteNacional).Take(250)

        For Each i In consulta

            objeto = New documentoventaAbarrotes
            objeto.idDocumento = i.idDoc
            objeto.tipoDocumento = i.tipodDoc
            objeto.serieVenta = i.serie
            objeto.numeroVenta = i.numero
            objeto.NroDocEntidad = i.nrodoc
            objeto.tipoDocEntidad = i.tipDocClie
            objeto.moneda = i.moneda
            objeto.bi01 = i.gravada
            objeto.bi02 = i.exonerada
            objeto.igv01 = i.igv
            objeto.ImporteNacional = i.importe


            lista.Add(objeto)
        Next

        Return lista

    End Function

    Function BuscarFacturanoEnviadasPeriodo(fecha As DateTime, tipoDoc As String, idEmpresa As String) As List(Of documentoventaAbarrotes)

        '  Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim list As New List(Of String)

        list.Add("VA") 'envio anulado y validado
        list.Add("PE")  'enviado anulado 
        list.Add("SI") 'enviado sin anular

        lista = New List(Of documentoventaAbarrotes)
        If tipoDoc = "01" Or tipoDoc = "03" Then

            'Dim consulta = (From i In HeliosData.documentoventaAbarrotes
            '                Where TruncateTime(i.fechaDoc) = fecha.Date And i.tipoDocumento = tipoDoc And i.tipoVenta = "VPOS" And Not i.EnvioSunat = "SI" And Not i.estadoCobro = "ANU" And Not i.EnvioSunat = "VA").ToList

            lista = (From i In HeliosData.documentoventaAbarrotes
                     Where i.fechaDoc.Value.Year = fecha.Year And i.fechaDoc.Value.Month = fecha.Month And
                                i.tipoDocumento = tipoDoc And
                                i.tipoVenta = "VELC" And Not i.EnvioSunat = "SI" And Not i.EnvioSunat = "VA" _
                                And Not i.EnvioSunat = "PE" And i.idEmpresa = idEmpresa).ToList

            '  Return lista

        ElseIf tipoDoc = "07" Then

            lista = (From i In HeliosData.documentoventaAbarrotes
                     Join x In HeliosData.documentoventaAbarrotes On i.idPadre Equals x.idDocumento
                     Where i.fechaDoc.Value.Year = fecha.Year And i.fechaDoc.Value.Month = fecha.Month And
                                i.tipoDocumento = tipoDoc And i.tipoVenta = "NTCE" And Not i.EnvioSunat = "SI" And x.tipoDocumento = "01" And x.tipoVenta = "VELC" And i.idEmpresa = idEmpresa And
                                list.Contains(x.EnvioSunat)
                     Select i).ToList
            '    Return lista

        End If

        Return lista
    End Function

    Public Sub UpdateFacturasXEstado(objDocumento As Integer, estado As String)

        Try
            Using ts As New TransactionScope()
                Dim documento As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) _
                                            o.idDocumento = objDocumento).Single()

                documento.EnvioSunat = estado


                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub ListaEnvioSunatAnulados(lista As List(Of documentoventaAbarrotes), nroTicket As String, idNum As Integer)

        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer = 0
        Try

            Using ts As New TransactionScope()

                cval = numeracionBL.GenerarNumeroPorID(idNum)

                For Each i In lista
                    Me.UpdateEnvioSunatResumen(i.idDocumento, cval, nroTicket)
                Next



                HeliosData.SaveChanges()
                ts.Complete()
            End Using

        Catch ex As Exception
            Throw ex
        End Try

    End Sub

    Public Sub UpdateEnvioSunatResumen(objDocumento As Integer, nroTicket As String)

        Try
            Using ts As New TransactionScope()
                Dim documento As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) _
                                            o.idDocumento = objDocumento).First()

                documento.EnvioSunat = "SI"
                documento.ticketElectronico = nroTicket


                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Function BuscarDocumentosAnuladosFecha(fecha As DateTime, tipoDoc As String, ruc As String) As List(Of documentoventaAbarrotes)

        'Dim consulta = (From i In HeliosData.documentoventaAbarrotes
        '                Where TruncateTime(i.fechaDoc) = fecha.Date And i.tipoDocumento = tipoDoc And i.tipoVenta = "VPOS" _
        '                    And Not i.EnvioSunat = "SI" And i.idEmpresa = ruc And i.estadoCobro = "ANU" And Not i.EnvioSunat = "VA").ToList

        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where TruncateTime(i.fechaDoc) = fecha.Date And i.tipoDocumento = tipoDoc And i.tipoVenta = "VELC" _
                            And i.EnvioSunat = "PE" And i.idEmpresa = ruc And i.estadoCobro = "ANU").ToList

        Return consulta
    End Function

    Public Function GetUbicar_NotaXID(idDocumento As Integer) As documentoventaAbarrotes
        Dim objeto As documentoventaAbarrotes

        Dim consulta = (From a In HeliosData.documentoventaAbarrotes
                        Join b In HeliosData.documentoventaAbarrotes On b.idDocumento Equals a.idPadre
                        Where a.idDocumento = idDocumento And a.tipoVenta = "NTCE" And a.tipoDocumento = "07"
                        Select
                             idDoc = a.idDocumento,
                            tipodoc = a.tipoDocumento,
                             serie = a.serieVenta,
                              numero = a.numeroVenta,
                             montoigv = a.igv01,
                            idclie = a.idCliente,
                            fecha = a.fechaDoc,
                               importe = a.ImporteNacional,
                            gravada = a.bi01,
                            exonerado = a.bi02,
                           seriepadre = b.serieVenta,
                            moneda = a.moneda,
                             numeropadre = b.numeroVenta,
                            tipodocpadre = b.tipoDocumento,
                            notacredito = a.notaCredito,
                            glosario = a.glosa,
                            totalicbper = a.icbper).FirstOrDefault

        objeto = New documentoventaAbarrotes
        objeto.idDocumento = consulta.idDoc
        objeto.tipoDocumento = consulta.tipodoc
        objeto.serieVenta = consulta.serie
        objeto.idCliente = consulta.idclie
        objeto.numeroVenta = consulta.numero
        objeto.igv01 = consulta.montoigv
        objeto.ImporteNacional = consulta.importe
        objeto.serie = consulta.seriepadre
        objeto.numeroDoc = consulta.numeropadre
        objeto.TipoDocNota = consulta.tipodocpadre
        objeto.fechaDoc = consulta.fecha
        objeto.bi01 = consulta.gravada
        objeto.bi02 = consulta.exonerado
        objeto.moneda = consulta.moneda
        objeto.notaCredito = consulta.notacredito
        objeto.glosa = consulta.glosario
        objeto.icbper = consulta.totalicbper.GetValueOrDefault


        Return objeto

    End Function

    Function BuscarDocumentosFecha(fecha As DateTime, tipoDoc As String) As List(Of documentoventaAbarrotes)


        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where TruncateTime(i.fechaDoc) = fecha.Date And i.tipoDocumento = tipoDoc And i.tipoVenta = "VPOS" And Not i.EnvioSunat = "SI").ToList

        Return consulta
    End Function

    Function BuscarNotasXDocumento(idDoc As Integer) As List(Of documentoventaAbarrotes)


        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Where i.idPadre = idDoc And i.tipoDocumento = "07" And i.tipoVenta = "NTC" And Not i.EnvioSunat = "SI").ToList

        Return consulta
    End Function

    Public Sub ListaEnvioSunat(lista As List(Of documentoventaAbarrotes))


        Try

            Using ts As New TransactionScope()
                For Each i In lista
                    Me.UpdateEnvioSunat(i.idDocumento)
                Next

                HeliosData.SaveChanges()
                ts.Complete()
            End Using

        Catch ex As Exception
            Throw ex
        End Try

    End Sub



    Public Sub UpdateEnvioSunatResumen(objDocumento As Integer, idNum As Integer, nroTicket As String)

        Try
            Using ts As New TransactionScope()
                Dim documento As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) _
                                            o.idDocumento = objDocumento).First()

                documento.EnvioSunat = "SI"
                documento.ticketElectronico = nroTicket
                documento.numeracionElectronica = idNum

                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub ListaEnvioSunatResumen(lista As List(Of documentoventaAbarrotes), idNum As Integer, nroTicket As String)

        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer = 0
        Try

            Using ts As New TransactionScope()

                cval = numeracionBL.GenerarNumeroPorID(idNum)

                For Each i In lista
                    Me.UpdateEnvioSunatResumen(i.idDocumento, cval, nroTicket)
                Next




                HeliosData.SaveChanges()
                ts.Complete()
            End Using

        Catch ex As Exception
            Throw ex
        End Try

    End Sub

    Public Sub UpdateEnvioSunat(objDocumento As Integer)

        Try
            Using ts As New TransactionScope()
                Dim documento As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) _
                                            o.idDocumento = objDocumento).First()

                documento.EnvioSunat = "SI"


                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Function NotasCreditoBoleta(fecha As DateTime, tipDoc As String, IdEmpresa As String) As List(Of documentoventaAbarrotes)
        Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)
        'Dim consulta = (From i In HeliosData.documentoventaAbarrotes
        '                Join x In HeliosData.documentoventaAbarrotes On i.idPadre Equals x.idDocumento
        '                Where TruncateTime(i.fechaDoc) = fecha.Date And i.tipoDocumento = "07" And i.tipoVenta = "NTC" And Not i.EnvioSunat = "SI" And x.tipoDocumento = "03"
        '                Select i).ToList

        Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                        Join Z In HeliosData.documentoventaAbarrotes On i.idPadre Equals Z.idDocumento
                        Join x In HeliosData.entidad On i.idCliente Equals x.idEntidad
                        Where TruncateTime(i.fechaDoc) = fecha.Date And
                            i.tipoDocumento = tipDoc And
                            i.tipoVenta = "NTCE" And
                            Not i.EnvioSunat = "SI" And
                            i.idEmpresa = IdEmpresa And
                            Z.tipoDocumento = "03"
                        Select
                                idDoc = i.idDocumento,
                                tipodDoc = i.tipoDocumento,
                                serie = i.serieVenta,
                            numero = i.numeroVenta,
                            nrodoc = x.nrodoc,
                            tipDocClie = x.tipoDoc,
                            moneda = i.moneda,
                            gravada = i.bi01,
                            exonerada = i.bi02,
                            igv = i.igv01,
                            docRel = Z.tipoDocumento,
                            numRel = Z.numeroVenta,
                            serRel = Z.serieVenta,
                            importe = i.ImporteNacional).ToList

        For Each i In consulta

            objeto = New documentoventaAbarrotes
            objeto.idDocumento = i.idDoc
            objeto.tipoDocumento = i.tipodDoc
            objeto.serieVenta = i.serie
            objeto.numeroVenta = i.numero
            objeto.NroDocEntidad = i.nrodoc
            objeto.tipoDocEntidad = i.tipDocClie
            objeto.moneda = i.moneda
            objeto.bi01 = i.gravada
            objeto.bi02 = i.exonerada
            objeto.igv01 = i.igv
            objeto.ImporteNacional = i.importe
            objeto.TipoDocNota = i.docRel
            objeto.serie = i.serRel
            objeto.numeroDoc = i.numRel


            lista.Add(objeto)
        Next

        Return lista




    End Function

    Function BuscarFacturanoEnviadas(fecha As DateTime, tipoDoc As String, idEmpresa As String) As List(Of documentoventaAbarrotes)

        Dim objeto As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim list As New List(Of String)

        list.Add("VA") 'envio anulado y validado
        list.Add("PE")  'enviado anulado 
        list.Add("SI") 'enviado sin anular


        lista = New List(Of documentoventaAbarrotes)

        If tipoDoc = "01" Then

            'Dim consulta = (From i In HeliosData.documentoventaAbarrotes
            '                Where TruncateTime(i.fechaDoc) = fecha.Date And i.tipoDocumento = tipoDoc And i.tipoVenta = "VPOS" And Not i.EnvioSunat = "SI" And Not i.estadoCobro = "ANU" And Not i.EnvioSunat = "VA").ToList

            Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                            Where TruncateTime(i.fechaDoc) = fecha.Date And i.tipoDocumento = tipoDoc And i.tipoVenta = "VELC" And Not i.EnvioSunat = "SI" And Not i.EnvioSunat = "VA" And Not i.EnvioSunat = "PE" And i.idEmpresa = idEmpresa).ToList

            Return consulta

        ElseIf tipoDoc = "07" Then

            Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                            Join x In HeliosData.documentoventaAbarrotes On i.idPadre Equals x.idDocumento
                            Where TruncateTime(i.fechaDoc) = fecha.Date And i.tipoDocumento = tipoDoc And i.tipoVenta = "NTCE" And Not i.EnvioSunat = "SI" And x.tipoDocumento = "01" And
                                i.idEmpresa = idEmpresa And x.tipoVenta = "VELC" And
                                list.Contains(x.EnvioSunat)
                            Select i).ToList
            Return consulta


        ElseIf tipoDoc = "03" Then

            Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                            Join x In HeliosData.entidad On i.idCliente Equals x.idEntidad
                            Where TruncateTime(i.fechaDoc) = fecha.Date And i.tipoDocumento = tipoDoc And i.tipoVenta = "VELC" And Not i.EnvioSunat = "SI" And Not i.EnvioSunat = "VA" And
                                Not i.estadoCobro = "ANU" And i.idEmpresa = idEmpresa
                            Select
                                    idDoc = i.idDocumento,
                                    tipodDoc = i.tipoDocumento,
                                    serie = i.serieVenta,
                                numero = i.numeroVenta,
                                nrodoc = x.nrodoc,
                                tipDocClie = x.tipoDoc,
                                moneda = i.moneda,
                                gravada = i.bi01,
                                exonerada = i.bi02,
                                igv = i.igv01,
                                importe = i.ImporteNacional).Take(250)

            For Each i In consulta

                objeto = New documentoventaAbarrotes
                objeto.idDocumento = i.idDoc
                objeto.tipoDocumento = i.tipodDoc
                objeto.serieVenta = i.serie
                objeto.numeroVenta = i.numero
                objeto.NroDocEntidad = i.nrodoc
                objeto.tipoDocEntidad = i.tipDocClie
                objeto.moneda = i.moneda
                objeto.bi01 = i.gravada
                objeto.bi02 = i.exonerada
                objeto.igv01 = i.igv
                objeto.ImporteNacional = i.importe


                lista.Add(objeto)
            Next

            Return lista
        End If


    End Function

    Public Sub GetActualizarImpresion(be As documentoventaAbarrotes)
        Dim venta = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).Single
        Dim nroImpresion = GetNroImpresion(be.idDocumento)
        Using ts As New TransactionScope
            venta.nroImpresion = nroImpresion
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Function GetNroImpresion(idDocumento As Integer) As Object
        Return HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = idDocumento).Count + 1
    End Function

    Public Function GetNumeracionNotaVenta(be As documentoventaAbarrotes) As Integer
        Return HeliosData.documentoventaAbarrotes.Where(
            Function(o) o.idEmpresa = be.idEmpresa And o.tipoVenta = be.tipoVenta).Count + 1
    End Function

    ''' <summary>
    ''' resúmen de ventas del día, por tipo de venta
    ''' </summary>
    ''' <param name="be"></param>
    ''' <returns></returns>
    Public Function GetVentasDelDiaXTipoVenta(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim obj As New documentoventaAbarrotes
        Dim list As New List(Of String)

        list.Add(TIPO_VENTA.VENTA_AL_CREDITO)
        list.Add(TIPO_VENTA.VENTA_AL_TICKET)
        list.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA_RECIBIDO)
        list.Add(TIPO_VENTA.VENTA_GENERAL)
        list.Add(TIPO_VENTA.VENTA_POS_DIRECTA)


        Dim consulta = HeliosData.documentoventaAbarrotes.Where(Function(o) o.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                                                                And o.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                                                                And o.fechaDoc.Value.Day = be.fechaDoc.Value.Day _
                                                                And list.Contains(o.tipoVenta) _
                                                                And o.idEmpresa = be.idEmpresa).GroupBy(Function(x) x.tipoVenta, Function(x) x.ImporteNacional,
                                                                  Function(tipo, monto) New With {.key = tipo, .sumVenta = monto.Sum()}).ToList




        'Dim suma = Aggregate n In HeliosData.documentoventaAbarrotes
        '           Where list.Contains(n.tipoVenta) _
        '           And n.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
        '           And n.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
        '           And n.fechaDoc.Value.Day = be.fechaDoc.Value.Day
        '           Into sumaMN = Sum(n.ImporteNacional),
        '           sumaME = Sum(n.ImporteExtranjero)
        GetVentasDelDiaXTipoVenta = New List(Of documentoventaAbarrotes)
        For Each i In consulta
            GetVentasDelDiaXTipoVenta.Add(New documentoventaAbarrotes With {.tipoVenta = i.key, .ImporteNacional = i.sumVenta.GetValueOrDefault})
        Next
    End Function

    Public Function GetListarRetenciones(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        'ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        'ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        'ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        'ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        'ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        ListaTipo.Add(TIPO_VENTA.RETENCION)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro <> "ANU"
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            'objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            Lista.Add(objRecurso)
        Next

        '.idEmpresa = Gempresas.IdEmpresaRuc,
        'Dim consultaMembresia = entidadembresiaBL.GetRegistroMembresiasByPeriodo(New Entidadmembresia_Gym With {
        '                                                                         .idEstablecimiento = intIdEstablec,
        '                                                                         .periodo = strPeriodo})

        'For Each i In consultaMembresia
        '    objRecurso = New documentoventaAbarrotes

        '    objRecurso.idDocumento = i.idDocumento
        '    objRecurso.tipoOperacion = StatusTipoOperacion.VENTA
        '    objRecurso.fechaDoc = i.fechaRegistro
        '    objRecurso.tipoDocumento = i.tipodoc
        '    objRecurso.serie = i.serie
        '    objRecurso.serieVenta = i.serie
        '    objRecurso.numeroDoc = i.numero
        '    objRecurso.numeroVenta = i.numero
        '    objRecurso.numeroDocNormal = i.numero
        '    objRecurso.nombrePedido = "-"
        '    objRecurso.tipoDocEntidad = i.CustomEntidad.tipoDoc
        '    objRecurso.NroDocEntidad = i.CustomEntidad.nrodoc
        '    objRecurso.NombreEntidad = i.CustomEntidad.nombreCompleto
        '    objRecurso.TipoPersona = "Socio"
        '    objRecurso.ImporteNacional = i.importe
        '    objRecurso.ImporteExtranjero = 0
        '    objRecurso.tipoCambio = 1
        '    objRecurso.moneda = "NAC"
        '    objRecurso.estadoCobro = i.statusPago
        '    objRecurso.tipoVenta = TIPO_VENTA.VENTA_MEMBRESIAS_GIMANSIO
        '    objRecurso.notaCredito = 0
        '    objRecurso.usuarioActualizacion = "" ' i.usuarioActualizacion
        '    objRecurso.estadoEntrega = "E"
        '    Lista.Add(objRecurso)
        'Next

        Return Lista
    End Function

    Public Function SaveRetencion(objDocumento As documento) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()

                Dim codDoc = InsertRetencion(objDocumento)
                'Dim ListaArticulos = (From n In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                '                      Where n.tipoExistencia <> "GS"
                '                      Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct.ToList


                'For Each a In ListaArticulos
                '    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.idAlmacenOrigen,
                '                                                                                                     .fecha = New DateTime(objDocumento.documentoventaAbarrotes.fechaDoc.Value.Year,
                '                                                                                                                           objDocumento.documentoventaAbarrotes.fechaDoc.Value.Month, 1),
                '                                                                                                     .tipoProducto = a.tipoExistencia,
                '                                                                                                     .idItem = a.idItem,
                '                                                                                                     .nrolote = a.codigoLote}, Nothing)
                '    totalesBL.GetCurarKardexCaberas(listaAcurar)
                'Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return codDoc
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Function InsertRetencion(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim CAN_BOF As Decimal = 0
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0

        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0
        Dim cajaBL As New documentoCajaDetalleBL
        Dim t As New totalesAlmacen
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Dim venta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.idPadre).FirstOrDefault

                Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    Dim itemDetalle = ventaDetalleBL.GetUbicar_documentoventaAbarrotesDetPorID(i.secuencia)
                    i.codigoLote = itemDetalle.codigoLote
                    ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                    'VALIDANDO ITEMS INGRESADOS COMO NOTA DE CREDITO
                    cajaBL.ActualizarItemsPagos(i, objDocumento.documentoventaAbarrotes.idPadre)
                    '--------------------------------------------------------

                    'If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                    '    Select Case i.TipoOperacion
                    '        Case "9916" ' DEVOLUCION DE EXISTENCIAS
                    '            i.codigoLote = itemDetalle.codigoLote
                    '            inventario.InsertNotaCreditoVenta(i, objDocumento)

                    '            't = New totalesAlmacen
                    '            't.idEmpresa = i.IdEmpresa
                    '            't.idEstablecimiento = i.IdEstablecimiento
                    '            't.idAlmacen = i.idAlmacenOrigen
                    '            't.origenRecaudo = i.destino
                    '            't.idItem = i.idItem
                    '            ''t.cantidad = i.monto1
                    '            ''t.precioUnitarioCompra = 0
                    '            't.importeSoles = i.salidaCostoMN
                    '            't.importeDolares = i.salidaCostoME
                    '            't.cantidad = i.monto1
                    '            ''t.precioUnitarioCompra = i.precioUnitario
                    '            't.precioUnitarioCompra = 0
                    '            ''t.importeSoles = i.montokardex
                    '            ''t.importeDolares = i.montokardexUS

                    '            'totalesBL.UpdateSingle2(t)

                    '    End Select
                    'End If
                Next

                'If Not IsNothing(objDocumento.documentoGuia) Then
                '    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                '        guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                '    End If
                'End If

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If
                'Cobrando Saldo de la venta cuando es una venta al credito
                '    If objDocumento.documentoventaAbarrotes.ImporteDevMN > 0 Then
                'If objDocumento.documentoventaAbarrotes.SaldoVentaMN > 0 Then
                'If Not IsNothing(nDocumentoSaldoVenta.documentoCaja) Then
                '    If Not IsNothing(nDocumentoSaldoVenta.documentoCaja.idEmpresa) Then
                '        SaveCaja(nDocumentoSaldoVenta, objDocumento.documentoventaAbarrotes.idPadre)
                '    End If
                'End If

                '-----------------------------------------------------------------------------------
                'creando documento de excendente por devolucion de dinero
                'If Not IsNothing(objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion) Then
                '    Dim codGenerado = GrabarDocumentoDevolucion(objDocumento)
                '    Select Case objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion
                '        Case TIPO_VENTA.PAGO.COBRADO
                '            If Not IsNothing(nDocumentoNota.idEmpresa) Then
                '                Dim listaPagos As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = codGenerado).ToList
                '                SaveCajaVenta(nDocumentoNota, codGenerado, listaPagos)
                '            End If
                '        Case TIPO_VENTA.PAGO.PENDIENTE_PAGO

                '    End Select

                'End If


                Dim ventaDetalle = (From n In HeliosData.documentoventaAbarrotesDet
                                    Where n.idDocumento = venta.idDocumento AndAlso n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO).Count

                If ventaDetalle > 0 Then
                    venta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                Else
                    'venta.estadoCobro = TIPO_VENTA.PAGO.COBRADO
                    venta.estadoCobro = TIPO_VENTA.PAGO.COBRADO
                End If
                'venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito

                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub GrabarFacReconocimiento(objDocumento As documento)
        Dim asientoBL As New AsientoBL
        Dim codDocumentoVenta As Integer
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now
                'Documento insertado
                Part_Documento(objDocumento)
                codDocumentoVenta = objDocumento.idDocumento
                'Documento venta
                Me.InsertSingleContado(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                'agregado
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    ventaDetalleBL.InsertSingleReconocimiento(i, objDocumento.idDocumento)

                Next
                'Documento venta detalle
                'Part_Detalle(objDocumento)
                'Select Case objDocumento.documentoventaAbarrotes.tipoVenta
                '    Case TIPO_VENTA.VENTA_AL_TICKET

                '    Case TIPO_VENTA.VENTA_POS_DIRECTA
                '        PagoDeLaVenta(objDocumento)
                '        asientoBL.SavebyGroupDoc(objDocumento)
                '        GuiaRemisionVenta(objDocumento)
                'End Select
                HeliosData.SaveChanges()
                ts.Complete()
                '  Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub EliminarVentaSPK(documentoBE As documento, ventaDetalle As List(Of documentoventaAbarrotesDet))
        Dim inventarioBL As New totalesAlmacenBL
        Dim invBL As New InventarioMovimientoBL
        Dim documentocompraBL As New documentocompraBL
        Dim documentocompradetalleBL As New documentocompradetalleBL
        Dim notificacionAlmacenBL As New notificacionAlmacenBL
        Dim documentoGuiaBL As New documentoGuiaBL
        Dim asientoBL As New AsientoBL
        Dim documentoCajaBl As New documentoCajaDetalleBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim documentoBL As New documentoBL
        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
        Dim tallaBL As New totalesAlmacenOthersBL
        Try
            Using ts As New TransactionScope

                'eliminando inventario
                invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

                'eliminando documento caja
                documentoCajaBl.DeleteDocumentoCaja(documentoBE.idDocumento)

                'eliminando tributos
                documentoDetalleObligacionBL.EliminarGrupoTributo(documentoBE.idDocumento)

                'Eliminando notas de debito y credito
                documentoBL.EliminarDocNotasRefVentas(documentoBE.idDocumento)

                'eliminando guía de remisión
                documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)

                'eliminando asiento contable
                asientoBL.DeletePorDocumento(documentoBE.idDocumento)

                'eliminado costos referenciados
                recursoCostoBL.eliminarDetalleCostoByIdDocumento(documentoBE.idDocumento)



                Me.eliminarReclamacion(documentoBE.idDocumento)

                'Eliminando totalesTallas
                tallaBL.EliminarPorDocumentoVenta(documentoBE.idDocumento)

                'documentoBL.DeleteSingle(documentoBE)

                For Each i In ventaDetalle



                    Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = i.idAlmacenOrigen And o.codigoLote = i.codigoLote).SingleOrDefault
                    If obj IsNot Nothing Then
                        obj.cantidad = obj.cantidad + i.monto1
                        obj.importeSoles = obj.importeSoles + i.montokardex
                    End If


                    'i.monto1 = 0
                    'i.monto2 = 0
                    'i.precioUnitario = 0
                    'i.precioUnitarioUS = 0
                    'i.importeMN = 0
                    'i.importeME = 0
                    'i.importeMNK = 0
                    'i.importeMEK = 0
                    'i.descuentoMN = 0
                    'i.descuentoME = 0
                    'i.montokardex = 0
                    'i.montoIsc = 0
                    'i.montoIgv = 0
                    'i.otrosTributos = 0
                    'i.montokardexUS = 0
                    'i.montoIscUS = 0
                    'i.montoIgvUS = 0
                    'i.otrosTributosUS = 0
                    'i.salidaCostoMN = 0
                    'i.salidaCostoME = 0
                    'i.cantidadCredito = 0
                    'i.cantidadDebito = 0
                    'i.notaCreditoMN = 0
                    'i.notaCreditoME = 0
                    'i.notaDebitoMN = 0
                    'i.notaDebitoME = 0
                    i.entregado = Nothing
                    i.estadoPago = "ANU"
                    i.usuarioModificacion = "1"
                    i.fechaModificacion = DateTime.Now
                Next

                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub


    Public Sub eliminarReclamacion(intidDocumento As Integer)
        Using ts As New TransactionScope
            Dim Consulta = (From n In HeliosData.documentoventaAbarrotes
                            Where n.idPadre = intidDocumento And n.tipoVenta = "EXD").ToList

            For Each i In Consulta
                CType(HeliosData, System.Data.Entity.Infrastructure.IObjectContextAdapter).ObjectContext.DeleteObject(i)
            Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    'Public Sub EliminarVentaSPK(documentoBE As documento, ventaDetalle As List(Of documentoventaAbarrotesDet))
    '    Dim inventarioBL As New totalesAlmacenBL
    '    Dim invBL As New InventarioMovimientoBL
    '    Dim documentocompraBL As New documentocompraBL
    '    Dim documentocompradetalleBL As New documentocompradetalleBL
    '    Dim notificacionAlmacenBL As New notificacionAlmacenBL
    '    Dim documentoGuiaBL As New documentoGuiaBL
    '    Dim asientoBL As New AsientoBL
    '    Dim documentoCajaBl As New documentoCajaDetalleBL
    '    Dim recursoCostoBL As New recursoCostoDetalleBL
    '    Dim documentoBL As New documentoBL
    '    Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
    '    Try
    '        Using ts As New TransactionScope

    '            'eliminando inventario
    '            invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

    '            'eliminando documento caja
    '            documentoCajaBl.DeleteDocumentoCaja(documentoBE.idDocumento)

    '            'eliminando tributos
    '            documentoDetalleObligacionBL.EliminarGrupoTributo(documentoBE.idDocumento)

    '            'Eliminando notas de debito y credito
    '            documentoBL.EliminarDocNotasRefVentas(documentoBE.idDocumento)

    '            'eliminando guía de remisión
    '            documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)

    '            'eliminando asiento contable
    '            asientoBL.DeletePorDocumento(documentoBE.idDocumento)

    '            'eliminado costos referenciados
    '            recursoCostoBL.eliminarDetalleCostoByIdDocumento(documentoBE.idDocumento)

    '            'documentoBL.DeleteSingle(documentoBE)

    '            For Each i In ventaDetalle
    '                Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = i.idAlmacenOrigen And o.codigoLote = i.codigoLote).SingleOrDefault
    '                If obj IsNot Nothing Then
    '                    obj.cantidad = obj.cantidad + i.monto1
    '                    obj.importeSoles = obj.importeSoles + i.montokardex
    '                End If


    '                'i.monto1 = 0
    '                'i.monto2 = 0
    '                'i.precioUnitario = 0
    '                'i.precioUnitarioUS = 0
    '                'i.importeMN = 0
    '                'i.importeME = 0
    '                'i.importeMNK = 0
    '                'i.importeMEK = 0
    '                'i.descuentoMN = 0
    '                'i.descuentoME = 0
    '                'i.montokardex = 0
    '                'i.montoIsc = 0
    '                'i.montoIgv = 0
    '                'i.otrosTributos = 0
    '                'i.montokardexUS = 0
    '                'i.montoIscUS = 0
    '                'i.montoIgvUS = 0
    '                'i.otrosTributosUS = 0
    '                'i.salidaCostoMN = 0
    '                'i.salidaCostoME = 0
    '                'i.cantidadCredito = 0
    '                'i.cantidadDebito = 0
    '                'i.notaCreditoMN = 0
    '                'i.notaCreditoME = 0
    '                'i.notaDebitoMN = 0
    '                'i.notaDebitoME = 0
    '                i.entregado = Nothing
    '                i.estadoPago = "ANU"
    '                i.usuarioModificacion = "1"
    '                i.fechaModificacion = DateTime.Now
    '            Next

    '            HeliosData.SaveChanges()
    '            ts.Complete()
    '        End Using
    '    Catch ex As Exception
    '        Throw ex
    '    End Try
    'End Sub

    Public Sub EliminarVenta(documentoBE As documento)
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Try
            'Dim TienePagos = HeliosData.documentoCajaDetalle.Where(Function(o) o.documentoAfectado = documentoBE.idDocumento).Count
            'If TienePagos > 0 Then
            '    Throw New Exception("La venta tienen pagos")
            'End If

            Dim venta = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = documentoBE.idDocumento).FirstOrDefault

            Dim fechaActual = New Date(venta.fechaDoc.Value.Year, venta.fechaDoc.Value.Month, 1)
            Dim fechaAnterior = fechaActual.AddMonths(-1)

            'si es false es porque no esta dentro del inicio de operaciones
            Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(venta.idEmpresa, fechaActual, venta.idEstablecimiento)
            If valor = "False" Then
                If cierreinventarioBL.InventarioEstaCerradoV2(venta.idEmpresa, fechaActual.Year, fechaActual.Month, venta.idEstablecimiento) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = venta.idEmpresa,
                                                .idCentroCosto = venta.idEstablecimiento,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                End If
            ElseIf valor = "True" Then
                Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
            Else
                If cierreinventarioBL.InventarioEstaCerradoV2(venta.idEmpresa, fechaActual.Year, fechaActual.Month, venta.idEstablecimiento) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                '                                    {.idEmpresa = objDocumento.idEmpresa,
                '                                     .anio = fechaAnterior.Year,
                '                                     .mes = fechaAnterior.Month}) = False Then
                '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                'End If
            End If


            If venta.estadoCobro = "ANU" Then 'Or venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito Then
                Throw New Exception("El comprobante solicitado está anulado!")
            End If

            Dim ventaDetalle = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList
            Using ts As New TransactionScope
                'anulando documento venta

                'venta.tipoCambio = 0
                'venta.tasaIgv = 0
                'venta.bi01 = 0
                'venta.bi02 = 0
                'venta.isc01 = 0
                'venta.isc02 = 0
                'venta.igv01 = 0
                'venta.igv02 = 0
                'venta.otc01 = 0
                'venta.otc02 = 0
                'venta.bi01us = 0
                'venta.bi02us = 0
                'venta.isc01us = 0
                'venta.isc02us = 0
                'venta.igv01us = 0
                'venta.igv02us = 0
                'venta.otc01us = 0
                'venta.otc02us = 0
                'venta.ImporteNacional = 0
                'venta.ImporteExtranjero = 0
                'venta.importeCostoMN = 0
                'venta.importeCostoME = 0


                'venta.estadoCobro = "ANU"
                'If venta.tipoVenta = "VELC" Then

                '    Select Case venta.tipoDocumento
                '        Case "01"
                '            If venta.EnvioSunat = "SI" Then  ' SI HA SIDO ENVIADO Y ELIMANDO
                '                venta.EnvioSunat = "PE"
                '            Else venta.EnvioSunat = Nothing
                '                venta.EnvioSunat = "NE"       ' NO ENVIADO Y ELIMINADO
                '            End If
                '        Case "03"
                '            venta.EnvioSunat = "PE"
                '    End Select
                'End If

                venta.estadoCobro = "ANU"
                If venta.tipoVenta = "VELC" Then
                    If venta.EnvioSunat = "SI" Then  ' SI HA SIDO ENVIADO Y ELIMANDO
                        venta.EnvioSunat = "PE"
                    Else venta.EnvioSunat = Nothing
                        venta.EnvioSunat = "NE"       ' NO ENVIADO Y ELIMINADO
                    End If
                End If



                venta.usuarioActualizacion = venta.usuarioActualizacion
                venta.fechaActualizacion = DateTime.Now

                Dim listaVentaDet = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList

                EliminarVentaSPK(documentoBE, ventaDetalle)


                For Each a In listaVentaDet
                    If (almacenBL.GetEsAlmacenVirtual(a.idAlmacen) = False) Then
                        Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                            New InventarioMovimiento With
                            {
                            .idAlmacen = a.idAlmacen,
                            .fecha = New DateTime(venta.fechaDoc.Value.Year, venta.fechaDoc.Value.Month, 1),
                            .tipoProducto = a.tipoProducto,
                            .idItem = a.idItem,
                            .nrolote = a.nrolote}, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                    End If
                Next

                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub AnularNotaVenta(documentoBE As documento)
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL

        Try
            'Dim TienePagos = HeliosData.documentoCajaDetalle.Where(Function(o) o.documentoAfectado = documentoBE.idDocumento).Count
            'If TienePagos > 0 Then
            '    Throw New Exception("La venta tienen pagos")
            'End If

            Dim venta = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = documentoBE.idDocumento).FirstOrDefault

            If venta.estadoCobro = "ANU" Or venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito Then
                Throw New Exception("El comprobante solicitado está anulado!")
            End If

            Dim ventaDetalle = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList
            Using ts As New TransactionScope
                'anulando documento venta
                venta.tipoCambio = 0
                venta.tasaIgv = 0
                venta.bi01 = 0
                venta.bi02 = 0
                venta.isc01 = 0
                venta.isc02 = 0
                venta.igv01 = 0
                venta.igv02 = 0
                venta.otc01 = 0
                venta.otc02 = 0
                venta.bi01us = 0
                venta.bi02us = 0
                venta.isc01us = 0
                venta.isc02us = 0
                venta.igv01us = 0
                venta.igv02us = 0
                venta.otc01us = 0
                venta.otc02us = 0
                venta.ImporteNacional = 0
                venta.ImporteExtranjero = 0
                venta.importeCostoMN = 0
                venta.importeCostoME = 0
                venta.estadoCobro = "ANU"
                venta.tipoVenta = TIPO_VENTA.NOTA_DE_VENTA_ANULADA
                venta.usuarioActualizacion = venta.usuarioActualizacion
                venta.fechaActualizacion = DateTime.Now

                Dim listaVentaDet = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList

                EliminarVentaSPK(documentoBE, ventaDetalle)

                'Dim ListaArticulos = (From n In ventaDetalle
                '                      Where n.tipoExistencia <> "GS"
                '                      Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct().ToList()

                For Each a In listaVentaDet
                    If (almacenBL.GetEsAlmacenVirtual(a.idAlmacen) = False) Then
                        Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                            New InventarioMovimiento With
                            {
                            .idAlmacen = a.idAlmacen,
                            .fecha = New DateTime(venta.fechaDoc.Value.Year, venta.fechaDoc.Value.Month, 1),
                            .tipoProducto = a.tipoProducto,
                            .idItem = a.idItem,
                            .nrolote = a.nrolote}, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                    End If
                Next

                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function StockEliminarNotaVenta(idDocVenta As Integer) As Integer

        Dim listaItems As New List(Of documentoventaAbarrotesDet)
        Dim item0stock As Integer = 0

        listaItems = (HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = idDocVenta)).ToList

        For Each i In listaItems
            Dim con = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = i.idAlmacenOrigen).FirstOrDefault
            If Not IsNothing(con) Then
                If con.cantidad <= 0 Then
                    item0stock = item0stock + 1
                End If
            End If
        Next


        Return item0stock

    End Function

    Public Function TieneClientesApertura(be As documentoventaAbarrotes) As Boolean
        Dim con = HeliosData.documentoventaAbarrotes.Where(Function(o) o.tipoVenta = "APT").Count
        TieneClientesApertura = False
        If con > 0 Then
            TieneClientesApertura = True
        End If
    End Function

    Public Function GenerarTXTventa(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        Dim DetNotaCre As New documentoventaAbarrotes
        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro <> "ANU"
                        Order By compra.fechaDoc Ascending).ToList


        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            objRecurso.fechaPeriodo = obj.compra.fechaPeriodo
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07", "87"
                    objRecurso.igv01 = obj.compra.igv01 * -1
                    objRecurso.bi01 = obj.compra.bi01 * -1
                    objRecurso.bi02 = obj.compra.bi02 * -1
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                Case "08", "88"
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero

                Case Else
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero

            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega

            If obj.compra.tipoDocumento = "07" Or obj.compra.tipoDocumento = "08" Or obj.compra.tipoDocumento = "87" Or obj.compra.tipoDocumento = "88" Or obj.compra.tipoDocumento = "97" Or obj.compra.tipoDocumento = "98" Then



                DetNotaCre = New documentoventaAbarrotes
                DetNotaCre = NotaCreditoDetVenta(obj.compra.idPadre)


                objRecurso.SerieNota = DetNotaCre.serieVenta
                objRecurso.NumeroNota = DetNotaCre.numeroVenta
                objRecurso.TipoDocNota = DetNotaCre.tipoDocumento
                objRecurso.FechaNota = DetNotaCre.fechaDoc


                objRecurso.serieVenta = obj.compra.serie
                objRecurso.numeroVenta = obj.compra.numeroDoc

            Else



                objRecurso.serieVenta = obj.compra.serieVenta
                objRecurso.numeroVenta = obj.compra.numeroVenta


            End If

            Lista.Add(objRecurso)
        Next

        'For Each obj In consulta
        '    objRecurso = New documentoventaAbarrotes

        '    objRecurso.idDocumento = obj.compra.idDocumento
        '    objRecurso.tipoOperacion = obj.doc.tipoOperacion
        '    objRecurso.fechaDoc = obj.compra.fechaDoc
        '    objRecurso.tipoDocumento = obj.compra.tipoDocumento
        '    objRecurso.serie = obj.compra.serie
        '    objRecurso.numeroDoc = obj.compra.numeroDoc
        '    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
        '    objRecurso.nombrePedido = obj.compra.nombrePedido
        '    If Not IsNothing(obj.e) Then
        '        objRecurso.tipoDocEntidad = obj.e.tipoDoc
        '        objRecurso.NroDocEntidad = obj.e.nrodoc
        '        objRecurso.NombreEntidad = obj.e.nombreCompleto
        '        objRecurso.TipoPersona = obj.e.tipoPersona
        '    Else
        '        objRecurso.tipoDocEntidad = String.Empty
        '        objRecurso.NroDocEntidad = String.Empty
        '        objRecurso.NombreEntidad = String.Empty
        '        objRecurso.TipoPersona = String.Empty
        '    End If

        '    objRecurso.ImporteNacional = obj.compra.ImporteNacional
        '    objRecurso.tipoCambio = obj.compra.tipoCambio
        '    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
        '    objRecurso.moneda = obj.compra.moneda
        '    objRecurso.estadoCobro = obj.compra.estadoCobro
        '    objRecurso.tipoVenta = obj.compra.tipoVenta
        '    objRecurso.notaCredito = obj.compra.notaCredito
        '    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
        '    objRecurso.estadoEntrega = obj.compra.estadoEntrega

        '    objRecurso.fechaPeriodo = obj.compra.fechaPeriodo




        '    objRecurso.igv01 = obj.compra.igv01
        '    objRecurso.bi01 = obj.compra.bi01
        '    objRecurso.bi02 = obj.compra.bi02
        '    objRecurso.estadoCobro = obj.compra.estadoCobro
        '    'objRecurso.serieVenta = obj.compra.serieVenta
        '    'objRecurso.numeroVenta = obj.compra.numeroVenta
        '    'objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
        '    'objRecurso.fechaConstancia = obj.compra.fechaConstancia
        '    'objRecurso.nroConstancia = obj.compra.nroConstancia

        '    If obj.compra.tipoDocumento = "07" Or obj.compra.tipoDocumento = "08" Or obj.compra.tipoDocumento = "87" Or obj.compra.tipoDocumento = "88" Or obj.compra.tipoDocumento = "97" Or obj.compra.tipoDocumento = "98" Then



        '        DetNotaCre = New documentoventaAbarrotes
        '        DetNotaCre = NotaCreditoDetVenta(obj.compra.idPadre)


        '        objRecurso.SerieNota = DetNotaCre.serieVenta
        '        objRecurso.NumeroNota = DetNotaCre.numeroVenta
        '        objRecurso.TipoDocNota = DetNotaCre.tipoDocumento
        '        objRecurso.FechaNota = DetNotaCre.fechaDoc


        '        objRecurso.serieVenta = obj.compra.serie
        '        objRecurso.numeroVenta = obj.compra.numeroDoc

        '    Else



        '        objRecurso.serieVenta = obj.compra.serieVenta
        '        objRecurso.numeroVenta = obj.compra.numeroVenta


        '    End If



        '    Lista.Add(objRecurso)
        'Next

        Return Lista
    End Function

    'Public Function GenerarTXTventa(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
    '    Dim Lista As New List(Of documentoventaAbarrotes)
    '    Dim ListaTipo As New List(Of String)
    '    Dim DetNotaCre As New documentoventaAbarrotes
    '    ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
    '    ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
    '    ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
    '    'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
    '    'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
    '    'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
    '    'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
    '    ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
    '    ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
    '    ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)

    '    Dim objRecurso As New documentoventaAbarrotes
    '    Dim consulta = (From doc In HeliosData.documento _
    '                   Join compra In HeliosData.documentoventaAbarrotes _
    '                   On doc.idDocumento Equals compra.idDocumento _
    '                   Group Join entidad In HeliosData.entidad _
    '                   On compra.idCliente Equals entidad.idEntidad _
    '                   Into ords = Group _
    '                   From e In ords.DefaultIfEmpty _
    '                   Where doc.idCentroCosto = intIdEstablec And _
    '                   compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta) _
    '                   And compra.estadoCobro <> "ANU" _
    '                   Order By compra.fechaDoc Ascending).ToList

    '    For Each obj In consulta
    '        objRecurso = New documentoventaAbarrotes

    '        objRecurso.idDocumento = obj.compra.idDocumento
    '        objRecurso.tipoOperacion = obj.doc.tipoOperacion
    '        objRecurso.fechaDoc = obj.compra.fechaDoc
    '        objRecurso.tipoDocumento = obj.compra.tipoDocumento
    '        objRecurso.serie = obj.compra.serie
    '        objRecurso.numeroDoc = obj.compra.numeroDoc
    '        objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
    '        objRecurso.nombrePedido = obj.compra.nombrePedido
    '        If Not IsNothing(obj.e) Then
    '            objRecurso.tipoDocEntidad = obj.e.tipoDoc
    '            objRecurso.NroDocEntidad = obj.e.nrodoc
    '            objRecurso.NombreEntidad = obj.e.nombreCompleto
    '            objRecurso.TipoPersona = obj.e.tipoPersona
    '        Else
    '            objRecurso.tipoDocEntidad = String.Empty
    '            objRecurso.NroDocEntidad = String.Empty
    '            objRecurso.NombreEntidad = String.Empty
    '            objRecurso.TipoPersona = String.Empty
    '        End If

    '        objRecurso.ImporteNacional = obj.compra.ImporteNacional
    '        objRecurso.tipoCambio = obj.compra.tipoCambio
    '        objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
    '        objRecurso.moneda = obj.compra.moneda
    '        objRecurso.estadoCobro = obj.compra.estadoCobro
    '        objRecurso.tipoVenta = obj.compra.tipoVenta
    '        objRecurso.notaCredito = obj.compra.notaCredito
    '        objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
    '        objRecurso.estadoEntrega = obj.compra.estadoEntrega

    '        objRecurso.fechaPeriodo = obj.compra.fechaPeriodo




    '        objRecurso.igv01 = obj.compra.igv01
    '        objRecurso.bi01 = obj.compra.bi01
    '        objRecurso.bi02 = obj.compra.bi02
    '        objRecurso.estadoCobro = obj.compra.estadoCobro
    '        'objRecurso.serieVenta = obj.compra.serieVenta
    '        'objRecurso.numeroVenta = obj.compra.numeroVenta
    '        'objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
    '        'objRecurso.fechaConstancia = obj.compra.fechaConstancia
    '        'objRecurso.nroConstancia = obj.compra.nroConstancia

    '        If obj.compra.tipoDocumento = "07" Or obj.compra.tipoDocumento = "08" Or obj.compra.tipoDocumento = "87" Or obj.compra.tipoDocumento = "88" Or obj.compra.tipoDocumento = "97" Or obj.compra.tipoDocumento = "98" Then



    '            DetNotaCre = New documentoventaAbarrotes
    '            DetNotaCre = NotaCreditoDetVenta(obj.compra.idPadre)


    '            objRecurso.SerieNota = DetNotaCre.serieVenta
    '            objRecurso.NumeroNota = DetNotaCre.numeroVenta
    '            objRecurso.TipoDocNota = DetNotaCre.tipoDocumento
    '            objRecurso.FechaNota = DetNotaCre.fechaDoc


    '            objRecurso.serieVenta = obj.compra.serie
    '            objRecurso.numeroVenta = obj.compra.numeroDoc

    '        Else



    '            objRecurso.serieVenta = obj.compra.serieVenta
    '            objRecurso.numeroVenta = obj.compra.numeroVenta


    '        End If



    '        Lista.Add(objRecurso)
    '    Next

    '    Return Lista
    'End Function


    Public Function NotaCreditoDetVenta(idDoc As Integer) As documentoventaAbarrotes

        Dim Consulta = (From doc In HeliosData.documentoventaAbarrotes
                        Where doc.idDocumento = idDoc).FirstOrDefault

        Return Consulta

    End Function

    Public Function UbicarVentaPorCompensar(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, strPeriodo As String, intmoneda As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)


        'Dim consulta = (From n In HeliosData.documentoventaAbarrotes
        '                Join ent In HeliosData.entidad
        '        On n.idCliente Equals ent.idEntidad
        '                Join tbl In HeliosData.tabladetalle
        '        On n.tipoDocumento Equals tbl.codigoDetalle
        '                Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento _
        '        And ent.nrodoc = strRuc And ent.tipoEntidad = "CL" _
        '        And list.Contains(n.tipoVenta) And tbl.idtabla = 10 And
        '        listaPago.Contains(n.estadoCobro) And
        '        n.fechaPeriodo = strPeriodo Order By n.fechaDoc).ToList



        Dim con = (From c In HeliosData.documentoventaAbarrotes
                   Join ent In HeliosData.entidad
               On c.idCliente Equals ent.idEntidad
                   Where
                 (New String() {"VNS", "VTAG", "VPOS", "VAO", "VAR"}).Contains(c.tipoVenta) And
                  c.idEmpresa = strEmpresa And c.idEstablecimiento = intIdEstablecimiento _
                      And ent.nrodoc = strRuc And ent.tipoEntidad = "CL" And c.fechaPeriodo = strPeriodo _
                      And c.moneda = intmoneda And c.estadoCobro = "PN"
                   Select
                 c.idDocumento,
                 c.tipoVenta,
                 c.fechaPeriodo,
                 c.fechaDoc,
                 c.serie,
                 c.numeroDoc,
                 c.tipoDocumento,
                 c.moneda,
                 c.ImporteNacional,
                 c.tipoCambio,
                 c.ImporteExtranjero,
                 c.estadoCobro,
                 PagosMN = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoSoles
                                    }) Into Sum(t1.montoSoles)), Decimal?)),
                PagosME = (CType((Aggregate t1 In
                                  (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                   Where
                                   DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                   Select New With {
                                       DocumentoCajaDetalle.montoUsd
                                   }) Into Sum(t1.montoUsd)), Decimal?)),
               PagoNotaCredito = (CType((Aggregate t1 In
                                         (From Documentocompra In HeliosData.documentoventaAbarrotes
                                          Where
                                          (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                          Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta <> "EXD"
                                          Select New With {
                                              Documentocompra.ImporteNacional
                                          }) Into Sum(t1.ImporteNacional)), Decimal?)),
                      Exedente = (CType((Aggregate t1 In
                                         (From Documentocompra In HeliosData.documentoventaAbarrotes
                                          Where
                                          (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                          Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
                                          Select New With {
                                              Documentocompra.ImporteNacional
                                          }) Into Sum(t1.ImporteNacional)), Decimal?)),
                      PagoNotaDebito = (CType((Aggregate t1 In
                                               (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                Where
                                                (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                Documentocompra.idPadre = c.idDocumento
                                                Select New With {
                                                    Documentocompra.ImporteNacional
                                                }) Into Sum(t1.ImporteNacional)), Decimal?))).ToList

        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.tipoCambio = i.tipoCambio
            'doccompra.nombreEstablecimiento = i.descripcion
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function CompensacionDocumentosVenta(objDocumento As documento, objDocComp As documento) As Integer
        Try
            Dim compensacionBL As New CompensacionBL
            Dim idDocumentoOrigen As Integer
            Dim idDocumentoDestino As Integer

            idDocumentoOrigen = Me.SaveCompensacionVenta(objDocumento)
            idDocumentoDestino = Me.SaveCompensacionVenta(objDocComp)


            compensacionBL.SaveTablaCompensacion(idDocumentoOrigen, idDocumentoDestino, "02", "02")


            Return 1
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function SaveCompensacionVenta(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL

        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim cajaBL As New documentoCajaDetalleBL
        Dim nMovimiento As New movimiento
        Dim nAsiento As New asiento

        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                'Dim codCompra = objDocumento.idDocumento
                Dim codCompra = objDocumento.documentoventaAbarrotes.idPadre
                Dim compra As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.idPadre).FirstOrDefault
                Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    'ventaDetalleBLDetalleBL.InsertSingle2(i, objDocumento.idDocumento)
                    ventaDetalleBL.InsertSingle2(i, objDocumento.idDocumento)
                    cajaBL.ActualizarItemsPagos(i, objDocumento.documentoventaAbarrotes.idPadre)

                Next

                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        'objDocumento.idDocumento = codNota
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If

                Dim ventaDetalle = (From n In HeliosData.documentoventaAbarrotesDet
                                    Where n.idDocumento = codCompra AndAlso n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO).Count

                If ventaDetalle > 0 Then
                    compra.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                Else
                    compra.estadoCobro = TIPO_VENTA.PAGO.COBRADO
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function ListadoComprobateVentaNotasXidPadre(iNtPadre As Integer) As List(Of documentoventaAbarrotes)
        Dim lista As New List(Of documentoventaAbarrotes)
        Dim a As New documentoventaAbarrotes

        Dim cc = (From c In HeliosData.documentoventaAbarrotes
                  Where c.idPadre = iNtPadre).ToList


        For Each i In cc
            a = New documentoventaAbarrotes
            a.idDocumento = i.idDocumento
            a.fechaDoc = i.fechaDoc
            a.tipoDocumento = i.tipoDocumento
            a.numeroDoc = i.numeroDoc
            a.tipoVenta = i.tipoVenta
            'a.numeroOperacion = i.NumeroOper
            a.moneda = i.moneda
            a.tipoCambio = i.tipoCambio
            a.codigoLibro = i.codigoLibro
            a.ImporteNacional = i.ImporteNacional
            a.ImporteExtranjero = i.ImporteExtranjero
            lista.Add(a)
        Next

        Return lista
    End Function

    Public Function UbicarVentaPorClienteXperiodo2Ant(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As Integer, strPeriodo As String, intmoneda As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim list As New List(Of String)
        'list.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'list.Add(TIPO_VENTA.VENTA_GENERAL)
        'list.Add(TIPO_VENTA.VENTA_ANTICIPADA)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        'list.Add(TIPO_VENTA.VENTA_ANTICIPADA_RECIBIDO)
        'Dim consulta = (From n In HeliosData.documentoventaAbarrotes _
        '        Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento _
        '        And n.idCliente = strRuc And n.fechaPeriodo = strPeriodo And list.Contains(n.tipoVenta) Order By n.fechaDoc).ToList

        '    Dim consulta = (From p In HeliosData.documentoventaAbarrotesDet _
        '                   Group Join c In HeliosData.documentoCajaDetalle _
        '                  On p.idDocumento Equals c.documentoAfectado _
        '                  And p.idItem Equals c.idItem _
        '                  Into ords = Group _
        '                  From c In ords.DefaultIfEmpty _
        '                  Where p.idDocumento = strDocumentoAfectado _
        '                  Group c By _
        '                  p.idItem, p.nombreItem, p.importeMN, p.importeME _
        '                  Into g = Group _
        '                  Select New With {.iditem = idItem,

        Dim consulta2 = (From n In HeliosData.documentoventaAbarrotes
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                         On n.idDocumento Equals cajadet.documentoAfectado
                         Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento _
                         And n.idCliente = strRuc And n.fechaPeriodo = strPeriodo And list.Contains(n.tipoVenta) _
                         And n.moneda = intmoneda
                         Group c By n.idDocumento, n.tipoVenta, n.fechaPeriodo, n.fechaDoc,
                         n.serie, n.numeroDocNormal, n.tipoDocumento, n.moneda, n.ImporteNacional, n.tipoCambio,
                         n.ImporteExtranjero, n.estadoCobro Into g = Group
                         Select New With {
                                        .idDocumento = idDocumento,
                                        .tipoVenta = tipoVenta,
                                        .fechaPeriodo = fechaPeriodo,
                                        .fechaDoc = fechaDoc,
                                        .serie = serie,
                                        .numeroDoc = numeroDocNormal,
                                        .tipoDocumento = tipoDocumento,
                                        .moneda = moneda,
                                        .ImporteNacional = ImporteNacional,
                                        .tipoCambio = tipoCambio,
                                        .ImporteExtranjero = ImporteExtranjero,
                                        .estadoCobro = estadoCobro,
                                        .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                        .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList

        For Each i In consulta2
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Sub CambiarPeriodoVenta(be As documentoventaAbarrotes)
        Using ts As New TransactionScope
            Dim obj = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).FirstOrDefault
            obj.fechaPeriodo = be.fechaPeriodo

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function ConteoVentasNoNegociados() As Integer
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim cronogramabl As New CronogramaBL
        Dim cronograma As New Cronograma

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle
        Dim conteo As Integer = 0

        Dim list As New List(Of String)
        list.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        list.Add(TIPO_VENTA.VENTA_GENERAL)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA)


        Dim consulta2 = (From n In HeliosData.documentoventaAbarrotes
                         Join ent In HeliosData.entidad
                         On n.idCliente Equals ent.idEntidad
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                         On n.idDocumento Equals cajadet.documentoAfectado
                         Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = Gempresas.IdEmpresaRuc And n.idEstablecimiento = GEstableciento.IdEstablecimiento And n.fechaDoc.Value.Year = AnioGeneral _
                          And n.estadoCobro = "PN" And list.Contains(n.tipoVenta)
                         Group c By n.idDocumento, n.tipoVenta, n.fechaPeriodo, n.fechaDoc, n.fechaVcto,
                         n.serie, n.numeroDocNormal, n.tipoDocumento, n.moneda, n.ImporteNacional, n.tipoCambio, n.idCliente, ent.nombreCompleto,
                         n.ImporteExtranjero, n.estadoCobro Into g = Group
                         Select New With {
                                        .idDocumento = idDocumento,
                                        .tipoVenta = tipoVenta,
                                        .fechaPeriodo = fechaPeriodo,
                                        .nombreCompleto = nombreCompleto,
                                        .fechaDoc = fechaDoc,
                                        .fechaVcto = fechaVcto,
                                        .idcliente = idCliente,
                                        .serie = serie,
                                        .numeroDoc = numeroDocNormal,
                                        .tipoDocumento = tipoDocumento,
                                        .moneda = moneda,
                                        .ImporteNacional = ImporteNacional,
                                        .tipoCambio = tipoCambio,
                                        .ImporteExtranjero = ImporteExtranjero,
                                        .estadoCobro = estadoCobro,
                                        .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                        .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList

        For Each i In consulta2
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.fechaVcto = i.fechaVcto
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault

            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.idCliente = i.idcliente


            cronograma = cronogramabl.ObtenerMontoProgramado(i.idDocumento)
            doccompra.montocrono = cronograma.montoAutorizadoMN
            doccompra.montocronome = cronograma.montoAutorizadoME

            Select Case i.moneda
                Case 1
                    doccompra.PagoSumaMN = CDec((i.SumaPagoMN.GetValueOrDefault)).ToString("N2")
                    doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD

                    If doccompra.ImporteNacional - doccompra.PagoSumaMN - doccompra.montocrono > 0 Then
                        conteo += 1
                    End If
                Case 2
                    doccompra.PagoSumaMN = CDec((i.SumaPagoMN.GetValueOrDefault)).ToString("N2")
                    doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
                    If doccompra.ImporteExtranjero - doccompra.PagoSumaME - doccompra.montocronome > 0 Then
                        conteo += 1
                    End If
            End Select


            'compraLista.Add(doccompra)
        Next
        Return conteo
    End Function

    Public Function UbicarTodosVentaPorClienteMNME(strEmpresa As String, intIdEstablecimiento As Integer) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim cronogramabl As New CronogramaBL
        Dim cronograma As New Cronograma

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        Dim list As New List(Of String)
        list.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        list.Add(TIPO_VENTA.VENTA_GENERAL)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA)

        Dim consulta2 = (From n In HeliosData.documentoventaAbarrotes
                         Join ent In HeliosData.entidad
                         On n.idCliente Equals ent.idEntidad
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                         On n.idDocumento Equals cajadet.documentoAfectado
                         Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento And n.fechaDoc.Value.Year = AnioGeneral _
                          And n.estadoCobro = "PN" And list.Contains(n.tipoVenta)
                         Group c By n.idDocumento, n.tipoVenta, n.fechaPeriodo, n.fechaDoc, n.fechaVcto,
                         n.serie, n.numeroDocNormal, n.tipoDocumento, n.moneda, n.ImporteNacional, n.tipoCambio, n.idCliente, ent.nombreCompleto,
                         n.ImporteExtranjero, n.estadoCobro Into g = Group
                         Select New With {
                                        .idDocumento = idDocumento,
                                        .tipoVenta = tipoVenta,
                                        .fechaPeriodo = fechaPeriodo,
                                        .nombreCompleto = nombreCompleto,
                                        .fechaDoc = fechaDoc,
                                        .fechaVcto = fechaVcto,
                                        .idcliente = idCliente,
                                        .serie = serie,
                                        .numeroDoc = numeroDocNormal,
                                        .tipoDocumento = tipoDocumento,
                                        .moneda = moneda,
                                        .ImporteNacional = ImporteNacional,
                                        .tipoCambio = tipoCambio,
                                        .ImporteExtranjero = ImporteExtranjero,
                                        .estadoCobro = estadoCobro,
                                        .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                        .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList

        For Each i In consulta2
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.fechaVcto = i.fechaVcto
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault

            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.idCliente = i.idcliente


            cronograma = cronogramabl.ObtenerMontoProgramado(i.idDocumento)
            doccompra.montocrono = cronograma.montoAutorizadoMN
            doccompra.montocronome = cronograma.montoAutorizadoME


            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function GetSumaVentasDelDia(be As documentoventaAbarrotes) As documentoventaAbarrotes
        Dim obj As New documentoventaAbarrotes
        Dim list As New List(Of String)

        list.Add(TIPO_VENTA.VENTA_AL_CREDITO)
        list.Add(TIPO_VENTA.VENTA_AL_TICKET)
        list.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)
        'list.Add(TIPO_VENTA.VENTA_ANTICIPADA)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA_RECIBIDO)
        list.Add(TIPO_VENTA.VENTA_GENERAL)
        list.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        Dim suma = Aggregate n In HeliosData.documentoventaAbarrotes
                   Where list.Contains(n.tipoVenta) _
                   And n.idEmpresa = Gempresas.IdEmpresaRuc _
                   And n.idEstablecimiento = GEstableciento.IdEstablecimiento _
                   And n.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                   And n.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                   And n.fechaDoc.Value.Day = be.fechaDoc.Value.Day
                   Into sumaMN = Sum(n.ImporteNacional),
                   sumaME = Sum(n.ImporteExtranjero)

        obj = New documentoventaAbarrotes
        obj.ImporteNacional = suma.sumaMN.GetValueOrDefault
        obj.ImporteExtranjero = suma.sumaME.GetValueOrDefault

        Return obj

    End Function

    Public Function GetSumaVentasDelDiaAllEmpresa(be As documentoventaAbarrotes) As documentoventaAbarrotes
        Dim obj As New documentoventaAbarrotes
        Dim list As New List(Of String)

        list.Add(TIPO_VENTA.VENTA_AL_CREDITO)
        list.Add(TIPO_VENTA.VENTA_AL_TICKET)
        list.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)
        'list.Add(TIPO_VENTA.VENTA_ANTICIPADA)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA_RECIBIDO)
        list.Add(TIPO_VENTA.VENTA_GENERAL)
        list.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        Dim suma = Aggregate n In HeliosData.documentoventaAbarrotes
                   Where list.Contains(n.tipoVenta) _
                   And n.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                   And n.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                   And n.fechaDoc.Value.Day = be.fechaDoc.Value.Day
                   Into sumaMN = Sum(n.ImporteNacional),
                   sumaME = Sum(n.ImporteExtranjero)

        obj = New documentoventaAbarrotes
        obj.ImporteNacional = suma.sumaMN.GetValueOrDefault
        obj.ImporteExtranjero = suma.sumaME.GetValueOrDefault

        Return obj

    End Function

    Public Function CobrosGenerales() As List(Of documentoventaAbarrotes)

        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim list As New List(Of String)
        Dim listcrono As New List(Of String)

        list.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        list.Add(TIPO_VENTA.VENTA_GENERAL)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA)

        listcrono.Add("PN")
        listcrono.Add("AP")
        listcrono.Add("OB")


        Dim consulta = (From mov In HeliosData.documentoventaAbarrotes
                        Join tip In HeliosData.entidad
                        On mov.idCliente Equals tip.idEntidad
                        Where mov.idEmpresa = Gempresas.IdEmpresaRuc
                        Select
                        mov.idCliente, tip.nombreCompleto,
                        PagoDeuda = (CType((Aggregate t1 In
                        (From m In HeliosData.documentoCajaDetalle
                         Join a In HeliosData.documentoventaAbarrotes On New With {.IdDocumento = CInt(m.documentoAfectado)} Equals New With {.IdDocumento = a.idDocumento}
                         Where
                        a.moneda = "1" And a.fechaDoc.Value.Year = AnioGeneral And a.idEmpresa = Gempresas.IdEmpresaRuc And
                        a.idCliente = mov.idCliente And list.Contains(a.tipoVenta)
                         Select New With {
                        m.montoSoles
                        }) Into Sum(t1.montoSoles)), Decimal?)),
                        Deuda = (CType((Aggregate t1 In
                        (From w In HeliosData.documentoventaAbarrotes
                         Where
                        w.moneda = "1" And w.fechaDoc.Value.Year = AnioGeneral And w.idEmpresa = Gempresas.IdEmpresaRuc And
                        w.idCliente = mov.idCliente And list.Contains(w.tipoVenta)
                         Select New With {
                        w.ImporteNacional
                        }) Into Sum(t1.ImporteNacional)), Decimal?)),
                        MontoProgramado = (CType((Aggregate t1 In
                       (From m In HeliosData.Cronograma
                        Join a In HeliosData.documentoventaAbarrotes On New With {.IdDocumento = CInt(m.idDocumentoRef)} Equals New With {.IdDocumento = a.idDocumento}
                        Where
                       m.moneda = "1" And a.fechaDoc.Value.Year = AnioGeneral And a.idEmpresa = Gempresas.IdEmpresaRuc And
                       a.idCliente = mov.idCliente And list.Contains(a.tipoVenta) And
                     listcrono.Contains(m.estado)
                        Select New With {
                       m.montoAutorizadoMN
                      }) Into Sum(t1.montoAutorizadoMN)), Decimal?)),
                      PagoDeudaME = (CType((Aggregate t1 In
                      (From m In HeliosData.documentoCajaDetalle
                       Join a In HeliosData.documentoventaAbarrotes On New With {.IdDocumento = CInt(m.documentoAfectado)} Equals New With {.IdDocumento = a.idDocumento}
                       Where
                      a.moneda = "2" And a.fechaDoc.Value.Year = AnioGeneral And a.idEmpresa = Gempresas.IdEmpresaRuc And
                      a.idCliente = mov.idCliente And list.Contains(a.tipoVenta)
                       Select New With {
                      m.montoUsd
                      }) Into Sum(t1.montoUsd)), Decimal?)),
                      DeudaME = (CType((Aggregate t1 In
                      (From w In HeliosData.documentoventaAbarrotes
                       Where
                     w.moneda = "2" And w.fechaDoc.Value.Year = AnioGeneral And w.idEmpresa = Gempresas.IdEmpresaRuc And
                     w.idCliente = mov.idCliente And list.Contains(w.tipoVenta)
                       Select New With {
                     w.ImporteExtranjero
                     }) Into Sum(t1.ImporteExtranjero)), Decimal?)),
                     MontoProgramadoME = (CType((Aggregate t1 In
                     (From m In HeliosData.Cronograma
                      Join a In HeliosData.documentoventaAbarrotes On New With {.IdDocumento = CInt(m.idDocumentoRef)} Equals New With {.IdDocumento = a.idDocumento}
                      Where
                     m.moneda = "2" And a.fechaDoc.Value.Year = AnioGeneral And a.idEmpresa = Gempresas.IdEmpresaRuc And
                    a.idCliente = mov.idCliente And list.Contains(a.tipoVenta) And
                    listcrono.Contains(m.estado)
                      Select New With {
                     m.montoAutorizadoME
                     }) Into Sum(t1.montoAutorizadoME)), Decimal?))).Distinct().ToList


        For Each i In consulta
            doccompra = New documentoventaAbarrotes
            doccompra.idCliente = i.idCliente
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.ImporteNacional = i.Deuda.GetValueOrDefault
            doccompra.ImporteExtranjero = i.DeudaME.GetValueOrDefault
            doccompra.importeCostoMN = i.PagoDeuda.GetValueOrDefault
            doccompra.importeCostoME = i.PagoDeudaME.GetValueOrDefault
            doccompra.montocrono = i.MontoProgramado.GetValueOrDefault
            doccompra.montocronome = i.MontoProgramadoME.GetValueOrDefault
            'doccompra.montovencido = i.DeudaVencida.GetValueOrDefault
            'doccompra.montovencidome = i.DeudaVencidaME.GetValueOrDefault
            'doccompra.ImportePagoVencidoMN = i.PagoDeudaVencida.GetValueOrDefault
            'doccompra.ImportePagoVencidoME = i.PagoDeudaVencidaME.GetValueOrDefault
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function UbicarVentaPorClientePendienteMNME(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As Integer) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim cronogramabl As New CronogramaBL
        Dim cronograma As New Cronograma

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        Dim list As New List(Of String)
        'list.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'list.Add(TIPO_VENTA.VENTA_GENERAL)
        ''list.Add(TIPO_VENTA.VENTA_ANTICIPADA)
        'list.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        'list.Add(TIPO_VENTA.VENTA_ANTICIPADA_RECIBIDO)


        list.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        'list.Add(TIPO_VENTA.VENTA_AL_TICKET)
        list.Add(TIPO_VENTA.VENTA_GENERAL)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA_RECIBIDO)
        list.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        'list.Add(TIPO_VENTA.VENTA_CONTADO_TOTAL)
        'list.Add(TIPO_VENTA.VENTA_CONTADO_PARCIAL)
        list.Add(TIPO_VENTA.VENTA_CREDITO_TOTAL)
        list.Add(TIPO_VENTA.VENTA_CREDITO_PARCIAL)

        Dim consulta2 = (From n In HeliosData.documentoventaAbarrotes
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                         On n.idDocumento Equals cajadet.documentoAfectado
                         Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento And n.fechaDoc.Value.Year = AnioGeneral _
                         And n.idCliente = strRuc And n.estadoCobro = "PN" And list.Contains(n.tipoVenta)
                         Group c By n.idDocumento, n.tipoVenta, n.fechaPeriodo, n.fechaDoc, n.fechaVcto,
                         n.serie, n.numeroDocNormal, n.tipoDocumento, n.moneda, n.ImporteNacional, n.tipoCambio,
                         n.ImporteExtranjero, n.estadoCobro Into g = Group
                         Select New With {
                                        .idDocumento = idDocumento,
                                        .tipoVenta = tipoVenta,
                                        .fechaPeriodo = fechaPeriodo,
                                        .fechaDoc = fechaDoc,
                                        .fechaVcto = fechaVcto,
                                        .serie = serie,
                                        .numeroDoc = numeroDocNormal,
                                        .tipoDocumento = tipoDocumento,
                                        .moneda = moneda,
                                        .ImporteNacional = ImporteNacional,
                                        .tipoCambio = tipoCambio,
                                        .ImporteExtranjero = ImporteExtranjero,
                                        .estadoCobro = estadoCobro,
                                        .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                        .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList

        For Each i In consulta2
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.fechaVcto = i.fechaVcto
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault


            cronograma = cronogramabl.ObtenerMontoProgramado(i.idDocumento)
            doccompra.montocrono = cronograma.montoAutorizadoMN
            doccompra.montocronome = cronograma.montoAutorizadoME


            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function UbicarCuentasXCobrarComerciales(strEmpresa As String, intIdEstablecimiento As Integer) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim list As New List(Of String)
        list.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        list.Add(TIPO_VENTA.VENTA_GENERAL)


        Dim consulta2 = (From n In HeliosData.documentoventaAbarrotes
                         Join enti In HeliosData.entidad
                         On n.idCliente Equals enti.idEntidad
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                         On n.idDocumento Equals cajadet.documentoAfectado
                         Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento _
                         And n.estadoCobro = "PN" And list.Contains(n.tipoVenta)
                         Group c By n.idDocumento, n.tipoVenta, n.fechaPeriodo, n.fechaDoc,
                         n.serie, n.numeroDocNormal, enti.tipoDoc, n.moneda, n.ImporteNacional, n.tipoCambio, n.nombrePedido, enti.nrodoc,
                         n.ImporteExtranjero, n.estadoCobro Into g = Group
                         Select New With {
                                        .idDocumento = idDocumento,
                                        .fechaDoc = fechaDoc,
                                        .Nombrecliente = nombrePedido,
                                        .tipodoc = tipoDoc,
                                        .numeroDoc = nrodoc,
                                        .ImporteNacional = ImporteNacional,
                                        .ImporteExtranjero = ImporteExtranjero,
                                        .estadoCobro = estadoCobro,
                                        .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                        .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList

        For Each i In consulta2
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            'doccompra.tipoVenta = i.tipoVenta
            'doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            'doccompra.serie = i.serie
            doccompra.tipoDocEntidad = i.tipodoc
            doccompra.numeroDoc = i.numeroDoc
            'doccompra.tipoDocumento = i.tipoDocumento
            'doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional - i.SumaPagoMN.GetValueOrDefault
            'doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero - i.SumaPagoME.GetValueOrDefault
            doccompra.estadoCobro = i.estadoCobro
            'doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault
            'doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault
            doccompra.terminos = i.Nombrecliente
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function UbicarCobrosTodo(strEmpresa As String, intIdEstablecimiento As Integer, strMoneda As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim list As New List(Of String)

        list.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        list.Add(TIPO_VENTA.VENTA_GENERAL)

        Dim con = (From compra In HeliosData.documentoventaAbarrotes
                   Group Join persona In HeliosData.entidad On
                  persona.idEntidad Equals compra.idCliente Into persona_join = Group
                   From persona In persona_join.DefaultIfEmpty()
                   Group Join pago In HeliosData.documentoCajaDetalle
                  On compra.idDocumento Equals pago.documentoAfectado Into pago_join = Group
                   From pago In pago_join.DefaultIfEmpty()
                   Where compra.idEmpresa = strEmpresa And compra.idEstablecimiento = intIdEstablecimiento And compra.estadoCobro = "PN" _
                  And compra.moneda = strMoneda
                   Group New With {persona, compra, pago} By
                  persona.idEntidad,
                  persona.nombreCompleto
                  Into g = Group
                   Select
                  IdEntidad = CType(idEntidad, Int32?),
                  NombreCompleto = nombreCompleto,
                  Deuda = CType(g.Sum(Function(p) p.compra.ImporteNacional), Decimal?),
                  Acuenta = CType(g.Sum(Function(p) p.pago.montoSoles), Decimal?),
                  deudaME = CType(g.Sum(Function(p) p.compra.ImporteExtranjero), Decimal?),
                  AcuentaME = CType(g.Sum(Function(p) p.pago.montoUsd), Decimal?)).ToList

        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idCliente = i.IdEntidad
            doccompra.NombreEntidad = i.NombreCompleto
            If IsNothing(i.Acuenta) Then
                doccompra.ImporteNacional = i.Deuda - CDec(0.0)
            Else
                doccompra.ImporteNacional = i.Deuda - i.Acuenta
            End If

            If IsNothing(i.AcuentaME) Then
                doccompra.ImporteExtranjero = i.deudaME - CDec(0.0)
            Else
                doccompra.ImporteExtranjero = i.deudaME - i.AcuentaME
            End If

            doccompra.moneda = strMoneda

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function UbicarCobrosProveedorXperiodo(strEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, strMoneda As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim list As New List(Of String)


        list.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        list.Add(TIPO_VENTA.VENTA_GENERAL)


        Dim con = (From compra In HeliosData.documentoventaAbarrotes
                   Group Join persona In HeliosData.entidad On
                  persona.idEntidad Equals compra.idCliente Into persona_join = Group
                   From persona In persona_join.DefaultIfEmpty()
                   Group Join pago In HeliosData.documentoCajaDetalle
                  On compra.idDocumento Equals pago.documentoAfectado Into pago_join = Group
                   From pago In pago_join.DefaultIfEmpty()
                   Where compra.idEmpresa = Gempresas.IdEmpresaRuc And compra.idEstablecimiento = GEstableciento.IdEstablecimiento And compra.estadoCobro = "PN" _
                  And compra.fechaPeriodo = strPeriodo And compra.moneda = strMoneda
                   Group New With {persona, compra, pago} By
                  persona.idEntidad,
                  persona.nombreCompleto
                  Into g = Group
                   Select
                  IdEntidad = CType(idEntidad, Int32?),
                  NombreCompleto = nombreCompleto,
                  Deuda = CType(g.Sum(Function(p) p.compra.ImporteNacional), Decimal?),
                  Acuenta = CType(g.Sum(Function(p) p.pago.montoSoles), Decimal?),
                  deudaME = CType(g.Sum(Function(p) p.compra.ImporteExtranjero), Decimal?),
                  AcuentaME = CType(g.Sum(Function(p) p.pago.montoUsd), Decimal?)).ToList

        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idCliente = i.IdEntidad
            doccompra.NombreEntidad = i.NombreCompleto
            If IsNothing(i.Acuenta) Then
                doccompra.ImporteNacional = i.Deuda - CDec(0.0)
            Else
                doccompra.ImporteNacional = i.Deuda - i.Acuenta
            End If

            If IsNothing(i.AcuentaME) Then
                doccompra.ImporteExtranjero = i.deudaME - CDec(0.0)
            Else
                doccompra.ImporteExtranjero = i.deudaME - i.AcuentaME
            End If

            doccompra.moneda = strMoneda

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function UbicarCobrosClienteTodo(strEmpresa As String, intIdEstablecimiento As Integer, strMoneda As String, idprov As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim list As New List(Of String)


        list.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        list.Add(TIPO_VENTA.VENTA_GENERAL)

        Dim con = (From compra In HeliosData.documentoventaAbarrotes
                   Group Join persona In HeliosData.entidad On
                  persona.idEntidad Equals compra.idCliente Into persona_join = Group
                   From persona In persona_join.DefaultIfEmpty()
                   Group Join pago In HeliosData.documentoCajaDetalle
                  On compra.idDocumento Equals pago.documentoAfectado Into pago_join = Group
                   From pago In pago_join.DefaultIfEmpty()
                   Where compra.idEmpresa = Gempresas.IdEmpresaRuc And compra.idEstablecimiento = GEstableciento.IdEstablecimiento And compra.estadoCobro = "PN" _
                  And compra.moneda = strMoneda And compra.idCliente = idprov And compra.fechaPeriodo = strPeriodo
                   Group New With {persona, compra, pago} By
                  persona.idEntidad,
                  persona.nombreCompleto
                  Into g = Group
                   Select
                  IdEntidad = CType(idEntidad, Int32?),
                  NombreCompleto = nombreCompleto,
                  Deuda = CType(g.Sum(Function(p) p.compra.ImporteNacional), Decimal?),
                  Acuenta = CType(g.Sum(Function(p) p.pago.montoSoles), Decimal?),
                  deudaME = CType(g.Sum(Function(p) p.compra.ImporteExtranjero), Decimal?),
                  AcuentaME = CType(g.Sum(Function(p) p.pago.montoUsd), Decimal?)).ToList

        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idCliente = i.IdEntidad
            doccompra.NombreEntidad = i.NombreCompleto
            If IsNothing(i.Acuenta) Then
                doccompra.ImporteNacional = i.Deuda - CDec(0.0)
            Else
                doccompra.ImporteNacional = i.Deuda - i.Acuenta
            End If

            If IsNothing(i.AcuentaME) Then
                doccompra.ImporteExtranjero = i.deudaME - CDec(0.0)
            Else
                doccompra.ImporteExtranjero = i.deudaME - i.AcuentaME
            End If

            doccompra.moneda = strMoneda

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function



    Public Function GetListarAllVentasAnuladas(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And compra.estadoCobro = "ANU" And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetArticulosVendidosByMes(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotesDet)
        Dim obj As New documentoventaAbarrotesDet
        Dim lista As New List(Of documentoventaAbarrotesDet)

        Dim consulta = (From det In HeliosData.documentoventaAbarrotesDet
                        Join alm In HeliosData.almacen On New With {.IdAlmacen = CInt(det.idAlmacenOrigen)} Equals New With {.IdAlmacen = alm.idAlmacen}
                        Where det.documentoventaAbarrotes.estadoCobro <> "ANU" And
                       det.documentoventaAbarrotes.fechaPeriodo = be.fechaPeriodo And det.documentoventaAbarrotes.idEmpresa = be.idEmpresa And
                       (New String() {TIPO_VENTA.VENTA_AL_TICKET, TIPO_VENTA.VENTA_POS_DIRECTA}).Contains(det.documentoventaAbarrotes.tipoVenta)
                        Select
                       FechaDoc = CType(det.documentoventaAbarrotes.fechaDoc, DateTime?),
                       det.idItem,
                       det.nombreItem,
                       IdAlmacenOrigen = CType(det.idAlmacenOrigen, Int32?),
                       alm.descripcionAlmacen,
                       det.unidad1,
                       det.monto1,
                       det.precioUnitario,
                       det.importeMN).ToList

        For Each i In consulta
            obj = New documentoventaAbarrotesDet
            obj.FechaDoc = i.FechaDoc
            obj.idItem = i.idItem
            obj.nombreItem = i.nombreItem
            obj.idAlmacenOrigen = i.IdAlmacenOrigen
            obj.NombreAlmacen = i.descripcionAlmacen
            obj.unidad1 = i.unidad1
            obj.monto1 = i.monto1
            obj.precioUnitario = i.precioUnitario
            obj.importeMN = i.importeMN
            lista.Add(obj)
        Next
        Return lista
    End Function

    Public Function GetArticulosVendidosByDia(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotesDet)
        Dim obj As New documentoventaAbarrotesDet
        Dim lista As New List(Of documentoventaAbarrotesDet)

        Dim consulta = (From det In HeliosData.documentoventaAbarrotesDet
                        Join alm In HeliosData.almacen On New With {.IdAlmacen = CInt(det.idAlmacenOrigen)} Equals New With {.IdAlmacen = alm.idAlmacen}
                        Where det.documentoventaAbarrotes.estadoCobro <> "ANU" And
                       det.documentoventaAbarrotes.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                       det.documentoventaAbarrotes.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                       det.documentoventaAbarrotes.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                       det.documentoventaAbarrotes.idEmpresa = be.idEmpresa And
                       (New String() {TIPO_VENTA.VENTA_AL_TICKET, TIPO_VENTA.VENTA_POS_DIRECTA}).Contains(det.documentoventaAbarrotes.tipoVenta)
                        Select
                       FechaDoc = CType(det.documentoventaAbarrotes.fechaDoc, DateTime?),
                       det.idItem,
                       det.nombreItem,
                       IdAlmacenOrigen = CType(det.idAlmacenOrigen, Int32?),
                       alm.descripcionAlmacen,
                       det.unidad1,
                       det.monto1,
                       det.precioUnitario,
                       det.importeMN).ToList

        For Each i In consulta
            obj = New documentoventaAbarrotesDet
            obj.FechaDoc = i.FechaDoc
            obj.idItem = i.idItem
            obj.nombreItem = i.nombreItem
            obj.idAlmacenOrigen = i.IdAlmacenOrigen
            obj.NombreAlmacen = i.descripcionAlmacen
            obj.unidad1 = i.unidad1
            obj.monto1 = i.monto1
            obj.precioUnitario = i.precioUnitario
            obj.importeMN = i.importeMN
            lista.Add(obj)
        Next
        Return lista
    End Function


    Public Sub GetConfirmarAlertaventa(be As documentoventaAbarrotes)
        Using ts As New TransactionScope
            Dim consulta = (From n In HeliosData.documentoventaAbarrotes
                            Where n.idDocumento = be.idDocumento).FirstOrDefault

            If Not IsNothing(consulta) Then
                consulta.notificacionAsiento = "P" ' Procesado
            End If

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function getListaServiosXVenta(be As InventarioMovimiento, fechaini As DateTime, fechafin As DateTime, tipo As String) As List(Of InventarioMovimiento)
        Dim obj As New InventarioMovimiento
        Dim lista As New List(Of InventarioMovimiento)

        Select Case tipo
            Case "Dia"
                Dim consultaVentas = (From b In HeliosData.documentoventaAbarrotesDet
                                      Where
                            CStr(b.documentoventaAbarrotes.fechaDoc.Value.Year) = fechafin.Year And
                            CStr(b.documentoventaAbarrotes.fechaDoc.Value.Month) = fechafin.Month And
                            CStr(b.documentoventaAbarrotes.fechaDoc.Value.Day) = fechafin.Day And
                            b.tipoExistencia = "GS"
                                      Select
                            b.documentoventaAbarrotes.tipoOperacion,
                            b.idDocumento,
                            b.secuencia,
                            b.idAlmacenOrigen,
                            b.establecimientoOrigen,
                            b.cuentaOrigen,
                            b.idItem,
                            b.nombreItem,
                            b.tipoExistencia,
                            b.destino,
                            b.unidad1,
                            b.monto1,
                            b.unidad2,
                            b.monto2,
                            b.precioUnitario,
                            b.precioUnitarioUS,
                            b.importeMN,
                            b.importeME,
                            b.importeMNK,
                            b.importeMEK,
                            b.descuentoMN,
                            b.descuentoME,
                            b.montokardex,
                            b.montoIsc,
                            b.montoIgv,
                            b.otrosTributos,
                            b.montokardexUS,
                            b.montoIscUS,
                            b.montoIgvUS,
                            b.otrosTributosUS,
                            b.salidaCostoMN,
                            b.salidaCostoME,
                            b.cantidadCredito,
                            b.cantidadDebito,
                            b.notaCreditoMN,
                            b.notaCreditoME,
                            b.notaDebitoMN,
                            b.notaDebitoME,
                            b.preEvento,
                            b.idPadreDTVenta,
                            b.estadoMovimiento,
                            b.tipoVenta,
                            b.entregado,
                            b.estadoPago,
                            b.categoria,
                            b.estadoEntrega,
                            b.idCajaUsuario,
                            b.usuarioModificacion,
                            b.fechaModificacion).ToList

                For Each i In consultaVentas
                    obj = New InventarioMovimiento
                    obj.idInventario = i.idDocumento
                    obj.ValorDeVenta = i.montokardex.GetValueOrDefault
                    'obj.NombreAlmacen = i.descripcionAlmacen
                    obj.fecha = i.fechaModificacion
                    obj.idAlmacen = Nothing
                    obj.tipoExistencia = i.tipoExistencia
                    obj.idDocumento = i.idDocumento
                    obj.tipoRegistro = "S"
                    obj.tipoOperacion = i.tipoOperacion
                    obj.idItem = i.idItem
                    obj.destinoGravadoItem = i.destino
                    obj.descripcion = i.nombreItem
                    obj.nombreItem = i.nombreItem
                    obj.unidad = i.unidad1
                    obj.cantidad = i.monto1
                    obj.cantidad2 = 0 ' i.CierreCantMesAnterior.GetValueOrDefault
                    obj.monto = i.importeMN
                    obj.montoOther = 0 ' i.CierreImporteMesAnterior.GetValueOrDefault
                    lista.Add(obj)
                Next

            Case "Mes"
                Dim consultaVentas = (From b In HeliosData.documentoventaAbarrotesDet
                                      Where
                           CStr(b.documentoventaAbarrotes.fechaDoc.Value.Year) = fechafin.Year And
                           CStr(b.documentoventaAbarrotes.fechaDoc.Value.Month) = fechafin.Month And
                           b.tipoExistencia = "GS"
                                      Select
                           b.documentoventaAbarrotes.tipoOperacion,
                           b.idDocumento,
                           b.secuencia,
                           b.idAlmacenOrigen,
                           b.establecimientoOrigen,
                           b.cuentaOrigen,
                           b.idItem,
                           b.nombreItem,
                           b.tipoExistencia,
                           b.destino,
                           b.unidad1,
                           b.monto1,
                           b.unidad2,
                           b.monto2,
                           b.precioUnitario,
                           b.precioUnitarioUS,
                           b.importeMN,
                           b.importeME,
                           b.importeMNK,
                           b.importeMEK,
                           b.descuentoMN,
                           b.descuentoME,
                           b.montokardex,
                           b.montoIsc,
                           b.montoIgv,
                           b.otrosTributos,
                           b.montokardexUS,
                           b.montoIscUS,
                           b.montoIgvUS,
                           b.otrosTributosUS,
                           b.salidaCostoMN,
                           b.salidaCostoME,
                           b.cantidadCredito,
                           b.cantidadDebito,
                           b.notaCreditoMN,
                           b.notaCreditoME,
                           b.notaDebitoMN,
                           b.notaDebitoME,
                           b.preEvento,
                           b.idPadreDTVenta,
                           b.estadoMovimiento,
                           b.tipoVenta,
                           b.entregado,
                           b.estadoPago,
                           b.categoria,
                           b.estadoEntrega,
                           b.idCajaUsuario,
                           b.usuarioModificacion,
                           b.fechaModificacion).ToList

                For Each i In consultaVentas
                    obj = New InventarioMovimiento
                    obj.idInventario = i.idDocumento
                    obj.ValorDeVenta = i.montokardex.GetValueOrDefault
                    'obj.NombreAlmacen = i.descripcionAlmacen
                    obj.fecha = i.fechaModificacion
                    obj.idAlmacen = Nothing
                    obj.tipoExistencia = i.tipoExistencia
                    obj.idDocumento = i.idDocumento
                    obj.tipoRegistro = "S"
                    obj.tipoOperacion = i.tipoOperacion
                    obj.idItem = i.idItem
                    obj.destinoGravadoItem = i.destino
                    obj.descripcion = i.nombreItem
                    obj.nombreItem = i.nombreItem
                    obj.unidad = i.unidad1
                    obj.cantidad = i.monto1
                    obj.cantidad2 = 0 ' i.CierreCantMesAnterior.GetValueOrDefault
                    obj.monto = i.importeMN
                    obj.montoOther = 0 ' i.CierreImporteMesAnterior.GetValueOrDefault
                    lista.Add(obj)
                Next
        End Select


        Return lista
    End Function

    Public Function GetRentabilidadPorPeriodo(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotesDet)
        Dim obj As New documentoventaAbarrotesDet
        Dim lista As New List(Of documentoventaAbarrotesDet)
        Dim listaTipo As New List(Of String)
        listaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        listaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)

        Dim consulta = (From vdt In HeliosData.documentoventaAbarrotesDet
                        Join vd In HeliosData.documentoventaAbarrotes
                        On vd.idDocumento Equals vdt.idDocumento
                        Join alm In HeliosData.almacen
                        On alm.idAlmacen Equals vdt.idAlmacenOrigen
                        Join estable In HeliosData.centrocosto
                        On estable.idCentroCosto Equals vd.idEstablecimiento
                        Group Join item In HeliosData.detalleitems On New With {.Codigodetalle = vdt.idItem} Equals New With {.Codigodetalle = CStr(item.codigodetalle)} Into item_join = Group
                        From item In item_join.DefaultIfEmpty()
                        Where
                       listaTipo.Contains(vdt.documentoventaAbarrotes.tipoVenta) And
                       vdt.documentoventaAbarrotes.idEmpresa = Gempresas.IdEmpresaRuc And
                       vdt.documentoventaAbarrotes.fechaPeriodo = be.fechaPeriodo
                        Group New With {vdt, item} By
                       estable.nombre,
                       vdt.idItem,
                       item.descripcionItem,
                       item.origenProducto,
                       item.tipoExistencia,
                       item.unidad1,
                       alm.descripcionAlmacen
                       Into g = Group
                        Select
                       nomEstable = nombre,
                       idItem,
                       DescripcionItem = descripcionItem,
                       OrigenProducto = origenProducto,
                       TipoExistencia = tipoExistencia,
                       Unidad1 = unidad1,
                       NombreAlmacen = descripcionAlmacen,
                       venta_SinIgv = CType(g.Sum(Function(p) p.vdt.montokardex), Decimal?),
                       costo = CType(g.Sum(Function(p) p.vdt.salidaCostoMN), Decimal?)).ToList

        For Each i In consulta
            obj = New documentoventaAbarrotesDet
            obj.NomEstablecimiento = i.nomEstable
            obj.NombreAlmacen = i.NombreAlmacen
            obj.idItem = i.idItem
            obj.nombreItem = i.DescripcionItem
            obj.destino = i.OrigenProducto
            Select Case i.TipoExistencia
                Case TipoExistencia.Mercaderia
                    obj.tipoExistencia = "Mercadería"
                Case TipoExistencia.ProductoTerminado
                    obj.tipoExistencia = "Prod. terminado"
                Case TipoExistencia.MateriaPrima
                    obj.tipoExistencia = "Materia prima"
                Case TipoExistencia.EnvasesEmbalajes
                    obj.tipoExistencia = "Envases  y embal."
                Case TipoExistencia.MaterialAuxiliar_SuministroRepuesto
                    obj.tipoExistencia = "Mat. aux. suminist."
                Case TipoExistencia.SubProductosDesechos
                    obj.tipoExistencia = "Sub productos desechos y desperdicios"
                Case TipoExistencia.ProductosEnProceso
                    obj.tipoExistencia = "Productos en proceso"
                Case TipoExistencia.ActivoInmovilizado
                    obj.tipoExistencia = "Activo inmovilizado"

                Case Else
                    obj.tipoExistencia = "Servicio"
            End Select
            obj.unidad1 = i.Unidad1
            obj.VentaTotalSinIgv = i.venta_SinIgv
            obj.CostoTotalInv = i.costo
            lista.Add(obj)
        Next

        Return lista

    End Function

    Public Function GetRentabilidadPorDia(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotesDet)
        Dim obj As New documentoventaAbarrotesDet
        Dim lista As New List(Of documentoventaAbarrotesDet)
        Dim listaTipo As New List(Of String)
        listaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        listaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)

        Dim consulta = (From vdt In HeliosData.documentoventaAbarrotesDet
                        Join vd In HeliosData.documentoventaAbarrotes
                        On vd.idDocumento Equals vdt.idDocumento
                        Join alm In HeliosData.almacen On alm.idAlmacen Equals vdt.idAlmacenOrigen
                        Join estable In HeliosData.centrocosto
                        On estable.idCentroCosto Equals vd.idEstablecimiento
                        Group Join item In HeliosData.detalleitems On New With {.Codigodetalle = vdt.idItem} Equals New With {.Codigodetalle = CStr(item.codigodetalle)} Into item_join = Group
                        From item In item_join.DefaultIfEmpty()
                        Where
                       listaTipo.Contains(vdt.documentoventaAbarrotes.tipoVenta) And
                       vdt.documentoventaAbarrotes.idEmpresa = Gempresas.IdEmpresaRuc And
                       vdt.documentoventaAbarrotes.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                       vdt.documentoventaAbarrotes.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                       vdt.documentoventaAbarrotes.fechaDoc.Value.Year = be.fechaDoc.Value.Year
                        Group New With {vdt, item} By
                       estable.nombre,
                       vdt.idItem,
                       item.descripcionItem,
                       item.origenProducto,
                       item.tipoExistencia,
                       item.unidad1,
                       alm.descripcionAlmacen
                       Into g = Group
                        Select
                       NombreAlmacen = descripcionAlmacen,
                       nomEstable = nombre,
                       idItem,
                       DescripcionItem = descripcionItem,
                       OrigenProducto = origenProducto,
                       TipoExistencia = tipoExistencia,
                       Unidad1 = unidad1,
                       venta_SinIgv = CType(g.Sum(Function(p) p.vdt.montokardex), Decimal?),
                       costo = CType(g.Sum(Function(p) p.vdt.salidaCostoMN), Decimal?)).ToList

        For Each i In consulta
            obj = New documentoventaAbarrotesDet
            obj.NomEstablecimiento = i.nomEstable
            obj.NombreAlmacen = i.NombreAlmacen
            obj.idItem = i.idItem
            obj.nombreItem = i.DescripcionItem
            obj.destino = i.OrigenProducto
            Select Case i.TipoExistencia
                Case TipoExistencia.Mercaderia
                    obj.tipoExistencia = "Mercadería"
                Case TipoExistencia.ProductoTerminado
                    obj.tipoExistencia = "Prod. terminado"
                Case TipoExistencia.MateriaPrima
                    obj.tipoExistencia = "Materia prima"
                Case TipoExistencia.EnvasesEmbalajes
                    obj.tipoExistencia = "Envases  y embal."
                Case TipoExistencia.MaterialAuxiliar_SuministroRepuesto
                    obj.tipoExistencia = "Mat. aux. suminist."
                Case TipoExistencia.SubProductosDesechos
                    obj.tipoExistencia = "Sub productos desechos y desperdicios"
                Case TipoExistencia.ProductosEnProceso
                    obj.tipoExistencia = "Productos en proceso"
                Case TipoExistencia.ActivoInmovilizado
                    obj.tipoExistencia = "Activo inmovilizado"

                Case Else
                    obj.tipoExistencia = "Servicio"
            End Select
            obj.unidad1 = i.Unidad1
            obj.VentaTotalSinIgv = i.venta_SinIgv
            obj.CostoTotalInv = i.costo
            lista.Add(obj)
        Next

        Return lista

    End Function

    Public Function GetVentasDeApertura(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim compraBE As New documentoventaAbarrotes
        Dim Lista As New List(Of documentoventaAbarrotes)

        Dim consulta = (From n In HeliosData.documentoventaAbarrotes
                        Join ent In HeliosData.entidad
                        On ent.idEntidad Equals n.idCliente
                        Where n.idEmpresa = be.idEmpresa _
                       And n.tipoVenta = "APT").ToList

        For Each i In consulta
            compraBE = New documentoventaAbarrotes
            compraBE.idDocumento = i.n.idDocumento
            compraBE.fechaDoc = i.n.fechaDoc
            compraBE.tipoDocumento = i.n.tipoDocumento
            compraBE.serie = i.n.serie
            compraBE.numeroDoc = i.n.numeroDoc
            compraBE.moneda = i.n.moneda
            compraBE.tipoDocumento = i.n.tipoDocumento
            compraBE.NombreEntidad = i.ent.nombreCompleto
            compraBE.ImporteNacional = i.n.ImporteNacional
            compraBE.ImporteExtranjero = i.n.ImporteExtranjero
            Lista.Add(compraBE)
        Next

        Return Lista
    End Function

    Public Function GetCuentasPorCobrarInicio(be As documentoventaAbarrotes) As documentoventaAbarrotes
        Dim obj As New documentoventaAbarrotes

        Dim suma = Aggregate n In HeliosData.documentoventaAbarrotes
                   Where n.idEmpresa = be.idEmpresa _
                   And n.tipoVenta = "APT"
                   Into SumaMN = Sum(n.ImporteNacional),
                   SumaME = Sum(n.ImporteExtranjero)


        obj = New documentoventaAbarrotes
        obj.ImporteNacional = suma.SumaMN.GetValueOrDefault
        obj.ImporteExtranjero = suma.SumaME.GetValueOrDefault

        Return obj
    End Function


    Public Function ListadoventasObservadas(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim lista As List(Of documentoventaAbarrotes)
        Dim listaRes As New List(Of documentoventaAbarrotes)

        lista = (From n In HeliosData.documentoventaAbarrotes
                 Where n.notificacionAsiento = "S" And n.idEmpresa = be.idEmpresa
                 Select n).ToList

        listaRes = AutoMapper.Mapper.Map(Of List(Of documentoventaAbarrotes))(lista)

        Return listaRes
    End Function

    Public Function ListadoventasObservadasChild(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotesDet)
        Dim lista As List(Of documentoventaAbarrotesDet)
        Dim listaRes As New List(Of documentoventaAbarrotesDet)

        lista = (From n In HeliosData.documentoventaAbarrotes
                 Join det In HeliosData.documentoventaAbarrotesDet
                 On det.idDocumento Equals n.idDocumento
                 Where n.notificacionAsiento = "S" And n.idEmpresa = be.idEmpresa
                 Select det).ToList

        listaRes = AutoMapper.Mapper.Map(Of List(Of documentoventaAbarrotesDet))(lista)

        Return listaRes
    End Function

    Public Function ListadoventasObservadasConteo(be As documentoventaAbarrotes) As Integer

        Return (From n In HeliosData.documentoventaAbarrotes
                Where n.notificacionAsiento = "S" And n.idEmpresa = be.idEmpresa
                Select n).Count


    End Function

    Public Function GetVentasNotificadasAtendCompras(intIdDocumento As Integer) As List(Of documentoventaAbarrotesDet)
        Dim lista As New List(Of documentoventaAbarrotesDet)
        Dim obj As New documentoventaAbarrotesDet
        Dim consulta = (From vt In HeliosData.documentoventaAbarrotesDet
                        Join v In HeliosData.documentoventaAbarrotes
                        On vt.idDocumento Equals v.idDocumento
                        Join cd In HeliosData.documentocompradetalle
                        On cd.idItem Equals vt.idItem
                        Where cd.idDocumento = intIdDocumento _
                        And v.fechaDoc >= cd.fechaEntrega).ToList

        For Each i In consulta
            obj = New documentoventaAbarrotesDet
            obj.idDocumento = i.v.idDocumento
            obj.FechaDoc = i.v.fechaDoc
            obj.TipoDoc = i.v.tipoDocumento
            obj.Serie = i.v.serie
            obj.NumDoc = i.v.numeroDoc

            obj.idItem = i.vt.idItem
            obj.DetalleItem = i.vt.nombreItem
            obj.importeMN = i.vt.importeMN
            obj.importeME = i.vt.importeME

            lista.Add(obj)
        Next
        Return lista

    End Function

    Public Function VentasCantidadStock(cantidadx As String, fechaini As Date, fechafin As Date, mayor As Decimal, menor As Decimal) As List(Of documentoventaAbarrotesDet)
        Dim Lista As New List(Of documentoventaAbarrotesDet)
        Dim objRecurso As New documentoventaAbarrotesDet
        Dim almacenb As New almacenBL
        If menor = CDec(0.0) Then

            Dim consulta = (From c In HeliosData.totalesAlmacen
                            Join a In HeliosData.almacen
                           On New With {c.idAlmacen} Equals New With {a.idAlmacen}
                            Select
                           almacen = a.descripcionAlmacen, c.idItem, stock = c.cantidad, nombre = c.descripcion,
                           Cant_ventas = (CType((Aggregate t1 In
                           (From vt In HeliosData.documentoventaAbarrotesDet
                            Where vt.idItem = CStr(c.idItem) _
                           And vt.documentoventaAbarrotes.fechaDoc <= fechafin.Date _
                           And vt.documentoventaAbarrotes.fechaDoc >= fechaini.Date
                            Select New With {
                            vt.monto1
                            }) Into Sum(t1.monto1)), Decimal?)) Order By nombre Ascending)

            For Each obj In consulta
                objRecurso = New documentoventaAbarrotesDet
                If Not obj.Cant_ventas Is Nothing Then
                    If obj.Cant_ventas >= menor Then
                        If obj.Cant_ventas <= mayor Then
                            objRecurso.idItem = obj.idItem
                            objRecurso.nombreItem = obj.nombre
                            objRecurso.monto1 = obj.Cant_ventas
                            objRecurso.monto2 = obj.stock
                            objRecurso.NombreProveedor = obj.almacen
                            Lista.Add(objRecurso)
                        End If
                    End If
                Else
                    objRecurso.idItem = obj.idItem
                    objRecurso.nombreItem = obj.nombre
                    objRecurso.monto1 = CDec(0.0)
                    objRecurso.monto2 = obj.stock
                    objRecurso.NombreProveedor = obj.almacen
                    Lista.Add(objRecurso)
                End If
            Next

        ElseIf menor > CDec(0.0) Then
            Dim consulta = (From c In HeliosData.totalesAlmacen
                            Join venta In HeliosData.documentoventaAbarrotesDet
                              On venta.idItem Equals c.idItem
                            Join doc In HeliosData.documentoventaAbarrotes
                              On doc.idDocumento Equals venta.idDocumento
                            Where doc.fechaDoc <= fechafin.Date _
                         And doc.fechaDoc >= fechaini.Date _
                        And venta.idAlmacenOrigen = c.idAlmacen
                            Group venta By
                         venta.nombreItem, venta.idItem, c.cantidad, venta.idAlmacenOrigen
                            Into g = Group
                            Order By nombreItem Ascending
                            Select New With {g, .Cant_ventas = g.Sum(Function(venta) venta.monto1),
                                            .nombre = nombreItem,
                                            .idItem = idItem,
                                             .stock = cantidad,
                                             .almacen = idAlmacenOrigen
                                            })
            For Each obj In consulta
                objRecurso = New documentoventaAbarrotesDet
                If obj.Cant_ventas >= menor Then
                    If obj.Cant_ventas <= mayor Then
                        objRecurso.idItem = obj.idItem
                        objRecurso.nombreItem = obj.nombre
                        objRecurso.monto1 = obj.Cant_ventas
                        objRecurso.monto2 = obj.stock
                        objRecurso.NombreProveedor = almacenb.GetUbicar_almacenPorID(obj.almacen).descripcionAlmacen
                        Lista.Add(objRecurso)
                    End If
                End If
            Next

        End If

        Return Lista
    End Function

    Public Function GetListarAllNotasPedido(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_NOTA_PEDIDO)
        'compra.fechaPeriodo = strPeriodo And
        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       ListaTipo.Contains(compra.tipoVenta)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarCotizaciones(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.COTIZACION)
        'compra.fechaPeriodo = strPeriodo And
        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       ListaTipo.Contains(compra.tipoVenta)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetConteoPedidos(intIdEstablec As Integer, strPeriodo As String) As Integer
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_NOTA_PEDIDO)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From compra In HeliosData.documentoventaAbarrotes
                        Where compra.idEstablecimiento = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta)).Count


        Return consulta
    End Function

    Public Function SaveVentaPS(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen)) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        'Dim asientoBL As New AsientoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim listaTortalesAlmacen As New List(Of totalesAlmacen)
        Dim numeracionBL As New numeracionBoletasBL
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now

                '#Region "Compra extra por inventario escaso"

                '                Dim listaAComprar = objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.Where(Function(o) o.monto2 > 0).ToList
                '                If listaAComprar.Count > 0 Then
                '                    Dim compraBL As New documentocompraBL
                '                    Dim obj As recursoCostoLote
                '                    Dim DetalleCompra As New List(Of documentocompradetalle)

                '                    Dim proveedor = HeliosData.entidad.Where(Function(o) o.idEmpresa = objDocumento.idEmpresa And o.tipoEntidad = "VR").Single

                '                    Dim nuevoDetalle = (From member In listaAComprar
                '                                            Group member By keys = New With
                '                                            {
                '                                            Key member.codigoLote,
                '                                            Key member.idAlmacenOrigen,
                '                                            Key member.destino,
                '                                            Key member.idItem,
                '                                            Key member.nombreItem,
                '                                            Key member.tipoExistencia,
                '                                            Key member.unidad1
                '                                            }
                '                                            Into Group
                '                                            Select New With
                '                                            {
                '                                            keys.codigoLote,
                '                                            keys.idAlmacenOrigen,
                '                                            keys.idItem,
                '                                            keys.destino,
                '                                            keys.nombreItem,
                '                                            keys.tipoExistencia,
                '                                            keys.unidad1,
                '                                            .sumCantidad = Group.Sum(Function(x) x.monto2),
                '                                            .SumMonto = Group.Max(Function(x) x.importeMN)
                '                                            }).ToList

                '                    Dim numeroNota = compraBL.GetNumeracionCompra(New documentocompra With
                '                                           {
                '                                           .idEmpresa = objDocumento.documentoventaAbarrotes.idEmpresa,
                '                                           .tipoCompra = TIPO_COMPRA.NOTA_DE_COMPRA
                '                                           })

                '                    Dim doc As documento = AddDocumento(objDocumento.documentoventaAbarrotes)
                '                    doc.nroDoc = numeroNota
                '                    doc.idEntidad = proveedor.idEntidad
                '                    doc.entidad = proveedor.nombreCompleto
                '                    doc.nroDoc = "-"
                '                    doc.tipoEntidad = "PR"
                '                    '----------------------------------------------------------------------------------------------
                '                    Dim docCompra As documentocompra = AddNotaCompra(objDocumento.documentoventaAbarrotes, nuevoDetalle.Sum(Function(o) o.SumMonto).GetValueOrDefault)

                '                    docCompra.idProveedor = proveedor.idEntidad
                '                    docCompra.nombreProveedor = proveedor.nombreCompleto
                '                    doc.documentocompra = docCompra
                '                    doc.documentocompra.numeroDoc = numeroNota
                '                    '----------------------------------------------------------------------------------------------
                '                    For Each i In nuevoDetalle
                '                            obj = New recursoCostoLote With
                '                                 {
                '                                 .codigoLote = i.codigoLote,
                '                                 .nroLote = "NOTA",
                '                                 .detalle = i.nombreItem,
                '                                 .fechaProduccion = Nothing,
                '                                 .fechaVcto = Nothing,
                '                                 .productoSustentado = False
                '                                 }

                '                        DetalleCompra.Add(New documentocompradetalle With
                '                                          {
                '                                          .ItemEntregadototal = "S",
                '                                          .codigoLote = i.codigoLote,
                '                                          .nrolote = obj.nroLote,
                '                                          .CustomRecursoCostoLote = obj,
                '                                          .IdEmpresa = doc.idEmpresa,
                '                                          .IdEstablecimiento = doc.idCentroCosto,
                '                                          .tipoCompra = TIPO_COMPRA.COMPRA,
                '                                          .TipoOperacion = StatusTipoOperacion.COMPRA,
                '                                          .FechaDoc = doc.fechaProceso,
                '                                          .FechaLaboral = DateTime.Now,
                '                                          .CuentaProvedor = "4212",
                '                                          .NombreProveedor = proveedor.nombreCompleto,
                '                                          .Serie = "NT",
                '                                          .NumDoc = numeroNota,
                '                                          .TipoDoc = "9907",
                '                                          .idItem = i.idItem,
                '                                          .descripcionItem = i.nombreItem,
                '                                          .tipoExistencia = i.tipoExistencia,
                '                                          .destino = i.destino,
                '                                          .unidad1 = i.unidad1,
                '                                          .monto1 = i.sumCantidad,
                '                                          .precioUnitario = 0,
                '                                          .precioUnitarioUS = 0,
                '                                          .importe = 0,
                '                                          .importeUS = 0,
                '                                          .montokardex = 0,
                '                                          .montoIsc = 0,
                '                                          .montoIgv = 0,
                '                                          .otrosTributos = 0,
                '                                          .montokardexUS = 0,
                '                                          .montoIscUS = 0,
                '                                          .montoIgvUS = 0,
                '                                          .otrosTributosUS = 0,
                '                                          .almacenRef = i.idAlmacenOrigen,
                '                                          .fechaEntrega = DateTime.Now,
                '                                          .estadoPago = "PN",
                '                                          .usuarioModificacion = doc.usuarioActualizacion,
                '                                          .fechaModificacion = DateTime.Now
                '                                          })
                '                    Next
                '                        doc.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE"
                '                        doc.documentocompra.documentocompradetalle = DetalleCompra
                '                        compraBL.GrabarNotaCompraDirecta(doc)
                '                    End If


                '#End Region


                Dim cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentoventaAbarrotes.IdNumeracion))
                objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
                DocumentoBL.Insert(objDocumento)
                objDocumento.documentoventaAbarrotes.numeroDoc = cval
                Me.InsertSingle(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    'If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                    '    i.secuencia = codSecuenciaDetalle
                    '    i.NumDoc = objDocumento.documentoventaAbarrotes.numeroDoc
                    '    inventario.InsertVentaPagada(i, objDocumento)

                    '    'actualizando cabecera total almacen
                    '    t = New totalesAlmacen
                    '    t.idEmpresa = i.IdEmpresa
                    '    t.idEstablecimiento = i.IdEstablecimiento
                    '    t.idAlmacen = i.idAlmacenOrigen
                    '    t.origenRecaudo = i.destino
                    '    t.idItem = i.idItem
                    '    t.cantidad = i.monto1 * -1
                    '    t.precioUnitarioCompra = i.precioUnitario * -1
                    '    t.importeSoles = i.salidaCostoMN * -1
                    '    t.importeDolares = i.salidaCostoME * -1
                    '    listaTortalesAlmacen = totalesBL.UpdateTotalesVentas(t)
                    'End If
                Next

                If objDocumento.TieneCotizacion = True Then
                    Dim cotizacion As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.IdDocumentoCotizacion).FirstOrDefault
                    cotizacion.idPadre = objDocumento.idDocumento
                End If

                If ((listaTortalesAlmacen).Count = 0) Then
                    HeliosData.SaveChanges()
                    ts.Complete()
                    objDocumento.idOrden = objDocumento.documentoventaAbarrotes.numeroDoc
                Else
                    Return Nothing
                End If
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function UpdateVentaPS(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen)) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        'Dim asientoBL As New AsientoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim listaTortalesAlmacen As New List(Of totalesAlmacen)
        Dim numeracionBL As New numeracionBoletasBL
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now

                Dim cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentoventaAbarrotes.IdNumeracion))
                objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
                DocumentoBL.Update(objDocumento)
                objDocumento.documentoventaAbarrotes.numeroDoc = cval
                Me.Update(objDocumento.documentoventaAbarrotes)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    ventaDetalleBL.UpdateVentaV2(i, "01")
                Next

                If objDocumento.TieneCotizacion = True Then
                    Dim cotizacion As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.IdDocumentoCotizacion).FirstOrDefault
                    cotizacion.idPadre = objDocumento.idDocumento
                End If

                If ((listaTortalesAlmacen).Count = 0) Then
                    HeliosData.SaveChanges()
                    ts.Complete()
                    objDocumento.idOrden = objDocumento.documentoventaAbarrotes.numeroDoc
                Else
                    Return Nothing
                End If
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Function SaveVentaPSPinturas(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        'Dim asientoBL As New AsientoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim listaTortalesAlmacen As New List(Of totalesAlmacen)
        Dim obj As New documentoconsumodirecto
        Try
            Using ts As New TransactionScope()

                objDocumento.fechaActualizacion = DateTime.Now
                DocumentoBL.Insert(objDocumento)
                Me.InsertSingle(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                    'For Each x In i.documentoconsumodirecto
                    '    obj = New documentoconsumodirecto
                    '    obj.idDocumento = objDocumento.idDocumento
                    '    obj.almacen = x.almacen
                    '    obj.idProductoPadre = codSecuenciaDetalle
                    '    obj.idMateriaPrima = x.idMateriaPrima
                    '    obj.descripcion = x.descripcion
                    '    obj.tipoexistencia = x.tipoexistencia
                    '    obj.unidad = x.unidad
                    '    obj.cant = x.cant
                    '    obj.costo = x.costo
                    '    HeliosData.documentoconsumodirecto.Add(obj)
                    'Next
                Next

                HeliosData.SaveChanges()
                ts.Complete()
                objDocumento.idOrden = objDocumento.documentoventaAbarrotes.numeroDoc

                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    'Public Function SaveVentaCobrada(objDocumento As documento) As Integer
    '    Dim DocumentoBL As New documentoBL
    '    Dim compraDetalleBL As New documentoventaAbarrotesDetBL
    '    Dim inventario As New InventarioMovimientoBL
    '    Dim cajaBL As New documentoCajaBL
    '    Dim asientoBL As New AsientoBL
    '    Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
    '    Dim totalesBL As New totalesAlmacenBL
    '    Dim t As New totalesAlmacen
    '    Dim Product As New totalesAlmacen
    '    Dim listaTortalesAlmacen As New List(Of totalesAlmacen)
    '    'Dim guiaBL As New documentoGuiaBL
    '    Try
    '        Using ts As New TransactionScope()

    '            objDocumento.fechaActualizacion = DateTime.Now
    '            DocumentoBL.Insert(objDocumento)
    '            Me.InsertSingle(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

    '            docCodigoCaja = cajaBL.InsertDocumentoCajaVenta(objDocumento.documentoventaAbarrotes)

    '            For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
    '                Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
    '                If i.tipoExistencia <> TipoRecurso.SERVICIO Then

    '                    'actualizando cabecera total almacen

    '                    't = New totalesAlmacen
    '                    't.idEmpresa = objDocumento.idEmpresa
    '                    't.idEstablecimiento = objDocumento.idCentroCosto
    '                    't.idAlmacen = i.idAlmacenOrigen
    '                    't.origenRecaudo = i.destino
    '                    't.idItem = i.idItem
    '                    't.cantidad = i.monto1 * -1
    '                    't.precioUnitarioCompra = i.precioUnitario * -1
    '                    't.importeSoles = i.salidaCostoMN * -1
    '                    't.importeDolares = i.salidaCostoME * -1


    '                    t = New totalesAlmacen
    '                    t.idEmpresa = i.IdEmpresa
    '                    t.idEstablecimiento = i.IdEstablecimiento
    '                    t.idAlmacen = i.idAlmacenOrigen
    '                    t.origenRecaudo = i.destino
    '                    t.idItem = i.idItem
    '                    t.cantidad = i.monto1 * -1
    '                    t.precioUnitarioCompra = i.precioUnitario * -1
    '                    t.importeSoles = i.salidaCostoMN * -1
    '                    t.importeDolares = i.salidaCostoME * -1

    '                    Product = totalesBL.ObtenerCanDisponibleProduct(t)

    '                    If i.monto1 > Product.cantidad Then
    '                        Throw New Exception("El producto: " & i.nombreItem & ", no tiene stock disponible!")
    '                    End If

    '                    i.secuencia = codSecuenciaDetalle
    '                    i.NumDoc = objDocumento.documentoventaAbarrotes.numeroDoc
    '                    inventario.InsertVentaPagada(i, objDocumento)

    '                    Dim objRecuperado = totalesBL.UpdateCostoVentaKardex(t)
    '                    i.salidaCostoMN = objRecuperado.precioVentaMN
    '                    i.salidaCostoME = objRecuperado.precioVentaUS

    '                End If

    '                cajaBL.InsertCajadetalleVenta(i, objDocumento.idDocumento, docCodigoCaja, codSecuenciaDetalle)
    '            Next

    '            'If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
    '            '    guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
    '            'End If

    '            If objDocumento.TieneCotizacion = True Then
    '                Dim cotizacion As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.IdDocumentoCotizacion).FirstOrDefault
    '                cotizacion.idPadre = objDocumento.idDocumento
    '            End If

    '            If ((listaTortalesAlmacen).Count = 0) Then
    '                asientoBL.SavebyGroupDoc(objDocumento)

    '                HeliosData.SaveChanges()
    '                ts.Complete()
    '                objDocumento.idOrden = objDocumento.documentoventaAbarrotes.numeroDoc
    '            Else
    '                Return Nothing
    '            End If
    '            Return objDocumento.idDocumento
    '        End Using
    '    Catch ex As Exception
    '        Throw ex
    '    End Try
    'End Function

    Public Function SaveVentaCobrada(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim cajaBL As New documentoCajaBL
        Dim asientoBL As New AsientoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim Product As New totalesAlmacen
        Dim listaTortalesAlmacen As New List(Of totalesAlmacen)
        'Dim guiaBL As New documentoGuiaBL
        Try
            Using ts As New TransactionScope()

                objDocumento.fechaActualizacion = DateTime.Now
                DocumentoBL.Insert(objDocumento)
                Me.InsertSingle(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                'docCodigoCaja = cajaBL.InsertDocumentoCajaVenta(objDocumento.documentoventaAbarrotes)

                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    If i.tipoExistencia <> TipoRecurso.SERVICIO Then

                        'actualizando cabecera total almacen

                        't = New totalesAlmacen
                        't.idEmpresa = objDocumento.idEmpresa
                        't.idEstablecimiento = objDocumento.idCentroCosto
                        't.idAlmacen = i.idAlmacenOrigen
                        't.origenRecaudo = i.destino
                        't.idItem = i.idItem
                        't.cantidad = i.monto1 * -1
                        't.precioUnitarioCompra = i.precioUnitario * -1
                        't.importeSoles = i.salidaCostoMN * -1
                        't.importeDolares = i.salidaCostoME * -1


                        t = New totalesAlmacen
                        t.idEmpresa = i.IdEmpresa
                        t.idEstablecimiento = i.IdEstablecimiento
                        t.idAlmacen = i.idAlmacenOrigen
                        t.origenRecaudo = i.destino
                        t.idItem = i.idItem
                        t.cantidad = i.monto1 * -1
                        t.precioUnitarioCompra = i.precioUnitario * -1
                        t.importeSoles = i.salidaCostoMN * -1
                        t.importeDolares = i.salidaCostoME * -1

                        Product = totalesBL.ObtenerCanDisponibleProduct(t)

                        If i.monto1 > Product.cantidad Then
                            Throw New Exception("El producto: " & i.nombreItem & ", no tiene stock disponible!")
                        End If

                        i.secuencia = codSecuenciaDetalle
                        i.NumDoc = objDocumento.documentoventaAbarrotes.numeroDoc
                        inventario.InsertVentaPagada(i, objDocumento)

                        Dim objRecuperado = totalesBL.UpdateCostoVentaKardex(t)
                        i.salidaCostoMN = objRecuperado.precioVentaMN
                        i.salidaCostoME = objRecuperado.precioVentaUS

                    End If

                    'cajaBL.InsertCajadetalleVenta(i, objDocumento.idDocumento, docCodigoCaja, codSecuenciaDetalle)
                Next

                'If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                '    guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                'End If
                If Not IsNothing(objDocumento.ListaCustomDocumento) Then
                    For Each i In objDocumento.ListaCustomDocumento
                        SaveCaja(i, objDocumento.idDocumento)
                    Next
                End If


                If objDocumento.TieneCotizacion = True Then
                    Dim cotizacion As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.IdDocumentoCotizacion).FirstOrDefault
                    cotizacion.idPadre = objDocumento.idDocumento
                End If

                If ((listaTortalesAlmacen).Count = 0) Then
                    asientoBL.SavebyGroupDoc(objDocumento)

                    HeliosData.SaveChanges()
                    ts.Complete()
                    objDocumento.idOrden = objDocumento.documentoventaAbarrotes.numeroDoc
                Else
                    Return Nothing
                End If
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Sub GrabarVentaMultiEmpresa(listadoDocVenta As List(Of documento))
        Using ts As New TransactionScope
            For Each i In listadoDocVenta
                SaveVentaCobrada(i)
            Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub


    Public Function GrabarCotizacion(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim numeracionBL As New numeracionBoletasBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim listaTortalesAlmacen As New List(Of totalesAlmacen)
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now
                Dim cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentoventaAbarrotes.IdNumeracion))
                objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
                DocumentoBL.Insert(objDocumento)
                objDocumento.documentoventaAbarrotes.numeroDoc = cval
                Me.InsertSingle(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GrabarVentaDocumentoGeneralSPK(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now



                DocumentoBL.Insert(objDocumento)
                Me.InsertSingle(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GrabarVentaDocumentoGeneral(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim docuemntoAnticipoBL As New documentoAnticipoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Try
            Using ts As New TransactionScope()
                Dim codigoAnticipo = objDocumento.documentoventaAbarrotes.idPadre
                GrabarVentaDocumentoGeneralSPK(objDocumento)

                Dim anticipoDoc = HeliosData.documentoAnticipo.Where(Function(o) o.idDocumento = codigoAnticipo).Single

                Dim docEstado = docuemntoAnticipoBL.ObtenerSaldoAnticipoV2(codigoAnticipo)
                If docEstado.Saldo <= 0 Then
                    anticipoDoc.estado = General.Anticipo.Estado.Compensado
                Else
                    If docEstado.MontoPagadoSoles > 0 Then
                        anticipoDoc.estado = General.Anticipo.Estado.NotaCreditoParcial
                    Else
                        anticipoDoc.estado = General.Anticipo.Estado.NotaCredito
                    End If
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function



    Public Function UpdateCotizacion(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim numeracionBL As New numeracionBoletasBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim listaTortalesAlmacen As New List(Of totalesAlmacen)
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now
                Dim cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentoventaAbarrotes.IdNumeracion))
                DocumentoBL.DeleteSingleVariable(objDocumento.idDocumento)
                objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
                DocumentoBL.Insert(objDocumento)
                objDocumento.documentoventaAbarrotes.numeroDoc = cval
                Me.InsertSingle(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function UpdatePedidoProforma(be As documento) As Integer
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Try
            Using ts As New TransactionScope()
                Dim docBase = HeliosData.documento.Where(Function(o) o.idDocumento = be.idDocumento).SingleOrDefault
                docBase.fechaProceso = be.fechaProceso
                docBase.moneda = be.moneda
                docBase.idEntidad = be.idEntidad
                docBase.entidad = be.entidad
                docBase.tipoEntidad = be.tipoEntidad
                docBase.nrodocEntidad = be.nrodocEntidad

                Dim documentoVenta = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).SingleOrDefault

                documentoVenta.fechaDoc = be.documentoventaAbarrotes.fechaDoc
                documentoVenta.nombrePedido = be.documentoventaAbarrotes.nombrePedido
                documentoVenta.idCliente = be.documentoventaAbarrotes.idCliente

                documentoVenta.bi01 = be.documentoventaAbarrotes.bi01
                documentoVenta.bi02 = be.documentoventaAbarrotes.bi02
                documentoVenta.isc01 = be.documentoventaAbarrotes.isc01
                documentoVenta.isc02 = be.documentoventaAbarrotes.isc02
                documentoVenta.igv01 = be.documentoventaAbarrotes.igv01
                documentoVenta.igv02 = be.documentoventaAbarrotes.igv02
                documentoVenta.otc01 = be.documentoventaAbarrotes.otc01
                documentoVenta.otc02 = be.documentoventaAbarrotes.otc02

                documentoVenta.bi01us = be.documentoventaAbarrotes.bi01us
                documentoVenta.bi02us = be.documentoventaAbarrotes.bi02us
                documentoVenta.isc01us = be.documentoventaAbarrotes.isc01us
                documentoVenta.isc02us = be.documentoventaAbarrotes.isc02us
                documentoVenta.igv01us = be.documentoventaAbarrotes.igv01us
                documentoVenta.igv02us = be.documentoventaAbarrotes.igv02us
                documentoVenta.otc01us = be.documentoventaAbarrotes.otc01us
                documentoVenta.otc02us = be.documentoventaAbarrotes.otc02us
                documentoVenta.ImporteNacional = be.documentoventaAbarrotes.ImporteNacional
                documentoVenta.ImporteExtranjero = be.documentoventaAbarrotes.ImporteExtranjero
                documentoVenta.importeCostoMN = 0
                documentoVenta.importeCostoME = 0
                documentoVenta.glosa = be.documentoventaAbarrotes.glosa

                Dim documentoVentaDetail = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = be.idDocumento).ToList

                HeliosData.documentoventaAbarrotesDet.RemoveRange(documentoVentaDetail)

                For Each i In be.documentoventaAbarrotes.documentoventaAbarrotesDet
                    ventaDetalleBL.InsertSingle(i, be.idDocumento)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return be.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetListarAllVentasxDia(intIdEstablec As Integer) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)


        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaDoc.Value.Day = CDate(DateTime.Now).Day _
                       And compra.fechaDoc.Value.Month = CDate(DateTime.Now).Month _
                       And compra.fechaDoc.Value.Year = CDate(DateTime.Now).Year _
                       And ListaTipo.Contains(compra.tipoVenta)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetListarVentasNormalPorDia(intIdEstablec As Integer) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaDoc.Value.Day = CDate(DateTime.Now).Day _
                       And compra.fechaDoc.Value.Month = CDate(DateTime.Now).Month _
                       And compra.fechaDoc.Value.Year = CDate(DateTime.Now).Year _
                       And ListaTipo.Contains(compra.tipoVenta)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetListarVentasNormalPorDiaCredito(intIdEstablec As Integer) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaDoc.Value.Day = CDate(DateTime.Now).Day _
                       And compra.fechaDoc.Value.Month = CDate(DateTime.Now).Month _
                       And compra.fechaDoc.Value.Year = CDate(DateTime.Now).Year _
                       And ListaTipo.Contains(compra.tipoVenta)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetVentasPorCriterio(be As documentoventaAbarrotes, criterio As String, valor As String) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        Dim tipodocCriterio As String = String.Empty
        Dim objRecurso As documentoventaAbarrotes

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)
        ListaTipo.Add(TIPO_VENTA.COTIZACION)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)


        Select Case criterio
            Case "NOTAS DE CREDITO Y DEBITO"


            Case "FACTURA"
                tipodocCriterio = "01"

            Case "BOLETA"
                tipodocCriterio = "03"
            Case "PROFORMA"
                tipodocCriterio = "9903"'"9901"

            Case "NOTA"
                tipodocCriterio = "9907"
            Case "CLIENTE"
            Case "IMPORTE"

        End Select


        Select Case criterio
            Case "FACTURA", "BOLETA", "PROFORMA", "NOTA"
                Dim GetVentas = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentoventaAbarrotes
                               On doc.idDocumento Equals compra.idDocumento
                                 Group Join entidad In HeliosData.entidad
                               On compra.idCliente Equals entidad.idEntidad
                               Into ords = Group
                                 From e In ords.DefaultIfEmpty
                                 Where doc.idCentroCosto = be.idEstablecimiento And
                               compra.fechaPeriodo = be.fechaPeriodo And
                                          ListaTipo.Contains(compra.tipoVenta) And
                                     compra.tipoDocumento = tipodocCriterio _
                               And compra.estadoCobro <> "ANU"
                                 Order By compra.fechaDoc Ascending).ToList


                For Each obj In GetVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next

            Case "CLIENTE"
                Dim GetVentas = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentoventaAbarrotes
                               On doc.idDocumento Equals compra.idDocumento
                                 Group Join entidad In HeliosData.entidad
                               On compra.idCliente Equals entidad.idEntidad
                               Into ords = Group
                                 From e In ords.DefaultIfEmpty
                                 Where doc.idCentroCosto = be.idEstablecimiento And
                               compra.fechaPeriodo = be.fechaPeriodo And
                                          ListaTipo.Contains(compra.tipoVenta) And
                                     compra.idCliente = valor _
                               And compra.estadoCobro <> "ANU"
                                 Order By compra.fechaDoc Ascending).ToList

                For Each obj In GetVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetListarAllVentasPeriodo(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro <> "ANU"
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next

        '.idEmpresa = Gempresas.IdEmpresaRuc,
        Dim consultaMembresia = entidadembresiaBL.GetRegistroMembresiasByPeriodo(New Entidadmembresia_Gym With {
                                                                                 .idEstablecimiento = intIdEstablec,
                                                                                 .periodo = strPeriodo})

        For Each i In consultaMembresia
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = i.idDocumento
            objRecurso.tipoOperacion = StatusTipoOperacion.VENTA
            objRecurso.fechaDoc = i.fechaRegistro
            objRecurso.tipoDocumento = i.tipodoc
            objRecurso.serie = i.serie
            objRecurso.serieVenta = i.serie
            objRecurso.numeroDoc = i.numero
            objRecurso.numeroVenta = i.numero
            objRecurso.numeroDocNormal = i.numero
            objRecurso.nombrePedido = "-"
            objRecurso.tipoDocEntidad = i.CustomEntidad.tipoDoc
            objRecurso.NroDocEntidad = i.CustomEntidad.nrodoc
            objRecurso.NombreEntidad = i.CustomEntidad.nombreCompleto
            objRecurso.TipoPersona = "Socio"
            objRecurso.ImporteNacional = i.importe
            objRecurso.ImporteExtranjero = 0
            objRecurso.tipoCambio = 1
            objRecurso.moneda = "NAC"
            objRecurso.estadoCobro = i.statusPago
            objRecurso.tipoVenta = TIPO_VENTA.VENTA_MEMBRESIAS_GIMANSIO
            objRecurso.notaCredito = 0
            objRecurso.usuarioActualizacion = "" ' i.usuarioActualizacion
            objRecurso.estadoEntrega = "E"
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    'Public Function GetVentasFiltroComprobante(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
    '    Dim entidadembresiaBL As New Entidadmembresia_GymBL
    '    Dim Lista As New List(Of documentoventaAbarrotes)
    '    Dim ListaTipo As New List(Of String)

    '    ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
    '    ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
    '    ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
    '    ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
    '    ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
    '    ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
    '    ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
    '    ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
    '    ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)

    '    Dim objRecurso As New documentoventaAbarrotes
    '    Dim consultaVentas = (From doc In HeliosData.documento
    '                          Join compra In HeliosData.documentoventaAbarrotes
    '                   On doc.idDocumento Equals compra.idDocumento
    '                          Group Join entidad In HeliosData.entidad
    '                   On compra.idCliente Equals entidad.idEntidad
    '                   Into ords = Group
    '                          From e In ords.DefaultIfEmpty
    '                          Where doc.idCentroCosto = be.idEstablecimiento And
    '                              compra.moneda = be.moneda And ListaTipo.Contains(compra.tipoVenta) And
    '                              compra.tipoDocumento = be.tipoDocumento And
    '                              compra.serieVenta = be.serieVenta And
    '                              compra.numeroVenta = be.numeroVenta And
    '                              compra.estadoCobro <> "ANU").ToList

    '    For Each obj In consultaVentas
    '        objRecurso = New documentoventaAbarrotes

    '        objRecurso.idDocumento = obj.compra.idDocumento
    '        objRecurso.tipoOperacion = obj.doc.tipoOperacion
    '        objRecurso.fechaDoc = obj.compra.fechaDoc
    '        objRecurso.tipoDocumento = obj.compra.tipoDocumento
    '        objRecurso.serie = obj.compra.serie
    '        objRecurso.serieVenta = obj.compra.serieVenta
    '        objRecurso.numeroDoc = obj.compra.numeroDoc
    '        objRecurso.numeroVenta = obj.compra.numeroVenta
    '        objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
    '        objRecurso.nombrePedido = obj.compra.nombrePedido
    '        If Not IsNothing(obj.e) Then
    '            objRecurso.tipoDocEntidad = obj.e.tipoDoc
    '            objRecurso.NroDocEntidad = obj.e.nrodoc
    '            objRecurso.NombreEntidad = obj.e.nombreCompleto
    '            objRecurso.TipoPersona = obj.e.tipoPersona
    '        Else
    '            objRecurso.tipoDocEntidad = String.Empty
    '            objRecurso.NroDocEntidad = String.Empty
    '            objRecurso.NombreEntidad = String.Empty
    '            objRecurso.TipoPersona = String.Empty
    '        End If
    '        Select Case obj.compra.tipoDocumento
    '            Case "07"
    '                objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
    '                objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
    '            Case "08"
    '                objRecurso.ImporteNacional = obj.compra.ImporteNacional
    '                objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
    '            Case Else
    '                objRecurso.ImporteNacional = obj.compra.ImporteNacional
    '                objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
    '        End Select

    '        objRecurso.tipoCambio = obj.compra.tipoCambio
    '        objRecurso.moneda = obj.compra.moneda
    '        objRecurso.estadoCobro = obj.compra.estadoCobro
    '        objRecurso.tipoVenta = obj.compra.tipoVenta
    '        objRecurso.notaCredito = obj.compra.notaCredito
    '        objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
    '        objRecurso.estadoEntrega = obj.compra.estadoEntrega
    '        objRecurso.idPadre = obj.compra.idPadre
    '        objRecurso.EnvioSunat = obj.compra.EnvioSunat
    '        Lista.Add(objRecurso)
    '    Next

    '    Return Lista
    'End Function

    Public Function GetVentasFiltroComprobante(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = be.idEstablecimiento And
                                  compra.moneda = be.moneda And ListaTipo.Contains(compra.tipoVenta) And
                                  compra.tipoDocumento = be.tipoDocumento And
                                  compra.serieVenta = be.serieVenta And
                                  compra.numeroVenta = be.numeroVenta And
                                  compra.estadoCobro <> "ANU").ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetVentasFiltroComprobanteCliente(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where
                                  doc.idCentroCosto = be.idEstablecimiento And
                                  ListaTipo.Contains(compra.tipoVenta) And
                                  compra.idCliente = be.idCliente And
                                  compra.estadoCobro <> "ANU").ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetVentasPorFecha(be As documentoventaAbarrotes, opcion As String) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        Dim objRecurso As documentoventaAbarrotes

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)


        Dim ultimas24 = be.fechaDoc.Value.Date
        Dim ultimas48 = be.fechaDoc.Value.AddHours(-48)
        Dim ultimas72 = be.fechaDoc.Value.AddHours(-72)

        Select Case opcion
            Case "24 horas"
                Dim GetVentas = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                 Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                 From e In ords.DefaultIfEmpty
                                 Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                     compra.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                     compra.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                     ListaTipo.Contains(compra.tipoVenta) And
                                     compra.estadoCobro <> "ANU"
                                 Order By
                                     compra.fechaDoc Ascending).ToList

                For Each obj In GetVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next

            Case "48 horas"
                'If fechaABuscar.CompareTo(fechaInicial) >= 0 AndAlso fechaABuscar.CompareTo(fechaFinal) <= 0 Then
                'End If

                'Dim query = From item In db.Table Where item.Date >= minusSixty AndAlso item.Date < minusThirty Select item

                Dim GetVentas = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                 Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                 From e In ords.DefaultIfEmpty
                                 Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc >= ultimas48 AndAlso
                                     compra.fechaDoc <= be.fechaDoc And
                                     ListaTipo.Contains(compra.tipoVenta) And
                                     compra.estadoCobro <> "ANU"
                                 Order By
                                     compra.fechaDoc Ascending).ToList


                For Each obj In GetVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next
            Case "72 horas"
                Dim GetVentas = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                 Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                 From e In ords.DefaultIfEmpty
                                 Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc >= ultimas72 AndAlso
                                     compra.fechaDoc <= be.fechaDoc And
                                     ListaTipo.Contains(compra.tipoVenta) And
                                     compra.estadoCobro <> "ANU"
                                 Order By
                                     compra.fechaDoc Ascending).ToList

                For Each obj In GetVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next
        End Select


        Return Lista
    End Function

    Public Function GetNotaVentasPorFecha(be As documentoventaAbarrotes, opcion As String) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        Dim objRecurso As documentoventaAbarrotes

        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)

        Dim ultimas24 = be.fechaDoc.Value.Date
        Dim ultimas48 = be.fechaDoc.Value.AddHours(-48)
        Dim ultimas72 = be.fechaDoc.Value.AddHours(-72)

        Select Case opcion
            Case "24 horas"
                Dim GetVentas = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                 Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                 From e In ords.DefaultIfEmpty
                                 Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                     compra.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                     compra.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                     ListaTipo.Contains(compra.tipoVenta) And
                                     compra.estadoCobro <> "ANU"
                                 Order By
                                     compra.fechaDoc Ascending).ToList

                For Each obj In GetVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next

            Case "48 horas"
                'If fechaABuscar.CompareTo(fechaInicial) >= 0 AndAlso fechaABuscar.CompareTo(fechaFinal) <= 0 Then
                'End If

                'Dim query = From item In db.Table Where item.Date >= minusSixty AndAlso item.Date < minusThirty Select item

                Dim GetVentas = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                 Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                 From e In ords.DefaultIfEmpty
                                 Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc >= ultimas48 AndAlso
                                     compra.fechaDoc <= be.fechaDoc And
                                     ListaTipo.Contains(compra.tipoVenta) And
                                     compra.estadoCobro <> "ANU"
                                 Order By
                                     compra.fechaDoc Ascending).ToList


                For Each obj In GetVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next
            Case "72 horas"
                Dim GetVentas = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                 Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                 From e In ords.DefaultIfEmpty
                                 Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc >= ultimas72 AndAlso
                                     compra.fechaDoc <= be.fechaDoc And
                                     ListaTipo.Contains(compra.tipoVenta) And
                                     compra.estadoCobro <> "ANU"
                                 Order By
                                     compra.fechaDoc Ascending).ToList

                For Each obj In GetVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.EnvioSunat = obj.compra.EnvioSunat
                    Lista.Add(objRecurso)
                Next
        End Select


        Return Lista
    End Function

    Public Function GetVentasPorFechaConteo(be As documentoventaAbarrotes, opcion As String) As List(Of String)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        Dim listaValores As New List(Of String)

        'ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_ELECTRONICA)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO_ELECTRONICA)


        Dim ultimas24 = be.fechaDoc.Value.Date
        Dim ultimas48 = be.fechaDoc.Value.AddHours(-48)
        Dim ultimas72 = be.fechaDoc.Value.AddHours(-72)

        Select Case opcion
            Case "24 horas"
                Dim GetVentas = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                 Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                 From e In ords.DefaultIfEmpty
                                 Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                     compra.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                     compra.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                     ListaTipo.Contains(compra.tipoVenta) And
                                     compra.estadoCobro <> "ANU").Count

                listaValores.Add(GetVentas)

                Dim GetVentaNotas = (From doc In HeliosData.documento
                                     Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                     Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                     From e In ords.DefaultIfEmpty
                                     Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                     compra.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                     compra.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                     compra.tipoVenta = TIPO_VENTA.NOTA_DE_VENTA And
                                     compra.estadoCobro <> "ANU").Count

                listaValores.Add(GetVentaNotas)

            Case "48 horas"

                Dim GetVentas = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                 Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                 From e In ords.DefaultIfEmpty
                                 Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc >= ultimas48 AndAlso
                                     compra.fechaDoc <= be.fechaDoc And
                                     ListaTipo.Contains(compra.tipoVenta) And
                                     compra.estadoCobro <> "ANU").Count

                listaValores.Add(GetVentas)

                Dim GetVentaNotas = (From doc In HeliosData.documento
                                     Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                     Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                     From e In ords.DefaultIfEmpty
                                     Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc >= ultimas48 AndAlso
                                     compra.fechaDoc <= be.fechaDoc And
                                     compra.tipoVenta = TIPO_VENTA.NOTA_DE_VENTA And
                                     compra.estadoCobro <> "ANU").Count

                listaValores.Add(GetVentaNotas)

            Case "72 horas"
                Dim GetVentas = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                 Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                 From e In ords.DefaultIfEmpty
                                 Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc >= ultimas72 AndAlso
                                     compra.fechaDoc <= be.fechaDoc And
                                     ListaTipo.Contains(compra.tipoVenta) And
                                     compra.estadoCobro <> "ANU").Count

                listaValores.Add(GetVentas)

                Dim GetVentaNotas = (From doc In HeliosData.documento
                                     Join compra In HeliosData.documentoventaAbarrotes
                                     On doc.idDocumento Equals compra.idDocumento
                                     Group Join entidad In HeliosData.entidad
                                     On compra.idCliente Equals entidad.idEntidad
                                     Into ords = Group
                                     From e In ords.DefaultIfEmpty
                                     Where
                                     doc.idCentroCosto = be.idEstablecimiento And
                                     compra.fechaDoc >= ultimas72 AndAlso
                                     compra.fechaDoc <= be.fechaDoc And
                                     compra.tipoVenta = TIPO_VENTA.NOTA_DE_VENTA And
                                     compra.estadoCobro <> "ANU").Count

                listaValores.Add(GetVentaNotas)

        End Select


        Return listaValores
    End Function

    Public Function GetListarNotaDeVentasPeriodo(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)
        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA_ANULADA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join venta In HeliosData.documentoventaAbarrotes
                                  On doc.idDocumento Equals venta.idDocumento
                              Group Join entidad In HeliosData.entidad
                                  On venta.idCliente Equals entidad.idEntidad
                                  Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = intIdEstablec And
                                  venta.fechaPeriodo = strPeriodo And ListaTipo.Contains(venta.tipoVenta)
                              Order By venta.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.venta.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.venta.fechaDoc
            objRecurso.tipoDocumento = obj.venta.tipoDocumento
            objRecurso.serie = obj.venta.serie
            objRecurso.serieVenta = obj.venta.serieVenta
            objRecurso.numeroDoc = obj.venta.numeroDoc
            objRecurso.numeroVenta = obj.venta.numeroVenta
            objRecurso.numeroDocNormal = obj.venta.numeroDocNormal
            objRecurso.nombrePedido = obj.venta.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            objRecurso.ImporteNacional = obj.venta.ImporteNacional
            objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
            objRecurso.tipoCambio = obj.venta.tipoCambio
            objRecurso.moneda = obj.venta.moneda
            objRecurso.estadoCobro = obj.venta.estadoCobro
            objRecurso.tipoVenta = obj.venta.tipoVenta
            objRecurso.notaCredito = obj.venta.notaCredito
            objRecurso.usuarioActualizacion = obj.venta.usuarioActualizacion
            objRecurso.estadoEntrega = obj.venta.estadoEntrega
            objRecurso.idPadre = obj.venta.idPadre
            objRecurso.estado = obj.venta.estado
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarNotaDeVentasDia(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)
        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA_ANULADA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join venta In HeliosData.documentoventaAbarrotes
                                  On doc.idDocumento Equals venta.idDocumento
                              Group Join entidad In HeliosData.entidad
                                  On venta.idCliente Equals entidad.idEntidad
                                  Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where
                                  doc.idCentroCosto = be.idEstablecimiento And
                                  venta.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                  venta.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                  venta.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                  ListaTipo.Contains(venta.tipoVenta)
                              Order By venta.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.venta.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.venta.fechaDoc
            objRecurso.tipoDocumento = obj.venta.tipoDocumento
            objRecurso.serie = obj.venta.serie
            objRecurso.serieVenta = obj.venta.serieVenta
            objRecurso.numeroDoc = obj.venta.numeroDoc
            objRecurso.numeroVenta = obj.venta.numeroVenta
            objRecurso.numeroDocNormal = obj.venta.numeroDocNormal
            objRecurso.nombrePedido = obj.venta.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            objRecurso.ImporteNacional = obj.venta.ImporteNacional
            objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
            objRecurso.tipoCambio = obj.venta.tipoCambio
            objRecurso.moneda = obj.venta.moneda
            objRecurso.estadoCobro = obj.venta.estadoCobro
            objRecurso.tipoVenta = obj.venta.tipoVenta
            objRecurso.notaCredito = obj.venta.notaCredito
            objRecurso.usuarioActualizacion = obj.venta.usuarioActualizacion
            objRecurso.estadoEntrega = obj.venta.estadoEntrega
            objRecurso.idPadre = obj.venta.idPadre
            objRecurso.estado = obj.venta.estado
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetVentasByFecha(intIdEstablec As Integer, fecha As Date) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       TruncateTime(compra.fechaDoc) = fecha.Date And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro <> "ANU"
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetVentasPeriodoByCliente(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.COTIZACION)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = be.idEstablecimiento And
                       compra.fechaPeriodo = be.fechaPeriodo And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.idCliente = be.idCliente
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetVentasPeriodoByClienteConteo(be As documentoventaAbarrotes) As Integer
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.COTIZACION)

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Where doc.idCentroCosto = be.idEstablecimiento And
                       compra.fechaPeriodo = be.fechaPeriodo And ListaTipo.Contains(compra.tipoVenta)).Count

        Return consulta
    End Function

    Public Function GetListarVentasNormalPorPeriodoCredito(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        ''ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function SaveVentaNormalServicioCredito(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim codVenta As Integer
        Dim x As New documentoGuia
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.nroDoc, objDocumento.idCentroCosto, objDocumento.idEmpresa, objDocumento.tipoDoc) = True Then
                    DocumentoBL.Insert(objDocumento)
                    codVenta = objDocumento.idDocumento
                    Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        'inventario.InsertVentaPagada(i, objDocumento)
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    'guiaBL.InsertGuia(objDocumento.documentoGuia, objDocumento.idDocumento)
                    objDocumento.documentoGuia.CodigoVenta = codVenta
                    guiaBL.InsertGuiaVenta(objDocumento.documentoGuia, objDocumento.idDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub UpdateVentaNormalServicioCredito(objDocumento As documento)
        Dim DocumentoBL As New documentoBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim documentoGuiBL As New documentoGuiaBL
        Dim AsientoBL As New AsientoBL
        Try
            Using ts As New TransactionScope()

                Dim consulta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault

                '  If consulta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO Then
                DocumentoBL.Update(objDocumento)
                objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                Me.Update(objDocumento.documentoventaAbarrotes)
                AsientoBL.DeleteGroup(objDocumento.idDocumento)
                'inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)

                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    compraDetalleBL.Update(i, objDocumento.tipoDoc)
                    'AQUI SE INSERTAN DATOS AL ALMACEN
                    'If i.Action <> BaseBE.EntityAction.DELETE Then
                    '    inventario.InsertVentaPagada(i, objDocumento)
                    'End If
                Next
                If Not IsNothing(objDocumento.documentoGuia) Then
                    documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        documentoGuiBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If
                End If
                AsientoBL.SavebyGroupDoc(objDocumento)

                HeliosData.SaveChanges()
                ts.Complete()
                'Else
                'Throw New Exception("El documento está cobrado!!")
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function GetVentasAnualesReporte(intIdEstablecimiento As Integer, anio As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim listaTipoSituacion As New List(Of String)
        Dim objRecurso As New documentoventaAbarrotes

        Dim TipoVenta As New List(Of String)
        TipoVenta.Add(TIPO_VENTA.VENTA_GENERAL)
        TipoVenta.Add(TIPO_VENTA.VENTA_AL_TICKET)
        TipoVenta.Add(TIPO_VENTA.VENTA_POS_DIRECTA)

        Dim consulta = (From doc In HeliosData.documento
                        Group Join compra In HeliosData.documentoventaAbarrotes
                      On doc.idDocumento Equals compra.idDocumento
                      Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where c.fechaDoc.Value.Year = anio _
                      And TipoVenta.Contains(c.tipoVenta) _
                      And c.idEstablecimiento = intIdEstablecimiento
                        Group c By
                      c.fechaPeriodo
                          Into g = Group
                        Select New With {.fecha = fechaPeriodo,
        g, .CountCompras = g.Count(Function(c) c.idEmpresa),
         .importeMN = g.Sum(Function(c) c.ImporteNacional),
         .importeME = g.Sum(Function(c) c.ImporteExtranjero)
                                       }
                                   )


        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes
            objRecurso.fechaPeriodo = obj.fecha
            'objRecurso.tipoVenta = obj.tipoVenta
            'objRecurso.CountVentas = obj.CountCompras
            objRecurso.ImporteNacional = obj.importeMN
            objRecurso.ImporteExtranjero = obj.importeME
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function ListadoVentaClienteArticulo(idclie As Integer, nameArt As String, fecINic As DateTime, fecHasta As DateTime) As List(Of documentoventaAbarrotesDet)
        Dim Lista As New List(Of documentoventaAbarrotesDet)
        Dim objRecurso As New documentoventaAbarrotesDet

        If idclie = -1 Then


            Dim consulta = (From i In HeliosData.documentoventaAbarrotesDet
                            Join d2 In HeliosData.documentoventaAbarrotes
                      On i.idDocumento Equals d2.idDocumento
                            Where d2.idEmpresa = Gempresas.IdEmpresaRuc _
                      And d2.idEstablecimiento = GEstableciento.IdEstablecimiento _
                      And i.nombreItem.StartsWith(nameArt) And d2.fechaDoc >= fecINic And d2.fechaDoc <= fecHasta).ToList

            For Each i In consulta
                objRecurso = New documentoventaAbarrotesDet
                objRecurso.tipoVenta = i.d2.tipoDocumento
                objRecurso.destino = i.d2.serie & "-" & i.d2.numeroDoc
                objRecurso.cuentaOrigen = i.d2.nombrePedido
                objRecurso.nombreItem = i.i.nombreItem
                objRecurso.monto1 = i.i.monto1
                objRecurso.precioUnitario = i.i.precioUnitario
                objRecurso.montokardex = i.i.montokardex
                objRecurso.importeMN = i.i.importeMN
                objRecurso.fechaVcto = i.d2.fechaDoc
                objRecurso.montoIgv = i.i.montoIgv
                Lista.Add(objRecurso)
            Next


        Else

            Dim consulta = (From i In HeliosData.documentoventaAbarrotesDet
                            Join d2 In HeliosData.documentoventaAbarrotes
                      On i.idDocumento Equals d2.idDocumento
                            Where d2.idCliente = idclie _
                      And d2.idEmpresa = Gempresas.IdEmpresaRuc _
                      And d2.idEstablecimiento = GEstableciento.IdEstablecimiento _
                      And i.nombreItem.StartsWith(nameArt) And d2.fechaDoc >= fecINic And d2.fechaDoc <= fecHasta).ToList

            For Each i In consulta
                objRecurso = New documentoventaAbarrotesDet
                objRecurso.tipoVenta = i.d2.tipoDocumento
                objRecurso.destino = i.d2.serie & "-" & i.d2.numeroDoc
                objRecurso.cuentaOrigen = i.d2.nombrePedido
                objRecurso.nombreItem = i.i.nombreItem
                objRecurso.monto1 = i.i.monto1
                objRecurso.precioUnitario = i.i.precioUnitario
                objRecurso.montokardex = i.i.montokardex
                objRecurso.importeMN = i.i.importeMN
                objRecurso.fechaVcto = i.d2.fechaDoc
                objRecurso.montoIgv = i.i.montoIgv
                Lista.Add(objRecurso)
            Next

        End If
        Return Lista


    End Function

    Public Function ListadoVentaClienteOrAnticulo(strIdEmpresa As String, intEstablec As Integer, idclie As Integer, nameArt As String, fecINic As DateTime, fecHasta As DateTime, tipo As String) As List(Of documentoventaAbarrotesDet)
        Dim Lista As New List(Of documentoventaAbarrotesDet)
        Dim objRecurso As New documentoventaAbarrotesDet

        Dim listaVenta As New List(Of String)
        listaVenta.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        listaVenta.Add(TIPO_VENTA.NOTA_DE_VENTA)
        listaVenta.Add(TIPO_VENTA.VENTA_AL_TICKET)

        Select Case tipo
            Case "CL"
                If idclie = -1 Then

                    Dim consulta = (From venta In HeliosData.documentoventaAbarrotesDet
                                    Join v In HeliosData.documentoventaAbarrotes
                                           On venta.idDocumento Equals v.idDocumento
                                    Join e In HeliosData.entidad
                                           On v.idCliente Equals e.idEntidad
                                    Where v.idEmpresa = strIdEmpresa And listaVenta.Contains(v.tipoVenta) _
                                           And v.idEstablecimiento = intEstablec _
                                            And v.fechaDoc >= fecINic And v.fechaDoc <= fecHasta _
                                           And e.tipoEntidad = "CL").ToList

                    For Each i In consulta
                        objRecurso = New documentoventaAbarrotesDet
                        objRecurso.tipoVenta = i.v.tipoDocumento
                        objRecurso.destino = i.v.serieVenta & "-" & i.v.numeroVenta
                        objRecurso.cuentaOrigen = i.v.nombrePedido
                        objRecurso.nombreItem = i.venta.nombreItem
                        objRecurso.monto1 = i.venta.monto1
                        objRecurso.precioUnitario = i.venta.precioUnitario
                        objRecurso.montokardex = i.venta.montokardex
                        objRecurso.importeMN = i.venta.importeMN
                        objRecurso.fechaVcto = i.v.fechaDoc
                        objRecurso.montoIgv = i.venta.montoIgv
                        Lista.Add(objRecurso)
                    Next

                Else

                    Dim consulta = (From i In HeliosData.documentoventaAbarrotesDet
                                    Join d2 In HeliosData.documentoventaAbarrotes
                                        On i.idDocumento Equals d2.idDocumento
                                    Join e In HeliosData.entidad
                                        On d2.idCliente Equals e.idEntidad
                                    Where d2.idEmpresa = strIdEmpresa And listaVenta.Contains(d2.tipoVenta) _
                                            And d2.idCliente = idclie _
                                        And d2.idEstablecimiento = intEstablec _
                                         And d2.fechaDoc >= fecINic And d2.fechaDoc <= fecHasta
                                       ).ToList

                    For Each i In consulta
                        objRecurso = New documentoventaAbarrotesDet
                        objRecurso.tipoVenta = i.d2.tipoDocumento
                        objRecurso.destino = i.d2.serie & "-" & i.d2.numeroDoc
                        objRecurso.cuentaOrigen = i.d2.nombrePedido
                        objRecurso.nombreItem = i.i.nombreItem
                        objRecurso.monto1 = i.i.monto1
                        objRecurso.precioUnitario = i.i.precioUnitario
                        objRecurso.montokardex = i.i.montokardex
                        objRecurso.importeMN = i.i.importeMN
                        objRecurso.fechaVcto = i.d2.fechaDoc
                        objRecurso.montoIgv = i.i.montoIgv
                        Lista.Add(objRecurso)
                    Next

                End If
            Case "ART"

                'If idclie = -1 Then

                Dim consulta = (From i In HeliosData.documentoventaAbarrotesDet
                                Join d2 In HeliosData.documentoventaAbarrotes
                                       On i.idDocumento Equals d2.idDocumento
                                Join e In HeliosData.entidad
                                       On d2.idCliente Equals e.idEntidad
                                Where d2.idEmpresa = strIdEmpresa And listaVenta.Contains(d2.tipoVenta) _
                                       And d2.idEstablecimiento = intEstablec _
                                        And d2.fechaDoc >= fecINic And d2.fechaDoc <= fecHasta _
                                        And i.nombreItem.StartsWith(nameArt)).ToList

                For Each i In consulta
                    objRecurso = New documentoventaAbarrotesDet
                    objRecurso.tipoVenta = i.d2.tipoDocumento
                    objRecurso.destino = i.d2.serieVenta & "-" & i.d2.numeroVenta
                    objRecurso.cuentaOrigen = i.d2.nombrePedido
                    objRecurso.nombreItem = i.i.nombreItem
                    objRecurso.monto1 = i.i.monto1
                    objRecurso.precioUnitario = i.i.precioUnitario
                    objRecurso.montokardex = i.i.montokardex
                    objRecurso.importeMN = i.i.importeMN
                    objRecurso.fechaVcto = i.d2.fechaDoc
                    objRecurso.montoIgv = i.i.montoIgv
                    Lista.Add(objRecurso)
                Next

            Case "CLART"
                Dim consulta = (From i In HeliosData.documentoventaAbarrotesDet
                                Join d2 In HeliosData.documentoventaAbarrotes
                                    On i.idDocumento Equals d2.idDocumento
                                Join e In HeliosData.entidad
                                    On d2.idCliente Equals e.idEntidad
                                Where d2.idEmpresa = strIdEmpresa And listaVenta.Contains(d2.tipoVenta) _
                                    And d2.idEstablecimiento = intEstablec _
                                     And d2.fechaDoc >= fecINic And d2.fechaDoc <= fecHasta _
                                     And i.nombreItem.StartsWith(nameArt) And e.tipoEntidad = "CL" _
                                      And d2.idCliente = idclie).ToList

                For Each i In consulta
                    objRecurso = New documentoventaAbarrotesDet
                    objRecurso.tipoVenta = i.d2.tipoDocumento
                    objRecurso.destino = i.d2.serie & "-" & i.d2.numeroDoc
                    objRecurso.cuentaOrigen = i.d2.nombrePedido
                    objRecurso.nombreItem = i.i.nombreItem
                    objRecurso.monto1 = i.i.monto1
                    objRecurso.precioUnitario = i.i.precioUnitario
                    objRecurso.montokardex = i.i.montokardex
                    objRecurso.importeMN = i.i.importeMN
                    objRecurso.fechaVcto = i.d2.fechaDoc
                    objRecurso.montoIgv = i.i.montoIgv
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista


    End Function


    Public Function LidtadoNotasXCliente(fecINic As DateTime, fecHasta As DateTime, idProv As Integer) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim objRecurso As New documentoventaAbarrotes

        If idProv = -1 Then
            Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                            Join d2 In HeliosData.documentoventaAbarrotes
                      On i.idPadre Equals d2.idDocumento
                            Join e In HeliosData.entidad
                      On d2.idCliente Equals e.idEntidad
                            Where i.idEmpresa = Gempresas.IdEmpresaRuc _
                      And i.idEstablecimiento = GEstableciento.IdEstablecimiento _
                      And i.tipoDocumento = "07" And i.fechaDoc >= fecINic And i.fechaDoc <= fecHasta _
                      And e.tipoEntidad = "CL").ToList

            For Each i In consulta
                objRecurso = New documentoventaAbarrotes
                objRecurso.serieVenta = i.i.serie & "-" & i.i.numeroDoc
                objRecurso.fechaDoc = i.i.fechaDoc
                Select Case i.i.tipoOperacion
                    Case "9913"
                        objRecurso.tipoOperacion = "NC-DISMINUIR CANTIDAD"
                    Case "9914"
                        objRecurso.tipoOperacion = "NC-DISMINUIR IMPORTE"
                    Case "9915"
                        objRecurso.tipoOperacion = "NC-DISMINUIR CANTIDAD E IMPORTE"
                    Case "9916"
                        objRecurso.tipoOperacion = "NC-DEVOLUCION DE EXISTENCIAS"
                    Case "9917"
                        objRecurso.tipoOperacion = "BONIFICACIONES RECIBIDAS (OPC. Beneficios)"
                    Case "9918"
                        objRecurso.tipoOperacion = "BONIFICACIONES RECIBIDAS (OPC. Reduc. costos)"
                End Select
                objRecurso.nombrePedido = i.e.nombreCompleto
                objRecurso.tipoDocumento = i.d2.tipoDocumento
                objRecurso.numeroDocNormal = i.d2.serie & "-" & i.d2.numeroDoc
                objRecurso.ImporteNacional = i.i.ImporteNacional
                objRecurso.ImporteExtranjero = i.i.ImporteExtranjero
                Lista.Add(objRecurso)
            Next


        Else
            Dim consulta = (From i In HeliosData.documentoventaAbarrotes
                            Join d2 In HeliosData.documentoventaAbarrotes
                      On i.idPadre Equals d2.idDocumento
                            Join e In HeliosData.entidad
                      On d2.idCliente Equals e.idEntidad
                            Where i.idEmpresa = Gempresas.IdEmpresaRuc _
                      And i.tipoDocumento = "07" And i.fechaDoc >= fecINic And i.fechaDoc <= fecHasta _
                      And i.idCliente = idProv).ToList


            For Each i In consulta
                objRecurso = New documentoventaAbarrotes
                objRecurso.serieVenta = i.i.serie & "-" & i.i.numeroDoc
                objRecurso.fechaDoc = i.i.fechaDoc
                Select Case i.i.tipoOperacion
                    Case "9913"
                        objRecurso.tipoOperacion = "NC-DISMINUIR CANTIDAD"
                    Case "9914"
                        objRecurso.tipoOperacion = "NC-DISMINUIR IMPORTE"
                    Case "9915"
                        objRecurso.tipoOperacion = "NC-DISMINUIR CANTIDAD E IMPORTE"
                    Case "9916"
                        objRecurso.tipoOperacion = "NC-DEVOLUCION DE EXISTENCIAS"
                    Case "9917"
                        objRecurso.tipoOperacion = "BONIFICACIONES RECIBIDAS (OPC. Beneficios)"
                    Case "9918"
                        objRecurso.tipoOperacion = "BONIFICACIONES RECIBIDAS (OPC. Reduc. costos)"
                End Select
                objRecurso.nombrePedido = i.e.nombreCompleto
                objRecurso.tipoDocumento = i.d2.tipoDocumento
                objRecurso.numeroDocNormal = i.d2.serie & "-" & i.d2.numeroDoc
                objRecurso.ImporteNacional = i.i.ImporteNacional
                objRecurso.ImporteExtranjero = i.i.ImporteExtranjero
                Lista.Add(objRecurso)
            Next
        End If

        Return Lista
    End Function

    Public Function GetListarVentasPorAnio(intIdEstablecimiento As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        Dim objRecurso As New documentoventaAbarrotes


        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        'ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim consulta = (From doc In HeliosData.documento
                        Group Join compra In HeliosData.documentoventaAbarrotes
                      On doc.idDocumento Equals compra.idDocumento
                      Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where c.fechaPeriodo.Contains(strPeriodo) _
                      And c.idEstablecimiento = intIdEstablecimiento _
                      And ListaTipo.Contains(c.tipoVenta)
                        Group c By
                      c.fechaPeriodo
                          Into g = Group
                        Select New With {.fecha = fechaPeriodo,
                                          g, .CountCompras = g.Count(Function(c) c.idEmpresa),
                                           .importeMN = g.Sum(Function(c) c.ImporteNacional),
                                           .importeME = g.Sum(Function(c) c.ImporteExtranjero)
                                       }
                                   ).ToList


        Dim consultanotaCredito = (From doc In HeliosData.documento
                                   Group Join compra In HeliosData.documentoventaAbarrotes
                      On doc.idDocumento Equals compra.idDocumento
                      Into ords = Group
                                   From c In ords.DefaultIfEmpty
                                   Where c.fechaPeriodo.Contains(strPeriodo) _
                      And c.idEstablecimiento = intIdEstablecimiento _
                      And c.tipoVenta = TIPO_COMPRA.NOTA_CREDITO
                                   Group c By
                      c.fechaPeriodo
                          Into g = Group
                                   Select New With {.fecha = fechaPeriodo,
                                          g, .CountCompras = g.Count(Function(c) c.idEmpresa),
                                           .importeMN = g.Sum(Function(c) c.ImporteNacional * -1),
                                           .importeME = g.Sum(Function(c) c.ImporteExtranjero * -1)
                                       }
                                   ).ToList

        Dim consultaFinal = consulta.Concat(consultanotaCredito).ToList

        Dim consultaResumen = consultaFinal.GroupBy(Function(x) x.fecha, Function(x) x.importeMN,
                                                    Function(periodo, monto) New With {.key = periodo, .sumventa = monto.Sum()}).ToList

        For Each obj In consultaResumen
            objRecurso = New documentoventaAbarrotes
            objRecurso.tipoVenta = "VT"
            objRecurso.fechaPeriodo = obj.key
            objRecurso.CountVentas = 0 'obj.CountCompras
            objRecurso.ImporteNacional = obj.sumventa.GetValueOrDefault ' obj.importeMN.GetValueOrDefault
            objRecurso.ImporteExtranjero = 0 'obj.importeME.GetValueOrDefault
            'objRecurso.fechaPeriodo = obj.fecha
            'objRecurso.CountVentas = obj.CountCompras
            'objRecurso.ImporteNacional = obj.importeMN
            'objRecurso.ImporteExtranjero = obj.importeME
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarVentasPorAnio2(empresa As String, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        Dim objRecurso As New documentoventaAbarrotes


        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        'ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim consulta = (From doc In HeliosData.documento
                        Group Join compra In HeliosData.documentoventaAbarrotes
                      On doc.idDocumento Equals compra.idDocumento
                      Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where c.fechaPeriodo.Contains(strPeriodo) _
                      And c.idEmpresa = empresa _
                      And ListaTipo.Contains(c.tipoVenta)
                        Group c By
                      c.fechaPeriodo
                          Into g = Group
                        Select New With {.fecha = fechaPeriodo,
                                          g, .CountCompras = g.Count(Function(c) c.idEmpresa),
                                           .importeMN = g.Sum(Function(c) c.ImporteNacional),
                                           .importeME = g.Sum(Function(c) c.ImporteExtranjero)
                                       }
                                   ).ToList


        Dim consultanotaCredito = (From doc In HeliosData.documento
                                   Group Join compra In HeliosData.documentoventaAbarrotes
                      On doc.idDocumento Equals compra.idDocumento
                      Into ords = Group
                                   From c In ords.DefaultIfEmpty
                                   Where c.fechaPeriodo.Contains(strPeriodo) _
                      And c.idEmpresa = empresa _
                      And c.tipoVenta = TIPO_COMPRA.NOTA_CREDITO
                                   Group c By
                      c.fechaPeriodo
                          Into g = Group
                                   Select New With {.fecha = fechaPeriodo,
                                          g, .CountCompras = g.Count(Function(c) c.idEmpresa),
                                           .importeMN = g.Sum(Function(c) c.ImporteNacional * -1),
                                           .importeME = g.Sum(Function(c) c.ImporteExtranjero * -1)
                                       }
                                   ).ToList

        Dim consultaFinal = consulta.Concat(consultanotaCredito).ToList

        Dim consultaResumen = consultaFinal.GroupBy(Function(x) x.fecha, Function(x) x.importeMN,
                                                    Function(periodo, monto) New With {.key = periodo, .sumventa = monto.Sum()}).ToList

        For Each obj In consultaResumen
            objRecurso = New documentoventaAbarrotes
            objRecurso.tipoVenta = "VT"
            objRecurso.fechaPeriodo = obj.key
            objRecurso.CountVentas = 0 'obj.CountCompras
            objRecurso.ImporteNacional = obj.sumventa.GetValueOrDefault ' obj.importeMN.GetValueOrDefault
            objRecurso.ImporteExtranjero = 0 'obj.importeME.GetValueOrDefault
            'objRecurso.fechaPeriodo = obj.fecha
            'objRecurso.CountVentas = obj.CountCompras
            'objRecurso.ImporteNacional = obj.importeMN
            'objRecurso.ImporteExtranjero = obj.importeME
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetVentasAnuales(intIdEstablecimiento As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentoventaAbarrotes


        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_VENTA.VENTA_AL_TICKET)
        listaTipoCompra.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)
        listaTipoCompra.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        listaTipoCompra.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)

        Dim consulta = (From doc In HeliosData.documento
                        Group Join compra In HeliosData.documentoventaAbarrotes
                      On doc.idDocumento Equals compra.idDocumento
                      Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where c.fechaPeriodo.Contains(strPeriodo) _
                      And c.idEstablecimiento = intIdEstablecimiento _
                      And listaTipoCompra.Contains(c.tipoVenta)
                        Group c By
                      c.fechaPeriodo, c.tipoVenta
                          Into g = Group
                        Select New With {.fecha = fechaPeriodo,
                                           .tipoVenta = tipoVenta,
                                          g, .CountCompras = g.Count(Function(c) c.idEmpresa),
                                           .importeMN = g.Sum(Function(c) c.ImporteNacional),
                                           .importeME = g.Sum(Function(c) c.ImporteExtranjero)
                                       }
                                   )


        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes
            objRecurso.fechaPeriodo = obj.fecha
            objRecurso.tipoVenta = obj.tipoVenta
            objRecurso.CountVentas = obj.CountCompras
            objRecurso.ImporteNacional = obj.importeMN
            objRecurso.ImporteExtranjero = obj.importeME
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

#Region "ANTICIPO"
    Private Function SaveCajaCabeceraSL(nCaja As documento, intIdCompra As Integer) As Integer
        Dim DocumentoBL As New documentoBL
        Dim documentoCajaBL As New documentoCajaBL
        DocumentoBL.Insert(nCaja)
        nCaja.documentoCaja.numeroDoc = nCaja.nroDoc
        documentoCajaBL.Insert(nCaja.documentoCaja, nCaja.idDocumento)
        Return nCaja.documentoCaja.idDocumento
    End Function

    Private Function SaveCajaCabeceraAnticipoSL(nCaja As documento, intIdCompra As Integer) As Integer
        Dim DocumentoBL As New documentoBL
        Dim documentoCajaBL As New documentoAnticipoBL
        DocumentoBL.Insert(nCaja)
        documentoCajaBL.InsertSingleAnticipo(nCaja.documentoAnticipo, nCaja.idDocumento)
        Return nCaja.documentoAnticipo.idDocumento
    End Function

    Private Sub SaveCajaDetalleSL(nCaja As documentoCajaDetalle, idDocumento As Integer, intIdCompra As Integer)
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        documentoCajaDetalleBL.InsertCajaDetalleSL(nCaja, idDocumento, intIdCompra)
    End Sub

    Private Sub SaveAnticipoDetalleSL(nCaja As documentoCajaDetalle, idDocumento As Integer, intIdCompra As Integer)
        Dim documentoCajaDetalleBL As New documentoAnticipoDetalleBL
        documentoCajaDetalleBL.InsertSingleAnticipoXVenta(nCaja, idDocumento, intIdCompra)
    End Sub
#End Region

    Public Sub ConfirmarVentaTicketSL(objDocumento As documento, objDocumentoCaja As documento,
                                   objTotalesAlmacen As List(Of totalesAlmacen),
                                   cajaUsuario As cajaUsuario, ndocAnticipoDetalle As documentoAnticipoDetalle,
                                    cajaUsuarioAporte As documento, objDocCajaDetalle As List(Of documentoCajaDetalle))

        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim anticipoDetalleBL As New documentoAnticipoDetalleBL
        Dim asientoBL As New AsientoBL
        Dim idDocReferencia As Integer
        Dim idDocAnticipoRef As Integer

        Try
            Using ts As New TransactionScope()

                Dim consulta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault

                consulta.fechaActualizacion = DateTime.Now
                If consulta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO Then
                    objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                    'cajaUsuarioBL.ActualizarMontoCajaUsuario(cajaUsuario)
                    Me.ConfirmarTicket(objDocumento.documentoventaAbarrotes)
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.UpdateVentaTicket(i)
                        '   inventario.InsertVentaPagada(i, objDocumento)
                    Next

                    '************************** MANIPULACIONDE CAJA ****************************
                    If (objDocumento.tipoConfirmacion = "CAV") Then
                        idDocReferencia = SaveCajaCabeceraSL(objDocumentoCaja, objDocumento.documentoventaAbarrotes.idDocumento)
                        'idDocAnticipoRef = SaveCajaCabeceraAnticipoSL(cajaUsuarioAporte, objDocumento.documentoventaAbarrotes.idDocumento)
                        For Each ITEM In objDocCajaDetalle
                            If (ITEM.tipoEstadoCompra = "ANTICIPO") Then
                                SaveAnticipoDetalleSL(ITEM, idDocAnticipoRef, objDocumento.documentoventaAbarrotes.idDocumento)
                            ElseIf (ITEM.tipoEstadoCompra = "VENTA") Then
                                SaveCajaDetalleSL(ITEM, idDocReferencia, objDocumento.documentoventaAbarrotes.idDocumento)
                            End If
                        Next
                    ElseIf (objDocumento.tipoConfirmacion = "SA") Then
                        idDocReferencia = SaveCajaCabeceraSL(objDocumentoCaja, objDocumento.idDocumento)
                        For Each ITEM In objDocCajaDetalle
                            SaveCajaDetalleSL(ITEM, idDocReferencia, objDocumento.documentoventaAbarrotes.idDocumento)
                        Next
                    ElseIf (objDocumento.tipoConfirmacion = "CA") Then
                        idDocReferencia = SaveCajaCabeceraAnticipoSL(cajaUsuarioAporte, objDocumento.documentoventaAbarrotes.idDocumento)
                        For Each ITEM In objDocCajaDetalle
                            SaveAnticipoDetalleSL(ITEM, idDocReferencia, objDocumento.documentoventaAbarrotes.idDocumento)
                        Next
                    End If
                    '***************************************************************************

                    'asientoBL.SavebyGroupDoc(objDocumento)
                    objDocumentoCaja.nroDoc = objDocumento.documentoventaAbarrotes.serieVenta & "-" & objDocumento.documentoventaAbarrotes.numeroVenta

                    HeliosData.SaveChanges()
                    ts.Complete()
                ElseIf consulta.estadoCobro = TIPO_VENTA.PAGO.COBRADO Then
                    Throw New Exception("La venta ya fue cobrada por otro usuario.!!")
                End If

            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function GetSumaCuentasXCobrar(intIdEstable As Integer, strPeriodo As String) As documentoventaAbarrotes
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentoventaAbarrotes

        listaTipoCompra.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        listaTipoCompra.Add(TIPO_VENTA.VENTA_GENERAL)
        ' listaTipoCompra.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        '   listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        Dim s As New DateTime(AnioGeneral, 1, 1)
        Dim addDay As DateTime = s.AddDays(CInt(30))

        Dim consulta30 = Aggregate compraDet In HeliosData.documentoventaAbarrotesDet
                   Group Join detalleCaja In HeliosData.documentoCajaDetalle
                   On compraDet.secuencia Equals detalleCaja.documentoAfectadodetalle
                   Into ords = Group
                   From cdt In ords.DefaultIfEmpty
                   Join compra In HeliosData.documentoventaAbarrotes On
                   compraDet.idDocumento Equals compra.idDocumento
                   Where compra.idEstablecimiento = intIdEstable _
                    And compra.fechaDoc >= s _
                   And compra.fechaDoc <= addDay _
                   And compraDet.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO AndAlso compra.tipoVenta <> "EXD"
                   Into DeudaMN = Sum(compraDet.importeMN),
                 DeudaME = Sum(compraDet.importeME),
                 PagoMN = Sum(cdt.montoSoles),
                 PagoME = Sum(cdt.montoUsd)



        '--------------------------------- 60 ------------------------------------------
        addDay = addDay.AddDays(1)
        Dim s60 As New DateTime(AnioGeneral, addDay.Date.Month, addDay.Date.Day)
        Dim addDay60 As DateTime = s60.AddDays(CInt(30))
        Dim consulta60 = Aggregate compraDet In HeliosData.documentoventaAbarrotesDet
                   Group Join detalleCaja In HeliosData.documentoCajaDetalle
                   On compraDet.secuencia Equals detalleCaja.documentoAfectadodetalle
                   Into ords = Group
                   From cdt In ords.DefaultIfEmpty
                   Join compra In HeliosData.documentoventaAbarrotes On
                   compraDet.idDocumento Equals compra.idDocumento
                   Where compra.idEstablecimiento = intIdEstable _
                        And compra.fechaDoc >= s60 _
                        And compra.fechaDoc <= addDay60 _
                        And compraDet.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO AndAlso compra.tipoVenta <> "EXD"
                   Into DeudaMN = Sum(compraDet.importeMN),
                 DeudaME = Sum(compraDet.importeME),
                 PagoMN = Sum(cdt.montoSoles),
                 PagoME = Sum(cdt.montoUsd)


        '****************************************** 90***********************************************
        addDay60 = addDay60.AddDays(1)
        Dim s90 As New DateTime(AnioGeneral, addDay60.Date.Month, addDay60.Date.Day)
        '  Dim dias90 = DateDiff(DateInterval.Day, s, DateTime.Now.Date)
        Dim addDay90 As DateTime = s90.AddDays(CInt(30))
        Dim consulta90 = Aggregate compraDet In HeliosData.documentoventaAbarrotesDet
                   Group Join detalleCaja In HeliosData.documentoCajaDetalle
                   On compraDet.secuencia Equals detalleCaja.documentoAfectadodetalle
                   Into ords = Group
                   From cdt In ords.DefaultIfEmpty
                   Join compra In HeliosData.documentoventaAbarrotes On
                   compraDet.idDocumento Equals compra.idDocumento
                   Where compra.idEstablecimiento = intIdEstable _
                     And compra.fechaDoc >= s90 _
                     And compra.fechaDoc <= addDay90 _
                     And compraDet.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO AndAlso compra.tipoVenta <> "EXD"
                   Into DeudaMN = Sum(compraDet.importeMN),
                 DeudaME = Sum(compraDet.importeME),
                 PagoMN = Sum(cdt.montoSoles),
                 PagoME = Sum(cdt.montoUsd)


        '****************************************** 90 A MAS ++ ***********************************************
        addDay90 = addDay90.AddDays(1)
        Dim s90mas As New DateTime(AnioGeneral, addDay90.Date.Month, addDay90.Date.Day)
        Dim dias90mas = DateDiff(DateInterval.Day, s90mas, DateTime.Now.Date)
        Dim addDay90mas As DateTime = s90mas.AddDays(CInt(dias90mas))
        Dim consulta90mas = Aggregate compraDet In HeliosData.documentoventaAbarrotesDet
                   Group Join detalleCaja In HeliosData.documentoCajaDetalle
                   On compraDet.secuencia Equals detalleCaja.documentoAfectadodetalle
                   Into ords = Group
                   From cdt In ords.DefaultIfEmpty
                   Join compra In HeliosData.documentoventaAbarrotes On
                   compraDet.idDocumento Equals compra.idDocumento
                   Where compra.idEstablecimiento = intIdEstable _
                        And compra.fechaDoc >= s90mas _
                        And compra.fechaDoc <= addDay90mas _
                         And compraDet.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO AndAlso compra.tipoVenta <> "EXD"
                   Into DeudaMN = Sum(compraDet.importeMN),
                 DeudaME = Sum(compraDet.importeME),
                 PagoMN = Sum(cdt.montoSoles),
                 PagoME = Sum(cdt.montoUsd)

        Dim total30MN As Decimal = 0
        Dim total30ME As Decimal = 0

        Dim total60MN As Decimal = 0
        Dim total60ME As Decimal = 0

        Dim total90MN As Decimal = 0
        Dim total90ME As Decimal = 0

        Dim total90MASMN As Decimal = 0
        Dim total90MASME As Decimal = 0


        total30MN = consulta30.DeudaMN.GetValueOrDefault - consulta30.PagoMN.GetValueOrDefault
        total30ME = consulta30.DeudaME.GetValueOrDefault - consulta30.PagoME.GetValueOrDefault

        total60MN = consulta60.DeudaMN.GetValueOrDefault - consulta60.PagoMN.GetValueOrDefault
        total60ME = consulta60.DeudaME.GetValueOrDefault - consulta60.PagoME.GetValueOrDefault

        total90MN = consulta90.DeudaMN.GetValueOrDefault - consulta90.PagoMN.GetValueOrDefault
        total90ME = consulta90.DeudaME.GetValueOrDefault - consulta90.PagoME.GetValueOrDefault

        total90MASMN = consulta90mas.DeudaMN.GetValueOrDefault - consulta90mas.PagoMN.GetValueOrDefault
        total90MASME = consulta90mas.DeudaME.GetValueOrDefault - consulta90mas.PagoME.GetValueOrDefault

        '**********************************************************************************************

        'objRecurso = New documentocompra With {.importeTotal = totalMN, .importeUS = totalME}
        objRecurso = New documentoventaAbarrotes
        objRecurso.Monto30mn = total30MN
        objRecurso.Monto30me = total30ME

        objRecurso.Monto60mn = total60MN
        objRecurso.Monto60me = total60ME

        objRecurso.Monto90mn = total90MN
        objRecurso.Monto90me = total90ME

        objRecurso.Monto90Masmn = total90MASMN
        objRecurso.Monto90Masme = total90MASME

        Return objRecurso
    End Function

    Public Function GetListarVentasPorCategoria(intIdEstablecimiento As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentoventaAbarrotes


        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_VENTA.VENTA_AL_TICKET)
        listaTipoCompra.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)
        listaTipoCompra.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        listaTipoCompra.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)


        Dim consulta = (From det In HeliosData.documentoventaAbarrotesDet
                        Join veNta In HeliosData.documentoventaAbarrotes
                        On det.idDocumento Equals veNta.idDocumento
                        Join prod In HeliosData.detalleitems
                        On det.idItem Equals prod.codigodetalle
                        Join clas In HeliosData.item
                    On prod.idItem Equals clas.idItem
                        Where veNta.idEstablecimiento = intIdEstablecimiento _
                    And listaTipoCompra.Contains(veNta.tipoVenta)
                        Group det By
                     clas.descripcion
                        Into g = Group
                        Select New With {g, .CountCompras = g.Sum(Function(c) c.monto1),
       .descripcion = descripcion}
                                 ).OrderByDescending(Function(o) o.CountCompras).Take(5)


        'Dim consulta = (From doc In HeliosData.documento _
        '             Group Join compra In HeliosData.documentoventaAbarrotesDet _
        '              On doc.idDocumento Equals compra.idDocumento _
        '              Into ords = Group _
        '              From c In ords.DefaultIfEmpty _
        '              Group Join cat In HeliosData.detalleitems _
        '              On c.idItem Equals cat.codigodetalle _
        '              Into ords2 = Group _
        '              From c2 In ords2.DefaultIfEmpty _
        '              Group Join clas In HeliosData.item _
        '              On c2.idItem Equals clas.idItem _
        '              Into ords3 = Group _
        '              From c3 In ords3.DefaultIfEmpty _
        '              Join veNta In HeliosData.documentoventaAbarrotes _
        '              On c.idDocumento Equals veNta.idDocumento _
        '              Where veNta.fechaPeriodo.Contains(strPeriodo) _
        '              And veNta.idEstablecimiento = intIdEstablecimiento _
        '              And listaTipoCompra.Contains(veNta.tipoVenta) _
        '              Take 5 Order By c.monto1 Descending _
        '              Group c By _
        '               c3.descripcion _
        '                  Into g = Group _
        '                  Select New With {g, .CountCompras = g.Sum(Function(c) c.monto1),
        ' .descripcion = descripcion}
        '                           ).ToList


        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes
            objRecurso.Quantity = obj.CountCompras
            objRecurso.nombrePedido = obj.descripcion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Sub UpdateVentaNormalServicio(objDocumento As documento, objDocumentoCaja As documento)
        Dim DocumentoBL As New documentoBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim documentoGuiBL As New documentoGuiaBL
        Dim AsientoBL As New AsientoBL
        Try
            Using ts As New TransactionScope()

                Dim consulta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault

                '  If consulta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO Then
                DocumentoBL.Update(objDocumento)
                objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                Me.Update(objDocumento.documentoventaAbarrotes)
                AsientoBL.DeleteGroup(objDocumento.idDocumento)
                'inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)

                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    compraDetalleBL.Update(i, objDocumento.tipoDoc)
                    'AQUI SE INSERTAN DATOS AL ALMACEN
                    'If i.Action <> BaseBE.EntityAction.DELETE Then
                    '    inventario.InsertVentaPagada(i, objDocumento)
                    'End If
                Next
                If Not IsNothing(objDocumento.documentoGuia) Then
                    documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        documentoGuiBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If
                End If
                AsientoBL.SavebyGroupDoc(objDocumento)

                SaveCaja(objDocumentoCaja, objDocumento.idDocumento)

                HeliosData.SaveChanges()
                ts.Complete()
                'Else
                'Throw New Exception("El documento está cobrado!!")
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function SaveVentaNormalServicio(objDocumento As documento, objDocumentoCaja As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim codVenta As Integer
        Dim x As New documentoGuia
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.nroDoc, objDocumento.idCentroCosto, objDocumento.idEmpresa, objDocumento.tipoDoc) = True Then
                    DocumentoBL.Insert(objDocumento)
                    codVenta = objDocumento.idDocumento
                    Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        'inventario.InsertVentaPagada(i, objDocumento)
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    'guiaBL.InsertGuia(objDocumento.documentoGuia, objDocumento.idDocumento)
                    objDocumento.documentoGuia.CodigoVenta = codVenta
                    guiaBL.InsertGuiaVenta(objDocumento.documentoGuia, objDocumento.idDocumento)
                    SaveCaja(objDocumentoCaja, objDocumento.idDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub AnularVenta(intIdDocumentoVenta As Integer)
        Dim docVenta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = intIdDocumentoVenta).FirstOrDefault
        Using ts As New TransactionScope
            If Not IsNothing(docVenta) Then
                docVenta.estadoCobro = TIPO_VENTA.VENTA_ANULADA
                'HeliosData.ObjectStateManager.GetObjectStateEntry(docVenta).State.ToString()
                HeliosData.SaveChanges()
                ts.Complete()
            End If
        End Using

    End Sub

    Public Function InserT(ByVal documentoventaAbarrotesBE As documentoventaAbarrotes, intIdDocmento As Integer) As Integer
        Using ts As New TransactionScope
            HeliosData.documentoventaAbarrotes.Add(documentoventaAbarrotesBE)
            HeliosData.SaveChanges()
            ts.Complete()
            Return documentoventaAbarrotesBE.idDocumento
        End Using
    End Function

    Public Sub InsertSingle(ByVal documentoventaAbarrotesBE As documentoventaAbarrotes, intIdDocmento As Integer)
        Dim docVentaAbarrotes As New documentoventaAbarrotes
        'Dim numeracionBL As New numeracionBoletasBL
        'Dim cval As Integer = 0
        Using ts As New TransactionScope
            docVentaAbarrotes.idDocumento = intIdDocmento
            docVentaAbarrotes.codigoLibro = documentoventaAbarrotesBE.codigoLibro
            docVentaAbarrotes.tipoOperacion = documentoventaAbarrotesBE.tipoOperacion
            docVentaAbarrotes.fechaVcto = documentoventaAbarrotesBE.fechaVcto
            docVentaAbarrotes.idEmpresa = documentoventaAbarrotesBE.idEmpresa
            docVentaAbarrotes.idEstablecimiento = documentoventaAbarrotesBE.idEstablecimiento
            docVentaAbarrotes.tipoDocumento = documentoventaAbarrotesBE.tipoDocumento
            docVentaAbarrotes.fechaDoc = documentoventaAbarrotesBE.fechaDoc
            docVentaAbarrotes.horaVenta = documentoventaAbarrotesBE.horaVenta
            docVentaAbarrotes.fechaConfirmacion = documentoventaAbarrotesBE.fechaConfirmacion
            docVentaAbarrotes.fechaPeriodo = documentoventaAbarrotesBE.fechaPeriodo
            docVentaAbarrotes.serie = documentoventaAbarrotesBE.serie
            docVentaAbarrotes.numeroDoc = documentoventaAbarrotesBE.numeroDoc
            docVentaAbarrotes.numeroDocNormal = documentoventaAbarrotesBE.numeroDocNormal
            docVentaAbarrotes.idClientePedido = documentoventaAbarrotesBE.idClientePedido
            docVentaAbarrotes.nombrePedido = documentoventaAbarrotesBE.nombrePedido
            docVentaAbarrotes.idCliente = documentoventaAbarrotesBE.idCliente
            docVentaAbarrotes.moneda = documentoventaAbarrotesBE.moneda
            docVentaAbarrotes.tipoCambio = documentoventaAbarrotesBE.tipoCambio
            docVentaAbarrotes.tasaIgv = documentoventaAbarrotesBE.tasaIgv
            docVentaAbarrotes.bi01 = documentoventaAbarrotesBE.bi01
            docVentaAbarrotes.bi02 = documentoventaAbarrotesBE.bi02
            docVentaAbarrotes.isc01 = documentoventaAbarrotesBE.isc01
            docVentaAbarrotes.isc02 = documentoventaAbarrotesBE.isc02
            docVentaAbarrotes.igv01 = documentoventaAbarrotesBE.igv01
            docVentaAbarrotes.igv02 = documentoventaAbarrotesBE.igv02
            docVentaAbarrotes.otc01 = documentoventaAbarrotesBE.otc01
            docVentaAbarrotes.otc02 = documentoventaAbarrotesBE.otc02
            docVentaAbarrotes.bi01us = documentoventaAbarrotesBE.bi01us
            docVentaAbarrotes.bi02us = documentoventaAbarrotesBE.bi02us
            docVentaAbarrotes.isc01us = documentoventaAbarrotesBE.isc01us
            docVentaAbarrotes.isc02us = documentoventaAbarrotesBE.isc02us
            docVentaAbarrotes.igv01us = documentoventaAbarrotesBE.igv01us
            docVentaAbarrotes.igv02us = documentoventaAbarrotesBE.igv02us
            docVentaAbarrotes.otc01us = documentoventaAbarrotesBE.otc01us
            docVentaAbarrotes.otc02us = documentoventaAbarrotesBE.otc02us
            docVentaAbarrotes.ImporteNacional = documentoventaAbarrotesBE.ImporteNacional
            docVentaAbarrotes.ImporteExtranjero = documentoventaAbarrotesBE.ImporteExtranjero
            docVentaAbarrotes.importeCostoMN = documentoventaAbarrotesBE.importeCostoMN
            docVentaAbarrotes.importeCostoME = documentoventaAbarrotesBE.importeCostoME
            docVentaAbarrotes.estadoCobro = documentoventaAbarrotesBE.estadoCobro
            docVentaAbarrotes.establecimientoCobro = documentoventaAbarrotesBE.establecimientoCobro
            docVentaAbarrotes.entidadFinanciera = documentoventaAbarrotesBE.entidadFinanciera
            docVentaAbarrotes.glosa = documentoventaAbarrotesBE.glosa
            docVentaAbarrotes.terminos = documentoventaAbarrotesBE.terminos
            docVentaAbarrotes.notaCredito = documentoventaAbarrotesBE.notaCredito
            docVentaAbarrotes.tipoVenta = documentoventaAbarrotesBE.tipoVenta
            docVentaAbarrotes.modulo = documentoventaAbarrotesBE.modulo
            docVentaAbarrotes.idPadre = documentoventaAbarrotesBE.idPadre
            docVentaAbarrotes.estadoEntrega = documentoventaAbarrotesBE.estadoEntrega
            docVentaAbarrotes.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
            docVentaAbarrotes.fechaActualizacion = documentoventaAbarrotesBE.fechaActualizacion

            HeliosData.documentoventaAbarrotes.Add(docVentaAbarrotes)
            HeliosData.SaveChanges()
            ts.Complete()
            documentoventaAbarrotesBE.idDocumento = docVentaAbarrotes.idDocumento
            documentoventaAbarrotesBE.numeroDoc = docVentaAbarrotes.numeroDoc
        End Using
    End Sub

    Public Sub InsertSingleVentaAlCredito(ByVal documentoventaAbarrotesBE As documentoventaAbarrotes, intIdDocmento As Integer)
        Dim docVentaAbarrotes As New documentoventaAbarrotes
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer = 0
        Using ts As New TransactionScope
            docVentaAbarrotes.idDocumento = intIdDocmento
            docVentaAbarrotes.codigoLibro = documentoventaAbarrotesBE.codigoLibro
            docVentaAbarrotes.idEmpresa = documentoventaAbarrotesBE.idEmpresa
            docVentaAbarrotes.idEstablecimiento = documentoventaAbarrotesBE.idEstablecimiento
            docVentaAbarrotes.tipoDocumento = documentoventaAbarrotesBE.tipoDocumento
            docVentaAbarrotes.fechaDoc = documentoventaAbarrotesBE.fechaDoc
            docVentaAbarrotes.horaVenta = documentoventaAbarrotesBE.horaVenta
            docVentaAbarrotes.fechaConfirmacion = documentoventaAbarrotesBE.fechaConfirmacion
            docVentaAbarrotes.fechaPeriodo = documentoventaAbarrotesBE.fechaPeriodo
            docVentaAbarrotes.serie = documentoventaAbarrotesBE.serie

            cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(documentoventaAbarrotesBE.IdNumeracion))
            docVentaAbarrotes.numeroDoc = cval
            docVentaAbarrotes.numeroDocNormal = cval
            docVentaAbarrotes.idClientePedido = documentoventaAbarrotesBE.idClientePedido
            docVentaAbarrotes.nombrePedido = documentoventaAbarrotesBE.nombrePedido
            docVentaAbarrotes.idCliente = documentoventaAbarrotesBE.idCliente
            docVentaAbarrotes.moneda = documentoventaAbarrotesBE.moneda
            docVentaAbarrotes.tipoCambio = documentoventaAbarrotesBE.tipoCambio
            docVentaAbarrotes.tasaIgv = documentoventaAbarrotesBE.tasaIgv
            docVentaAbarrotes.bi01 = documentoventaAbarrotesBE.bi01
            docVentaAbarrotes.bi02 = documentoventaAbarrotesBE.bi02
            docVentaAbarrotes.isc01 = documentoventaAbarrotesBE.isc01
            docVentaAbarrotes.isc02 = documentoventaAbarrotesBE.isc02
            docVentaAbarrotes.igv01 = documentoventaAbarrotesBE.igv01
            docVentaAbarrotes.igv02 = documentoventaAbarrotesBE.igv02
            docVentaAbarrotes.otc01 = documentoventaAbarrotesBE.otc01
            docVentaAbarrotes.otc02 = documentoventaAbarrotesBE.otc02
            docVentaAbarrotes.bi01us = documentoventaAbarrotesBE.bi01us
            docVentaAbarrotes.bi02us = documentoventaAbarrotesBE.bi02us
            docVentaAbarrotes.isc01us = documentoventaAbarrotesBE.isc01us
            docVentaAbarrotes.isc02us = documentoventaAbarrotesBE.isc02us
            docVentaAbarrotes.igv01us = documentoventaAbarrotesBE.igv01us
            docVentaAbarrotes.igv02us = documentoventaAbarrotesBE.igv02us
            docVentaAbarrotes.otc01us = documentoventaAbarrotesBE.otc01us
            docVentaAbarrotes.otc02us = documentoventaAbarrotesBE.otc02us
            docVentaAbarrotes.ImporteNacional = documentoventaAbarrotesBE.ImporteNacional
            docVentaAbarrotes.ImporteExtranjero = documentoventaAbarrotesBE.ImporteExtranjero
            docVentaAbarrotes.importeCostoMN = documentoventaAbarrotesBE.importeCostoMN
            docVentaAbarrotes.importeCostoME = documentoventaAbarrotesBE.importeCostoME
            docVentaAbarrotes.estadoCobro = documentoventaAbarrotesBE.estadoCobro
            docVentaAbarrotes.establecimientoCobro = documentoventaAbarrotesBE.establecimientoCobro
            docVentaAbarrotes.entidadFinanciera = documentoventaAbarrotesBE.entidadFinanciera
            docVentaAbarrotes.glosa = documentoventaAbarrotesBE.glosa
            docVentaAbarrotes.notaCredito = documentoventaAbarrotesBE.notaCredito
            docVentaAbarrotes.tipoVenta = documentoventaAbarrotesBE.tipoVenta
            docVentaAbarrotes.modulo = documentoventaAbarrotesBE.modulo
            docVentaAbarrotes.idPadre = documentoventaAbarrotesBE.idPadre
            docVentaAbarrotes.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
            docVentaAbarrotes.fechaActualizacion = documentoventaAbarrotesBE.fechaActualizacion

            HeliosData.documentoventaAbarrotes.Add(docVentaAbarrotes)

            'Dim docNota As documento = HeliosData.documento.Where(Function(o) o.idDocumento = intIdDocmento).First
            'docNota.nroDoc = documentoventaAbarrotesBE.serie & "-" & cval
            ''HeliosData.ObjectStateManager.GetObjectStateEntry(docNota).State.ToString()
            HeliosData.SaveChanges()
            ts.Complete()
            documentoventaAbarrotesBE.idDocumento = docVentaAbarrotes.idDocumento
            documentoventaAbarrotesBE.numeroDoc = docVentaAbarrotes.numeroDoc
        End Using
    End Sub

    Public Sub InsertCabeceraVenta(ByVal documentoventaAbarrotesBE As documentoventaAbarrotes, intIdDocmento As Integer)
        Dim docVentaAbarrotes As New documentoventaAbarrotes
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer = 0
        Using ts As New TransactionScope
            docVentaAbarrotes.idDocumento = intIdDocmento
            docVentaAbarrotes.tipoOperacion = documentoventaAbarrotesBE.tipoOperacion
            docVentaAbarrotes.codigoLibro = documentoventaAbarrotesBE.codigoLibro
            docVentaAbarrotes.idEmpresa = documentoventaAbarrotesBE.idEmpresa
            docVentaAbarrotes.idEstablecimiento = documentoventaAbarrotesBE.idEstablecimiento
            docVentaAbarrotes.tipoDocumento = documentoventaAbarrotesBE.tipoDocumento
            docVentaAbarrotes.fechaDoc = documentoventaAbarrotesBE.fechaDoc
            docVentaAbarrotes.horaVenta = documentoventaAbarrotesBE.horaVenta
            docVentaAbarrotes.fechaConfirmacion = documentoventaAbarrotesBE.fechaConfirmacion
            docVentaAbarrotes.fechaPeriodo = documentoventaAbarrotesBE.fechaPeriodo
            docVentaAbarrotes.serie = documentoventaAbarrotesBE.serie
            docVentaAbarrotes.serieVenta = documentoventaAbarrotesBE.serieVenta
            docVentaAbarrotes.fechaVcto = DateTime.Now

            ' If ((documentoventaAbarrotesBE.IdNumeracion) = 0) Then
            docVentaAbarrotes.numeroDoc = documentoventaAbarrotesBE.numeroDoc
            docVentaAbarrotes.numeroVenta = documentoventaAbarrotesBE.numeroVenta
            'Else
            '    cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(documentoventaAbarrotesBE.IdNumeracion))
            '    docVentaAbarrotes.numeroDoc = cval
            'End If

            docVentaAbarrotes.numeroDocNormal = documentoventaAbarrotesBE.numeroDocNormal
            docVentaAbarrotes.idClientePedido = documentoventaAbarrotesBE.idClientePedido
            docVentaAbarrotes.nombrePedido = documentoventaAbarrotesBE.nombrePedido
            docVentaAbarrotes.idCliente = documentoventaAbarrotesBE.idCliente
            docVentaAbarrotes.moneda = documentoventaAbarrotesBE.moneda
            docVentaAbarrotes.tipoCambio = documentoventaAbarrotesBE.tipoCambio
            docVentaAbarrotes.tasaIgv = documentoventaAbarrotesBE.tasaIgv
            docVentaAbarrotes.bi01 = documentoventaAbarrotesBE.bi01
            docVentaAbarrotes.bi02 = documentoventaAbarrotesBE.bi02
            docVentaAbarrotes.isc01 = documentoventaAbarrotesBE.isc01
            docVentaAbarrotes.isc02 = documentoventaAbarrotesBE.isc02
            docVentaAbarrotes.igv01 = documentoventaAbarrotesBE.igv01
            docVentaAbarrotes.igv02 = documentoventaAbarrotesBE.igv02
            docVentaAbarrotes.otc01 = documentoventaAbarrotesBE.otc01
            docVentaAbarrotes.otc02 = documentoventaAbarrotesBE.otc02
            docVentaAbarrotes.bi01us = documentoventaAbarrotesBE.bi01us
            docVentaAbarrotes.bi02us = documentoventaAbarrotesBE.bi02us
            docVentaAbarrotes.isc01us = documentoventaAbarrotesBE.isc01us
            docVentaAbarrotes.isc02us = documentoventaAbarrotesBE.isc02us
            docVentaAbarrotes.igv01us = documentoventaAbarrotesBE.igv01us
            docVentaAbarrotes.igv02us = documentoventaAbarrotesBE.igv02us
            docVentaAbarrotes.otc01us = documentoventaAbarrotesBE.otc01us
            docVentaAbarrotes.otc02us = documentoventaAbarrotesBE.otc02us
            docVentaAbarrotes.ImporteNacional = documentoventaAbarrotesBE.ImporteNacional
            docVentaAbarrotes.ImporteExtranjero = documentoventaAbarrotesBE.ImporteExtranjero
            docVentaAbarrotes.importeCostoMN = documentoventaAbarrotesBE.importeCostoMN
            docVentaAbarrotes.importeCostoME = documentoventaAbarrotesBE.importeCostoME
            docVentaAbarrotes.estadoCobro = documentoventaAbarrotesBE.estadoCobro
            docVentaAbarrotes.establecimientoCobro = documentoventaAbarrotesBE.establecimientoCobro
            docVentaAbarrotes.entidadFinanciera = documentoventaAbarrotesBE.entidadFinanciera
            docVentaAbarrotes.glosa = documentoventaAbarrotesBE.glosa
            docVentaAbarrotes.notaCredito = documentoventaAbarrotesBE.notaCredito
            docVentaAbarrotes.tipoVenta = documentoventaAbarrotesBE.tipoVenta
            docVentaAbarrotes.modulo = documentoventaAbarrotesBE.modulo
            docVentaAbarrotes.idPadre = documentoventaAbarrotesBE.idPadre
            docVentaAbarrotes.estado = documentoventaAbarrotesBE.estado
            docVentaAbarrotes.terminos = documentoventaAbarrotesBE.terminos
            docVentaAbarrotes.estadoEntrega = documentoventaAbarrotesBE.estadoEntrega
            docVentaAbarrotes.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
            docVentaAbarrotes.fechaActualizacion = documentoventaAbarrotesBE.fechaActualizacion
            docVentaAbarrotes.icbper = documentoventaAbarrotesBE.icbper
            docVentaAbarrotes.icbperus = documentoventaAbarrotesBE.icbperus

            HeliosData.documentoventaAbarrotes.Add(docVentaAbarrotes)
            HeliosData.SaveChanges()
            ts.Complete()
            documentoventaAbarrotesBE.idDocumento = docVentaAbarrotes.idDocumento
            documentoventaAbarrotesBE.numeroDoc = docVentaAbarrotes.numeroDoc
        End Using
    End Sub

    Public Sub InsertCabeceraVentaExcedente(ByVal documentoventaAbarrotesBE As documentoventaAbarrotes, intIdDocmento As Integer)
        Dim docVentaAbarrotes As New documentoventaAbarrotes
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer = 0
        Using ts As New TransactionScope
            docVentaAbarrotes.idDocumento = intIdDocmento
            docVentaAbarrotes.tipoOperacion = documentoventaAbarrotesBE.tipoOperacion
            docVentaAbarrotes.codigoLibro = documentoventaAbarrotesBE.codigoLibro
            docVentaAbarrotes.idEmpresa = documentoventaAbarrotesBE.idEmpresa
            docVentaAbarrotes.idEstablecimiento = documentoventaAbarrotesBE.idEstablecimiento
            docVentaAbarrotes.tipoDocumento = documentoventaAbarrotesBE.tipoDocumento
            docVentaAbarrotes.fechaDoc = documentoventaAbarrotesBE.fechaDoc
            docVentaAbarrotes.horaVenta = documentoventaAbarrotesBE.horaVenta
            docVentaAbarrotes.fechaConfirmacion = documentoventaAbarrotesBE.fechaConfirmacion
            docVentaAbarrotes.fechaPeriodo = documentoventaAbarrotesBE.fechaPeriodo
            docVentaAbarrotes.serie = documentoventaAbarrotesBE.serie
            docVentaAbarrotes.serieVenta = documentoventaAbarrotesBE.serieVenta
            '   docVentaAbarrotes.numeroDoc = cval
            docVentaAbarrotes.numeroDocNormal = documentoventaAbarrotesBE.numeroDocNormal
            docVentaAbarrotes.numeroVenta = documentoventaAbarrotesBE.numeroVenta
            docVentaAbarrotes.idClientePedido = documentoventaAbarrotesBE.idClientePedido
            docVentaAbarrotes.nombrePedido = documentoventaAbarrotesBE.nombrePedido
            docVentaAbarrotes.idCliente = documentoventaAbarrotesBE.idCliente
            docVentaAbarrotes.moneda = documentoventaAbarrotesBE.moneda
            docVentaAbarrotes.tipoCambio = documentoventaAbarrotesBE.tipoCambio
            docVentaAbarrotes.tasaIgv = documentoventaAbarrotesBE.tasaIgv
            docVentaAbarrotes.bi01 = documentoventaAbarrotesBE.BiDevMN
            docVentaAbarrotes.bi02 = documentoventaAbarrotesBE.Bi2DevMN
            docVentaAbarrotes.isc01 = documentoventaAbarrotesBE.isc01
            docVentaAbarrotes.isc02 = documentoventaAbarrotesBE.isc02
            docVentaAbarrotes.igv01 = documentoventaAbarrotesBE.IgvDevMN
            docVentaAbarrotes.igv02 = documentoventaAbarrotesBE.igv02
            docVentaAbarrotes.otc01 = documentoventaAbarrotesBE.otc01
            docVentaAbarrotes.otc02 = documentoventaAbarrotesBE.otc02
            docVentaAbarrotes.bi01us = documentoventaAbarrotesBE.bi01us
            docVentaAbarrotes.bi02us = documentoventaAbarrotesBE.bi02us
            docVentaAbarrotes.isc01us = documentoventaAbarrotesBE.isc01us
            docVentaAbarrotes.isc02us = documentoventaAbarrotesBE.isc02us
            docVentaAbarrotes.igv01us = documentoventaAbarrotesBE.igv01us
            docVentaAbarrotes.igv02us = documentoventaAbarrotesBE.igv02us
            docVentaAbarrotes.otc01us = documentoventaAbarrotesBE.otc01us
            docVentaAbarrotes.otc02us = documentoventaAbarrotesBE.otc02us
            docVentaAbarrotes.ImporteNacional = documentoventaAbarrotesBE.ImporteDevMN
            docVentaAbarrotes.ImporteExtranjero = documentoventaAbarrotesBE.ImporteDevME
            docVentaAbarrotes.importeCostoMN = documentoventaAbarrotesBE.importeCostoMN
            docVentaAbarrotes.importeCostoME = documentoventaAbarrotesBE.importeCostoME
            docVentaAbarrotes.estadoCobro = documentoventaAbarrotesBE.estadoCobro
            docVentaAbarrotes.establecimientoCobro = documentoventaAbarrotesBE.establecimientoCobro
            docVentaAbarrotes.entidadFinanciera = documentoventaAbarrotesBE.entidadFinanciera
            docVentaAbarrotes.glosa = documentoventaAbarrotesBE.glosa
            docVentaAbarrotes.notaCredito = documentoventaAbarrotesBE.notaCredito
            docVentaAbarrotes.tipoVenta = documentoventaAbarrotesBE.tipoVenta
            docVentaAbarrotes.modulo = documentoventaAbarrotesBE.modulo
            docVentaAbarrotes.idPadre = documentoventaAbarrotesBE.idPadre
            docVentaAbarrotes.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
            docVentaAbarrotes.fechaActualizacion = documentoventaAbarrotesBE.fechaActualizacion

            HeliosData.documentoventaAbarrotes.Add(docVentaAbarrotes)
            HeliosData.SaveChanges()
            ts.Complete()
            documentoventaAbarrotesBE.idDocumento = docVentaAbarrotes.idDocumento
            documentoventaAbarrotesBE.numeroDoc = docVentaAbarrotes.numeroDoc
        End Using
    End Sub

    Public Sub ConfirmarTicket(ByVal documentoventaAbarrotesBE As documentoventaAbarrotes)
        Dim docVentaAbarrotes As New documentoventaAbarrotes
        '   Dim numeracionBL As New numeracionBoletasBL
        '   Dim cval As Integer = 0
        Using ts As New TransactionScope
            docVentaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = documentoventaAbarrotesBE.idDocumento).First

            docVentaAbarrotes.fechaLaboral = documentoventaAbarrotesBE.fechaLaboral
            docVentaAbarrotes.serieVenta = documentoventaAbarrotesBE.serieVenta
            '   cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(documentoventaAbarrotesBE.IdNumeracion))
            docVentaAbarrotes.numeroVenta = documentoventaAbarrotesBE.numeroVenta
            docVentaAbarrotes.fechaConfirmacion = documentoventaAbarrotesBE.fechaConfirmacion
            ' docVentaAbarrotes.idCliente = documentoventaAbarrotesBE.idCliente
            docVentaAbarrotes.tipoDocumento = documentoventaAbarrotesBE.tipoDocumento
            docVentaAbarrotes.estadoCobro = documentoventaAbarrotesBE.estadoCobro
            docVentaAbarrotes.establecimientoCobro = documentoventaAbarrotesBE.establecimientoCobro
            docVentaAbarrotes.entidadFinanciera = documentoventaAbarrotesBE.entidadFinanciera
            docVentaAbarrotes.tipoVenta = documentoventaAbarrotesBE.tipoVenta
            docVentaAbarrotes.glosa = documentoventaAbarrotesBE.glosa
            docVentaAbarrotes.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion

            'HeliosData.ObjectStateManager.GetObjectStateEntry(docVentaAbarrotes).State.ToString()
            HeliosData.SaveChanges()
            ts.Complete()
            documentoventaAbarrotesBE.serieVenta = documentoventaAbarrotesBE.serieVenta
            documentoventaAbarrotesBE.numeroVenta = docVentaAbarrotes.numeroVenta
        End Using
    End Sub

    Public Sub Update(ByVal documentoventaAbarrotesBE As documentoventaAbarrotes)
        Using ts As New TransactionScope
            Dim docVentaAbarrotes As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) _
                                            o.idDocumento = documentoventaAbarrotesBE.idDocumento).First()

            docVentaAbarrotes.codigoLibro = documentoventaAbarrotesBE.codigoLibro
            docVentaAbarrotes.idEmpresa = documentoventaAbarrotesBE.idEmpresa
            docVentaAbarrotes.idEstablecimiento = documentoventaAbarrotesBE.idEstablecimiento
            docVentaAbarrotes.tipoDocumento = documentoventaAbarrotesBE.tipoDocumento
            docVentaAbarrotes.fechaDoc = documentoventaAbarrotesBE.fechaDoc
            docVentaAbarrotes.horaVenta = documentoventaAbarrotesBE.horaVenta
            docVentaAbarrotes.fechaConfirmacion = documentoventaAbarrotesBE.fechaConfirmacion
            docVentaAbarrotes.fechaPeriodo = documentoventaAbarrotesBE.fechaPeriodo
            docVentaAbarrotes.serie = documentoventaAbarrotesBE.serie
            docVentaAbarrotes.numeroDoc = documentoventaAbarrotesBE.numeroDoc
            docVentaAbarrotes.numeroDocNormal = documentoventaAbarrotesBE.numeroDocNormal
            docVentaAbarrotes.idClientePedido = documentoventaAbarrotesBE.idClientePedido
            docVentaAbarrotes.nombrePedido = documentoventaAbarrotesBE.nombrePedido
            docVentaAbarrotes.idCliente = documentoventaAbarrotesBE.idCliente
            docVentaAbarrotes.moneda = documentoventaAbarrotesBE.moneda
            docVentaAbarrotes.tipoCambio = documentoventaAbarrotesBE.tipoCambio
            docVentaAbarrotes.tasaIgv = documentoventaAbarrotesBE.tasaIgv
            docVentaAbarrotes.bi01 = documentoventaAbarrotesBE.bi01
            docVentaAbarrotes.bi02 = documentoventaAbarrotesBE.bi02
            docVentaAbarrotes.isc01 = documentoventaAbarrotesBE.isc01
            docVentaAbarrotes.isc02 = documentoventaAbarrotesBE.isc02
            docVentaAbarrotes.igv01 = documentoventaAbarrotesBE.igv01
            docVentaAbarrotes.igv02 = documentoventaAbarrotesBE.igv02
            docVentaAbarrotes.otc01 = documentoventaAbarrotesBE.otc01
            docVentaAbarrotes.otc02 = documentoventaAbarrotesBE.otc02
            docVentaAbarrotes.bi01us = documentoventaAbarrotesBE.bi01us
            docVentaAbarrotes.bi02us = documentoventaAbarrotesBE.bi02us
            docVentaAbarrotes.isc01us = documentoventaAbarrotesBE.isc01us
            docVentaAbarrotes.isc02us = documentoventaAbarrotesBE.isc02us
            docVentaAbarrotes.igv01us = documentoventaAbarrotesBE.igv01us
            docVentaAbarrotes.igv02us = documentoventaAbarrotesBE.igv02us
            docVentaAbarrotes.otc01us = documentoventaAbarrotesBE.otc01us
            docVentaAbarrotes.otc02us = documentoventaAbarrotesBE.otc02us
            docVentaAbarrotes.ImporteNacional = documentoventaAbarrotesBE.ImporteNacional
            docVentaAbarrotes.ImporteExtranjero = documentoventaAbarrotesBE.ImporteExtranjero
            docVentaAbarrotes.importeCostoMN = documentoventaAbarrotesBE.importeCostoMN
            docVentaAbarrotes.importeCostoME = documentoventaAbarrotesBE.importeCostoME
            docVentaAbarrotes.estadoCobro = documentoventaAbarrotesBE.estadoCobro
            docVentaAbarrotes.establecimientoCobro = documentoventaAbarrotesBE.establecimientoCobro
            docVentaAbarrotes.entidadFinanciera = documentoventaAbarrotesBE.entidadFinanciera
            docVentaAbarrotes.glosa = documentoventaAbarrotesBE.glosa
            docVentaAbarrotes.notaCredito = documentoventaAbarrotesBE.notaCredito
            docVentaAbarrotes.tipoVenta = documentoventaAbarrotesBE.tipoVenta
            docVentaAbarrotes.modulo = documentoventaAbarrotesBE.modulo
            docVentaAbarrotes.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
            docVentaAbarrotes.fechaActualizacion = documentoventaAbarrotesBE.fechaActualizacion

            'HeliosData.ObjectStateManager.GetObjectStateEntry(docVentaAbarrotes).State.ToString()

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub UpdateVentaAlCredito(ByVal documentoventaAbarrotesBE As documentoventaAbarrotes)
        Using ts As New TransactionScope
            Dim docVentaAbarrotes As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) _
                                            o.idDocumento = documentoventaAbarrotesBE.idDocumento).First()

            docVentaAbarrotes.codigoLibro = documentoventaAbarrotesBE.codigoLibro
            docVentaAbarrotes.idEmpresa = documentoventaAbarrotesBE.idEmpresa
            docVentaAbarrotes.idEstablecimiento = documentoventaAbarrotesBE.idEstablecimiento
            docVentaAbarrotes.tipoDocumento = documentoventaAbarrotesBE.tipoDocumento
            docVentaAbarrotes.fechaDoc = documentoventaAbarrotesBE.fechaDoc
            docVentaAbarrotes.horaVenta = documentoventaAbarrotesBE.horaVenta
            docVentaAbarrotes.fechaConfirmacion = documentoventaAbarrotesBE.fechaConfirmacion
            docVentaAbarrotes.fechaPeriodo = documentoventaAbarrotesBE.fechaPeriodo
            docVentaAbarrotes.serie = documentoventaAbarrotesBE.serie
            docVentaAbarrotes.numeroDocNormal = documentoventaAbarrotesBE.numeroDocNormal
            docVentaAbarrotes.idClientePedido = documentoventaAbarrotesBE.idClientePedido
            docVentaAbarrotes.nombrePedido = documentoventaAbarrotesBE.nombrePedido
            docVentaAbarrotes.idCliente = documentoventaAbarrotesBE.idCliente
            docVentaAbarrotes.moneda = documentoventaAbarrotesBE.moneda
            docVentaAbarrotes.tipoCambio = documentoventaAbarrotesBE.tipoCambio
            docVentaAbarrotes.tasaIgv = documentoventaAbarrotesBE.tasaIgv
            docVentaAbarrotes.bi01 = documentoventaAbarrotesBE.bi01
            docVentaAbarrotes.bi02 = documentoventaAbarrotesBE.bi02
            docVentaAbarrotes.isc01 = documentoventaAbarrotesBE.isc01
            docVentaAbarrotes.isc02 = documentoventaAbarrotesBE.isc02
            docVentaAbarrotes.igv01 = documentoventaAbarrotesBE.igv01
            docVentaAbarrotes.igv02 = documentoventaAbarrotesBE.igv02
            docVentaAbarrotes.otc01 = documentoventaAbarrotesBE.otc01
            docVentaAbarrotes.otc02 = documentoventaAbarrotesBE.otc02
            docVentaAbarrotes.bi01us = documentoventaAbarrotesBE.bi01us
            docVentaAbarrotes.bi02us = documentoventaAbarrotesBE.bi02us
            docVentaAbarrotes.isc01us = documentoventaAbarrotesBE.isc01us
            docVentaAbarrotes.isc02us = documentoventaAbarrotesBE.isc02us
            docVentaAbarrotes.igv01us = documentoventaAbarrotesBE.igv01us
            docVentaAbarrotes.igv02us = documentoventaAbarrotesBE.igv02us
            docVentaAbarrotes.otc01us = documentoventaAbarrotesBE.otc01us
            docVentaAbarrotes.otc02us = documentoventaAbarrotesBE.otc02us
            docVentaAbarrotes.ImporteNacional = documentoventaAbarrotesBE.ImporteNacional
            docVentaAbarrotes.ImporteExtranjero = documentoventaAbarrotesBE.ImporteExtranjero
            docVentaAbarrotes.importeCostoMN = documentoventaAbarrotesBE.importeCostoMN
            docVentaAbarrotes.importeCostoME = documentoventaAbarrotesBE.importeCostoME
            docVentaAbarrotes.establecimientoCobro = documentoventaAbarrotesBE.establecimientoCobro
            docVentaAbarrotes.entidadFinanciera = documentoventaAbarrotesBE.entidadFinanciera
            docVentaAbarrotes.glosa = documentoventaAbarrotesBE.glosa
            docVentaAbarrotes.notaCredito = documentoventaAbarrotesBE.notaCredito
            docVentaAbarrotes.tipoVenta = documentoventaAbarrotesBE.tipoVenta
            docVentaAbarrotes.modulo = documentoventaAbarrotesBE.modulo
            docVentaAbarrotes.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
            docVentaAbarrotes.fechaActualizacion = documentoventaAbarrotesBE.fechaActualizacion

            'HeliosData.ObjectStateManager.GetObjectStateEntry(docVentaAbarrotes).State.ToString()

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub UpdateOtrasSalidas(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen))
        Dim DocumentoBL As New documentoBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim asientoBL As New AsientoBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Update(objDocumento)
                objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                Me.UpdateVentaAlCredito(objDocumento.documentoventaAbarrotes)
                asientoBL.DeleteGroup(objDocumento.idDocumento)
                inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                objTotalesAlmacen.UpdateTotalAlmacenOS(listaTotales, objDeleteTotales)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    compraDetalleBL.Update(i, objDocumento.tipoDoc)
                    If i.Action <> BaseBE.EntityAction.DELETE Then
                        inventario.InsertOtrasSalidasAlmacen(i, objDocumento)
                    End If

                Next
                asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub Delete(ByVal documentoventaAbarrotesBE As documentoventaAbarrotes)
        CType(HeliosData, System.Data.Entity.Infrastructure.IObjectContextAdapter).ObjectContext.DeleteObject(documentoventaAbarrotesBE)
    End Sub

    Public Function GetListar_documentoventaAbarrotes() As List(Of documentoventaAbarrotes)
        Return (From a In HeliosData.documentoventaAbarrotes Select a).ToList
    End Function

    Public Function GetUbicar_documentoventaAbarrotesPorID(idDocumento As Integer) As documentoventaAbarrotes
        Return (From a In HeliosData.documentoventaAbarrotes
                Where a.idDocumento = idDocumento Select a).FirstOrDefault
    End Function

    Public Function GetVentaPorID(iDocuemnto As Integer) As documentoventaAbarrotes
        Dim con = (From v In HeliosData.documentoventaAbarrotes
                   Join ent In HeliosData.entidad
                      On ent.idEntidad Equals v.idCliente
                   Where v.idDocumento = iDocuemnto
                   Select
                      v.idDocumento,
                        v.tipoOperacion,
                        v.codigoLibro,
                        v.idEmpresa,
                        v.idEstablecimiento,
                        v.tipoDocumento,
                        v.fechaLaboral,
                        v.fechaDoc,
                        v.fechaVcto,
                        v.horaVenta,
                        v.fechaConfirmacion,
                        v.fechaPeriodo,
                        v.serie,
                        v.numeroDoc,
                        v.numeroDocNormal,
                        v.serieVenta,
                        v.numeroVenta,
                        v.idClientePedido,
                        v.nombrePedido,
                        v.idCliente,
                        v.moneda,
                        v.tipoCambio,
                        v.tasaIgv,
                        v.bi01,
                        v.bi02,
                        v.isc01,
                        v.isc02,
                        v.igv01,
                        v.igv02,
                        v.otc01,
                        v.otc02,
                        v.bi01us,
                        v.bi02us,
                        v.isc01us,
                        v.isc02us,
                        v.igv01us,
                        v.igv02us,
                        v.otc01us,
                        v.otc02us,
                        v.ImporteNacional,
                        v.ImporteExtranjero,
                        v.importeCostoMN,
                        v.importeCostoME,
                        v.estadoCobro,
                        v.establecimientoCobro,
                        v.entidadFinanciera,
                        v.glosa,
                        v.terminos,
                        v.notaCredito,
                        v.tipoVenta,
                        v.modulo,
                        v.idPadre,
                        v.notificacionAsiento,
                        v.estado,
                        v.estadoEntrega,
                        v.nroImpresion,
                        v.usuarioActualizacion,
                        v.fechaActualizacion,
                        v.EnvioSunat,
                        v.ticketElectronico,
                        v.numeracionElectronica,
                      ent.nombreCompleto,
                      ent.idEntidad,
                      ent.nrodoc,
                      ent.tipoEntidad,
                      ent.tipoDoc).SingleOrDefault

        GetVentaPorID = New documentoventaAbarrotes
        GetVentaPorID.idDocumento = con.idDocumento
        GetVentaPorID.tipoOperacion = con.tipoOperacion
        GetVentaPorID.codigoLibro = con.codigoLibro
        GetVentaPorID.idEmpresa = con.idEmpresa
        GetVentaPorID.idEstablecimiento = con.idEstablecimiento
        GetVentaPorID.tipoDocumento = con.tipoDocumento
        GetVentaPorID.fechaLaboral = con.fechaLaboral
        GetVentaPorID.fechaDoc = con.fechaDoc
        GetVentaPorID.fechaVcto = con.fechaVcto
        GetVentaPorID.horaVenta = con.horaVenta
        GetVentaPorID.fechaConfirmacion = con.fechaConfirmacion
        GetVentaPorID.fechaPeriodo = con.fechaPeriodo
        GetVentaPorID.serie = con.serie
        GetVentaPorID.numeroDoc = con.numeroDoc
        GetVentaPorID.numeroDocNormal = con.numeroDocNormal
        GetVentaPorID.serieVenta = con.serieVenta
        GetVentaPorID.numeroVenta = con.numeroVenta
        GetVentaPorID.idClientePedido = con.idClientePedido
        GetVentaPorID.nombrePedido = con.nombrePedido
        GetVentaPorID.idCliente = con.idCliente
        GetVentaPorID.moneda = con.moneda
        GetVentaPorID.tipoCambio = con.tipoCambio
        GetVentaPorID.tasaIgv = con.tasaIgv
        GetVentaPorID.bi01 = con.bi01
        GetVentaPorID.bi02 = con.bi02
        GetVentaPorID.isc01 = con.isc01
        GetVentaPorID.isc02 = con.isc02
        GetVentaPorID.igv01 = con.igv01
        GetVentaPorID.igv02 = con.igv02
        GetVentaPorID.otc01 = con.otc01
        GetVentaPorID.otc02 = con.otc02
        GetVentaPorID.bi01us = con.bi01us
        GetVentaPorID.bi02us = con.bi02us
        GetVentaPorID.isc01us = con.isc01us
        GetVentaPorID.isc02us = con.isc02us
        GetVentaPorID.igv01us = con.igv01us
        GetVentaPorID.igv02us = con.igv02us
        GetVentaPorID.otc01us = con.otc01us
        GetVentaPorID.otc02us = con.otc02us
        GetVentaPorID.ImporteNacional = con.ImporteNacional
        GetVentaPorID.ImporteExtranjero = con.ImporteExtranjero
        GetVentaPorID.importeCostoMN = con.importeCostoMN
        GetVentaPorID.importeCostoME = con.importeCostoME
        GetVentaPorID.estadoCobro = con.estadoCobro
        GetVentaPorID.establecimientoCobro = con.establecimientoCobro
        GetVentaPorID.entidadFinanciera = con.entidadFinanciera
        GetVentaPorID.glosa = con.glosa
        GetVentaPorID.terminos = con.terminos
        GetVentaPorID.notaCredito = con.notaCredito
        GetVentaPorID.tipoVenta = con.tipoVenta
        GetVentaPorID.modulo = con.modulo
        GetVentaPorID.idPadre = con.idPadre
        GetVentaPorID.notificacionAsiento = con.notificacionAsiento
        GetVentaPorID.estado = con.estado
        GetVentaPorID.estadoEntrega = con.estadoEntrega
        GetVentaPorID.nroImpresion = con.nroImpresion
        GetVentaPorID.usuarioActualizacion = con.usuarioActualizacion
        GetVentaPorID.fechaActualizacion = con.fechaActualizacion
        GetVentaPorID.EnvioSunat = con.EnvioSunat
        GetVentaPorID.ticketElectronico = con.ticketElectronico
        GetVentaPorID.numeracionElectronica = con.numeracionElectronica
        GetVentaPorID.NombreEntidad = con.nombreCompleto
        GetVentaPorID.idCliente = con.idEntidad
        GetVentaPorID.NroDocEntidad = con.nrodoc


    End Function


#Region "VENTA NORMAL"
    Public Function SaveVentaNormalAlContado(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen), objDocumentoCaja As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim codVenta As Integer
        Dim x As New documentoGuia
        Try
            Using ts As New TransactionScope()

                If ValidarDocumentoNro(objDocumento.nroDoc, objDocumento.idCentroCosto, objDocumento.idEmpresa, objDocumento.tipoDoc) = True Then
                    DocumentoBL.Insert(objDocumento)
                    codVenta = objDocumento.idDocumento
                    Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        inventario.InsertVentaPagada(i, objDocumento)
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                    objDocumento.documentoGuia.CodigoVenta = codVenta
                    guiaBL.InsertGuiaVenta(objDocumento.documentoGuia, objDocumento.idDocumento)
                    SaveCaja(objDocumentoCaja, objDocumento.idDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Function UbicarVentaPorClienteXperiodo(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim list As New List(Of String)
        list.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        list.Add(TIPO_VENTA.VENTA_GENERAL)
        list.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        list.Add(TIPO_VENTA.VENTA_AL_TICKET)

        Dim listaPago As New List(Of String)
        listaPago.Add("DC")
        listaPago.Add("PN")

        Dim consulta = (From n In HeliosData.documentoventaAbarrotes
                        Join ent In HeliosData.entidad
                On n.idCliente Equals ent.idEntidad
                        Join tbl In HeliosData.tabladetalle
                On n.tipoDocumento Equals tbl.codigoDetalle
                        Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento _
                And ent.nrodoc = strRuc And ent.tipoEntidad = "CL" _
                And list.Contains(n.tipoVenta) And tbl.idtabla = 10 And
                listaPago.Contains(n.estadoCobro) And
                n.fechaPeriodo = strPeriodo Order By n.fechaDoc).ToList

        For Each i In consulta
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.n.idDocumento
            doccompra.tipoVenta = i.n.tipoVenta
            doccompra.fechaPeriodo = i.n.fechaPeriodo
            doccompra.fechaDoc = i.n.fechaDoc
            doccompra.serie = i.n.serie
            doccompra.numeroDoc = i.n.numeroDocNormal
            doccompra.tipoDocumento = i.n.tipoDocumento
            doccompra.moneda = i.n.moneda
            doccompra.nombreEstablecimiento = i.tbl.descripcion
            doccompra.ImporteNacional = i.n.ImporteNacional
            doccompra.ImporteExtranjero = i.n.ImporteExtranjero
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function UbicarVentaPorClienteXperiodo2(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As Integer, strPeriodo As DateTime, intmoneda As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim con = (From c In HeliosData.documentoventaAbarrotes
                   Join cli In HeliosData.entidad
                           On cli.idEntidad Equals c.idCliente
                   Where
                  (New String() {TIPO_VENTA.NOTA_DE_VENTA, "VNS", "VTAG", "VPOS", "VAO", "VAR", "VREC"}).Contains(c.tipoVenta) And
                   c.idEmpresa = strEmpresa And c.idEstablecimiento = intIdEstablecimiento _
                       And c.idCliente = strRuc _
                       And c.fechaDoc.Value.Year = strPeriodo.Year _
                       And c.fechaDoc.Value.Month = strPeriodo.Month _
                       And c.moneda = intmoneda
                   Select
                  c.idDocumento,
                       c.idCliente,
                       cli.nombreCompleto,
                       cli.nrodoc,
                  c.tipoVenta,
                  c.fechaPeriodo,
                  c.fechaDoc,
                  c.serieVenta,
                  c.numeroVenta,
                  c.tipoDocumento,
                  c.moneda,
                  c.ImporteNacional,
                  c.tipoCambio,
                  c.ImporteExtranjero,
                  c.estadoCobro,
                  PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       Exedente = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                 Where
                                                 (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.ImporteNacional
                                                 }) Into Sum(t1.ImporteNacional)), Decimal?)),
                             Conteo = ((Aggregate t1 In
                                        (From cro In HeliosData.Cronograma
                                         Where
                                         cro.idDocumentoRef = c.idDocumento And
                                         cro.estado = "PN"
                                         Select New With {
                                                cro
                                         }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.idCliente = i.idCliente
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serieVenta
            doccompra.numeroDoc = i.numeroVenta
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Function GetCuentasXPagarTodoClientes(strEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As DateTime, StrMoneda As String, estadocob As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)
        Dim listaTerminos As New List(Of String)
        listaTerminos.Add("CREDITO")
        listaTerminos.Add("CRONOGRAMA")
        listaTerminos.Add("CONTADO")

        Dim con = (From c In HeliosData.documentoventaAbarrotes
                   Join cli In HeliosData.entidad
                           On cli.idEntidad Equals c.idCliente
                   Where
                  (New String() {TIPO_VENTA.NOTA_DE_VENTA, "VNS", "VTAG", "VPOS", "VAO", "VAR", TIPO_VENTA.VENTA_ELECTRONICA}).Contains(c.tipoVenta) And
                   c.idEmpresa = strEmpresa And c.idEstablecimiento = intIdEstablecimiento _
                       And c.fechaDoc.Value.Year = strPeriodo.Year _
                       And c.fechaDoc.Value.Month = strPeriodo.Month _
                       And c.moneda = StrMoneda And listaTerminos.Contains(c.terminos) _
                       And c.estadoCobro = estadocob _
                       And c.estadoCobro <> "ANU"
                   Select
                  c.idDocumento,
                       c.idCliente,
                       cli.nombreCompleto,
                       cli.nrodoc,
                  c.tipoVenta,
                  c.fechaPeriodo,
                  c.fechaDoc,
                  c.serieVenta,
                  c.numeroVenta,
                  c.tipoDocumento,
                  c.moneda,
                  c.ImporteNacional,
                  c.tipoCambio,
                  c.ImporteExtranjero,
                  c.estadoCobro,
                  PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       Exedente = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                 Where
                                                 (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.ImporteNacional
                                                 }) Into Sum(t1.ImporteNacional)), Decimal?)),
                             Conteo = ((Aggregate t1 In
                                        (From cro In HeliosData.Cronograma
                                         Where
                                         cro.idDocumentoRef = c.idDocumento And
                                         cro.estado = "PN"
                                         Select New With {
                                                cro
                                         }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.idCliente = i.idCliente
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serieVenta
            doccompra.numeroDoc = i.numeroVenta
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Function GetCuentaCobrarSelCliente(strPeriodo As DateTime, StrMoneda As String, intIdCliente As Integer, terminos As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim con = (From c In HeliosData.documentoventaAbarrotes
                   Join cli In HeliosData.entidad
                           On cli.idEntidad Equals c.idCliente
                   Where
                  (New String() {TIPO_VENTA.NOTA_DE_VENTA, "VNS", "VTAG", "VPOS", "VAO", "VAR", TIPO_VENTA.VENTA_ELECTRONICA}).Contains(c.tipoVenta) And
                        c.idCliente = intIdCliente _
                       And c.fechaDoc.Value.Year = strPeriodo.Year _
                       And c.fechaDoc.Value.Month = strPeriodo.Month _
                       And c.moneda = StrMoneda _
                       And c.terminos = terminos _
                       And c.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO _
                       And c.estadoCobro <> "ANU"
                   Select
                       c.idDocumento,
                       c.idCliente,
                       cli.nombreCompleto,
                       cli.nrodoc,
                       c.tipoVenta,
                       c.fechaPeriodo,
                       c.fechaDoc,
                       c.serieVenta,
                       c.numeroVenta,
                       c.tipoDocumento,
                       c.moneda,
                       c.ImporteNacional,
                       c.tipoCambio,
                       c.ImporteExtranjero,
                       c.estadoCobro,
                       PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       Exedente = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                 Where
                                                 (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.ImporteNacional
                                                 }) Into Sum(t1.ImporteNacional)), Decimal?))).ToList


        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.idCliente = i.idCliente
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serieVenta
            doccompra.numeroDoc = i.numeroVenta
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            doccompra.conteoCuotas = 0 'i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Function GetResumenCuentasXCobrarTerminos(strEmpresa As String, intIdEstablecimiento As Integer, FechaConsulta As DateTime, StrMoneda As String, estadocobro As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)
        Dim listaTerminos As New List(Of String)
        listaTerminos.Add("CREDITO")
        listaTerminos.Add("CRONOGRAMA")
        listaTerminos.Add("CONTADO")

        Dim con = (From c In HeliosData.documentoventaAbarrotes
                   Join cli In HeliosData.entidad
                       On cli.idEntidad Equals c.idCliente
                   Where
                  (New String() {TIPO_VENTA.NOTA_DE_VENTA, "VNS", "VTAG", "VPOS", "VAO", "VAR", TIPO_VENTA.VENTA_ELECTRONICA}).Contains(c.tipoVenta) _
                       And c.idEmpresa = strEmpresa _
                       And c.idEstablecimiento = intIdEstablecimiento _
                       And c.fechaDoc.Value.Year = FechaConsulta.Year _
                       And c.fechaDoc.Value.Month = FechaConsulta.Month _
                       And c.moneda = StrMoneda And listaTerminos.Contains(c.terminos) _
                       And c.estadoCobro = estadocobro _
                       And c.estadoCobro <> "ANU"
                   Group c By
                        c.idCliente, cli.nombreCompleto, cli.nrodoc, c.terminos, c.moneda
                       Into g = Group
                   Select
                       g,
                       TotalVentaMN = g.Sum(Function(c) c.ImporteNacional),
                       TotalVentaME = g.Sum(Function(c) c.ImporteExtranjero),
                       idCliente,
                       nombreCompleto,
                       nrodoc,
                       terminos,
                       moneda,
                       PagosMN = (CType((Aggregate t1 In
                                             (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                              Where
                                                  DocumentoCajaDetalle.documentoCaja.codigoProveedor = idCliente And
                                                  DocumentoCajaDetalle.documentoAfectado = g.FirstOrDefault.idDocumento
                                              Select New With {
                                                  DocumentoCajaDetalle.montoSoles
                                                  }) Into Sum(t1.montoSoles)), Decimal?)),
                       PagosME = (CType((Aggregate t1 In
                                             (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                              Where
                                                  DocumentoCajaDetalle.documentoCaja.codigoProveedor = idCliente And
                                                  DocumentoCajaDetalle.documentoAfectado = g.FirstOrDefault.idDocumento
                                              Select New With {
                                                  DocumentoCajaDetalle.montoUsd
                                                  }) Into Sum(t1.montoUsd)), Decimal?))).ToList


        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idCliente = i.idCliente
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.terminos = i.terminos
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.TotalVentaMN.GetValueOrDefault
            doccompra.ImporteExtranjero = i.TotalVentaME.GetValueOrDefault
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            'doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
            'doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            'doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            'doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            'doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next

        Return lista
    End Function

    Public Function GetCobroPorCliente(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim con = (From c In HeliosData.documentoventaAbarrotes
                   Join cli In HeliosData.entidad
                           On cli.idEntidad Equals c.idCliente
                   Where
                  (New String() {TIPO_VENTA.NOTA_DE_VENTA, "VNS", "VTAG", "VPOS", "VAO", "VAR", TIPO_VENTA.VENTA_ELECTRONICA}).Contains(c.tipoVenta) _
                       And c.idEmpresa = be.idEmpresa _
                       And c.idEstablecimiento = be.idEstablecimiento _
                       And c.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                       And c.moneda = be.moneda _
                       And c.idCliente = be.idCliente _
                       And c.estadoCobro = be.estadoCobro _
                       And c.estadoCobro <> "ANU"
                   Select
                       c.idDocumento,
                       c.idCliente,
                       cli.nombreCompleto,
                       cli.nrodoc,
                       c.tipoVenta,
                       c.fechaPeriodo,
                       c.fechaDoc,
                       c.serieVenta,
                       c.numeroVenta,
                       c.tipoDocumento,
                       c.moneda,
                       c.ImporteNacional,
                       c.tipoCambio,
                       c.ImporteExtranjero,
                       c.estadoCobro,
                       PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                       PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                       PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901", "20"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Not Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       Exedente = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentoventaAbarrotes
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoVenta = "EXD"
                                           Select New With {
                                               Documentocompra.ImporteNacional
                                           }) Into Sum(t1.ImporteNacional)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                 Where
                                                 (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.ImporteNacional
                                                 }) Into Sum(t1.ImporteNacional)), Decimal?)),
                             Conteo = ((Aggregate t1 In
                                        (From cro In HeliosData.Cronograma
                                         Where
                                         cro.idDocumentoRef = c.idDocumento And
                                         cro.estado = "PN"
                                         Select New With {
                                                cro
                                         }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.idCliente = i.idCliente
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serieVenta
            doccompra.numeroDoc = i.numeroVenta
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Function UbicarExcedenteVentaPorClienteXperiodo(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As Integer, strPeriodo As String, intmoneda As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        'Dim consulta = (From n In HeliosData.documentoventaAbarrotes _
        '        Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento _
        '        And n.idCliente = strRuc And n.fechaPeriodo = strPeriodo And n.tipoVenta = "EXD" Order By n.fechaDoc).ToList


        'Dim consulta2 = (From n In HeliosData.documentoventaAbarrotes _
        '               Group Join cajadet In HeliosData.documentoCajaDetalle _
        '               On n.idDocumento Equals cajadet.documentoAfectado _
        '               Into ords = Group _
        '               From c In ords.DefaultIfEmpty _
        '               Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento _
        '               And n.idCliente = strRuc And n.fechaPeriodo = strPeriodo And n.tipoVenta = "EXD" _
        '               Group c By n.idDocumento, n.tipoVenta, n.fechaPeriodo, n.fechaDoc,
        '               n.serie, n.numeroDocNormal, n.tipoDocumento, n.moneda, n.ImporteNacional, n.tipoCambio,
        '               n.ImporteExtranjero, n.estadoCobro Into g = Group _
        '               Select New With {
        '                              .idDocumento = idDocumento,
        '                              .tipoVenta = tipoVenta,
        '                              .fechaPeriodo = fechaPeriodo,
        '                              .fechaDoc = fechaDoc,
        '                              .serie = serie,
        '                              .numeroDoc = numeroDocNormal,
        '                              .tipoDocumento = tipoDocumento,
        '                              .moneda = moneda,
        '                              .ImporteNacional = ImporteNacional,
        '                              .tipoCambio = tipoCambio,
        '                              .ImporteExtranjero = ImporteExtranjero,
        '                              .estadoCobro = estadoCobro,
        '                              .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
        '                              .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        Dim con = (From c In HeliosData.documentoventaAbarrotes
                   Where
                 (New String() {"EXD"}).Contains(c.tipoVenta) And
                  c.idEmpresa = strEmpresa And c.idEstablecimiento = intIdEstablecimiento _
                      And c.idCliente = strRuc And c.fechaPeriodo = strPeriodo _
                      And c.moneda = intmoneda
                   Select
                 c.idDocumento,
                 c.tipoVenta,
                 c.fechaPeriodo,
                 c.fechaDoc,
                 c.serie,
                 c.numeroDoc,
                 c.numeroDocNormal,
                 c.tipoDocumento,
                 c.moneda,
                 c.ImporteNacional,
                 c.tipoCambio,
                 c.ImporteExtranjero,
                 c.estadoCobro,
                 PagosMN = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoSoles
                                    }) Into Sum(t1.montoSoles)), Decimal?)),
                PagosME = (CType((Aggregate t1 In
                                  (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                   Where
                                   DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                   Select New With {
                                       DocumentoCajaDetalle.montoUsd
                                   }) Into Sum(t1.montoUsd)), Decimal?)),
               PagoNotaCredito = (CType((Aggregate t1 In
                                         (From Documentocompra In HeliosData.documentoventaAbarrotes
                                          Where
                                          (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDocumento) And
                                          Documentocompra.idPadre = c.idDocumento
                                          Select New With {
                                              Documentocompra.ImporteNacional
                                          }) Into Sum(t1.ImporteNacional)), Decimal?)),
                      PagoNotaDebito = (CType((Aggregate t1 In
                                               (From Documentocompra In HeliosData.documentoventaAbarrotes
                                                Where
                                                (New String() {"08", "88"}).Contains(Documentocompra.tipoDocumento) And
                                                Documentocompra.idPadre = c.idDocumento
                                                Select New With {
                                                    Documentocompra.ImporteNacional
                                                }) Into Sum(t1.ImporteNacional)), Decimal?))).ToList




        For Each i In con
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.numeroDocNormal = i.numeroDocNormal
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.estadoCobro = i.estadoCobro
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function SaveVentaNormalAlCredito(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen)) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim codVenta As Integer
        Dim x As New documentoGuia
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.nroDoc, objDocumento.idCentroCosto, objDocumento.idEmpresa, objDocumento.tipoDoc) = True Then
                    DocumentoBL.Insert(objDocumento)
                    codVenta = objDocumento.idDocumento
                    Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        inventario.InsertVentaPagada(i, objDocumento)
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                    ' guiaBL.InsertGuia(objDocumento.documentoGuia, objDocumento.idDocumento)
                    objDocumento.documentoGuia.CodigoVenta = codVenta
                    guiaBL.InsertGuiaVenta(objDocumento.documentoGuia, objDocumento.idDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub UpdateVentaNormal(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen))
        Dim DocumentoBL As New documentoBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim documentoGuiBL As New documentoGuiaBL
        Dim AsientoBL As New AsientoBL
        Try
            Using ts As New TransactionScope()

                Dim consulta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault

                '  If consulta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO Then
                DocumentoBL.Update(objDocumento)
                objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                Me.Update(objDocumento.documentoventaAbarrotes)
                AsientoBL.DeleteGroup(objDocumento.idDocumento)
                inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                objTotalesAlmacen.UpdateSingleListaVentaTicket(listaTotales, objDeleteTotales)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    compraDetalleBL.Update(i, objDocumento.tipoDoc)
                    'AQUI SE INSERTAN DATOS AL ALMACEN
                    If i.Action <> BaseBE.EntityAction.DELETE Then
                        inventario.InsertVentaPagada(i, objDocumento)
                    End If
                Next
                If Not IsNothing(objDocumento.documentoGuia) Then
                    documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        documentoGuiBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If
                End If
                AsientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                'Else
                'Throw New Exception("El documento está cobrado!!")
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
#End Region

    Public Sub EliminarNotaCreditoMetodoVenta(obj As documento)
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope
                Dim ventaDetalle As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = obj.idDocumento).ToList
                EliminarNotaCreditoMetodoVenta_SPC(obj, ventaDetalle)

                Dim ListaArticulos = (From n In ventaDetalle
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct().ToList()


                For Each a In ListaArticulos
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.idAlmacenOrigen,
                                                                                                      .fecha = New DateTime(obj.documentoventaAbarrotes.fechaDoc.Value.Year,
                                                                                                                            obj.documentoventaAbarrotes.fechaDoc.Value.Month, 1),
                                                                                                      .tipoProducto = a.tipoExistencia,
                                                                                                      .idItem = a.idItem,
                                                                                                      .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub EliminarNotaCreditoMetodoVenta_SPC(obj As documento, compraDetalle As List(Of documentoventaAbarrotesDet))
        Dim t As New totalesAlmacen
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                'If TieneNotasCD(obj.IdDocumentoAfectado) = True Then
                '    Throw New Exception("No puede eliminar cuando existan varias referencias!!")
                'Else
                Dim NotaCredito = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = obj.idDocumento).FirstOrDefault
                Dim venta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = obj.IdDocumentoAfectado).FirstOrDefault
                obj.documentoventaAbarrotes = New documentoventaAbarrotes
                obj.documentoventaAbarrotes.fechaDoc = NotaCredito.fechaDoc
                For Each i In compraDetalle
                    Select Case i.tipoVenta
                        Case "9914", "9916" 'DISMI IMPORTE, DEV EXIST
                            Select Case i.tipoExistencia
                                Case "GS"

                                Case Else
                                    't = New totalesAlmacen
                                    't.idEmpresa = obj.idEmpresa
                                    't.idEstablecimiento = obj.idCentroCosto
                                    't.idAlmacen = i.idAlmacenOrigen
                                    't.origenRecaudo = i.destino
                                    't.idItem = i.idItem
                                    't.cantidad = i.monto1 * -1
                                    't.precioUnitarioCompra = i.precioUnitario
                                    't.importeSoles = i.salidaCostoMN * -1
                                    't.importeDolares = i.salidaCostoME * -1
                                    'totalesBL.UpdateSingle2(t)
                            End Select
                    End Select
                Next
                inventarioBL.DeleteInventarioPorDocumento(obj.idDocumento)

                Dim listaHijas = (From n In HeliosData.documentoventaAbarrotes Where n.tipoDocumento = "07" _
                               AndAlso n.idPadre = venta.idDocumento AndAlso n.tipoVenta = "EXD").ToList



                For Each i In listaHijas
                    documentoCajaDetalleBL.DeleteDocumentoCaja(i.idDocumento)
                    documentoBL.DeleteSingleVariable(i.idDocumento)
                Next


                documentoBL.DeleteSingle2Free(obj)
                If Not venta.tipoVenta = "VTK" Then  'no actualziar en los tikets

                    documentoCajaDetalleBL.ActualizarItemsPagosFull(obj.IdDocumentoAfectado)

                End If

                Dim ventaDetalle = (From n In HeliosData.documentoventaAbarrotesDet
                                    Where n.idDocumento = venta.idDocumento AndAlso n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO).Count

                If ventaDetalle > 0 Then
                    venta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                Else
                    venta.estadoCobro = TIPO_VENTA.PAGO.COBRADO
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    'Public Sub EliminarNotaCreditoMetodoVenta(obj As documento)
    '    Dim t As New totalesAlmacen
    '    Dim totalesBL As New totalesAlmacenBL
    '    Dim inventarioBL As New InventarioMovimientoBL
    '    Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
    '    Dim documentoBL As New documentoBL
    '    Try
    '        Using ts As New TransactionScope
    '            'If TieneNotasCD(obj.IdDocumentoAfectado) = True Then
    '            '    Throw New Exception("No puede eliminar cuando existan varias referencias!!")
    '            'Else
    '            Dim venta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = obj.IdDocumentoAfectado).FirstOrDefault
    '            Dim compraDetalle As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = obj.idDocumento).ToList
    '            For Each i In compraDetalle
    '                Select Case i.tipoVenta
    '                    Case "9914", "9916" 'DISMI IMPORTE, DEV EXIST
    '                        Select Case i.tipoExistencia
    '                            Case "GS"

    '                            Case Else
    '                                t = New totalesAlmacen
    '                                t.idEmpresa = obj.idEmpresa
    '                                t.idEstablecimiento = obj.idCentroCosto
    '                                t.idAlmacen = i.idAlmacenOrigen
    '                                t.origenRecaudo = i.destino
    '                                t.idItem = i.idItem
    '                                t.cantidad = i.monto1
    '                                t.precioUnitarioCompra = i.precioUnitario
    '                                t.importeSoles = i.salidaCostoMN
    '                                t.importeDolares = i.salidaCostoME
    '                                totalesBL.UpdateSingle2(t)
    '                        End Select
    '                End Select
    '            Next
    '            inventarioBL.DeleteInventarioPorDocumento(obj.idDocumento)
    '            documentoCajaDetalleBL.DeleteDocumentoCaja(obj.idDocumento)

    '            Dim listaHijas = (From n In HeliosData.documentoventaAbarrotes Where n.tipoDocumento = "07" _
    '                             AndAlso n.idPadre = obj.idDocumento AndAlso n.tipoVenta = "EXD").ToList

    '            For Each i In listaHijas
    '                documentoCajaDetalleBL.DeleteDocumentoCaja(i.idDocumento)
    '                documentoBL.DeleteSingleVariable(i.idDocumento)
    '            Next
    '            documentoBL.DeleteSingle2Free(obj)

    '            documentoCajaDetalleBL.ActualizarItemsPagosFull(obj.IdDocumentoAfectado)

    '            Dim ventaDetalle = (From n In HeliosData.documentoventaAbarrotesDet _
    '                          Where n.idDocumento = venta.idDocumento AndAlso n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO).Count

    '            If ventaDetalle > 0 Then
    '                venta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO
    '            Else
    '                venta.estadoCobro = TIPO_VENTA.PAGO.COBRADO
    '            End If

    '            HeliosData.SaveChanges()
    '            ts.Complete()
    '            'End If
    '        End Using
    '    Catch ex As Exception
    '        Throw ex
    '    End Try
    'End Sub

    Public Sub EliminarNotaDebitoVenta(obj As documento)
        Dim t As New totalesAlmacen
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                'If TieneNotasCD(obj.IdDocumentoAfectado) = True Then
                '    Throw New Exception("No puede eliminar cuando existan varias referencias!!")
                'Else
                Dim venta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = obj.IdDocumentoAfectado).FirstOrDefault
                documentoCajaDetalleBL.DeleteDocumentoCaja(obj.idDocumento)

                'Dim listaHijas = (From n In HeliosData.documentoventaAbarrotes Where n.tipoDocumento = "08" _
                '                 AndAlso n.idPadre = obj.idDocumento AndAlso n.tipoVenta = "EXD").ToList

                'For Each i In listaHijas
                '    documentoCajaDetalleBL.DeleteDocumentoCaja(i.idDocumento)
                '    documentoBL.DeleteSingleVariable(i.idDocumento)
                'Next

                Dim cajaDetalle = (From n In HeliosData.documentoCajaDetalle
                                   Where n.documentoAfectado = obj.IdDocumentoAfectado And n.montoSoles = obj.ImporteMN _
                                  AndAlso n.montoUsd = obj.ImporteME).FirstOrDefault

                If Not IsNothing(cajaDetalle) Then
                    documentoCajaDetalleBL.DeleteDocumentoCaja(cajaDetalle.idDocumento)
                    documentoBL.DeleteSingleVariable(cajaDetalle.idDocumento)
                End If

                documentoBL.DeleteSingle2Free(obj)

                documentoCajaDetalleBL.ActualizarItemsPagosFull(obj.IdDocumentoAfectado)

                Dim ventaDetalle = (From n In HeliosData.documentoventaAbarrotesDet
                                    Where n.idDocumento = venta.idDocumento AndAlso n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO).Count

                If ventaDetalle > 0 Then
                    venta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                Else
                    venta.estadoCobro = TIPO_VENTA.PAGO.COBRADO
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Function InsertNotaCreditoVenta(objDocumento As documento, nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
        Dim DocumentoBL As New documentoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim CAN_BOF As Decimal = 0
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0

        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0
        Dim cajaBL As New documentoCajaDetalleBL
        Dim t As New totalesAlmacen
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Dim venta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.idPadre).FirstOrDefault

                Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    Dim itemDetalle = ventaDetalleBL.GetUbicar_documentoventaAbarrotesDetPorID(i.secuencia)
                    i.codigoLote = itemDetalle.codigoLote
                    ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                    'VALIDANDO ITEMS INGRESADOS COMO NOTA DE CREDITO
                    cajaBL.ActualizarItemsPagos(i, objDocumento.documentoventaAbarrotes.idPadre)
                    '--------------------------------------------------------

                    If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                        Select Case i.TipoOperacion
                            Case "9916" ' DEVOLUCION DE EXISTENCIAS
                                i.codigoLote = itemDetalle.codigoLote
                                inventario.InsertNotaCreditoVenta(i, objDocumento)

                                't = New totalesAlmacen
                                't.idEmpresa = i.IdEmpresa
                                't.idEstablecimiento = i.IdEstablecimiento
                                't.idAlmacen = i.idAlmacenOrigen
                                't.origenRecaudo = i.destino
                                't.idItem = i.idItem
                                ''t.cantidad = i.monto1
                                ''t.precioUnitarioCompra = 0
                                't.importeSoles = i.salidaCostoMN
                                't.importeDolares = i.salidaCostoME
                                't.cantidad = i.monto1
                                ''t.precioUnitarioCompra = i.precioUnitario
                                't.precioUnitarioCompra = 0
                                ''t.importeSoles = i.montokardex
                                ''t.importeDolares = i.montokardexUS

                                'totalesBL.UpdateSingle2(t)

                        End Select
                    End If
                Next

                If Not IsNothing(objDocumento.documentoGuia) Then
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If
                End If

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If
                'Cobrando Saldo de la venta cuando es una venta al credito
                '    If objDocumento.documentoventaAbarrotes.ImporteDevMN > 0 Then
                'If objDocumento.documentoventaAbarrotes.SaldoVentaMN > 0 Then
                If Not IsNothing(nDocumentoSaldoVenta.documentoCaja) Then
                    If Not IsNothing(nDocumentoSaldoVenta.documentoCaja.idEmpresa) Then
                        SaveCaja(nDocumentoSaldoVenta, objDocumento.documentoventaAbarrotes.idPadre)
                    End If
                End If

                '-----------------------------------------------------------------------------------
                'creando documento de excendente por devolucion de dinero
                If Not IsNothing(objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion) Then
                    Dim codGenerado = GrabarDocumentoDevolucion(objDocumento)
                    Select Case objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion
                        Case TIPO_VENTA.PAGO.COBRADO
                            If Not IsNothing(nDocumentoNota.idEmpresa) Then
                                Dim listaPagos As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = codGenerado).ToList
                                SaveCajaVenta(nDocumentoNota, codGenerado, listaPagos)
                            End If
                        Case TIPO_VENTA.PAGO.PENDIENTE_PAGO

                    End Select

                End If


                Dim ventaDetalle = (From n In HeliosData.documentoventaAbarrotesDet
                                    Where n.idDocumento = venta.idDocumento AndAlso n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO).Count

                If ventaDetalle > 0 Then
                    venta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                Else
                    'venta.estadoCobro = TIPO_VENTA.PAGO.COBRADO
                    venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito
                End If
                'venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito

                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function SaveVentaNotaCredito2(objDocumento As documento, nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()

                Dim codVentaOriginal = objDocumento.documentoventaAbarrotes.idPadre
                Dim listaArticulosVendidos = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = codVentaOriginal).ToList

                Dim codDoc = InsertNotaCreditoVenta(objDocumento, nDocumentoNota, nDocumentoSaldoVenta)
                If listaArticulosVendidos.Count > 0 Then
                    Dim fechaEnvioAlmacen = objDocumento.documentoventaAbarrotes.fechaDoc.Value 'be.documentoventaAbarrotes.fechaConfirmacion.Value.Date
                    For Each a In listaArticulosVendidos
                        Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                        New InventarioMovimiento With {
                        .idAlmacen = a.idAlmacen,
                        .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                        .tipoProducto = a.tipoProducto,
                        .idItem = a.idItem,
                        .nrolote = a.nrolote}, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(lista)
                    Next
                End If
                'Dim ListaArticulos = (From n In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                '                      Where n.tipoExistencia <> "GS"
                '                      Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct.ToList


                'For Each a In ListaArticulos
                '    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.idAlmacenOrigen,
                '                                                                                                     .fecha = New DateTime(objDocumento.documentoventaAbarrotes.fechaDoc.Value.Year,
                '                                                                                                                           objDocumento.documentoventaAbarrotes.fechaDoc.Value.Month, 1),
                '                                                                                                     .tipoProducto = a.tipoExistencia,
                '                                                                                                     .idItem = a.idItem,
                '                                                                                                     .nrolote = a.codigoLote}, Nothing)
                '    totalesBL.GetCurarKardexCaberas(listaAcurar)
                'Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return codDoc
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function SaveVentaNotaDebito(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim CAN_BOF As Decimal = 0
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0

        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0
        Dim cajaBL As New documentoCajaDetalleBL
        Dim t As New totalesAlmacen
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)

                Dim venta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.idPadre).FirstOrDefault

                Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet

                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                    'VALIDANDO ITEMS INGRESADOS COMO NOTA DE CREDITO
                    cajaBL.ActualizarItemsPagos(i, objDocumento.documentoventaAbarrotes.idPadre)
                    '--------------------------------------------------------
                Next

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If


                Dim ventaDetalle = (From n In HeliosData.documentoventaAbarrotesDet
                                    Where n.idDocumento = venta.idDocumento AndAlso n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO).Count

                If ventaDetalle > 0 Then
                    venta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                Else
                    venta.estadoCobro = TIPO_VENTA.PAGO.COBRADO
                End If


                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Function ConteoReclamaciones(tipoDoc As String)
        Dim conteo = (From i In HeliosData.documentoventaAbarrotes
                      Where i.tipoDocumento = tipoDoc).Count
        conteo = conteo + 1
        Return conteo
    End Function

    Function GrabarDocumentoDevolucion(objDocumento As documento) As Integer
        Dim documentoBL As New documentoBL
        Dim n As New documentoventaAbarrotesDet

        'Dim codDoc As Integer
        Try
            Using ts As New TransactionScope
                ' codDoc = objDocumento.idDocumento
                documentoBL.Insert(objDocumento)
                objDocumento.documentoventaAbarrotes.tipoVenta = "EXD"
                objDocumento.documentoventaAbarrotes.glosa = "Por devolución de dinero"
                'objDocumento.documentoventaAbarrotes.idPadre = codDoc
                Select Case objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion
                    Case TIPO_VENTA.PAGO.COBRADO
                        objDocumento.documentoventaAbarrotes.estadoCobro = "PG"
                    Case TIPO_VENTA.PAGO.PENDIENTE_PAGO
                        objDocumento.documentoventaAbarrotes.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                End Select

                Dim numeroRec = ConteoReclamaciones("9910")
                objDocumento.documentoventaAbarrotes.tipoDocumento = "9910"
                objDocumento.documentoventaAbarrotes.numeroDoc = numeroRec
                objDocumento.documentoventaAbarrotes.numeroVenta = numeroRec
                objDocumento.documentoventaAbarrotes.serieVenta = "RECN"
                objDocumento.documentoventaAbarrotes.tipoOperacion = "9920"
                objDocumento.documentoventaAbarrotes.estado = "1"

                InsertCabeceraVentaExcedente(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    If i.TieneExcedente = True Then
                        n = New documentoventaAbarrotesDet
                        n.idDocumento = objDocumento.idDocumento
                        n.idAlmacenOrigen = i.idAlmacenOrigen
                        n.establecimientoOrigen = i.IdEstablecimiento
                        n.cuentaOrigen = Nothing
                        n.idItem = i.idItem
                        n.nombreItem = i.nombreItem
                        n.fechaVcto = Nothing
                        n.tipoExistencia = i.tipoExistencia
                        n.destino = i.destino
                        n.unidad1 = i.unidad1
                        n.monto1 = i.monto1
                        n.unidad2 = i.unidad2
                        n.monto2 = i.monto2
                        n.precioUnitario = i.precioUnitario
                        n.precioUnitarioUS = i.precioUnitarioUS
                        n.importeMN = i.ImporteDevolucionmn
                        n.importeME = i.ImporteDevolucionme
                        n.importeMNK = 0
                        n.importeMEK = 0
                        n.descuentoMN = 0
                        n.descuentoME = 0
                        n.montokardex = i.BiDevolucionmn
                        n.montoIsc = 0
                        n.montoIgv = i.IgvDevolucionmn
                        n.otrosTributos = 0
                        n.montokardexUS = 0
                        n.montoIscUS = 0
                        n.montoIgvUS = 0
                        n.otrosTributosUS = 0
                        n.salidaCostoMN = 0
                        n.salidaCostoME = 0
                        n.cantidadCredito = 0
                        n.cantidadDebito = 0
                        n.notaCreditoMN = i.notaCreditoMN
                        n.notaCreditoME = 0
                        n.notaDebitoMN = 0
                        n.notaDebitoME = 0
                        n.preEvento = Nothing
                        n.idPadreDTVenta = i.idPadreDTVenta
                        n.estadoMovimiento = Nothing
                        n.tipoVenta = "EXD"
                        Select Case objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion
                            Case TIPO_VENTA.PAGO.COBRADO
                                n.entregado = "S"
                                n.estadoPago = "PG"
                            Case TIPO_VENTA.PAGO.PENDIENTE_PAGO
                                n.entregado = "N"
                                n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                        End Select
                        n.usuarioModificacion = i.usuarioModificacion
                        n.fechaModificacion = i.fechaModificacion
                        HeliosData.documentoventaAbarrotesDet.Add(n)
                    End If
                Next
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return objDocumento.idDocumento
    End Function


    Public Function SaveVentaNotaCredito(objDocumento As documento, intIdDocumentoBaseCompra As Integer) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim listaVenta As New List(Of documentoventaAbarrotesDet)
        Dim asientoBL As New AsientoBL
        Try
            Using ts As New TransactionScope()
                '    DocumentoBL.Insert(objDocumento)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    listaVenta.Add(i)
                Next
                Me.InsertSingleVentaAlCredito(objDocumento.documentoventaAbarrotes, intIdDocumentoBaseCompra)
                For Each i In listaVenta
                    compraDetalleBL.InsertSingle(i, intIdDocumentoBaseCompra)
                Next
                '     asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                'objDocumento.idOrden = objDocumento.documentoventaAbarrotes.numeroDoc
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Function ValidarDocumentoNro(strNumDoc As String, intIdEstable As Integer, strEmpresa As String, strTipoDoc As String) As Boolean
        Dim consulta = HeliosData.documento.Where(Function(o) o.idEmpresa = strEmpresa And o.idCentroCosto = intIdEstable _
                                                         And o.nroDoc = strNumDoc _
                                                         And o.tipoDoc = strTipoDoc).FirstOrDefault

        If IsNothing(consulta) Then
            Return True
        Else
            Return False
        End If

    End Function

    Public Function SaveVentaALCredito(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen)) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Try
            Using ts As New TransactionScope()

                If ValidarDocumentoNro(objDocumento.nroDoc, objDocumento.idCentroCosto, objDocumento.idEmpresa, objDocumento.tipoDoc) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Me.InsertSingleVentaAlCredito(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        inventario.InsertVentaPagada(i, objDocumento)
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                    guiaBL.InsertGuia(objDocumento.documentoGuia, objDocumento.idDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function SaveVentaPagada(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen), objDocumentoCaja As documento,
                                    cajaUsuario As cajaUsuario) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim CajaUsuarioBL As New CajaUsuarioBL
        Dim guiaBL As New documentoGuiaBL
        Try
            Using ts As New TransactionScope()

                If ValidarDocumentoNro(objDocumento.nroDoc, objDocumento.idCentroCosto, objDocumento.idEmpresa, objDocumento.tipoDoc) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Me.InsertSingleVentaAlCredito(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        inventario.InsertVentaPagada(i, objDocumento)
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                    CajaUsuarioBL.ActualizarMontoCajaUsuario(cajaUsuario)
                    SaveCaja(objDocumentoCaja, objDocumento.idDocumento)
                    guiaBL.InsertGuia(objDocumento.documentoGuia, objDocumento.idDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function SaveOtrasSalidas(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen)) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    inventario.InsertOtrasSalidasAlmacen(i, objDocumento)
                Next
                asientoBL.SavebyGroupDoc(objDocumento)
                totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento

            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Function SaveVentaDirectaTicket(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen),
                                           objDocumentoCaja As documento,
                                           cajaUsuario As cajaUsuario) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL

        'Dim cajaUsuarioBL As New CajaUsuarioBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Select Case objDocumento.documentoventaAbarrotes.TipoConfiguracion
                    Case "M"
                        '      Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                    Case "P"
                        Me.InsertSingle(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                End Select
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    inventario.InsertVentaPagada(i, objDocumento)
                Next
                asientoBL.SavebyGroupDoc(objDocumento)
                totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                objDocumento.idOrden = objDocumento.documentoventaAbarrotes.numeroDoc
                objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroDoc
                objDocumentoCaja.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroDoc
                SaveCaja(objDocumentoCaja, objDocumento.idDocumento)

                '    cajaUsuarioBL.ActualizarMontoCajaUsuario(cajaUsuario)

                Dim docUpate As documento = HeliosData.documento.Where(Function(o) o.idDocumento = objDocumento.idDocumento).First
                docUpate.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroDoc
                'HeliosData.ObjectStateManager.GetObjectStateEntry(docUpate).State.ToString()
                HeliosData.SaveChanges()
                ts.Complete()

                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Property docCodigoCaja As Integer = 0
    'VENTA TICKET
    Public Function SaveVenta(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen)) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        'Dim asientoBL As New AsientoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Me.InsertSingle(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                        i.secuencia = codSecuenciaDetalle
                        i.NumDoc = objDocumento.documentoventaAbarrotes.numeroDoc
                        inventario.InsertVentaPagada(i, objDocumento)

                        'actualizando cabecera total almacen
                        t = New totalesAlmacen
                        t.idEmpresa = i.IdEmpresa
                        t.idEstablecimiento = i.IdEstablecimiento
                        t.idAlmacen = i.idAlmacenOrigen
                        t.origenRecaudo = i.destino
                        t.idItem = i.idItem
                        t.cantidad = i.monto1 * -1
                        t.precioUnitarioCompra = i.precioUnitario * -1
                        t.importeSoles = i.salidaCostoMN * -1
                        t.importeDolares = i.salidaCostoME * -1
                        totalesBL.UpdateSingle2(t)
                    End If
                Next
                HeliosData.SaveChanges()
                ts.Complete()
                objDocumento.idOrden = objDocumento.documentoventaAbarrotes.numeroDoc
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub GrabarCuetasPorCobrarApertura(be As List(Of documento))
        Dim DocumentoBL As New documentoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Try
            Using ts As New TransactionScope()
                For Each i In be
                    DocumentoBL.Insert(i)
                    Dim codigoComprobante = i.idDocumento

                    Me.InsertCabeceraVenta(i.documentoventaAbarrotes, codigoComprobante)
                    For Each det In i.documentoventaAbarrotes.documentoventaAbarrotesDet
                        ventaDetalleBL.InsertSingle(det, codigoComprobante)
                    Next
                Next
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub


    Public Function GrabarVentaGeneral(objDocumento As documento) As List(Of totalesAlmacen)
        Dim DocumentoBL As New documentoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cajaBL As New documentoCajaBL
        Dim guiaBL As New documentoGuiaBL
        Dim t As New totalesAlmacen
        Dim listaTortalesAlmacen As New List(Of totalesAlmacen)
        Try
            Using ts As New TransactionScope()

                objDocumento.fechaActualizacion = DateTime.Now
                DocumentoBL.Insert(objDocumento)
                Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                Dim consultaExisteItemsCaja = (From n In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                                               Where n.estadoPago = TIPO_VENTA.PAGO.COBRADO).Count

                If consultaExisteItemsCaja > 0 Then
                    docCodigoCaja = cajaBL.InsertDocumentoCajaVenta(objDocumento.documentoventaAbarrotes)
                End If

                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                        i.secuencia = codSecuenciaDetalle
                        inventario.InsertVentaPagada(i, objDocumento)

                        'actualizando cabecera total almacen
                        t = New totalesAlmacen
                        t.idEmpresa = i.IdEmpresa
                        t.idEstablecimiento = i.IdEstablecimiento
                        t.idAlmacen = i.idAlmacenOrigen
                        t.origenRecaudo = i.destino
                        t.idItem = i.idItem
                        t.cantidad = i.monto1 * -1
                        t.precioUnitarioCompra = 0
                        t.importeSoles = (i.importeMNK * i.monto1) * -1
                        t.importeDolares = (i.importeMEK * i.monto1) * -1
                        listaTortalesAlmacen = totalesBL.UpdateTotalesVentas(t)

                    End If
                    If i.estadoPago = TIPO_VENTA.PAGO.COBRADO Then
                        cajaBL.InsertCajadetalleVenta(i, objDocumento.idDocumento, docCodigoCaja, codSecuenciaDetalle)
                    End If
                Next
                If ((listaTortalesAlmacen).Count = 0) Then
                    asientoBL.SavebyGroupDoc(objDocumento)
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        '   guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                    End If
                    HeliosData.SaveChanges()
                    ts.Complete()
                Else
                    Return listaTortalesAlmacen
                End If
                Return listaTortalesAlmacen
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub UpdateVenta(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen))
        Dim DocumentoBL As New documentoBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()

                Dim consulta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault

                If consulta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO Then
                    DocumentoBL.Update(objDocumento)
                    objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                    Me.Update(objDocumento.documentoventaAbarrotes)
                    inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                    objTotalesAlmacen.UpdateSingleListaVentaTicket(listaTotales, objDeleteTotales)
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.Update(i, objDocumento.tipoDoc)
                        'AQUI SE INSERTAN DATOS AL ALMACEN
                        If i.Action <> BaseBE.EntityAction.DELETE Then
                            inventario.InsertVentaPagada(i, objDocumento)
                        End If
                    Next
                    HeliosData.SaveChanges()
                    ts.Complete()
                Else
                    Throw New Exception("El documento está cobrado!!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub



    Public Function DocumentoCancelado(intIdDocumento As Integer) As String
        Dim valBool As String = Nothing

        Dim consulta = (From n In HeliosData.documentoventaAbarrotes
                        Where n.idDocumento = intIdDocumento).FirstOrDefault
        If Not IsNothing(consulta) Then
            If consulta.estadoCobro = TIPO_VENTA.PAGO.COBRADO Then
                valBool = TIPO_VENTA.PAGO.COBRADO
            ElseIf consulta.estadoCobro = TIPO_VENTA.VENTA_ANULADA Then
                valBool = TIPO_VENTA.VENTA_ANULADA
            ElseIf consulta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO Then
                valBool = TIPO_VENTA.PAGO.PENDIENTE_PAGO
            ElseIf consulta.estadoCobro = TIPO_VENTA.VENTA_NOTA_CREDITO Then
                valBool = TIPO_VENTA.VENTA_NOTA_CREDITO
            End If
        End If
        Return valBool
    End Function

    Public Function UpdateVentaALCredito(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen))
        Dim DocumentoBL As New documentoBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim AsientoBL As New AsientoBL
        Dim documentoGuiBL As New documentoGuiaBL
        Try
            Using ts As New TransactionScope()

                Dim nID = (From n In HeliosData.documentoventaAbarrotes
                           Where n.idDocumento = objDocumento.idDocumento).First

                If nID.numeroDoc = CStr(objDocumento.documentoventaAbarrotes.numeroDoc) _
                    And nID.serie = objDocumento.documentocompra.serie And
                    nID.idCliente = objDocumento.documentocompra.idProveedor Then

                    DocumentoBL.Update(objDocumento)

                    objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                    Me.UpdateVentaAlCredito(objDocumento.documentoventaAbarrotes)
                    AsientoBL.DeleteGroup(objDocumento.idDocumento)
                    inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                    objTotalesAlmacen.UpdateSingleListaVentaTicket(listaTotales, objDeleteTotales)
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.Update(i, objDocumento.tipoDoc)
                        'AQUI SE INSERTAN DATOS AL ALMACEN
                        If i.Action <> BaseBE.EntityAction.DELETE Then
                            inventario.InsertVentaPagada(i, objDocumento)
                        End If
                    Next
                    AsientoBL.SavebyGroupDoc(objDocumento)
                    documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                    documentoGuiBL.InsertGuia(objDocumento.documentoGuia, objDocumento.idDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return True
                Else
                    If ValidarDocumentoNro(objDocumento.nroDoc, objDocumento.idCentroCosto, objDocumento.idEmpresa, objDocumento.tipoDoc) = True Then
                        DocumentoBL.Update(objDocumento)
                        objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                        Me.UpdateVentaAlCredito(objDocumento.documentoventaAbarrotes)
                        AsientoBL.DeleteGroup(objDocumento.idDocumento)
                        inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                        objTotalesAlmacen.UpdateSingleListaVentaTicket(listaTotales, objDeleteTotales)
                        For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                            compraDetalleBL.Update(i, objDocumento.tipoDoc)
                            'AQUI SE INSERTAN DATOS AL ALMACEN
                            If i.Action <> BaseBE.EntityAction.DELETE Then
                                inventario.InsertVentaPagada(i, objDocumento)
                            End If
                        Next
                        AsientoBL.SavebyGroupDoc(objDocumento)
                        documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                        documentoGuiBL.InsertGuia(objDocumento.documentoGuia, objDocumento.idDocumento)
                        HeliosData.SaveChanges()
                        ts.Complete()
                        Return True
                    Else
                        Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                    End If

                End If

            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function UpdateVentaPagada(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen), objDocumentoCaja As documento,
                                       nCajaUsuarioMontos As cajaUsuario, nCajaUsuarioEliminar As cajaUsuario)
        Dim DocumentoBL As New documentoBL
        Dim documentocajaDetalleBL As New documentoCajaDetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim AsientoBL As New AsientoBL
        Dim CajaUsuarioBL As New CajaUsuarioBL
        Dim documentoGuiBL As New documentoGuiaBL
        Try
            Using ts As New TransactionScope()

                Dim nID = (From n In HeliosData.documento
                           Where n.idDocumento = objDocumento.idDocumento).First

                If nID.nroDoc = CStr(objDocumento.nroDoc) Then
                    DocumentoBL.Update(objDocumento)
                    objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                    Me.UpdateVentaAlCredito(objDocumento.documentoventaAbarrotes)
                    AsientoBL.DeleteGroup(objDocumento.idDocumento)
                    inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                    objTotalesAlmacen.UpdateSingleListaVentaTicket(listaTotales, objDeleteTotales)
                    CajaUsuarioBL.UpdateCajaUsuario(nCajaUsuarioMontos, nCajaUsuarioEliminar)
                    DocumentoBL.DeleteSinglePagado(documentocajaDetalleBL.RecuperarIDCompra(objDocumento.idDocumento)) 'ELIMINANDO DOCUMENTO CAJA
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.Update(i, objDocumento.tipoDoc)
                        'AQUI SE INSERTAN DATOS AL ALMACEN
                        If i.Action <> BaseBE.EntityAction.DELETE Then
                            inventario.InsertVentaPagada(i, objDocumento)
                        End If
                    Next
                    AsientoBL.SavebyGroupDoc(objDocumento)
                    SaveCaja(objDocumentoCaja, objDocumento.idDocumento)
                    documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                    documentoGuiBL.InsertGuia(objDocumento.documentoGuia, objDocumento.idDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return True
                Else
                    If ValidarDocumentoNro(objDocumento.nroDoc, objDocumento.idCentroCosto, objDocumento.idEmpresa, objDocumento.tipoDoc) = True Then
                        DocumentoBL.Update(objDocumento)
                        objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                        Me.UpdateVentaAlCredito(objDocumento.documentoventaAbarrotes)
                        AsientoBL.DeleteGroup(objDocumento.idDocumento)
                        inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                        objTotalesAlmacen.UpdateSingleListaVentaTicket(listaTotales, objDeleteTotales)
                        CajaUsuarioBL.UpdateCajaUsuario(nCajaUsuarioMontos, nCajaUsuarioEliminar)
                        DocumentoBL.DeleteSinglePagado(documentocajaDetalleBL.RecuperarIDCompra(objDocumento.idDocumento)) 'ELIMINANDO DOCUMENTO CAJA
                        For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                            compraDetalleBL.Update(i, objDocumento.tipoDoc)
                            'AQUI SE INSERTAN DATOS AL ALMACEN
                            If i.Action <> BaseBE.EntityAction.DELETE Then
                                inventario.InsertVentaPagada(i, objDocumento)
                            End If
                        Next
                        AsientoBL.SavebyGroupDoc(objDocumento)
                        SaveCaja(objDocumentoCaja, objDocumento.idDocumento)
                        documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                        documentoGuiBL.InsertGuia(objDocumento.documentoGuia, objDocumento.idDocumento)
                        HeliosData.SaveChanges()
                        ts.Complete()
                        Return True
                    Else
                        Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                    End If

                End If

            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub UpdateVentaNormalContado(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen), objDocumentoCaja As documento)
        Dim DocumentoBL As New documentoBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim documentoGuiBL As New documentoGuiaBL
        Dim AsientoBL As New AsientoBL
        Try
            Using ts As New TransactionScope()

                Dim consulta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault

                '  If consulta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO Then
                DocumentoBL.Update(objDocumento)
                objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                Me.Update(objDocumento.documentoventaAbarrotes)
                AsientoBL.DeleteGroup(objDocumento.idDocumento)
                inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                objTotalesAlmacen.UpdateSingleListaVentaTicket(listaTotales, objDeleteTotales)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    compraDetalleBL.Update(i, objDocumento.tipoDoc)
                    'AQUI SE INSERTAN DATOS AL ALMACEN
                    If i.Action <> BaseBE.EntityAction.DELETE Then
                        inventario.InsertVentaPagada(i, objDocumento)
                    End If
                Next
                If Not IsNothing(objDocumento.documentoGuia) Then
                    documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        documentoGuiBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If
                End If
                AsientoBL.SavebyGroupDoc(objDocumento)
                SaveCaja(objDocumentoCaja, objDocumento.idDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                'Else
                'Throw New Exception("El documento está cobrado!!")
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function UpdateVentaDirecta(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen), objDocumentoCaja As documento,
                                       nCajaUsuarioMontos As cajaUsuario, nCajaUsuarioEliminar As cajaUsuario)
        Dim DocumentoBL As New documentoBL
        Dim documentocajaDetalleBL As New documentoCajaDetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim AsientoBL As New AsientoBL
        Try
            Using ts As New TransactionScope()

                '    Dim consulta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault

                DocumentoBL.Update(objDocumento)
                objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                Me.Update(objDocumento.documentoventaAbarrotes)
                AsientoBL.DeleteGroup(objDocumento.idDocumento)
                inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                objTotalesAlmacen.UpdateSingleListaVentaTicket(listaTotales, objDeleteTotales)
                DocumentoBL.DeleteSinglePagado(documentocajaDetalleBL.RecuperarIDCompra(objDocumento.idDocumento)) 'ELIMINANDO DOCUMENTO CAJA
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    compraDetalleBL.Update(i, objDocumento.tipoDoc)
                    'AQUI SE INSERTAN DATOS AL ALMACEN
                    If i.Action <> BaseBE.EntityAction.DELETE Then
                        inventario.InsertVentaPagada(i, objDocumento)
                    End If
                Next
                AsientoBL.SavebyGroupDoc(objDocumento)
                SaveCaja(objDocumentoCaja, objDocumento.idDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                Return True
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Private Sub SaveCaja(nCaja As documento, intIdCompra As Integer)
        Dim DocumentoBL As New documentoBL
        Dim documentoCajaBL As New documentoCajaBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Using ts As New TransactionScope
            DocumentoBL.Insert(nCaja)
            nCaja.documentoCaja.numeroDoc = nCaja.nroDoc
            'nCaja.documentoCaja.tipoOperacion = "01"
            documentoCajaBL.Insert(nCaja.documentoCaja, nCaja.idDocumento)
            documentoCajaDetalleBL.Insert(nCaja, nCaja.idDocumento, intIdCompra)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Private Sub SaveCajaJPS_SS(nCaja As documento, intIdCompra As Integer, listaVenta As List(Of documentoventaAbarrotesDet))
        Dim nDetalle As documentoCajaDetalle
        Dim DocumentoBL As New documentoBL
        Dim documentoCajaBL As New documentoCajaBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Using ts As New TransactionScope
            DocumentoBL.Insert(nCaja)
            nCaja.documentoCaja.numeroDoc = nCaja.nroDoc
            'nCaja.documentoCaja.tipoOperacion = "01"
            documentoCajaBL.Insert(nCaja.documentoCaja, nCaja.idDocumento)
            For Each i In nCaja.documentoCaja.documentoCajaDetalle

                Dim articuloVenta = listaVenta _
                    .Where(Function(o) o.codigoLote = i.codigoLote AndAlso o.idItem = i.idItem).Single

                nDetalle = New documentoCajaDetalle
                nDetalle.idDocumento = nCaja.idDocumento
                nDetalle.documentoAfectado = intIdCompra
                nDetalle.documentoAfectadodetalle = articuloVenta.secuencia
                nDetalle.secuencia = i.secuencia
                nDetalle.fecha = i.fecha
                nDetalle.idItem = i.idItem
                nDetalle.DetalleItem = i.DetalleItem
                nDetalle.montoSoles = i.montoSoles
                nDetalle.montoSolesTransacc = i.montoSoles
                nDetalle.montoUsd = i.montoUsd
                nDetalle.montoUsdTransacc = i.montoUsd
                nDetalle.entregado = i.entregado
                nDetalle.diferTipoCambio = i.diferTipoCambio
                nDetalle.tipoCambioTransacc = i.tipoCambioTransacc
                nDetalle.idCajaUsuario = i.idCajaUsuario
                nDetalle.otroMN = i.otroMN
                nDetalle.usuarioModificacion = i.usuarioModificacion
                nDetalle.fechaModificacion = i.fechaModificacion

                HeliosData.documentoCajaDetalle.Add(nDetalle)
            Next
            '   documentoCajaDetalleBL.Insert(nCaja, nCaja.idDocumento, intIdCompra)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Private Sub SaveCajaJPS_SinLote(nCaja As documento, intIdCompra As Integer, listaVenta As List(Of documentoventaAbarrotesDet))
        Dim nDetalle As documentoCajaDetalle
        Dim DocumentoBL As New documentoBL
        Dim documentoCajaBL As New documentoCajaBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Using ts As New TransactionScope
            DocumentoBL.Insert(nCaja)
            nCaja.documentoCaja.numeroDoc = nCaja.nroDoc
            'nCaja.documentoCaja.tipoOperacion = "01"
            documentoCajaBL.Insert(nCaja.documentoCaja, nCaja.idDocumento)
            For Each i In nCaja.documentoCaja.documentoCajaDetalle

                Dim articuloVenta = listaVenta _
                    .Where(Function(o) o.idItem = i.idItem And o.tipobeneficio <> "OFERTA").Single

                nDetalle = New documentoCajaDetalle
                nDetalle.idDocumento = nCaja.idDocumento
                nDetalle.documentoAfectado = intIdCompra
                nDetalle.documentoAfectadodetalle = articuloVenta.secuencia
                nDetalle.secuencia = i.secuencia
                nDetalle.fecha = i.fecha
                nDetalle.idItem = i.idItem
                nDetalle.DetalleItem = i.DetalleItem
                nDetalle.montoSoles = i.montoSoles
                nDetalle.montoSolesTransacc = i.montoSoles
                nDetalle.montoUsd = i.montoUsd
                nDetalle.montoUsdTransacc = i.montoUsd
                nDetalle.entregado = i.entregado
                nDetalle.diferTipoCambio = i.diferTipoCambio
                nDetalle.tipoCambioTransacc = i.tipoCambioTransacc
                nDetalle.idCajaUsuario = i.idCajaUsuario
                nDetalle.otroMN = i.otroMN
                nDetalle.usuarioModificacion = i.usuarioModificacion
                nDetalle.fechaModificacion = i.fechaModificacion

                HeliosData.documentoCajaDetalle.Add(nDetalle)
            Next
            '   documentoCajaDetalleBL.Insert(nCaja, nCaja.idDocumento, intIdCompra)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Private Sub SaveCajaVenta(nCaja As documento, intIdCompra As Integer, ListaCompra As List(Of documentoventaAbarrotesDet))
        Dim DocumentoBL As New documentoBL
        Dim documentoCajaBL As New documentoCajaBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        DocumentoBL.Insert(nCaja)
        documentoCajaBL.Insert(nCaja.documentoCaja, nCaja.idDocumento)
        documentoCajaDetalleBL.InsertDetalleNotaCVenta(ListaCompra, nCaja.idDocumento, intIdCompra)
    End Sub

    Sub ConsumoInmediatoProductoTerminado(doc As documentoventaAbarrotes, lista As List(Of documentoventaAbarrotesDet))
        Dim inv As New InventarioMovimiento
        Using ts As New TransactionScope
            'Dim consulta = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.secuencia = sec).FirstOrDefault

            For Each i In lista
                inv = New InventarioMovimiento
                inv.idorigenDetalle = i.secuencia
                inv.idEmpresa = doc.idEmpresa
                inv.idEstablecimiento = doc.idEstablecimiento
                inv.idAlmacen = i.idAlmacenOrigen
                inv.tipoOperacion = "10.03"
                inv.tipoDocAlmacen = doc.tipoDocumento
                inv.serie = doc.serie
                inv.numero = doc.numeroDoc
                inv.idDocumento = doc.idDocumento
                inv.idDocumentoRef = doc.idDocumento
                inv.descripcion = i.nombreItem
                inv.fecha = doc.fechaConfirmacion
                inv.tipoRegistro = "E"
                inv.destinoGravadoItem = "1"
                inv.tipoProducto = TipoExistencia.ProductoTerminado
                inv.OrigentipoProducto = Nothing
                inv.cuentaOrigen = Nothing
                inv.idItem = i.idItem
                inv.marca = Nothing
                inv.presentacion = Nothing
                inv.fechavcto = Nothing
                inv.cantidad = i.monto1
                inv.unidad = i.unidad1
                inv.cantidad2 = 0
                inv.unidad2 = Nothing
                inv.precUnite = i.salidaCostoMN / i.monto1
                inv.precUniteUSD = 0
                inv.monto = i.salidaCostoMN
                inv.montoUSD = 0
                inv.status = "D"
                inv.entragado = "S"
                inv.usuarioActualizacion = doc.usuarioActualizacion
                inv.fechaActualizacion = doc.fechaActualizacion
                HeliosData.InventarioMovimiento.Add(inv)



                'Salida producto terminado

                inv = New InventarioMovimiento
                inv.idorigenDetalle = i.secuencia
                inv.idEmpresa = doc.idEmpresa
                inv.idEstablecimiento = doc.idEstablecimiento
                inv.idAlmacen = i.idAlmacenOrigen
                inv.tipoOperacion = "01"
                inv.tipoDocAlmacen = doc.tipoDocumento
                inv.serie = doc.serie
                inv.numero = doc.numeroDoc
                inv.idDocumento = doc.idDocumento
                inv.idDocumentoRef = doc.idDocumento
                inv.descripcion = i.nombreItem
                inv.fecha = doc.fechaConfirmacion
                inv.tipoRegistro = "S"
                inv.destinoGravadoItem = "1"
                inv.tipoProducto = TipoExistencia.ProductoTerminado
                inv.OrigentipoProducto = Nothing
                inv.cuentaOrigen = Nothing
                inv.idItem = i.idItem
                inv.marca = Nothing
                inv.presentacion = Nothing
                inv.fechavcto = Nothing
                inv.cantidad = i.monto1 * -1
                inv.unidad = i.unidad1
                inv.cantidad2 = 0
                inv.unidad2 = Nothing
                inv.precUnite = i.salidaCostoMN / i.monto1
                inv.precUniteUSD = 0
                inv.monto = (i.salidaCostoMN) * -1
                inv.montoUSD = 0
                inv.status = "D"
                inv.entragado = "S"
                inv.usuarioActualizacion = doc.usuarioActualizacion
                inv.fechaActualizacion = doc.fechaActualizacion
                HeliosData.InventarioMovimiento.Add(inv)
            Next



            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Public Sub GetProductoTerminadoPinturas(doc As documentoventaAbarrotes, lista As List(Of documentoconsumodirecto))
        Dim t As New totalesAlmacen
        Dim inv As New InventarioMovimiento
        Dim itemBL As New detalleitemsBL
        Dim matPrima As New detalleitems
        Dim totalesBL As New totalesAlmacenBL
        'Dim consulta = HeliosData.documentoconsumodirecto.Where(Function(o) o.idProductoPadre = sec).ToList

        Using ts As New TransactionScope
            For Each i In lista
                'actualizando salida de mercaderia
                t = New totalesAlmacen
                t.idEmpresa = doc.idEmpresa
                t.idEstablecimiento = doc.idEstablecimiento
                t.tipoExistencia = TipoExistencia.Mercaderia
                t.descripcion = i.descripcion
                '   t.descripcion = i.DetalleItem
                t.idUnidad = i.unidad
                t.idAlmacen = i.almacen
                t.origenRecaudo = "1"
                t.idItem = i.idMateriaPrima
                t.cantidad = (i.cant) * -1
                t.precioUnitarioCompra = 0
                t.importeSoles = (i.costo) * -1
                t.importeDolares = 0
                t.usuarioActualizacion = doc.usuarioActualizacion
                t.fechaActualizacion = doc.fechaActualizacion
                totalesBL.UpdateTrasnferenciaMercaderia(t)




                'TRANSFERENCIA DE MERCADERIA A MATERIA PRIMA

                inv = New InventarioMovimiento
                inv.idorigenDetalle = i.idProductoPadre
                inv.idEmpresa = doc.idEmpresa
                inv.idEstablecimiento = doc.idEstablecimiento
                inv.idAlmacen = i.almacen
                inv.tipoOperacion = "11"
                inv.tipoDocAlmacen = doc.tipoDocumento
                inv.serie = doc.serie
                inv.numero = doc.numeroDoc
                inv.idDocumento = doc.idDocumento
                inv.idDocumentoRef = doc.idDocumento
                inv.descripcion = i.descripcion
                inv.fecha = doc.fechaConfirmacion
                inv.tipoRegistro = "S"
                inv.destinoGravadoItem = "1"
                inv.tipoProducto = TipoExistencia.Mercaderia
                inv.OrigentipoProducto = Nothing
                inv.cuentaOrigen = Nothing
                inv.idItem = i.idMateriaPrima
                inv.marca = Nothing
                inv.presentacion = Nothing
                inv.fechavcto = Nothing
                inv.cantidad = (i.cant) * -1
                inv.unidad = i.unidad
                inv.cantidad2 = 0
                inv.unidad2 = Nothing
                inv.precUnite = i.costo / i.cant
                inv.precUniteUSD = 0
                inv.monto = (i.costo) * -1
                inv.montoUSD = 0
                inv.status = "D"
                inv.entragado = "S"
                inv.usuarioActualizacion = doc.usuarioActualizacion
                inv.fechaActualizacion = doc.fechaActualizacion
                HeliosData.InventarioMovimiento.Add(inv)

                Dim item = HeliosData.detalleitems.Where(Function(o) o.codigodetalle = i.idMateriaPrima).FirstOrDefault

                matPrima = New detalleitems
                matPrima.idItem = item.idItem
                matPrima.idEmpresa = item.idEmpresa
                matPrima.idEstablecimiento = item.idEstablecimiento
                matPrima.cuenta = item.cuenta
                matPrima.descripcionItem = item.descripcionItem
                matPrima.presentacion = item.presentacion
                matPrima.unidad1 = item.unidad1
                matPrima.unidad2 = item.unidad2
                matPrima.tipoExistencia = TipoExistencia.MateriaPrima
                matPrima.origenProducto = item.origenProducto
                matPrima.tipoProducto = item.tipoProducto
                matPrima.estado = item.estado
                matPrima.usuarioActualizacion = item.usuarioActualizacion
                matPrima.fechaActualizacion = item.fechaActualizacion
                Dim codProductoTerminado = itemBL.InsertDetalleProduccion(matPrima)

                ' INGRESO A MATERIA PRIMA
                inv = New InventarioMovimiento
                inv.idorigenDetalle = i.idProductoPadre
                inv.idEmpresa = doc.idEmpresa
                inv.idEstablecimiento = doc.idEstablecimiento
                inv.idAlmacen = i.almacen
                inv.tipoOperacion = "11"
                inv.tipoDocAlmacen = doc.tipoDocumento
                inv.serie = doc.serie
                inv.numero = doc.numeroDoc
                inv.idDocumento = doc.idDocumento
                inv.idDocumentoRef = doc.idDocumento
                inv.descripcion = i.descripcion
                inv.fecha = doc.fechaConfirmacion
                inv.tipoRegistro = "E"
                inv.destinoGravadoItem = "1"
                inv.tipoProducto = TipoExistencia.MateriaPrima
                inv.OrigentipoProducto = Nothing
                inv.cuentaOrigen = Nothing
                inv.idItem = codProductoTerminado
                inv.marca = Nothing
                inv.presentacion = Nothing
                inv.fechavcto = Nothing
                inv.cantidad = i.cant
                inv.unidad = i.unidad
                inv.cantidad2 = 0
                inv.unidad2 = Nothing
                inv.precUnite = i.costo / i.cant
                inv.precUniteUSD = 0
                inv.monto = i.costo
                inv.montoUSD = 0
                inv.status = "D"
                inv.entragado = "S"
                inv.usuarioActualizacion = doc.usuarioActualizacion
                inv.fechaActualizacion = doc.fechaActualizacion
                HeliosData.InventarioMovimiento.Add(inv)

                ' salida de MATERIA PRIMA a produccion
                inv = New InventarioMovimiento
                inv.idorigenDetalle = i.idProductoPadre
                inv.idEmpresa = doc.idEmpresa
                inv.idEstablecimiento = doc.idEstablecimiento
                inv.idAlmacen = i.almacen
                inv.tipoOperacion = "10.01"
                inv.tipoDocAlmacen = doc.tipoDocumento
                inv.serie = doc.serie
                inv.numero = doc.numeroDoc
                inv.idDocumento = doc.idDocumento
                inv.idDocumentoRef = doc.idDocumento
                inv.descripcion = i.descripcion
                inv.fecha = doc.fechaConfirmacion
                inv.tipoRegistro = "S"
                inv.destinoGravadoItem = "1"
                inv.tipoProducto = TipoExistencia.MateriaPrima
                inv.OrigentipoProducto = Nothing
                inv.cuentaOrigen = Nothing
                inv.idItem = codProductoTerminado
                inv.marca = Nothing
                inv.presentacion = Nothing
                inv.fechavcto = Nothing
                inv.cantidad = (i.cant) * -1
                inv.unidad = i.unidad
                inv.cantidad2 = 0
                inv.unidad2 = Nothing
                inv.precUnite = i.costo / i.cant
                inv.precUniteUSD = 0
                inv.monto = (i.costo) * -1
                inv.montoUSD = 0
                inv.status = "D"
                inv.entragado = "S"
                inv.usuarioActualizacion = doc.usuarioActualizacion
                inv.fechaActualizacion = doc.fechaActualizacion
                HeliosData.InventarioMovimiento.Add(inv)

            Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Sub CobrarTicket(objDocumento As documento, consultaDetalle As List(Of documentoventaAbarrotesDet))


        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim Product As New totalesAlmacen
        Dim inventario As New InventarioMovimientoBL
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento
        Dim saldoCantidad As Decimal = 0
        Dim numeracionBL As New numeracionBoletasBL
        Try
            Using ts As New TransactionScope()
                Dim consulta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault
                Dim documentoOrigen As documento = HeliosData.documento.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault
                consulta.fechaActualizacion = DateTime.Now
                If consulta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO Then

                    Dim cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentoventaAbarrotes.IdNumeracion))

                    'ACTUALIZANDO CABECERA VENTA
                    documentoOrigen.fechaProceso = objDocumento.documentoventaAbarrotes.fechaConfirmacion
                    documentoOrigen.tipoDoc = "12.1"
                    documentoOrigen.nroDoc = objDocumento.documentoventaAbarrotes.serieVenta & "-" & cval
                    objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                    objDocumento.documentoventaAbarrotes.numeroVenta = cval
                    Me.ConfirmarTicket(objDocumento.documentoventaAbarrotes)
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.UpdateVentaTicket(i)
                    Next
                    '---------------------------------------------------------------------------------
                    'Dim consul = From det In HeliosData.documentoventaAbarrotesDet _ 
                    '             Join doc In HeliosData.documentoventaAbarrotes _
                    '             On doc.idDocumento Equals det.idDocumento _
                    '             Where det.idDocumento  = 
                    '     Dim consultaDetalle As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = objDocumento.idDocumento).ToList
                    For Each i In consultaDetalle
                        saldoCantidad = 0

                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then

                            t = New totalesAlmacen
                            t.idAlmacen = i.idAlmacenOrigen
                            t.origenRecaudo = i.destino
                            t.idItem = i.idItem
                            t.cantidad = i.monto1 * -1
                            t.precioUnitarioCompra = i.precioUnitario * -1
                            t.importeSoles = i.salidaCostoMN * -1
                            t.importeDolares = i.salidaCostoME * -1
                            Product = totalesBL.ObtenerCanDisponibleProduct(t)
                            If i.monto1 > Product.cantidad Then
                                Throw New Exception("El producto: " & i.nombreItem & ", no tiene stock disponible!")
                            End If

                            '--------------------------------------------------------------------------------------------------
                            '--------------------------------------------------------------------------------------------------
                            i.secuencia = i.secuencia
                            i.DetalleItem = i.nombreItem
                            i.Serie = objDocumento.documentoventaAbarrotes.serieVenta
                            i.NumDoc = objDocumento.documentoventaAbarrotes.numeroVenta
                            i.FechaLaboral = objDocumento.documentoventaAbarrotes.fechaLaboral
                            inventario.InsertVentaPagada(i, objDocumento)
                        End If
                    Next

                    For Each i In objDocumento.ListaCustomDocumento
                        'i.tipoOperacion = "01"
                        i.nroDoc = objDocumento.documentoventaAbarrotes.serieVenta & "-" & cval
                        i.documentoCaja.numeroDoc = objDocumento.documentoventaAbarrotes.serieVenta & "-" & cval
                        SaveCaja(i, objDocumento.idDocumento)
                    Next

                    asientoBL.SavebyGroupDoc(objDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                ElseIf consulta.estadoCobro = TIPO_VENTA.PAGO.COBRADO Then
                    Throw New Exception("La venta ya fue cobrada.!!")
                End If

            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub ConfirmarVentaTicket(objDocumento As documento, objDocumentoCaja As documento,
                                     objTotalesAlmacen As List(Of totalesAlmacen),
                                     cajaUsuario As cajaUsuario)

        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim Product As New totalesAlmacen
        Dim inventario As New InventarioMovimientoBL
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento
        Dim saldoCantidad As Decimal = 0
        Dim numeracionBL As New numeracionBoletasBL
        Try
            Using ts As New TransactionScope()
                Dim fechaConfirmacion As Date = objDocumento.documentoventaAbarrotes.fechaConfirmacion
                Dim consultaDetalle As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = objDocumento.idDocumento And
                                                                                                                            o.tipoExistencia <> TipoExistencia.ServicioGasto).ToList
                CobrarTicket(objDocumento, consultaDetalle)
                Dim ListaArticulos = (From n In consultaDetalle
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With {.idAlmacen = a.idAlmacenOrigen,
                                                                                                                     .fecha = New DateTime(fechaConfirmacion.Year, fechaConfirmacion.Month, 1),
                                                                                                                     .tipoProducto = a.tipoExistencia,
                                                                                                                     .idItem = a.idItem}, Nothing)
                    totalesBL.GetCurarKardexCaberas(listaAcurar)
                Next

                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function SaveRegistroHonorariosVenta(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim precioV As New listadoPreciosBL
        Dim cajaBL As New documentoCajaBL
        '     Dim cajaDetBL As New documentoCajaDetalleBL
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNroVenta(objDocumento.documentoventaAbarrotes) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                    'm
                    'Dim consultaExisteItemsCaja = (From n In objDocumento.documentocompra.documentocompradetalle _
                    '                             Where n.estadoPago = "Pagado").Count
                    'If consultaExisteItemsCaja > 0 Then
                    '    docCodigoCaja = cajaBL.InsertDocumentoCaja(objDocumento.documentocompra)
                    'End If
                    ''m

                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        Dim codSecuenciaDetalle As Integer = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        'inventario.InsertVentaXAnticipo(i, objDocumento)
                        ''m
                        'If i.estadoPago = "Pagado" Then
                        '    cajaBL.InsertCajadetalle(i, objDocumento.idDocumento, docCodigoCaja)
                        'End If
                        ''m
                    Next

                    If Not IsNothing(objDocumento.ListaCustomDocumento) Then
                        For Each i In objDocumento.ListaCustomDocumento
                            SaveCaja(i, objDocumento.idDocumento)
                        Next
                    End If

                    asientoBL.SavebyGroupDoc(objDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    'Public Function SaveRegistroHonorariosVenta(objDocumento As documento) As Integer
    '    Dim DocumentoBL As New documentoBL
    '    Dim compraDetalleBL As New documentoventaAbarrotesDetBL
    '    Dim inventario As New InventarioMovimientoBL
    '    Dim asientoBL As New AsientoBL
    '    Dim DocumentoTributoBL As New documentoObligacionTributariaBL
    '    Dim totalesBL As New totalesAlmacenBL
    '    Dim guiaBL As New documentoGuiaBL
    '    Dim precioV As New listadoPreciosBL
    '    Dim cajaBL As New documentoCajaBL
    '    '     Dim cajaDetBL As New documentoCajaDetalleBL
    '    Try
    '        Using ts As New TransactionScope()
    '            If ValidarDocumentoNroVenta(objDocumento.documentoventaAbarrotes) = True Then
    '                DocumentoBL.Insert(objDocumento)
    '                Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

    '                'm
    '                'Dim consultaExisteItemsCaja = (From n In objDocumento.documentocompra.documentocompradetalle _
    '                '                             Where n.estadoPago = "Pagado").Count
    '                'If consultaExisteItemsCaja > 0 Then
    '                '    docCodigoCaja = cajaBL.InsertDocumentoCaja(objDocumento.documentocompra)
    '                'End If
    '                ''m

    '                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
    '                    Dim codSecuenciaDetalle As Integer = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

    '                    ''m
    '                    'If i.estadoPago = "Pagado" Then
    '                    '    cajaBL.InsertCajadetalle(i, objDocumento.idDocumento, docCodigoCaja)
    '                    'End If
    '                    ''m
    '                Next


    '                asientoBL.SavebyGroupDoc(objDocumento)
    '                HeliosData.SaveChanges()
    '                ts.Complete()
    '                Return objDocumento.idDocumento
    '            Else
    '                Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
    '            End If
    '        End Using
    '    Catch ex As Exception
    '        Throw ex
    '    End Try
    'End Function

    Function ValidarDocumentoNroVenta(nDOcumento As documentoventaAbarrotes) As Boolean
        Dim consulta = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idEmpresa = nDOcumento.idEmpresa _
                                                            And o.idEstablecimiento = nDOcumento.idEstablecimiento _
                                                         And o.serie = nDOcumento.serie _
                                                         And o.numeroDoc = nDOcumento.numeroDoc _
                                                         And o.tipoDocumento = nDOcumento.tipoDocumento _
                                                         And o.idCliente = nDOcumento.idCliente).FirstOrDefault
        If IsNothing(consulta) Then
            Return True
        Else
            Return False
        End If

    End Function

    Public Sub ConfirmarVentaTicketConsumoDirecto(objDocumento As documento)

        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim Product As New totalesAlmacen
        Dim inventario As New InventarioMovimientoBL
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento
        Dim saldoCantidad As Decimal = 0
        Try
            Using ts As New TransactionScope()
                Dim consulta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault
                consulta.fechaActualizacion = DateTime.Now
                If consulta.estadoCobro = TIPO_VENTA.PAGO.PENDIENTE_PAGO Then
                    'ACTUALIZANDO CABECERA VENTA
                    objDocumento.documentoventaAbarrotes.idDocumento = objDocumento.idDocumento
                    Me.ConfirmarTicket(objDocumento.documentoventaAbarrotes)
                    For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                        compraDetalleBL.UpdateVentaTicket(i)
                    Next
                    '---------------------------------------------------------------------------------
                    Dim consultaDetalle As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = objDocumento.idDocumento).ToList
                    For Each i In consultaDetalle.Where(Function(o) o.tipoExistencia = TipoExistencia.Mercaderia).ToList
                        saldoCantidad = 0

                        i.IdEmpresa = Gempresas.IdEmpresaRuc
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            'Validando stock
                            'actualizando cabecera total almacen



                            t = New totalesAlmacen
                            t.idEmpresa = objDocumento.idEmpresa
                            t.idEstablecimiento = objDocumento.idCentroCosto
                            t.idAlmacen = i.idAlmacenOrigen
                            t.origenRecaudo = i.destino
                            t.idItem = i.idItem
                            t.cantidad = i.monto1 * -1
                            t.precioUnitarioCompra = i.precioUnitario * -1
                            t.importeSoles = i.salidaCostoMN * -1
                            t.importeDolares = i.salidaCostoME * -1
                            Product = totalesBL.ObtenerCanDisponibleProduct(t)

                            If i.monto1 > Product.cantidad Then
                                Throw New Exception("El producto: " & i.nombreItem & ", no tiene stock disponible!")
                            End If
                            'If Product.cantidad = 0 Then
                            '    Throw New Exception("El producto: " & i.nombreItem & ", no tiene stock disponible!")
                            'End If

                            '--------------------------------------------------------------------------------------------------
                            '--------------------------------------------------------------------------------------------------

                            i.secuencia = i.secuencia
                            i.DetalleItem = i.nombreItem
                            i.Serie = objDocumento.documentoventaAbarrotes.serieVenta
                            i.NumDoc = objDocumento.documentoventaAbarrotes.numeroVenta
                            inventario.InsertVentaPagada(i, objDocumento)

                            Dim objRecuperado = totalesBL.UpdateCostoVentaKardex(t)


                            i.salidaCostoMN = objRecuperado.precioVentaMN
                            i.salidaCostoME = objRecuperado.precioVentaUS

                            'nMovimiento = New movimiento
                            'nMovimiento.cuenta = "69112"
                            'nMovimiento.descripcion = i.nombreItem
                            'nMovimiento.tipo = "D"
                            'nMovimiento.monto = If(objRecuperado.precioVentaMN < 0, objRecuperado.precioVentaMN * -1, objRecuperado.precioVentaMN)
                            'nMovimiento.montoUSD = If(objRecuperado.precioVentaUS < 0, objRecuperado.precioVentaUS * -1, objRecuperado.precioVentaUS)
                            'nMovimiento.usuarioActualizacion = objDocumento.usuarioActualizacion
                            'nMovimiento.fechaActualizacion = DateTime.Now
                            'HeliosData.movimiento.Add(nMovimiento)

                            'nMovimiento = New movimiento
                            'nMovimiento.cuenta = "20111"
                            'nMovimiento.descripcion = i.nombreItem
                            'nMovimiento.tipo = "H"
                            'nMovimiento.monto = If(objRecuperado.precioVentaMN < 0, objRecuperado.precioVentaMN * -1, objRecuperado.precioVentaMN)
                            'nMovimiento.montoUSD = If(objRecuperado.precioVentaUS < 0, objRecuperado.precioVentaUS * -1, objRecuperado.precioVentaUS)
                            'nMovimiento.usuarioActualizacion = objDocumento.usuarioActualizacion
                            'nMovimiento.fechaActualizacion = DateTime.Now
                            'HeliosData.movimiento.Add(nMovimiento)
                        End If
                    Next

                    For Each i In objDocumento.ListaCustomDocumento
                        SaveCaja(i, objDocumento.idDocumento)
                    Next

                    asientoBL.SavebyGroupDoc(objDocumento)
                    'objDocumentoCaja.nroDoc = objDocumento.documentoventaAbarrotes.serieVenta & "-" & objDocumento.documentoventaAbarrotes.numeroVenta
                    HeliosData.SaveChanges()
                    ts.Complete()
                ElseIf consulta.estadoCobro = TIPO_VENTA.PAGO.COBRADO Then
                    Throw New Exception("La venta ya fue cobrada.!!")
                End If

            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function GetListarVentasPorPeriodo(intIdEstablec As Integer, strPeriodo As String, strTipoVenta As String, Optional UsuarioCaja As String = Nothing) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)

        Dim objRecurso As New documentoventaAbarrotes


        If IsNothing(UsuarioCaja) Then
            Dim consulta = (From doc In HeliosData.documento
                            Join compra In HeliosData.documentoventaAbarrotes
                    On doc.idDocumento Equals compra.idDocumento
                            Group Join entidad In HeliosData.entidad
                    On compra.idCliente Equals entidad.idEntidad
                    Into ords = Group
                            From e In ords.DefaultIfEmpty
                            Where doc.idCentroCosto = intIdEstablec And
                    compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta)
                            Order By compra.fechaDoc Ascending).ToList

            For Each obj In consulta
                objRecurso = New documentoventaAbarrotes

                objRecurso.idDocumento = obj.compra.idDocumento
                objRecurso.tipoOperacion = obj.doc.tipoOperacion
                objRecurso.fechaDoc = obj.compra.fechaDoc
                objRecurso.tipoDocumento = obj.compra.tipoDocumento
                objRecurso.serie = obj.compra.serie
                objRecurso.numeroDoc = obj.compra.numeroDoc
                objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                objRecurso.nombrePedido = obj.compra.nombrePedido
                If Not IsNothing(obj.e) Then
                    objRecurso.tipoDocEntidad = obj.e.tipoDoc
                    objRecurso.NroDocEntidad = obj.e.nrodoc
                    objRecurso.NombreEntidad = obj.e.nombreCompleto
                    objRecurso.TipoPersona = obj.e.tipoPersona
                Else
                    objRecurso.tipoDocEntidad = String.Empty
                    objRecurso.NroDocEntidad = String.Empty
                    objRecurso.NombreEntidad = String.Empty
                    objRecurso.TipoPersona = String.Empty
                End If

                objRecurso.ImporteNacional = obj.compra.ImporteNacional
                objRecurso.tipoCambio = obj.compra.tipoCambio
                objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                objRecurso.moneda = obj.compra.moneda
                objRecurso.estadoCobro = obj.compra.estadoCobro
                objRecurso.tipoVenta = obj.compra.tipoVenta
                objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                Lista.Add(objRecurso)
            Next

        Else


            Dim consulta = (From doc In HeliosData.documento
                            Join compra In HeliosData.documentoventaAbarrotes
                    On doc.idDocumento Equals compra.idDocumento
                            Group Join entidad In HeliosData.entidad
                    On compra.idCliente Equals entidad.idEntidad
                    Into ords = Group
                            From e In ords.DefaultIfEmpty
                            Where doc.idCentroCosto = intIdEstablec And
                    compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta) And compra.usuarioActualizacion = UsuarioCaja
                            Order By compra.fechaDoc Ascending).ToList

            For Each obj In consulta
                objRecurso = New documentoventaAbarrotes

                objRecurso.idDocumento = obj.compra.idDocumento
                objRecurso.tipoOperacion = obj.doc.tipoOperacion
                objRecurso.fechaDoc = obj.compra.fechaDoc
                objRecurso.tipoDocumento = obj.compra.tipoDocumento
                objRecurso.serie = obj.compra.serie
                objRecurso.numeroDoc = obj.compra.numeroDoc
                objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                objRecurso.nombrePedido = obj.compra.nombrePedido
                If Not IsNothing(obj.e) Then
                    objRecurso.tipoDocEntidad = obj.e.tipoDoc
                    objRecurso.NroDocEntidad = obj.e.nrodoc
                    objRecurso.NombreEntidad = obj.e.nombreCompleto
                    objRecurso.TipoPersona = obj.e.tipoPersona
                Else
                    objRecurso.tipoDocEntidad = String.Empty
                    objRecurso.NroDocEntidad = String.Empty
                    objRecurso.NombreEntidad = String.Empty
                    objRecurso.TipoPersona = String.Empty
                End If

                objRecurso.ImporteNacional = obj.compra.ImporteNacional
                objRecurso.tipoCambio = obj.compra.tipoCambio
                objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                objRecurso.moneda = obj.compra.moneda
                objRecurso.estadoCobro = obj.compra.estadoCobro
                objRecurso.tipoVenta = obj.compra.tipoVenta
                objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                Lista.Add(objRecurso)
            Next
        End If



        Return Lista
    End Function

    Public Function GetListarVentasPorPeriodoCobrados(intIdEstablec As Integer, strPeriodo As String, strTipoVenta As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro = "DC"
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarVentasNormalPorPeriodo(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET_DIRECTA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

#Region "NOTAS DE CREDITO"

    Public Function GetListarNotasPorIdVentaPadre(intIDoCumento As Integer, strTipoNota As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim objRecurso As New documentoventaAbarrotes

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Where compra.idPadre = intIDoCumento _
                       And compra.tipoVenta = strTipoNota
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.sustentado = obj.compra.sustentado
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.idPadre = obj.compra.idPadre
            Lista.Add(objRecurso)
        Next
        Return Lista
    End Function

    Public Function SaveCompraNotaCreditoVenta(objDocumento As documento, nListaTotalesAlmacen As List(Of totalesAlmacen),
                                          nDocumentoNota As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim docAnticipo As New documentoAnticipoDetalleBL
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0
        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0

        Try
            Using ts As New TransactionScope()
                'Dim consulta As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.idPadre).FirstOrDefault
                'consulta.estadoCobro = TIPO_VENTA.VENTA_NOTA_CREDITO
                'DocumentoBL.Insert(objDocumento)
                'Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                'For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                '    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                '    inventario.InsertNotaCredito_Venta(i, objDocumento)
                'Next
                'totalesBL.SaveTotalesListaCompraPagada(nListaTotalesAlmacen, 0)
                'asientoBL.SavebyGroupDoc(objDocumento)
                'guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.documentoventaAbarrotes.idPadre)
                ''HeliosData.ObjectStateManager.GetObjectStateEntry(consulta).State.ToString()
                'HeliosData.SaveChanges()
                'ts.Complete()
                'Return objDocumento.idDocumento
                DocumentoBL.Insert(objDocumento)

                Select Case objDocumento.documentoventaAbarrotes.tipoOperacion
                    Case "9917", "9918" 'beneficios. bonificaciones

                        Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                        For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet

                            compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                            Select Case objDocumento.documentocompra.destino

                                Case "9917" 'beneficios. bonificaciones
                                    inventario.InsertNotaCreditoBoNifVenta(i, objDocumento)
                                Case "9918"
                                    inventario.InsertNotaCredito_BonificacionVenta(i, objDocumento)
                            End Select

                        Next


                    Case Else
                        Dim totals3 = Aggregate p In HeliosData.documentoCajaDetalle
                          Where p.documentoAfectado = objDocumento.documentoventaAbarrotes.idPadre
                           Into importePagado = Sum(p.montoSoles),
                                importePagadoME = Sum(p.montoUsd)

                        Dim compra As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.idPadre).FirstOrDefault
                        compra.estadoCobro = TIPO_VENTA.VENTA_ANULADA
                        saldo_Pago = compra.ImporteNacional.GetValueOrDefault - totals3.importePagado.GetValueOrDefault
                        saldo_Pagome = compra.ImporteExtranjero.GetValueOrDefault - totals3.importePagadoME.GetValueOrDefault
                        saldo_Final = saldo_Pago - objDocumento.documentoventaAbarrotes.ImporteNacional
                        saldo_Finalme = saldo_Pagome - objDocumento.documentoventaAbarrotes.ImporteExtranjero
                        If saldo_Final < 0 Then
                            '   objDocumento.documentoventaAbarrotes.saldoMontoNota = saldo_Final * -1
                            '   objDocumento.documentoventaAbarrotes.saldoMontoNotaUSD = saldo_Finalme * -1
                            ' objDocumento.documentocompra.estadoPago = "PN"
                        Else
                            '   objDocumento.documentocompra.estadoPago = "DC"
                        End If

                        Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                        For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet

                            'VALIDANDO ITEMS INGRESADOS COMO NOTA DE CREDITO
                            Dim totalPagosCajaDet = Aggregate p In HeliosData.documentoCajaDetalle
                                   Where p.idItem = i.idItem And p.documentoAfectado = compra.idDocumento
                   Into importePagadoItem = Sum(p.montoSoles),
                        importePagadoMEItem = Sum(p.montoUsd)

                            Dim compraDetalle As documentoventaAbarrotesDet = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = compra.idDocumento _
                                                                                                                   And o.idItem = i.idItem).FirstOrDefault

                            saldoItem = compraDetalle.importeMN - i.importeMN - totalPagosCajaDet.importePagadoItem.GetValueOrDefault - compraDetalle.notaCreditoMN.GetValueOrDefault '+ compraDetalle.notaDebitoMN.GetValueOrDefault
                            saldoItemME = compraDetalle.importeME - i.importeME - totalPagosCajaDet.importePagadoMEItem.GetValueOrDefault - compraDetalle.notaCreditoME.GetValueOrDefault '+ compraDetalle.notaDebitoME.GetValueOrDefault
                            'saldoItem = compraDetalle.importe - i.importe - totalPagosCajaDet.importePagadoItem.GetValueOrDefault - compraDetalle.notaCreditoMN.GetValueOrDefault ' + compraDetalle.notaDebitoMN.GetValueOrDefault
                            'saldoItemME = compraDetalle.importeUS - i.importeUS - totalPagosCajaDet.importePagadoMEItem.GetValueOrDefault - compraDetalle.notaCreditoME.GetValueOrDefault ' + compraDetalle.notaDebitoME.GetValueOrDefault

                            If saldoItem < 0 Then
                                '  i.bonificacion = "S"
                                i.notaCreditoMN = saldoItem * -1
                                i.notaCreditoME = saldoItemME * -1
                            Else
                                '   i.bonificacion = "N"
                            End If

                            compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                            Select Case objDocumento.documentoventaAbarrotes.tipoOperacion
                                Case "9913" 'DISMI CA
                                    Select Case i.tipoExistencia
                                        Case "GS"

                                        Case Else
                                            inventario.InsertNotaCreditoVenta(i, objDocumento)
                                    End Select
                                Case "9914", "9916" 'DISMI IMPORTE, DEV EXIST

                                    Select Case i.tipoExistencia
                                        Case "GS"

                                        Case Else
                                            inventario.InsertNotaCreditoVenta(i, objDocumento)
                                    End Select
                                    'Case "9917" 'beneficios. bonificaciones
                                    '    inventario.InsertNotaCredito(i, objDocumento)

                            End Select

                        Next
                End Select
                '--------------------------------------------------------------------------------------------

                Select Case objDocumento.documentoventaAbarrotes.tipoOperacion
                    Case "9913" 'DISMI CA
                        totalesBL.SaveTotalesListaCompraPagada(nListaTotalesAlmacen, 0)
                    Case "9914", "9916" 'DISMI IMPORTE, DEV EXIST
                        asientoBL.SavebyGroupDoc(objDocumento)
                        totalesBL.SaveTotalesListaCompraPagada(nListaTotalesAlmacen, 0)
                    Case "9917" 'beneficios. bonificaciones
                        asientoBL.SavebyGroupDoc(objDocumento)
                        totalesBL.SaveTotalesListaCompraPagada(nListaTotalesAlmacen, 0)
                    Case "9918"
                        totalesBL.SaveTotalesListaCompraPagada(nListaTotalesAlmacen, 0)
                End Select


                If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                    guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                End If
                If Not IsNothing(nDocumentoNota.idEmpresa) Then
                    SaveCaja(nDocumentoNota, objDocumento.idDocumento)
                    docAnticipo.InsertarNotaCreditoDevolucion(objDocumento.documentoventaAbarrotes.idPadre)
                End If


                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region


    Public Function GetListarVentasPorDiaEstablecimiento(be As documentoventaAbarrotes, Optional UsuarioCaja As String = Nothing) As List(Of documentoventaAbarrotes)

        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where
                                  doc.idCentroCosto = be.idEstablecimiento And
                                  compra.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                  compra.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                  compra.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                  compra.tipoVenta = be.tipoVenta And
                                  compra.estadoCobro <> "ANU"
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            objRecurso.importeCostoMN = obj.compra.importeCostoMN
            objRecurso.tipoVenta = obj.compra.tipoVenta
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1

                    objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault * -1
                    objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault * -1
                    objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault * -1
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                    objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                    objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                    objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                    objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                    objRecurso.icbper = obj.compra.icbper.GetValueOrDefault
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarVentasPorPeriodo_CONT(strPeriodo As String, strTipoVenta As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where compra.fechaPeriodo = strPeriodo And compra.tipoVenta = strTipoVenta
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarVentasPorPeriodoGeneral(intIdProyecto As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim strTipoVenta() As String = {TIPO_VENTA.VENTA_PAGADA, TIPO_VENTA.VENTA_AL_CREDITO}
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idProyecto = intIdProyecto And
                       compra.fechaPeriodo = strPeriodo And strTipoVenta.Contains(compra.tipoVenta)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarVentasPorPeriodoGeneral_CONT(strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim strTipoVenta() As String = {TIPO_VENTA.VENTA_PAGADA, TIPO_VENTA.VENTA_AL_CREDITO}
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where compra.fechaPeriodo = strPeriodo And strTipoVenta.Contains(compra.tipoVenta)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    'periodo kitado
    'Public Function GetObtenerVentaPorNumero(intIdEstablecimiento As Integer, strPeriodo As String, strTipoVenta As String,
    '                                          strTipoDoc As String, strSerie As String, strNumDoc As String) As documentoventaAbarrotes
    '    Return (From compra In HeliosData.documentoventaAbarrotes _
    '                    Where compra.idEstablecimiento = intIdEstablecimiento And _
    '                   compra.tipoVenta = strTipoVenta _
    '                   And compra.tipoDocumento = strTipoDoc _
    '                   And compra.serie = strSerie _
    '                   And compra.numeroDoc = (strNumDoc) _
    '                   And compra.estadoCobro = "PN"
    '                  ).FirstOrDefault

    'End Function

    Public Function GetObtenerVentaPorNumero(intIdEstablecimiento As Integer, strPeriodo As String, strTipoVenta As String,
                                              strTipoDoc As String, strSerie As String, strNumDoc As String) As documentoventaAbarrotes

        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim objRecurso As New documentoventaAbarrotes

        Dim consulta = (From compra In HeliosData.documentoventaAbarrotes
                        Join entidas In HeliosData.entidad
                    On compra.idCliente Equals entidas.idEntidad
                        Where compra.idEstablecimiento = intIdEstablecimiento And
                       compra.tipoVenta = strTipoVenta _
                       And compra.tipoDocumento = strTipoDoc _
                       And compra.serie = strSerie _
                       And compra.numeroDoc = (strNumDoc) _
                       And compra.estadoCobro = "PN"
                      ).ToList

        If (consulta.Count = 0) Then

            Dim consulta2 = (From compra In HeliosData.documentoventaAbarrotes
                             Where compra.idEstablecimiento = intIdEstablecimiento And
                       compra.tipoVenta = strTipoVenta _
                       And compra.tipoDocumento = strTipoDoc _
                       And compra.serie = strSerie _
                       And compra.numeroDoc = (strNumDoc) _
                       And compra.estadoCobro = "PN"
                      ).FirstOrDefault

            objRecurso = consulta2
        Else
            For Each obj In consulta

                objRecurso = New documentoventaAbarrotes

                objRecurso.idDocumento = obj.compra.idDocumento
                objRecurso.tipoOperacion = obj.compra.tipoOperacion
                objRecurso.fechaDoc = obj.compra.fechaDoc
                objRecurso.fechaVcto = obj.compra.fechaVcto
                objRecurso.horaVenta = obj.compra.horaVenta
                objRecurso.fechaConfirmacion = obj.compra.fechaConfirmacion
                objRecurso.fechaPeriodo = obj.compra.fechaPeriodo
                objRecurso.tipoDocumento = obj.compra.tipoDocumento
                objRecurso.serie = obj.compra.serie
                objRecurso.numeroDoc = obj.compra.numeroDoc
                objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                objRecurso.nombrePedido = obj.compra.nombrePedido
                objRecurso.NroDocEntidad = obj.entidas.nrodoc
                objRecurso.idCliente = obj.compra.idCliente
                objRecurso.moneda = obj.compra.moneda
                objRecurso.ImporteNacional = obj.compra.ImporteNacional
                objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                objRecurso.importeCostoMN = obj.compra.importeCostoMN
                objRecurso.importeCostoME = obj.compra.importeCostoME
                objRecurso.estadoCobro = obj.compra.estadoCobro
                objRecurso.entidadFinanciera = obj.compra.entidadFinanciera
                objRecurso.glosa = obj.compra.glosa
                objRecurso.tipoVenta = obj.compra.tipoVenta
                objRecurso.modulo = obj.compra.modulo
                objRecurso.idPadre = obj.compra.idPadre
                objRecurso.estado = obj.compra.estado
                objRecurso.tipoCambio = obj.compra.tipoCambio
                objRecurso.tasaIgv = obj.compra.tasaIgv
                objRecurso.igv01 = obj.compra.igv01
                objRecurso.igv02 = obj.compra.igv02
                objRecurso.isc01 = obj.compra.isc01
                objRecurso.isc02 = obj.compra.isc02
                objRecurso.otc01 = obj.compra.otc01
                objRecurso.otc02 = obj.compra.otc02
                objRecurso.bi01 = obj.compra.bi01
                objRecurso.bi02 = obj.compra.bi02
                objRecurso.igv01us = obj.compra.igv01us
                objRecurso.igv02us = obj.compra.igv02us
            Next
        End If

        Return objRecurso
    End Function


    Public Function GetObtenerVentaPorNumeroComprobante(intIdEstablecimiento As Integer, strPeriodo As String, strTipoVenta As String,
                                             strTipoDoc As String, strNumDoc As String) As documentoventaAbarrotes
        Return (From compra In HeliosData.documentoventaAbarrotes
                Where compra.idEstablecimiento = intIdEstablecimiento And
                       compra.fechaPeriodo = strPeriodo And compra.tipoVenta = strTipoVenta _
                       And compra.tipoDocumento = strTipoDoc _
                       And compra.numeroDocNormal.Contains(strNumDoc) _
                       And compra.estadoCobro = "PN"
                      ).FirstOrDefault

    End Function

    Public Function GetListarAllVentasPeriodoPendiente(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And (compra.tipoVenta) = "VNP" _
                       And compra.estadoCobro = "PN"
                        Order By compra.fechaDoc Ascending).ToList

        'Dim consulta = (From doc In HeliosData.documento
        '                Join compra In HeliosData.documentoventaAbarrotes
        '               On doc.idDocumento Equals compra.idDocumento
        '                Group Join entidad In HeliosData.entidad
        '               On compra.idCliente Equals entidad.idEntidad
        '               Into ords = Group
        '                From e In ords.DefaultIfEmpty
        '                Where doc.idCentroCosto = intIdEstablec And
        '               compra.fechaPeriodo = strPeriodo And (compra.tipoVenta) = TIPO_VENTA.NOTA_DE_VENTA _
        '               And compra.estadoCobro = "PN"
        '                Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.idCliente = obj.e.idEntidad
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.idCliente = 0
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarAllVentasPeriodoPendienteEspecial(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        'ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_RECIBIDO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And (compra.tipoVenta) = "VNPE" _
                       And compra.estadoCobro = "PN"
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.idCliente = obj.e.idEntidad
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.idCliente = 0
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetListarAllVentasGeneralAprobado(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)

        Dim ListaeSTADO As New List(Of String)
        ListaeSTADO.Add(TipoGuia.Entregado)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro <> "ANU" _
                       And ListaeSTADO.Contains(compra.usuarioActualizacion)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarAllVentasGeneralesPeriodo(intIdEstablec As Integer, strPeriodo As String) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)
        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        Dim ListaeSTADO As New List(Of String)
        ListaeSTADO.Add(TipoGuia.Pendiente)
        ListaeSTADO.Add(TipoGuia.Transito)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                        From e In ords.DefaultIfEmpty
                        Where doc.idCentroCosto = intIdEstablec And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro <> "ANU" _
                       And ListaeSTADO.Contains(compra.usuarioActualizacion)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.compra.ImporteNacional
            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function
    Public Function consultaEstadodocVenta(intIdDocumento As Integer) As Integer
        Using ts As New TransactionScope
            Dim objRecurso As New documentoventaAbarrotes

            Dim Conforme = Aggregate a In HeliosData.documentoguiaDetalle
                         Where a.idDocumentoPadre = intIdDocumento And a.estado = TipoGuia.Entregado
                                Into DBmn = Sum(a.cantidad),
                                DBmne = Sum(a.cantidad)

            Dim ConformeAbarrotes = Aggregate a In HeliosData.documentoventaAbarrotesDet
                      Where a.idDocumento = intIdDocumento
                                Into DBmn = Sum(a.monto1),
                                DBmne = Sum(a.monto1)

            If (Conforme.DBmn.GetValueOrDefault = ConformeAbarrotes.DBmn.GetValueOrDefault) Then
                Dim consulta = (From doc In HeliosData.documentoventaAbarrotes
                                Where doc.idDocumento = intIdDocumento).FirstOrDefault

                'objRecurso = New documentoventaAbarrotes

                consulta.usuarioActualizacion = TipoGuia.Entregado
                consulta.estadoEntrega = TipoEntregado.Entregado

                HeliosData.SaveChanges()
                ts.Complete()
            Else

                ts.Complete()
            End If
            Return 1
        End Using
    End Function

    Public Sub InsertSingleContado(ByVal documentoventaAbarrotesBE As documentoventaAbarrotes, intIdDocmento As Integer)
        Dim docVentaAbarrotes As New documentoventaAbarrotes
        'Dim numeracionBL As New numeracionBoletasBL
        'Dim cval As Integer = 0
        Using ts As New TransactionScope
            docVentaAbarrotes.idDocumento = intIdDocmento
            docVentaAbarrotes.codigoLibro = documentoventaAbarrotesBE.codigoLibro
            docVentaAbarrotes.tipoOperacion = documentoventaAbarrotesBE.tipoOperacion
            docVentaAbarrotes.fechaVcto = documentoventaAbarrotesBE.fechaVcto
            docVentaAbarrotes.idEmpresa = documentoventaAbarrotesBE.idEmpresa
            docVentaAbarrotes.idEstablecimiento = documentoventaAbarrotesBE.idEstablecimiento
            docVentaAbarrotes.tipoDocumento = documentoventaAbarrotesBE.tipoDocumento
            docVentaAbarrotes.fechaDoc = documentoventaAbarrotesBE.fechaDoc
            docVentaAbarrotes.horaVenta = documentoventaAbarrotesBE.horaVenta
            docVentaAbarrotes.fechaConfirmacion = documentoventaAbarrotesBE.fechaConfirmacion
            docVentaAbarrotes.fechaPeriodo = documentoventaAbarrotesBE.fechaPeriodo
            docVentaAbarrotes.serieVenta = documentoventaAbarrotesBE.serie
            docVentaAbarrotes.numeroVenta = documentoventaAbarrotesBE.numeroVenta
            docVentaAbarrotes.numeroDocNormal = documentoventaAbarrotesBE.numeroDocNormal
            docVentaAbarrotes.idClientePedido = documentoventaAbarrotesBE.idClientePedido
            docVentaAbarrotes.nombrePedido = documentoventaAbarrotesBE.nombrePedido
            docVentaAbarrotes.idCliente = documentoventaAbarrotesBE.idCliente
            docVentaAbarrotes.moneda = documentoventaAbarrotesBE.moneda
            docVentaAbarrotes.tipoCambio = documentoventaAbarrotesBE.tipoCambio
            docVentaAbarrotes.tasaIgv = documentoventaAbarrotesBE.tasaIgv
            docVentaAbarrotes.bi01 = documentoventaAbarrotesBE.bi01
            docVentaAbarrotes.bi02 = documentoventaAbarrotesBE.bi02
            docVentaAbarrotes.isc01 = documentoventaAbarrotesBE.isc01
            docVentaAbarrotes.isc02 = documentoventaAbarrotesBE.isc02
            docVentaAbarrotes.igv01 = documentoventaAbarrotesBE.igv01
            docVentaAbarrotes.igv02 = documentoventaAbarrotesBE.igv02
            docVentaAbarrotes.otc01 = documentoventaAbarrotesBE.otc01
            docVentaAbarrotes.otc02 = documentoventaAbarrotesBE.otc02
            docVentaAbarrotes.bi01us = documentoventaAbarrotesBE.bi01us
            docVentaAbarrotes.bi02us = documentoventaAbarrotesBE.bi02us
            docVentaAbarrotes.isc01us = documentoventaAbarrotesBE.isc01us
            docVentaAbarrotes.isc02us = documentoventaAbarrotesBE.isc02us
            docVentaAbarrotes.igv01us = documentoventaAbarrotesBE.igv01us
            docVentaAbarrotes.igv02us = documentoventaAbarrotesBE.igv02us
            docVentaAbarrotes.otc01us = documentoventaAbarrotesBE.otc01us
            docVentaAbarrotes.otc02us = documentoventaAbarrotesBE.otc02us
            docVentaAbarrotes.ImporteNacional = documentoventaAbarrotesBE.ImporteNacional
            docVentaAbarrotes.ImporteExtranjero = documentoventaAbarrotesBE.ImporteExtranjero
            docVentaAbarrotes.importeCostoMN = documentoventaAbarrotesBE.importeCostoMN
            docVentaAbarrotes.importeCostoME = documentoventaAbarrotesBE.importeCostoME
            docVentaAbarrotes.estado = documentoventaAbarrotesBE.estado
            docVentaAbarrotes.estadoCobro = documentoventaAbarrotesBE.estadoCobro
            docVentaAbarrotes.establecimientoCobro = documentoventaAbarrotesBE.establecimientoCobro
            docVentaAbarrotes.entidadFinanciera = documentoventaAbarrotesBE.entidadFinanciera
            docVentaAbarrotes.glosa = documentoventaAbarrotesBE.glosa
            docVentaAbarrotes.terminos = documentoventaAbarrotesBE.terminos
            docVentaAbarrotes.notaCredito = documentoventaAbarrotesBE.notaCredito
            docVentaAbarrotes.tipoVenta = documentoventaAbarrotesBE.tipoVenta
            docVentaAbarrotes.modulo = documentoventaAbarrotesBE.modulo
            docVentaAbarrotes.idPadre = documentoventaAbarrotesBE.idPadre
            docVentaAbarrotes.estadoEntrega = documentoventaAbarrotesBE.estadoEntrega
            docVentaAbarrotes.terminos = documentoventaAbarrotesBE.terminos
            docVentaAbarrotes.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
            docVentaAbarrotes.fechaActualizacion = documentoventaAbarrotesBE.fechaActualizacion
            docVentaAbarrotes.nroGuia = documentoventaAbarrotesBE.nroGuia
            docVentaAbarrotes.nroOrdenVenta = documentoventaAbarrotesBE.nroOrdenVenta

            HeliosData.documentoventaAbarrotes.Add(docVentaAbarrotes)
            HeliosData.SaveChanges()
            ts.Complete()
            documentoventaAbarrotesBE.idDocumento = docVentaAbarrotes.idDocumento
            documentoventaAbarrotesBE.numeroDoc = docVentaAbarrotes.numeroDoc
        End Using
    End Sub
    Public Function VentaContado(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim cajaBL As New documentoCajaBL
        Dim asientoBL As New AsientoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim Product As New totalesAlmacen
        Dim listaTortalesAlmacen As New List(Of totalesAlmacen)
        Dim listaObjCondicion As New documentoGuiaDetalleCondicionBL
        Dim guiaBL As New documentoGuiaBL
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer
        Dim codDocumentoVenta As Integer
        Try
            Using ts As New TransactionScope()

                objDocumento.fechaActualizacion = DateTime.Now

                If objDocumento.documentoventaAbarrotes.IdNumeracion > 0 Then
                    cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentoventaAbarrotes.IdNumeracion))
                    objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
                    objDocumento.documentoventaAbarrotes.numeroVenta = cval
                Else
                    objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroDoc
                    objDocumento.documentoventaAbarrotes.numeroVenta = objDocumento.documentoventaAbarrotes.numeroDoc
                End If
                DocumentoBL.Insert(objDocumento)
                codDocumentoVenta = objDocumento.idDocumento
                Me.InsertSingleContado(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                'docCodigoCaja = cajaBL.InsertDocumentoCajaVenta(objDocumento.documentoventaAbarrotes)
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingleContado(i, objDocumento.idDocumento)

                    If i.tipoExistencia <> TipoRecurso.SERVICIO Then

                        'actualizando cabecera total almacen

                        't = New totalesAlmacen
                        't.idEmpresa = objDocumento.idEmpresa
                        't.idEstablecimiento = objDocumento.idCentroCosto
                        't.idAlmacen = i.idAlmacenOrigen
                        't.origenRecaudo = i.destino
                        't.idItem = i.idItem
                        't.cantidad = i.monto1 * -1
                        't.precioUnitarioCompra = i.precioUnitario * -1
                        't.importeSoles = i.salidaCostoMN * -1
                        't.importeDolares = i.salidaCostoME * -1


                        t = New totalesAlmacen
                        t.idEmpresa = i.IdEmpresa
                        t.idEstablecimiento = i.IdEstablecimiento
                        t.codigoLote = i.codigoLote
                        t.idAlmacen = i.idAlmacenOrigen
                        t.origenRecaudo = i.destino
                        t.idItem = i.idItem
                        t.cantidad = i.monto1 * -1
                        t.precioUnitarioCompra = i.precioUnitario * -1
                        t.importeSoles = i.salidaCostoMN * -1
                        t.importeDolares = i.salidaCostoME * -1

                        Product = totalesBL.ObtenerCanDisponibleProductLote(t)

                        If i.monto1 > Product.cantidad Then
                            Throw New Exception("El producto: " & i.nombreItem & ", no tiene stock disponible!")
                        End If

                        i.secuencia = codSecuenciaDetalle
                        i.NumDoc = objDocumento.documentoventaAbarrotes.numeroDoc
                        inventario.InsertVentaPagada(i, objDocumento)

                        'Dim objRecuperado = totalesBL.UpdateCostoVentaKardex(t)
                        'i.salidaCostoMN = objRecuperado.precioVentaMN
                        'i.salidaCostoME = objRecuperado.precioVentaUS

                    End If

                    'cajaBL.InsertCajadetalleVenta(i, objDocumento.idDocumento, docCodigoCaja, codSecuenciaDetalle)
                Next

                If objDocumento.TieneCotizacion = True Then
                    Dim cotizacion As documentoventaAbarrotes = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = objDocumento.documentoventaAbarrotes.IdDocumentoCotizacion).FirstOrDefault
                    cotizacion.idPadre = objDocumento.idDocumento
                End If

                'Dim ventaoriginal As documentoventaAbarrotes = (HeliosData.documentoventaAbarrotes.Where(Function(o) _
                '                                        o.idDocumento = codigoPadre)).FirstOrDefault
                'ventaoriginal.estadoCobro = TIPO_VENTA.PAGO.COBRADO

                If Not IsNothing(objDocumento.ListaCustomDocumento) Then
                    For Each i In objDocumento.ListaCustomDocumento
                        If objDocumento.documentoventaAbarrotes.IdNumeracion > 0 Then
                            i.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
                            i.documentoCaja.numeroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
                        Else
                            i.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroVenta
                            i.documentoCaja.numeroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroVenta
                        End If

                        SaveCaja(i, objDocumento.idDocumento)
                    Next
                End If

                If ((listaTortalesAlmacen).Count = 0) Then
                    asientoBL.SavebyGroupDoc(objDocumento)
                    objDocumento.idOrden = objDocumento.documentoventaAbarrotes.numeroDoc
                Else
                    'Return Nothing
                End If

                If (Not IsNothing(objDocumento.documentoGuia)) Then
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                    End If
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub CobrarVentaRapida(be As documento)
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Using ts As New TransactionScope
            CobrarVentaRapida_SPK(be)

            Dim listaVentaDet = be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList
            Dim ListaArticulos = (From n In listaVentaDet
                                  Where n.tipoExistencia <> "GS"
                                  Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct.ToList

            Dim fechaEnvioAlmacen = be.documentoventaAbarrotes.fechaConfirmacion.Value.Date
            For Each a In ListaArticulos
                Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                    New InventarioMovimiento With {
                    .idAlmacen = a.idAlmacenOrigen,
                    .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                    .tipoProducto = a.tipoExistencia,
                    .idItem = a.idItem,
                    .nrolote = a.codigoLote}, Nothing)
                totalesBL.GetCurarKardexCaberasLOTE(lista)
            Next

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub CobrarVentaRapidaEspecal(be As documento)
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Using ts As New TransactionScope
            CobrarVentaRapidaEspecial_SPK(be)

            'Dim listaVentaDet = be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList
            'Dim ListaArticulos = (From n In listaVentaDet
            '                      Where n.tipoExistencia <> "GS"
            '                      Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct.ToList

            'Dim fechaEnvioAlmacen = be.documentoventaAbarrotes.fechaConfirmacion.Value.Date
            'For Each a In ListaArticulos
            '    Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
            '        New InventarioMovimiento With {
            '        .idAlmacen = a.idAlmacenOrigen,
            '        .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
            '        .tipoProducto = a.tipoExistencia,
            '        .idItem = a.idItem,
            '        .nrolote = a.codigoLote}, Nothing)
            '    totalesBL.GetCurarKardexCaberasLOTE(lista)
            'Next

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub CobrarVentaRapidaEspecial_SPK(be As documento)
        Dim AsientoBL As New AsientoBL
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer
        Try
            Using ts As New TransactionScope
                Dim doc = HeliosData.documento.Where(Function(o) o.idDocumento = be.idDocumento).Single
                Select Case be.documentoventaAbarrotes.tipoDocumento
                    Case "12.1", "12.2"
                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(be.documentoventaAbarrotes.IdNumeracion))
                    Case "9907"
                        Dim nroNota = GetNumeracionNotaVenta(New documentoventaAbarrotes With
                                              {
                                              .idEmpresa = doc.idEmpresa,
                                              .tipoVenta = TIPO_VENTA.NOTA_DE_VENTA
                                              })
                        cval = nroNota
                End Select
                Dim venta = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).Single

                If venta IsNot Nothing Then
                    doc.nroDoc = be.documentoventaAbarrotes.serieVenta & "-" & cval
                    be.nroDoc = be.documentoventaAbarrotes.serieVenta & "-" & cval
                    be.CustomSerie = be.documentoventaAbarrotes.serieVenta
                    be.CustomNumero = cval
                    With venta
                        .idClientePedido = be.documentoventaAbarrotes.idClientePedido
                        .idCliente = be.documentoventaAbarrotes.idCliente
                        .terminos = be.documentoventaAbarrotes.terminos
                        .estadoCobro = TIPO_VENTA.PAGO.COBRADO
                        .serieVenta = be.documentoventaAbarrotes.serieVenta
                        .numeroVenta = cval
                        .fechaConfirmacion = be.documentoventaAbarrotes.fechaConfirmacion
                        .tipoDocumento = be.documentoventaAbarrotes.tipoDocumento
                        .estadoCobro = be.documentoventaAbarrotes.estadoCobro
                        .tipoVenta = be.documentoventaAbarrotes.tipoVenta
                        .glosa = be.documentoventaAbarrotes.glosa
                    End With
                End If
                'DetalleInventarioAprobado(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList, venta, cval)
                PagoDeLaVenta(be, be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)
                'AsientoBL.SavebyGroupDoc(be)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub CobrarVentaJiuni(be As documento)
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Using ts As New TransactionScope
            CobrarVentaJiuni_SPK(be)

            Dim listaVentaDet = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = be.idDocumento).ToList

            If listaVentaDet.Count > 0 Then
                Dim fechaEnvioAlmacen = be.documentoventaAbarrotes.fechaConfirmacion.Value.Date
                For Each a In listaVentaDet
                    Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                        New InventarioMovimiento With {
                        .idAlmacen = a.idAlmacen,
                        .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                        .tipoProducto = a.tipoProducto,
                        .idItem = a.idItem,
                        .nrolote = a.nrolote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(lista)
                Next
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub CobrarVentaEspecial(be As documento)
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Using ts As New TransactionScope
            CobrarVentaEspecial_SPK(be)

            'Dim listaVentaDet = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = be.idDocumento).ToList

            'If listaVentaDet.Count > 0 Then
            '    Dim fechaEnvioAlmacen = be.documentoventaAbarrotes.fechaConfirmacion.Value.Date
            '    'For Each a In listaVentaDet
            '    '    Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
            '    '        New InventarioMovimiento With {
            '    '        .idAlmacen = a.idAlmacen,
            '    '        .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
            '    '        .tipoProducto = a.tipoProducto,
            '    '        .idItem = a.idItem,
            '    '        .nrolote = a.nrolote}, Nothing)
            '    '    totalesBL.GetCurarKardexCaberasLOTE(lista)
            '    'Next
            'End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub CobrarVentaEspecial_SPK(be As documento)
        Dim AsientoBL As New AsientoBL
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer
        Try
            Using ts As New TransactionScope
                Dim doc = HeliosData.documento.Where(Function(o) o.idDocumento = be.idDocumento).Single
                Select Case be.documentoventaAbarrotes.tipoDocumento
                    Case "12.1", "12.2"
                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(be.documentoventaAbarrotes.IdNumeracion))
                    Case "9907"
                        Dim nroNota = GetNumeracionNotaVenta(New documentoventaAbarrotes With
                                              {
                                              .idEmpresa = doc.idEmpresa,
                                              .tipoVenta = TIPO_VENTA.NOTA_DE_VENTA
                                              })
                        cval = nroNota
                End Select
                Dim venta = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).Single

                If venta IsNot Nothing Then
                    doc.nroDoc = be.documentoventaAbarrotes.serieVenta & "-" & cval
                    be.nroDoc = be.documentoventaAbarrotes.serieVenta & "-" & cval
                    be.CustomSerie = be.documentoventaAbarrotes.serieVenta
                    be.CustomNumero = cval
                    With venta
                        .idClientePedido = be.documentoventaAbarrotes.idClientePedido
                        .idCliente = be.documentoventaAbarrotes.idCliente
                        .terminos = be.documentoventaAbarrotes.terminos
                        .estadoCobro = TIPO_VENTA.PAGO.COBRADO
                        .serieVenta = be.documentoventaAbarrotes.serieVenta
                        .numeroVenta = cval
                        .fechaConfirmacion = be.documentoventaAbarrotes.fechaConfirmacion
                        .tipoDocumento = be.documentoventaAbarrotes.tipoDocumento
                        .estadoCobro = be.documentoventaAbarrotes.estadoCobro
                        .tipoVenta = be.documentoventaAbarrotes.tipoVenta
                        .glosa = be.documentoventaAbarrotes.glosa
                    End With
                End If
                'DetalleInventarioJiuni(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList, venta, cval)
                PagoDeLaVentaSinLote(be, be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)
                'AsientoBL.SavebyGroupDoc(be)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub CobrarVentaJiuni_SPK(be As documento)
        Dim AsientoBL As New AsientoBL
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer
        Try
            Using ts As New TransactionScope
                Dim doc = HeliosData.documento.Where(Function(o) o.idDocumento = be.idDocumento).Single
                Select Case be.documentoventaAbarrotes.tipoDocumento
                    Case "12.1", "12.2"
                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(be.documentoventaAbarrotes.IdNumeracion))
                    Case "9907"
                        Dim nroNota = GetNumeracionNotaVenta(New documentoventaAbarrotes With
                                              {
                                              .idEmpresa = doc.idEmpresa,
                                              .tipoVenta = TIPO_VENTA.NOTA_DE_VENTA
                                              })
                        cval = nroNota
                End Select
                Dim venta = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).Single

                If venta IsNot Nothing Then
                    doc.nroDoc = be.documentoventaAbarrotes.serieVenta & "-" & cval
                    be.nroDoc = be.documentoventaAbarrotes.serieVenta & "-" & cval
                    be.CustomSerie = be.documentoventaAbarrotes.serieVenta
                    be.CustomNumero = cval
                    With venta
                        .idClientePedido = be.documentoventaAbarrotes.idClientePedido
                        .idCliente = be.documentoventaAbarrotes.idCliente
                        .terminos = be.documentoventaAbarrotes.terminos
                        .estadoCobro = TIPO_VENTA.PAGO.COBRADO
                        .serieVenta = be.documentoventaAbarrotes.serieVenta
                        .numeroVenta = cval
                        .fechaConfirmacion = be.documentoventaAbarrotes.fechaConfirmacion
                        .tipoDocumento = be.documentoventaAbarrotes.tipoDocumento
                        .estadoCobro = be.documentoventaAbarrotes.estadoCobro
                        .tipoVenta = be.documentoventaAbarrotes.tipoVenta
                        .glosa = be.documentoventaAbarrotes.glosa
                        .estadoEntrega = be.documentoventaAbarrotes.estadoEntrega
                    End With
                End If
                DetalleInventarioJiuni(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList, venta, cval)
                PagoDeLaVentaSinLote(be, be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)
                AsientoBL.SavebyGroupDoc(be)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Function ConsultaStockItem(i As documentoventaAbarrotesDet) As List(Of totalesAlmacen)

        Dim GetArticulosLote = (From x In
                                    HeliosData.totalesAlmacen
                                Where x.idAlmacen = i.idAlmacenOrigen _
                                    And x.idItem = i.idItem _
                                    And x.cantidad > 0).ToList

        Return GetArticulosLote

    End Function

    Function ConsultaStockItemV2(i As documentoventaAbarrotesDet) As List(Of usp_GetValidacionLotes_Result)

        'Dim GetArticulosLote = (From x In
        '                            HeliosData.totalesAlmacen
        '                        Join alm In HeliosData.almacen
        '                                On alm.idAlmacen Equals x.idAlmacen
        '                        Join lote In HeliosData.recursoCostoLote
        '                                On lote.codigoLote Equals x.codigoLote
        '                        Where
        '                            alm.tipo <> "AV" _
        '                            And lote.fechaentrada >= lote.fechaentrada And lote.fechaentrada <= i.documentoventaAbarrotes.fechaDoc _
        '                            And x.idItem = i.idItem _
        '                            And x.cantidad > 0 Select x).ToList

        'Dim articulos = HeliosData.usp_GetValidacionLotes(i.idItem, i.documentoventaAbarrotes.fechaDoc).ToList()
        Dim articulos = HeliosData.usp_GetValidacionLotes(i.idItem, DateTime.Now).ToList()


        Return articulos

    End Function

    Function ConsultaLotesDisponiblesAdmin(i As documentoventaAbarrotesDet) As List(Of recursoCostoLote)

        Dim Listados = (From x In
                                HeliosData.totalesAlmacen
                        Join alm In HeliosData.almacen
                                On alm.idAlmacen Equals x.idAlmacen
                        Join lote In HeliosData.recursoCostoLote
                            On lote.codigoLote Equals x.codigoLote
                        Join compra In HeliosData.documentocompra
                            On compra.idDocumento Equals lote.idDocumento
                        Join prov In HeliosData.entidad
                            On prov.idEntidad Equals compra.idProveedor
                        Join compradet In HeliosData.documentocompradetalle
                            On compradet.idDocumento Equals lote.idDocumento _
                            And compradet.idItem Equals lote.codigoProducto
                        Join equivale In HeliosData.detalleitem_equivalencias
                            On equivale.equivalencia_id Equals compradet.equivalencia_id
                        Where
                            alm.tipo <> "AV" _
                        And x.idItem = i.idItem _
                        And x.cantidad > 0
                        Select New With
                            {
                            lote,
                            .producto = compradet.descripcionItem,
                            .unidadComercial = equivale.unidadComercial,
                            .Proveedor = prov.nombreCompleto,
                            .tipodoc = compra.tipoDoc,
                            .serie = compra.serie,
                            .numero = compra.numeroDoc,
                            .stock = x.cantidad,
                            .compradet = compradet
                            }).ToList


        ConsultaLotesDisponiblesAdmin = New List(Of recursoCostoLote)
        Dim obj As recursoCostoLote
        For Each row In Listados
            obj = New recursoCostoLote With
            {
            .CustomCompraDetail = row.compradet,
            .codigoLote = row.lote.codigoLote,
            .nroLote = row.lote.nroLote,
            .idDocumento = row.lote.idDocumento,
            .codigoProducto = row.lote.codigoProducto,
            .moneda = row.lote.moneda,
            .detalle = row.lote.detalle,
            .cantidad = row.lote.cantidad,
            .precioUnitarioIva = row.lote.precioUnitarioIva,
            .fechaentrada = row.lote.fechaentrada,
            .fechaProduccion = row.lote.fechaProduccion,
            .fechaVcto = row.lote.fechaVcto,
            .serie = row.lote.serie,
            .sku = row.lote.sku,
            .composicion = row.lote.composicion,
            .productoSustentado = row.lote.productoSustentado,
            .UnidadComercial = row.unidadComercial,
            .TipoDoc = row.tipodoc,
            .serieDoc = row.serie,
            .numerodoc = row.numero,
            .Proveedor = row.Proveedor,
            .stock = row.stock
            }
            ConsultaLotesDisponiblesAdmin.Add(obj)
        Next
    End Function

    Function ConsultaStockItemKit(i As documentoventaAbarrotesDet, codigoItem As Integer) As List(Of usp_GetValidacionLotes_Result)

        'Dim GetArticulosLote = (From x In
        '                            HeliosData.totalesAlmacen
        '                        Join alm In HeliosData.almacen
        '                                On alm.idAlmacen Equals x.idAlmacen
        '                        Join lote In HeliosData.recursoCostoLote
        '                                On lote.codigoLote Equals x.codigoLote
        '                        Where
        '                            alm.tipo <> "AV" _
        '                            And lote.fechaentrada >= lote.fechaentrada And lote.fechaentrada <= i.documentoventaAbarrotes.fechaDoc _
        '                            And x.idItem = i.idItem _
        '                            And x.cantidad > 0 Select x).ToList

        Dim articulos = HeliosData.usp_GetValidacionLotes(codigoItem, i.documentoventaAbarrotes.fechaDoc).ToList()


        Return articulos

    End Function



    '    Private Sub DetalleInventarioJiuni(ventaDetalle As List(Of documentoventaAbarrotesDet), venta As documentoventaAbarrotes, cval As Integer)
    '        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
    '        Dim listaBeneficio As New List(Of String)
    '        listaBeneficio.Add("OFERTA")
    '        listaBeneficio.Add("REGALO")
    '        ' Dim obj As InventarioMovimiento
    '        Using ts As New TransactionScope
    '            Try
    '                Dim listaDetalleVenta = ventaDetalle.Where(Function(o) Not listaBeneficio.Contains(o.tipobeneficio)).ToList()
    '                Dim listaOfertas = ventaDetalle.Where(Function(o) o.tipobeneficio = "OFERTA").ToList
    '                Dim listaRegalos = ventaDetalle.Where(Function(o) o.tipobeneficio = "REGALO").ToList

    '                For Each i In listaRegalos
    '                    If (i.tipoExistencia <> "GS") Then
    '                        If i.monto1 > 0 Then
    '                            Dim CantidadSolicitada = i.monto1
    '                            Dim GetArticulosLote = ConsultaStockItem(i)
    '                            '(From x In
    '                            '                        HeliosData.totalesAlmacen
    '                            ' Where x.idAlmacen = i.idAlmacenOrigen _
    '                            '                        And x.idItem = i.idItem _
    '                            '                        And x.cantidad > 0).ToList

    '                            Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

    '                            If cantidadDisponible <= 0 Then
    '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
    '                            End If

    '                            If i.monto1 > cantidadDisponible Then
    '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
    '                            End If

    '#Region "INSERTAR INVENTARIO"
    '                            If CantidadSolicitada > 0 Then
    '                                For Each t In GetArticulosLote
    '                                    If t.StockSaldo > 0 Then

    '                                        If t.StockSaldo > CantidadSolicitada Then
    '                                            Dim canUso = CantidadSolicitada
    '                                            t.CantidadUsada = canUso

    '                                        ElseIf t.StockSaldo = CantidadSolicitada Then
    '                                            t.CantidadUsada = CantidadSolicitada
    '                                        Else
    '                                            Dim canUso = t.StockSaldo
    '                                            t.CantidadUsada = canUso
    '                                        End If
    '                                        CantidadSolicitada -= t.CantidadUsada
    '                                        If t.CantidadUsada > 0 Then
    '                                            t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
    '                                            i.TipoOperacion = "9917"
    '                                            GetSalidaInventario(venta, i, t)
    '                                        End If
    '                                    End If

    '                                    ' If t.CantidadUsada > 0 Then

    '                                    ' End If

    '                                Next
    '                            End If
    '#End Region
    '                        End If
    '                    End If
    '                Next

    '                For Each i In listaOfertas
    '                    If (i.tipoExistencia <> "GS") Then
    '                        If i.monto1 > 0 Then
    '                            Dim CantidadSolicitada = i.monto1
    '                            Dim GetArticulosLote = ConsultaStockItem(i)
    '                            '(From x In
    '                            '                        HeliosData.totalesAlmacen
    '                            ' Where x.idAlmacen = i.idAlmacenOrigen _
    '                            '                        And x.idItem = i.idItem _
    '                            '                        And x.cantidad > 0).ToList

    '                            Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

    '                            If cantidadDisponible <= 0 Then
    '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
    '                            End If

    '                            If i.monto1 > cantidadDisponible Then
    '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
    '                            End If

    '#Region "INSERTAR INVENTARIO"
    '                            If CantidadSolicitada > 0 Then
    '                                For Each t In GetArticulosLote
    '                                    If t.StockSaldo > 0 Then

    '                                        If t.StockSaldo > CantidadSolicitada Then
    '                                            Dim canUso = CantidadSolicitada
    '                                            t.CantidadUsada = canUso

    '                                        ElseIf t.StockSaldo = CantidadSolicitada Then
    '                                            t.CantidadUsada = CantidadSolicitada
    '                                        Else
    '                                            Dim canUso = t.StockSaldo
    '                                            t.CantidadUsada = canUso
    '                                        End If
    '                                        CantidadSolicitada -= t.CantidadUsada
    '                                        If t.CantidadUsada > 0 Then
    '                                            t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
    '                                            i.TipoOperacion = "07.02"
    '                                            GetSalidaInventario(venta, i, t)
    '                                        End If
    '                                    End If

    '                                    ' If t.CantidadUsada > 0 Then

    '                                    ' End If

    '                                Next
    '                            End If
    '#End Region
    '                        End If
    '                    End If
    '                Next

    '                Dim FlagCodigoProducto As Integer = 0
    '                Dim FlagProductoTotalCantidad As Decimal = 0
    '                For Each i In listaDetalleVenta.Where(Function(o) o.tipoExistencia <> "GS").ToList
    '                    FlagCodigoProducto = i.CustomProducto.codigodetalle
    '                    'If (i.tipoExistencia <> "GS") Then
    '                    If FlagCodigoProducto = i.CustomProducto.codigodetalle Then
    '#Region "Validando stock x producto"
    '                        If i.monto1 > 0 Then
    '                            Dim CantidadSolicitada = i.monto1 * i.CustomEquivalencia.fraccionUnidad.GetValueOrDefault

    '                            FlagProductoTotalCantidad += CantidadSolicitada

    '                            Dim GetArticulosLote = ConsultaStockItemV2(i) 'ConsultaStockItem(i)
    '                            If GetArticulosLote.Count = 0 Then
    '                                Throw New Exception("El producto " & i.nombreItem & " no tiene lotes disponibles")
    '                            End If
    '                            '(From x In
    '                            '                        HeliosData.totalesAlmacen
    '                            ' Where x.idAlmacen = i.idAlmacenOrigen _
    '                            '                        And x.idItem = i.idItem _
    '                            '                        And x.cantidad > 0).ToList

    '                            Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

    '                            If cantidadDisponible <= 0 Then
    '                                Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
    '                            End If

    '                            If CantidadSolicitada > cantidadDisponible Then
    '                                Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
    '                            End If

    '                            If CantidadSolicitada > 0 Then
    '                                For Each t In GetArticulosLote
    '                                    If t.StockSaldo > 0 Then
    '                                        'Dim fechaVenta = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
    '                                        'Dim fechaCompra = GetUbicarFechaCompraArticuloXLote(t.codigoLote)

    '                                        'If fechaCompra > fechaVenta Then
    '                                        '    Throw New Exception("La fec.de venta es menor a la fec.de compra")
    '                                        'End If

    '                                        If t.StockSaldo > CantidadSolicitada Then
    '                                            Dim canUso = CantidadSolicitada
    '                                            t.CantidadUsada = canUso

    '                                        ElseIf t.StockSaldo = CantidadSolicitada Then
    '                                            t.CantidadUsada = CantidadSolicitada
    '                                        Else
    '                                            Dim canUso = t.StockSaldo
    '                                            t.CantidadUsada = canUso
    '                                        End If
    '                                        CantidadSolicitada -= t.CantidadUsada
    '                                        If t.CantidadUsada > 0 Then
    '                                            t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
    '                                            i.TipoOperacion = "01"
    '                                            GetSalidaInventarioResult(venta, i, t)
    '                                        End If
    '                                    End If

    '                                Next
    '                            End If
    '                        End If
    '                    Else
    '                        'registrando suma total de unidades enviadas
    '                        sdfsdf
    '#End Region
    '                    End If


    '                    'End If
    '                Next

    '                '                For Each i In ventaDetalle
    '                '                    'Select Case i.tipoExistencia
    '                '                    Select Case i.tipobeneficio
    '                '                        Case "OFERTA"
    '                '                            'Dim ofertaDetails = HeliosData.ofertadetalle.Where(Function(o) o.id_oferta = i.idItem).ToList
    '                '                            'If ofertaDetails.Count > 0 Then
    '                '                            '    InsertarInventarioXoferta(venta, ofertaDetails)
    '                '                            'End If
    '                '                            Dim CantidadSolicitada = i.monto1
    '                '                            Dim GetArticulosLote = ConsultaStockItem(i)
    '                '                            '(From x In
    '                '                            '                        HeliosData.totalesAlmacen
    '                '                            ' Where x.idAlmacen = i.idAlmacenOrigen _
    '                '                            '                        And x.idItem = i.idItem _
    '                '                            '                        And x.cantidad > 0).ToList

    '                '                            Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

    '                '                            If cantidadDisponible <= 0 Then
    '                '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
    '                '                            End If

    '                '                            If i.monto1 > cantidadDisponible Then
    '                '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
    '                '                            End If

    '                '#Region "INSERTAR INVENTARIO"
    '                '                            If CantidadSolicitada > 0 Then
    '                '                                For Each t In GetArticulosLote
    '                '                                    If t.StockSaldo > 0 Then

    '                '                                        If t.StockSaldo > CantidadSolicitada Then
    '                '                                            Dim canUso = CantidadSolicitada
    '                '                                            t.CantidadUsada = canUso

    '                '                                        ElseIf t.StockSaldo = CantidadSolicitada Then
    '                '                                            t.CantidadUsada = CantidadSolicitada
    '                '                                        Else
    '                '                                            Dim canUso = t.StockSaldo
    '                '                                            t.CantidadUsada = canUso
    '                '                                        End If
    '                '                                    End If
    '                '                                    CantidadSolicitada -= t.CantidadUsada
    '                '                                    t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
    '                '                                    GetSalidaInventario(venta, i, t)
    '                '                                Next
    '                '                            End If
    '                '#End Region

    '                '                        Case Else
    '                '                            Dim CantidadSolicitada = i.monto1
    '                '                            Dim GetArticulosLote = ConsultaStockItem(i)
    '                '                            '(From x In
    '                '                            '                        HeliosData.totalesAlmacen
    '                '                            ' Where x.idAlmacen = i.idAlmacenOrigen _
    '                '                            '                        And x.idItem = i.idItem _
    '                '                            '                        And x.cantidad > 0).ToList

    '                '                            Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

    '                '                            If cantidadDisponible <= 0 Then
    '                '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
    '                '                            End If

    '                '                            If i.monto1 > cantidadDisponible Then
    '                '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
    '                '                            End If

    '                '                            If CantidadSolicitada > 0 Then
    '                '                                For Each t In GetArticulosLote
    '                '                                    If t.StockSaldo > 0 Then
    '                '                                        'Dim fechaVenta = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
    '                '                                        'Dim fechaCompra = GetUbicarFechaCompraArticuloXLote(t.codigoLote)


    '                '                                        'If fechaVenta < fechaCompra Then
    '                '                                        '    Throw New Exception("La fec.de venta es menor a la fec.de compra")
    '                '                                        'End If

    '                '                                        If t.StockSaldo > CantidadSolicitada Then
    '                '                                            Dim canUso = CantidadSolicitada
    '                '                                            t.CantidadUsada = canUso

    '                '                                        ElseIf t.StockSaldo = CantidadSolicitada Then
    '                '                                            t.CantidadUsada = CantidadSolicitada
    '                '                                        Else
    '                '                                            Dim canUso = t.StockSaldo
    '                '                                            t.CantidadUsada = canUso
    '                '                                        End If
    '                '                                    End If
    '                '                                    CantidadSolicitada -= t.CantidadUsada
    '                '                                    t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
    '                '                                    GetSalidaInventario(venta, i, t)
    '                '                                Next
    '                '                            End If
    '                '                    End Select



    '                '                    'obj = New InventarioMovimiento
    '                '                    'obj.idorigenDetalle = i.secuencia
    '                '                    'obj.idEmpresa = venta.idEmpresa
    '                '                    'obj.idEstablecimiento = venta.idEstablecimiento
    '                '                    'obj.idAlmacen = i.idAlmacenOrigen
    '                '                    'obj.nrolote = i.codigoLote
    '                '                    'obj.tipoOperacion = "01"
    '                '                    'obj.tipoDocAlmacen = "99"
    '                '                    'obj.serie = venta.serieVenta
    '                '                    'obj.numero = cval
    '                '                    'obj.idDocumento = venta.idDocumento
    '                '                    'obj.idDocumentoRef = venta.idDocumento
    '                '                    'obj.descripcion = i.nombreItem
    '                '                    'obj.fechaLaboral = venta.fechaConfirmacion
    '                '                    'obj.fecha = venta.fechaConfirmacion
    '                '                    'obj.tipoRegistro = "S"
    '                '                    'obj.destinoGravadoItem = i.destino
    '                '                    'obj.tipoProducto = i.tipoExistencia
    '                '                    'obj.OrigentipoProducto = "N"
    '                '                    'obj.idItem = i.idItem
    '                '                    'obj.cantidad = i.monto1 * -1
    '                '                    'obj.unidad = i.unidad1
    '                '                    'obj.cantidad2 = 0
    '                '                    'obj.precUnite = 0
    '                '                    'obj.precUniteUSD = 0
    '                '                    'obj.monto = 0
    '                '                    'obj.montoUSD = 0
    '                '                    'obj.montoOther = 0
    '                '                    'obj.monedaOther = 0
    '                '                    'obj.status = "D"
    '                '                    'obj.entragado = "SI"
    '                '                    'obj.usuarioActualizacion = venta.usuarioActualizacion
    '                '                    'obj.fechaActualizacion = Date.Now
    '                '                    'HeliosData.InventarioMovimiento.Add(obj)
    '                '                Next
    '                HeliosData.SaveChanges()
    '                ts.Complete()
    '            Catch ex As Exception
    '                Throw ex
    '            End Try
    '        End Using
    '    End Sub

    Private Sub DetalleInventarioJiuni(ventaDetalle As List(Of documentoventaAbarrotesDet), venta As documentoventaAbarrotes, cval As Integer)
        '   Dim cantidadGlobalXproducto As Decimal = 0
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim listaBeneficio As New List(Of String)
        listaBeneficio.Add("OFERTA")
        listaBeneficio.Add("REGALO")

        Dim listaTipoEx As New List(Of String)
        listaTipoEx.Add(TipoExistencia.Kit)
        listaTipoEx.Add("KIT")

        Dim listaTipoVenta As New List(Of String)
        listaTipoVenta.Add("KIT")

        '   Dim listaSecuenciaItem As New List(Of Integer)

        ' Dim obj As InventarioMovimiento
        Using ts As New TransactionScope
            Try
                Dim listaDetalleVenta = ventaDetalle.Where(Function(o) Not listaBeneficio.Contains(o.tipobeneficio) And Not listaTipoEx.Contains(o.tipoExistencia) And Not listaTipoVenta.Contains(o.tipoVenta)).ToList()
                Dim listaOfertas = ventaDetalle.Where(Function(o) o.tipobeneficio = "OFERTA").ToList
                Dim listaRegalos = ventaDetalle.Where(Function(o) o.tipobeneficio = "REGALO").ToList

                Dim listakits = ventaDetalle.Where(Function(o) o.tipoVenta = "KIT").ToList

                '     Dim listaKits = ventaDetalle.Where(Function(o) listaTipoEx.Contains(o.tipoExistencia)).ToList

                For Each i In listaRegalos
                    If (i.tipoExistencia <> "GS") Then
                        If i.monto1 > 0 Then
                            Dim CantidadSolicitada = i.monto1
                            Dim GetArticulosLote = ConsultaStockItem(i)
                            '(From x In
                            '                        HeliosData.totalesAlmacen
                            ' Where x.idAlmacen = i.idAlmacenOrigen _
                            '                        And x.idItem = i.idItem _
                            '                        And x.cantidad > 0).ToList

                            Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                            If cantidadDisponible <= 0 Then
                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
                            End If

                            If i.monto1 > cantidadDisponible Then
                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
                            End If

#Region "INSERTAR INVENTARIO"
                            If CantidadSolicitada > 0 Then
                                For Each t In GetArticulosLote
                                    If t.StockSaldo > 0 Then

                                        If t.StockSaldo > CantidadSolicitada Then
                                            Dim canUso = CantidadSolicitada
                                            t.CantidadUsada = canUso

                                        ElseIf t.StockSaldo = CantidadSolicitada Then
                                            t.CantidadUsada = CantidadSolicitada
                                        Else
                                            Dim canUso = t.StockSaldo
                                            t.CantidadUsada = canUso
                                        End If
                                        CantidadSolicitada -= t.CantidadUsada
                                        If t.CantidadUsada > 0 Then
                                            t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                                            i.TipoOperacion = "9917"
                                            GetSalidaInventario(venta, i, t)
                                        End If
                                    End If

                                    ' If t.CantidadUsada > 0 Then

                                    ' End If

                                Next
                            End If
#End Region
                        End If
                    End If
                Next

                For Each i In listaOfertas
#Region "Validando stock x producto"
                    If i.monto1 > 0 Then
                        ''''''' Dim cantidadSolicitadaAcumulada = listaDetalleVenta.Where(Function(o) o.idItem = i.CustomProducto.codigodetalle).ToList
                        '''''''cantidadGlobalXproducto = 0
                        '''''''For Each eq In cantidadSolicitadaAcumulada
                        '''''''    Dim CantidadEval = eq.monto1 * eq.CustomEquivalencia.fraccionUnidad.GetValueOrDefault
                        '''''''    cantidadGlobalXproducto += CantidadEval
                        '''''''Next
                        '------------------------------------------------------------------------------------------------

                        Dim CantidadSolicitada = i.monto1 * i.CustomEquivalencia.contenido_neto.GetValueOrDefault






                        Dim GetArticulosLote = ConsultaStockItemV2(i) 'ConsultaStockItem(i)
                        If GetArticulosLote.Count = 0 Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene lotes disponibles")
                        End If
                        '(From x In
                        '                        HeliosData.totalesAlmacen
                        ' Where x.idAlmacen = i.idAlmacenOrigen _
                        '                        And x.idItem = i.idItem _
                        '                        And x.cantidad > 0).ToList

                        Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                        If cantidadDisponible <= 0 Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        End If

                        If CantidadSolicitada > cantidadDisponible Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        End If

                        ''''''''''If cantidadGlobalXproducto > cantidadDisponible Then
                        ''''''''''    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        ''''''''''End If

                        If CantidadSolicitada > 0 Then
                            'Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                            'If cantidadDisponible <= 0 Then
                            '    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                            'End If

                            'If cantidadGlobalXproducto > cantidadDisponible Then
                            '    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                            'End If

                            For Each t In GetArticulosLote
                                If t.StockSaldo > 0 Then
                                    'Dim fechaVenta = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
                                    'Dim fechaCompra = GetUbicarFechaCompraArticuloXLote(t.codigoLote)

                                    'If fechaCompra > fechaVenta Then
                                    '    Throw New Exception("La fec.de venta es menor a la fec.de compra")
                                    'End If

                                    If t.StockSaldo > CantidadSolicitada Then
                                        Dim canUso = CantidadSolicitada
                                        t.CantidadUsada = canUso

                                    ElseIf t.StockSaldo = CantidadSolicitada Then
                                        t.CantidadUsada = CantidadSolicitada

                                        Dim inv = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = t.idItem And o.codigoLote = t.codigoLote).SingleOrDefault
                                        inv.cantidad = 0
                                    Else
                                        Dim canUso = t.StockSaldo
                                        t.CantidadUsada = canUso
                                    End If
                                    CantidadSolicitada -= t.CantidadUsada
                                    If t.CantidadUsada > 0 Then
                                        t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                                        i.TipoOperacion = "07.02" ' "01"
                                        GetSalidaInventarioResult(venta, i, t)
                                        ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
                                    End If
                                End If

                            Next
                        End If
                    End If



#End Region

                Next



                For Each i In listaDetalleVenta.Where(Function(o) o.tipoExistencia <> "GS").ToList
                    'If (i.tipoExistencia <> "GS") Then


#Region "Validando stock x producto"
                    If i.monto1 > 0 Then
                        ''''''' Dim cantidadSolicitadaAcumulada = listaDetalleVenta.Where(Function(o) o.idItem = i.CustomProducto.codigodetalle).ToList
                        '''''''cantidadGlobalXproducto = 0
                        '''''''For Each eq In cantidadSolicitadaAcumulada
                        '''''''    Dim CantidadEval = eq.monto1 * eq.CustomEquivalencia.fraccionUnidad.GetValueOrDefault
                        '''''''    cantidadGlobalXproducto += CantidadEval
                        '''''''Next
                        '------------------------------------------------------------------------------------------------

                        Dim CantidadSolicitada = i.monto1 * i.CustomEquivalencia.contenido_neto.GetValueOrDefault 'fraccionUnidad.GetValueOrDefault


                        'MARTIN
                        If i.idLoteDetalle > 0 Then ' si es venta detallada
                            Dim loteSelect = ConsultaStockLote(i)

                            If loteSelect.cantidad = 0 Then
                                Throw New Exception("El lote " & i.idLote & " no tiene stock disponible")
                            End If

                            If CantidadSolicitada > 0 Then

                                If loteSelect.cantidad > 0 Then

                                    If loteSelect.cantidad > CantidadSolicitada Then
                                        Dim canUso = CantidadSolicitada
                                        loteSelect.CantidadUsada = canUso
                                    ElseIf loteSelect.cantidad = CantidadSolicitada Then
                                        loteSelect.CantidadUsada = CantidadSolicitada
                                    Else
                                        Dim canUso = loteSelect.StockSaldo
                                        loteSelect.CantidadUsada = canUso
                                    End If
                                    CantidadSolicitada -= loteSelect.CantidadUsada
                                    If loteSelect.CantidadUsada > 0 Then
                                        loteSelect.precioUnitarioCompra = (loteSelect.importeSoles / loteSelect.cantidad) * loteSelect.CantidadUsada
                                        i.TipoOperacion = venta.tipoOperacion ' "01"
                                        GetSalidaInventarioLoteResult(venta, i, loteSelect)
                                        ActualizarInventarioPorItem(venta, loteSelect.idItem, loteSelect.codigoLote)

                                        ActualizarLoteDetalle(i.idLote, i.idLoteDetalle)
                                    End If
                                End If
                            End If

                        ElseIf i.idLote > 0 Then ' si es venta solo por lote

                            Dim loteSelect = ConsultaStockLote(i)
                            If loteSelect.cantidad = 0 Then
                                Throw New Exception("El lote " & i.idLote & " no tiene stock disponible")
                            End If

                            If CantidadSolicitada > 0 Then

                                If loteSelect.cantidad > 0 Then

                                    If loteSelect.cantidad > CantidadSolicitada Then
                                        Dim canUso = CantidadSolicitada
                                        loteSelect.CantidadUsada = canUso

                                    ElseIf loteSelect.cantidad = CantidadSolicitada Then
                                        loteSelect.CantidadUsada = CantidadSolicitada
                                    Else
                                        Dim canUso = loteSelect.StockSaldo
                                        loteSelect.CantidadUsada = canUso
                                    End If
                                    CantidadSolicitada -= loteSelect.CantidadUsada
                                    If loteSelect.CantidadUsada > 0 Then
                                        loteSelect.precioUnitarioCompra = (loteSelect.importeSoles / loteSelect.cantidad) * loteSelect.CantidadUsada
                                        i.TipoOperacion = venta.tipoOperacion ' "01"
                                        GetSalidaInventarioLoteResult(venta, i, loteSelect)
                                        ActualizarInventarioPorItem(venta, loteSelect.idItem, loteSelect.codigoLote)
                                    End If
                                End If


                            End If

                        Else

                            'END MARTIN

                            If i.idAlmacenOrigen IsNot Nothing Then


                                Dim GetArticulosLote = ConsultaStockItemV2Almacen(i) 'ConsultaStockItem(i)
                                If GetArticulosLote.Count = 0 Then
                                    Throw New Exception("El producto " & i.nombreItem & " no tiene lotes disponibles")
                                End If
                                '(From x In
                                '                        HeliosData.totalesAlmacen
                                ' Where x.idAlmacen = i.idAlmacenOrigen _
                                '                        And x.idItem = i.idItem _
                                '                        And x.cantidad > 0).ToList

                                Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                                If cantidadDisponible <= 0 Then
                                    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                                End If

                                If CantidadSolicitada > cantidadDisponible Then
                                    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                                End If

                                ''''''''''If cantidadGlobalXproducto > cantidadDisponible Then
                                ''''''''''    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                                ''''''''''End If

                                If CantidadSolicitada > 0 Then
                                    'Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                                    'If cantidadDisponible <= 0 Then
                                    '    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                                    'End If

                                    'If cantidadGlobalXproducto > cantidadDisponible Then
                                    '    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                                    'End If

                                    For Each t In GetArticulosLote
                                        If t.StockSaldo > 0 Then
                                            'Dim fechaVenta = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
                                            'Dim fechaCompra = GetUbicarFechaCompraArticuloXLote(t.codigoLote)

                                            'If fechaCompra > fechaVenta Then
                                            '    Throw New Exception("La fec.de venta es menor a la fec.de compra")
                                            'End If

                                            If t.StockSaldo > CantidadSolicitada Then
                                                Dim canUso = CantidadSolicitada
                                                t.CantidadUsada = canUso

                                            ElseIf t.StockSaldo = CantidadSolicitada Then
                                                t.CantidadUsada = CantidadSolicitada

                                                'Dim inv = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = t.idItem And o.codigoLote = t.codigoLote).SingleOrDefault
                                                'inv.cantidad = 0
                                            Else
                                                Dim canUso = t.StockSaldo
                                                t.CantidadUsada = canUso
                                            End If
                                            CantidadSolicitada -= t.CantidadUsada
                                            If t.CantidadUsada > 0 Then
                                                t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                                                i.TipoOperacion = venta.tipoOperacion ' "01"
                                                GetSalidaInventarioResultAlmacen(venta, i, t)
                                                ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
                                            End If
                                        End If

                                    Next
                                End If



                            Else

                                Dim GetArticulosLote = ConsultaStockItemV2(i) 'ConsultaStockItem(i)
                                If GetArticulosLote.Count = 0 Then
                                    Throw New Exception("El producto " & i.nombreItem & " no tiene lotes disponibles")
                                End If
                                '(From x In
                                '                        HeliosData.totalesAlmacen
                                ' Where x.idAlmacen = i.idAlmacenOrigen _
                                '                        And x.idItem = i.idItem _
                                '                        And x.cantidad > 0).ToList

                                Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                                If cantidadDisponible <= 0 Then
                                    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                                End If

                                If CantidadSolicitada > cantidadDisponible Then
                                    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                                End If

                                ''''''''''If cantidadGlobalXproducto > cantidadDisponible Then
                                ''''''''''    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                                ''''''''''End If

                                If CantidadSolicitada > 0 Then
                                    'Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                                    'If cantidadDisponible <= 0 Then
                                    '    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                                    'End If

                                    'If cantidadGlobalXproducto > cantidadDisponible Then
                                    '    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                                    'End If

                                    For Each t In GetArticulosLote
                                        If t.StockSaldo > 0 Then
                                            'Dim fechaVenta = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
                                            'Dim fechaCompra = GetUbicarFechaCompraArticuloXLote(t.codigoLote)

                                            'If fechaCompra > fechaVenta Then
                                            '    Throw New Exception("La fec.de venta es menor a la fec.de compra")
                                            'End If

                                            If t.StockSaldo > CantidadSolicitada Then
                                                Dim canUso = CantidadSolicitada
                                                t.CantidadUsada = canUso

                                            ElseIf t.StockSaldo = CantidadSolicitada Then
                                                t.CantidadUsada = CantidadSolicitada

                                                'Dim inv = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = t.idItem And o.codigoLote = t.codigoLote).SingleOrDefault
                                                'inv.cantidad = 0
                                            Else
                                                Dim canUso = t.StockSaldo
                                                t.CantidadUsada = canUso
                                            End If
                                            CantidadSolicitada -= t.CantidadUsada
                                            If t.CantidadUsada > 0 Then
                                                t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                                                i.TipoOperacion = venta.tipoOperacion ' "01"
                                                GetSalidaInventarioResult(venta, i, t)
                                                ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
                                            End If
                                        End If

                                    Next
                                End If


                            End If



                        End If





                    End If
#End Region

                    'End If
                Next

                For Each I In listakits
#Region "Validando stock x producto"
                    If I.monto1 > 0 Then
                        ''''''' Dim cantidadSolicitadaAcumulada = listaDetalleVenta.Where(Function(o) o.idItem = i.CustomProducto.codigodetalle).ToList
                        '''''''cantidadGlobalXproducto = 0
                        '''''''For Each eq In cantidadSolicitadaAcumulada
                        '''''''    Dim CantidadEval = eq.monto1 * eq.CustomEquivalencia.fraccionUnidad.GetValueOrDefault
                        '''''''    cantidadGlobalXproducto += CantidadEval
                        '''''''Next
                        '------------------------------------------------------------------------------------------------

                        Dim CantidadSolicitada = I.monto1 * I.CustomEquivalencia.fraccionUnidad.GetValueOrDefault
                        Dim GetArticulosLote = ConsultaStockItemV2(I) 'ConsultaStockItem(i)
                        If GetArticulosLote.Count = 0 Then
                            Throw New Exception("El producto " & I.nombreItem & " no tiene lotes disponibles")
                        End If
                        '(From x In
                        '                        HeliosData.totalesAlmacen
                        ' Where x.idAlmacen = i.idAlmacenOrigen _
                        '                        And x.idItem = i.idItem _
                        '                        And x.cantidad > 0).ToList

                        Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                        If cantidadDisponible <= 0 Then
                            Throw New Exception("El producto " & I.nombreItem & " no tiene stock suficiente")
                        End If

                        If CantidadSolicitada > cantidadDisponible Then
                            Throw New Exception("El producto " & I.nombreItem & " no tiene stock suficiente")
                        End If

                        ''''''''''If cantidadGlobalXproducto > cantidadDisponible Then
                        ''''''''''    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        ''''''''''End If

                        If CantidadSolicitada > 0 Then
                            'Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                            'If cantidadDisponible <= 0 Then
                            '    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                            'End If

                            'If cantidadGlobalXproducto > cantidadDisponible Then
                            '    Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                            'End If

                            For Each t In GetArticulosLote
                                If t.StockSaldo > 0 Then
                                    'Dim fechaVenta = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
                                    'Dim fechaCompra = GetUbicarFechaCompraArticuloXLote(t.codigoLote)

                                    'If fechaCompra > fechaVenta Then
                                    '    Throw New Exception("La fec.de venta es menor a la fec.de compra")
                                    'End If

                                    If t.StockSaldo > CantidadSolicitada Then
                                        Dim canUso = CantidadSolicitada
                                        t.CantidadUsada = canUso

                                    ElseIf t.StockSaldo = CantidadSolicitada Then
                                        t.CantidadUsada = CantidadSolicitada

                                        Dim inv = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = t.idItem And o.codigoLote = t.codigoLote).SingleOrDefault
                                        inv.cantidad = 0
                                    Else
                                        Dim canUso = t.StockSaldo
                                        t.CantidadUsada = canUso
                                    End If
                                    CantidadSolicitada -= t.CantidadUsada
                                    If t.CantidadUsada > 0 Then
                                        t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                                        I.TipoOperacion = "01"
                                        GetSalidaInventarioResult(venta, I, t)
                                        ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
                                    End If
                                End If

                            Next
                        End If
                    End If
#End Region
                Next



                '                For Each i In ventaDetalle
                '                    'Select Case i.tipoExistencia
                '                    Select Case i.tipobeneficio
                '                        Case "OFERTA"
                '                            'Dim ofertaDetails = HeliosData.ofertadetalle.Where(Function(o) o.id_oferta = i.idItem).ToList
                '                            'If ofertaDetails.Count > 0 Then
                '                            '    InsertarInventarioXoferta(venta, ofertaDetails)
                '                            'End If
                '                            Dim CantidadSolicitada = i.monto1
                '                            Dim GetArticulosLote = ConsultaStockItem(i)
                '                            '(From x In
                '                            '                        HeliosData.totalesAlmacen
                '                            ' Where x.idAlmacen = i.idAlmacenOrigen _
                '                            '                        And x.idItem = i.idItem _
                '                            '                        And x.cantidad > 0).ToList

                '                            Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                '                            If cantidadDisponible <= 0 Then
                '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
                '                            End If

                '                            If i.monto1 > cantidadDisponible Then
                '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
                '                            End If

                '#Region "INSERTAR INVENTARIO"
                '                            If CantidadSolicitada > 0 Then
                '                                For Each t In GetArticulosLote
                '                                    If t.StockSaldo > 0 Then

                '                                        If t.StockSaldo > CantidadSolicitada Then
                '                                            Dim canUso = CantidadSolicitada
                '                                            t.CantidadUsada = canUso

                '                                        ElseIf t.StockSaldo = CantidadSolicitada Then
                '                                            t.CantidadUsada = CantidadSolicitada
                '                                        Else
                '                                            Dim canUso = t.StockSaldo
                '                                            t.CantidadUsada = canUso
                '                                        End If
                '                                    End If
                '                                    CantidadSolicitada -= t.CantidadUsada
                '                                    t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                '                                    GetSalidaInventario(venta, i, t)
                '                                Next
                '                            End If
                '#End Region

                '                        Case Else
                '                            Dim CantidadSolicitada = i.monto1
                '                            Dim GetArticulosLote = ConsultaStockItem(i)
                '                            '(From x In
                '                            '                        HeliosData.totalesAlmacen
                '                            ' Where x.idAlmacen = i.idAlmacenOrigen _
                '                            '                        And x.idItem = i.idItem _
                '                            '                        And x.cantidad > 0).ToList

                '                            Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                '                            If cantidadDisponible <= 0 Then
                '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
                '                            End If

                '                            If i.monto1 > cantidadDisponible Then
                '                                Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
                '                            End If

                '                            If CantidadSolicitada > 0 Then
                '                                For Each t In GetArticulosLote
                '                                    If t.StockSaldo > 0 Then
                '                                        'Dim fechaVenta = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
                '                                        'Dim fechaCompra = GetUbicarFechaCompraArticuloXLote(t.codigoLote)


                '                                        'If fechaVenta < fechaCompra Then
                '                                        '    Throw New Exception("La fec.de venta es menor a la fec.de compra")
                '                                        'End If

                '                                        If t.StockSaldo > CantidadSolicitada Then
                '                                            Dim canUso = CantidadSolicitada
                '                                            t.CantidadUsada = canUso

                '                                        ElseIf t.StockSaldo = CantidadSolicitada Then
                '                                            t.CantidadUsada = CantidadSolicitada
                '                                        Else
                '                                            Dim canUso = t.StockSaldo
                '                                            t.CantidadUsada = canUso
                '                                        End If
                '                                    End If
                '                                    CantidadSolicitada -= t.CantidadUsada
                '                                    t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                '                                    GetSalidaInventario(venta, i, t)
                '                                Next
                '                            End If
                '                    End Select



                '                    'obj = New InventarioMovimiento
                '                    'obj.idorigenDetalle = i.secuencia
                '                    'obj.idEmpresa = venta.idEmpresa
                '                    'obj.idEstablecimiento = venta.idEstablecimiento
                '                    'obj.idAlmacen = i.idAlmacenOrigen
                '                    'obj.nrolote = i.codigoLote
                '                    'obj.tipoOperacion = "01"
                '                    'obj.tipoDocAlmacen = "99"
                '                    'obj.serie = venta.serieVenta
                '                    'obj.numero = cval
                '                    'obj.idDocumento = venta.idDocumento
                '                    'obj.idDocumentoRef = venta.idDocumento
                '                    'obj.descripcion = i.nombreItem
                '                    'obj.fechaLaboral = venta.fechaConfirmacion
                '                    'obj.fecha = venta.fechaConfirmacion
                '                    'obj.tipoRegistro = "S"
                '                    'obj.destinoGravadoItem = i.destino
                '                    'obj.tipoProducto = i.tipoExistencia
                '                    'obj.OrigentipoProducto = "N"
                '                    'obj.idItem = i.idItem
                '                    'obj.cantidad = i.monto1 * -1
                '                    'obj.unidad = i.unidad1
                '                    'obj.cantidad2 = 0
                '                    'obj.precUnite = 0
                '                    'obj.precUniteUSD = 0
                '                    'obj.monto = 0
                '                    'obj.montoUSD = 0
                '                    'obj.montoOther = 0
                '                    'obj.monedaOther = 0
                '                    'obj.status = "D"
                '                    'obj.entragado = "SI"
                '                    'obj.usuarioActualizacion = venta.usuarioActualizacion
                '                    'obj.fechaActualizacion = Date.Now
                '                    'HeliosData.InventarioMovimiento.Add(obj)
                '                Next
                HeliosData.SaveChanges()
                ts.Complete()
            Catch ex As Exception
                Throw ex
            End Try
        End Using
    End Sub


    Function ConsultaStockItemV2Almacen(i As documentoventaAbarrotesDet) As List(Of usp_GetValidacionLotesAlmacen_Result)

        'Dim GetArticulosLote = (From x In
        '                            HeliosData.totalesAlmacen
        '                        Join alm In HeliosData.almacen
        '                                On alm.idAlmacen Equals x.idAlmacen
        '                        Join lote In HeliosData.recursoCostoLote
        '                                On lote.codigoLote Equals x.codigoLote
        '                        Where
        '                            alm.tipo <> "AV" _
        '                            And lote.fechaentrada >= lote.fechaentrada And lote.fechaentrada <= i.documentoventaAbarrotes.fechaDoc _
        '                            And x.idItem = i.idItem _
        '                            And x.cantidad > 0 Select x).ToList

        'Dim articulos = HeliosData.usp_GetValidacionLotes(i.idItem, i.documentoventaAbarrotes.fechaDoc).ToList()
        Dim articulos = HeliosData.usp_GetValidacionLotesAlmacen(i.idItem, DateTime.Now, i.idAlmacenOrigen).ToList()


        Return articulos

    End Function

    Function ConsultaStockLote(i As documentoventaAbarrotesDet) As totalesAlmacen


        Dim articulos = (From x In
                                    HeliosData.totalesAlmacen
                         Where x.codigoLote = i.idLote).FirstOrDefault


        Return articulos

    End Function

    Public Sub ActualizarLoteDetalle(idlote As Integer, idDet As Integer)




        Try
            Dim lista = HeliosData.LoteDetalle.Where(Function(o) o.numeracion = idDet And o.codigoLote = idlote).ToList


            For Each i In lista
                ActualizarDetallesLot(i.idDetalleLote)
            Next

        Catch ex As Exception
            Throw ex
        End Try


    End Sub



    Public Sub ActualizarDetallesLot(idDet As Integer)


        Using ts As New TransactionScope

            Try
                Dim obj = HeliosData.LoteDetalle.Where(Function(o) o.idDetalleLote = idDet).SingleOrDefault
                obj.estado = "VN"

                HeliosData.SaveChanges()
                ts.Complete()
            Catch ex As Exception
                Throw ex
            End Try
        End Using

    End Sub

    Private Sub GetSalidaInventarioLoteResult(venta As documentoventaAbarrotes, i As documentoventaAbarrotesDet, t As totalesAlmacen)
        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = i.secuencia
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idEstablecimiento
            obj.idAlmacen = t.idAlmacen ' i.idAlmacenOrigen
            obj.nrolote = t.codigoLote ' i.codigoLote
            obj.tipoOperacion = i.TipoOperacion ' "01"
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serieVenta
            obj.numero = venta.numeroVenta
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idDocumento
            obj.descripcion = i.nombreItem
            obj.fechaLaboral = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.fecha = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.tipoRegistro = "S"
            obj.destinoGravadoItem = i.destino
            obj.tipoProducto = i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = t.CantidadUsada * -1 ' i.monto1 * -1
            obj.unidad = i.unidad1
            obj.unidad2 = i.CustomEquivalencia.unidadComercial
            obj.cantidad2 = t.CantidadUsada / i.CustomEquivalencia.contenido_neto * -1 '/ i.ContenidoNetoUnidadComercialMaxima.GetValueOrDefault * -1 ' i.monto1.GetValueOrDefault * -1
            obj.contenido_neto = i.CustomEquivalencia.contenido_neto
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = obj.cantidad2 * CDec(i.monto2) * -1 'i.importeMN ' t.CantidadUsada * i.precioUnitario | obj.cantidad2 * CDec(i.monto2) * -1
            obj.montoUSD = i.importeME.GetValueOrDefault ' t.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = t.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now
            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    '    Private Sub CommitInventoryOperations(ventaDetalle As List(Of documentoventaAbarrotesDet), venta As documentoventaAbarrotes, cval As Integer)
    '        '   Dim cantidadGlobalXproducto As Decimal = 0
    '        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
    '        Dim listaBeneficio As New List(Of String)
    '        listaBeneficio.Add("OFERTA")
    '        listaBeneficio.Add("REGALO")

    '        Dim listaTipoEx As New List(Of String)
    '        listaTipoEx.Add(TipoExistencia.Kit)
    '        listaTipoEx.Add("KIT")

    '        Dim listaTipoVenta As New List(Of String)
    '        listaTipoVenta.Add("KIT")

    '        '   Dim listaSecuenciaItem As New List(Of Integer)

    '        ' Dim obj As InventarioMovimiento
    '        Using ts As New TransactionScope
    '            Try
    '                Dim listaDetalleVenta = ventaDetalle.Where(Function(o) Not listaBeneficio.Contains(o.tipobeneficio) And Not listaTipoEx.Contains(o.tipoExistencia) And Not listaTipoVenta.Contains(o.tipoVenta)).ToList()

    '                For Each i In listaDetalleVenta.Where(Function(o) o.tipoExistencia <> "GS").ToList
    '                    'If (i.tipoExistencia <> "GS") Then


    '#Region "Validando stock x producto"
    '                    If i.monto1 > 0 Then

    '                        Dim CantidadSolicitada = i.monto1 * i.CustomEquivalencia.fraccionUnidad.GetValueOrDefault
    '                        Dim GetArticulosLote = ConsultaStockItemV2(i) 'ConsultaStockItem(i)
    '                        If GetArticulosLote.Count = 0 Then
    '                            Throw New Exception("El producto " & i.nombreItem & " no tiene lotes disponibles")
    '                        End If

    '                        Dim cantidadDisponible = GetArticulosLote.Where(Function(o) o.idAlmacen = i.idAlmacenOrigen).Sum(Function(o) o.cantidad)

    '                        If cantidadDisponible <= 0 Then
    '                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
    '                        End If

    '                        If CantidadSolicitada > cantidadDisponible Then
    '                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
    '                        End If


    '                        If CantidadSolicitada > 0 Then

    '                            For Each t In GetArticulosLote.Where(Function(o) o.idAlmacen = i.idAlmacenOrigen).ToList
    '                                If t.StockSaldo > 0 Then

    '                                    If t.StockSaldo > CantidadSolicitada Then
    '                                        Dim canUso = CantidadSolicitada
    '                                        t.CantidadUsada = canUso

    '                                    ElseIf t.StockSaldo = CantidadSolicitada Then
    '                                        t.CantidadUsada = CantidadSolicitada

    '                                        'Dim inv = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = t.idItem And o.codigoLote = t.codigoLote).SingleOrDefault
    '                                        'inv.cantidad = 0
    '                                    Else
    '                                        Dim canUso = t.StockSaldo
    '                                        t.CantidadUsada = canUso
    '                                    End If
    '                                    CantidadSolicitada -= t.CantidadUsada
    '                                    If t.CantidadUsada > 0 Then
    '                                        t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
    '                                        i.TipoOperacion = venta.tipoOperacion ' "01"
    '                                        GetSalidaInventarioResult(venta, i, t)
    '                                        '    ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
    '                                        Dim costoUnit = t.importeSoles / t.cantidad
    '                                        Dim totalCosto As Decimal = 0
    '                                        totalCosto = t.CantidadUsada * costoUnit
    '                                        Dim inv = GetEntradaInventarioResult(venta, i, t, totalCosto)
    '                                        Dim existeItem = HeliosData.totalesAlmacen.Any(Function(o) o.idAlmacen = i.idalmacenDestino And o.codigoLote = t.codigoLote And o.idItem = i.CustomProducto.codigodetalle)
    '                                        If existeItem = False Then
    '                                            RegistrarInventarioValorizado(inv, totalCosto)
    '                                        End If
    '                                        ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
    '                                    End If
    '                                End If
    '                            Next
    '                        End If
    '                    End If
    '#End Region

    '                    'End If
    '                Next


    '                HeliosData.SaveChanges()
    '                ts.Complete()
    '            Catch ex As Exception
    '                Throw ex
    '            End Try
    '        End Using
    '    End Sub

    Private Sub CommitInventoryOperations(ventaDetalle As List(Of documentoventaAbarrotesDet), venta As documentoventaAbarrotes, cval As Integer)
        '   Dim cantidadGlobalXproducto As Decimal = 0
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim listaBeneficio As New List(Of String)
        listaBeneficio.Add("OFERTA")
        listaBeneficio.Add("REGALO")

        Dim listaTipoEx As New List(Of String)
        listaTipoEx.Add(TipoExistencia.Kit)
        listaTipoEx.Add("KIT")

        Dim listaTipoVenta As New List(Of String)
        listaTipoVenta.Add("KIT")

        Dim CodigoItemNuevo As Integer = 0

        Dim objitem As New detalleitems

        Dim EQUIVALECIA As New detalleitem_equivalencias
        Dim LISTAEQUIVALECIA As New List(Of detalleitem_equivalencias)
        Dim EQUIVALECIA_CAT As New detalleitemequivalencia_catalogos
        Dim LISTAEQUIVALECIA_CAT As New List(Of detalleitemequivalencia_catalogos)
        Dim EQUIVALECIA_pRECIO As New detalleitemequivalencia_precios
        Dim LISTAEQUIVALECIA_CAT_PRECIO As New List(Of detalleitemequivalencia_precios)

        '   Dim listaSecuenciaItem As New List(Of Integer)

        ' Dim obj As InventarioMovimiento
        Using ts As New TransactionScope
            Try
                Dim listaDetalleVenta = ventaDetalle.Where(Function(o) Not listaBeneficio.Contains(o.tipobeneficio) And Not listaTipoEx.Contains(o.tipoExistencia) And Not listaTipoVenta.Contains(o.tipoVenta)).ToList()

                For Each i In listaDetalleVenta.Where(Function(o) o.tipoExistencia <> "GS").ToList
                    'If (i.tipoExistencia <> "GS") Then


#Region "Validando stock x producto"
                    If i.monto1 > 0 Then

                        Dim CantidadSolicitada = i.monto1 * i.CustomEquivalencia.fraccionUnidad.GetValueOrDefault
                        Dim GetArticulosLote = ConsultaStockItemV2(i) 'ConsultaStockItem(i)
                        If GetArticulosLote.Count = 0 Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene lotes disponibles")
                        End If

                        Dim cantidadDisponible = GetArticulosLote.Where(Function(o) o.idAlmacen = i.idAlmacenOrigen).Sum(Function(o) o.cantidad)

                        If cantidadDisponible <= 0 Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        End If

                        If CantidadSolicitada > cantidadDisponible Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        End If


                        If CantidadSolicitada > 0 Then

                            For Each t In GetArticulosLote.Where(Function(o) o.idAlmacen = i.idAlmacenOrigen).ToList
                                If t.StockSaldo > 0 Then

                                    If t.StockSaldo > CantidadSolicitada Then
                                        Dim canUso = CantidadSolicitada
                                        t.CantidadUsada = canUso

                                    ElseIf t.StockSaldo = CantidadSolicitada Then
                                        t.CantidadUsada = CantidadSolicitada

                                        'Dim inv = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = t.idItem And o.codigoLote = t.codigoLote).SingleOrDefault
                                        'inv.cantidad = 0
                                    Else
                                        Dim canUso = t.StockSaldo
                                        t.CantidadUsada = canUso
                                    End If
                                    CantidadSolicitada -= t.CantidadUsada
                                    If t.CantidadUsada > 0 Then
                                        t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                                        i.TipoOperacion = venta.tipoOperacion ' "01"
                                        GetSalidaInventarioResult(venta, i, t)
                                        '    ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
                                        Dim costoUnit = t.importeSoles / t.cantidad
                                        Dim totalCosto As Decimal = 0
                                        totalCosto = t.CantidadUsada * costoUnit
                                        Dim inv = GetEntradaInventarioResult(venta, i, t, totalCosto)


                                        Dim existeDetalleItem = HeliosData.detalleitems.Any(Function(o) o.descripcionItem = i.CustomProducto.descripcionItem And o.idEstablecimiento = venta.idEstablecimientoDestino)

                                        If existeDetalleItem = False Then
                                            Dim ProductoOld = HeliosData.detalleitems _
                                                                            .Include(Function(o) o.detalleitem_equivalencias.Select(Function(c) c.detalleitemequivalencia_catalogos _
                                                                            .Select(Function(p) p.detalleitemequivalencia_precios))) _
                                                                            .Where(Function(o) o.codigodetalle = i.CustomProducto.codigodetalle) _
                                                                            .SingleOrDefault()


                                            If ProductoOld IsNot Nothing Then
                                                objitem.idItem = ProductoOld.idItem   'UCNuenExistencia.txtCategoria.Tag
                                                objitem.idEmpresa = ProductoOld.idEmpresa
                                                objitem.idEstablecimiento = venta.idEstablecimientoDestino  ' frmCanastaExistencias.cboEstablecimiento.SelectedValue
                                                objitem.marcaRef = ProductoOld.marcaRef
                                                objitem.descripcionItem = ProductoOld.descripcionItem
                                                objitem.tipoExistencia = ProductoOld.tipoExistencia
                                                objitem.unidad1 = ProductoOld.unidad1
                                                objitem.unidad2 = ProductoOld.unidad2  'UCNuenExistencia.txtSubCategoria.Tag
                                                objitem.cuenta = ProductoOld.cuenta
                                                objitem.cProductor = ProductoOld.cProductor
                                                objitem.cProveedor = ProductoOld.cProveedor
                                                objitem.cantMax = ProductoOld.cantMax
                                                objitem.cantMinima = ProductoOld.cantMinima
                                                objitem.codigo = ProductoOld.codigo
                                                objitem.origenProducto = ProductoOld.origenProducto
                                                objitem.tipoProducto = ProductoOld.tipoProducto
                                                objitem.Retencion = ProductoOld.Retencion
                                                objitem.idAlmacen = ProductoOld.idAlmacen
                                                objitem.tipoOtroImpuesto = ProductoOld.tipoOtroImpuesto
                                                objitem.modelo = ProductoOld.modelo
                                                objitem.composicion = ProductoOld.composicion
                                                objitem.presentacion = ProductoOld.presentacion
                                                objitem.color = ProductoOld.color
                                                objitem.talla = ProductoOld.talla
                                                objitem.nroOrden = ProductoOld.nroOrden
                                                objitem.capacidad = ProductoOld.capacidad
                                                objitem.electricidad = ProductoOld.electricidad
                                                objitem.presion = ProductoOld.presion
                                                objitem.transmision = ProductoOld.transmision
                                                objitem.rpm = ProductoOld.rpm
                                                objitem.nivelRuido = ProductoOld.nivelRuido
                                                objitem.Peso = ProductoOld.Peso
                                                objitem.Filtros = ProductoOld.Filtros
                                                objitem.ValorPercepcion = ProductoOld.ValorPercepcion
                                                objitem.ValorRetencion = ProductoOld.ValorRetencion
                                                objitem.Percepcion = ProductoOld.Percepcion
                                                objitem.AfectoCompra = ProductoOld.AfectoCompra
                                                objitem.AfectoVenta = ProductoOld.AfectoVenta
                                                objitem.precioCompra = ProductoOld.precioCompra
                                                objitem.preciocompratipo = ProductoOld.preciocompratipo
                                                objitem.firstpercent = ProductoOld.firstpercent
                                                objitem.beforepercent = ProductoOld.beforepercent
                                                objitem.productoRestringido = ProductoOld.productoRestringido
                                                objitem.otroImpuesto = ProductoOld.otroImpuesto
                                                objitem.igv = ProductoOld.igv
                                                objitem.AfectoStock = ProductoOld.AfectoStock
                                                objitem.otroImpuesto = ProductoOld.otroImpuesto
                                                objitem.tipoOtroImpuesto = ProductoOld.tipoOtroImpuesto
                                                objitem.cantidadMinima = ProductoOld.cantidadMinima
                                                objitem.cantidadMaxima = ProductoOld.cantidadMaxima
                                                objitem.fotoUrl = ProductoOld.fotoUrl
                                                objitem.estado = ProductoOld.estado
                                                objitem.tipoItem = ProductoOld.tipoItem
                                                objitem.tipoBien = ProductoOld.tipoBien
                                                objitem.idClasificacion = ProductoOld.idClasificacion
                                                objitem.idCaracteristica = ProductoOld.idCaracteristica
                                                objitem.codigoInterno = ProductoOld.codigoInterno
                                                objitem.usuarioActualizacion = ProductoOld.usuarioActualizacion
                                                objitem.fechaActualizacion = DateTime.Now

                                                For Each EQUIVAOLD In ProductoOld.detalleitem_equivalencias

                                                    For Each EQUIVA_CAT_OLD In EQUIVAOLD.detalleitemequivalencia_catalogos

                                                        For Each EQUIVA_PRECIO_OLD In EQUIVA_CAT_OLD.detalleitemequivalencia_precios

                                                            EQUIVALECIA_pRECIO = New detalleitemequivalencia_precios
                                                            EQUIVALECIA_pRECIO.rango_inicio = EQUIVA_PRECIO_OLD.rango_inicio
                                                            EQUIVALECIA_pRECIO.rango_final = EQUIVA_PRECIO_OLD.rango_final
                                                            EQUIVALECIA_pRECIO.precioCode = EQUIVA_PRECIO_OLD.precioCode
                                                            EQUIVALECIA_pRECIO.precio = EQUIVA_PRECIO_OLD.precio
                                                            EQUIVALECIA_pRECIO.precioUSD = EQUIVA_PRECIO_OLD.precioUSD
                                                            EQUIVALECIA_pRECIO.precioCredito = EQUIVA_PRECIO_OLD.precioCredito
                                                            EQUIVALECIA_pRECIO.precioCreditoUSD = EQUIVA_PRECIO_OLD.precioCreditoUSD
                                                            EQUIVALECIA_pRECIO.estado = EQUIVA_PRECIO_OLD.estado
                                                            EQUIVALECIA_pRECIO.usuarioActualizacion = EQUIVA_PRECIO_OLD.usuarioActualizacion
                                                            EQUIVALECIA_pRECIO.fechaActualizacion = EQUIVA_PRECIO_OLD.fechaActualizacion
                                                            LISTAEQUIVALECIA_CAT_PRECIO.Add(EQUIVALECIA_pRECIO)
                                                        Next

                                                        EQUIVALECIA_CAT = New detalleitemequivalencia_catalogos
                                                        EQUIVALECIA_CAT.nombre_corto = EQUIVA_CAT_OLD.nombre_corto
                                                        EQUIVALECIA_CAT.nombre_largo = EQUIVA_CAT_OLD.nombre_largo
                                                        EQUIVALECIA_CAT.predeterminado = EQUIVA_CAT_OLD.predeterminado
                                                        EQUIVALECIA_CAT.estado = EQUIVA_CAT_OLD.estado
                                                        EQUIVALECIA_CAT.detalleitemequivalencia_precios = LISTAEQUIVALECIA_CAT_PRECIO

                                                        LISTAEQUIVALECIA_CAT.Add(EQUIVALECIA_CAT)

                                                    Next

                                                    EQUIVALECIA = New detalleitem_equivalencias
                                                    EQUIVALECIA.detalle = EQUIVAOLD.detalle
                                                    EQUIVALECIA.unidadComercial = EQUIVAOLD.unidadComercial
                                                    EQUIVALECIA.contenido = EQUIVAOLD.contenido
                                                    EQUIVALECIA.fraccionUnidad = EQUIVAOLD.fraccionUnidad
                                                    EQUIVALECIA.estado = EQUIVAOLD.estado
                                                    EQUIVALECIA.contenido_neto = EQUIVAOLD.contenido_neto
                                                    EQUIVALECIA.flag = EQUIVAOLD.flag
                                                    EQUIVALECIA.usuarioActualizacion = EQUIVAOLD.usuarioActualizacion
                                                    EQUIVALECIA.fechaActualizacion = EQUIVAOLD.fechaActualizacion
                                                    EQUIVALECIA.detalleitemequivalencia_catalogos = LISTAEQUIVALECIA_CAT

                                                    LISTAEQUIVALECIA.Add(EQUIVALECIA)
                                                Next

                                                objitem.detalleitem_equivalencias = LISTAEQUIVALECIA

                                                Dim detalleBE = CrearNuevoItemUN(objitem)

                                                i.CustomProducto = detalleBE

                                                HeliosData.SaveChanges()
                                                'ts.Complete()
                                                i.IdEstablecimiento = detalleBE.idEstablecimiento
                                                i.CustomProducto.idEstablecimiento = detalleBE.idEstablecimiento
                                                i.CustomProducto.codigodetalle = detalleBE.codigodetalle
                                                't.idItem = detalleBE.codigodetalle
                                                inv.idItem = detalleBE.codigodetalle
                                                inv.customProducto.codigodetalle = detalleBE.codigodetalle
                                            End If
                                        Else
                                            'Throw New Exception("Existencia existente en la base de datos, ingrese otro!")
                                        End If


                                        'Dim existeItem = HeliosData.totalesAlmacen.Any(Function(o) o.idAlmacen = i.idalmacenDestino And o.codigoLote = t.codigoLote And o.idItem = i.CustomProducto.codigodetalle)

                                        Dim existeItem = HeliosData.totalesAlmacen.Any(Function(o) o.idEstablecimiento = venta.idEstablecimientoDestino And o.idAlmacen = i.idalmacenDestino And o.codigoLote = t.codigoLote And o.idItem = i.CustomProducto.codigodetalle)
                                        If existeItem = False Then
                                            RegistrarInventarioValorizado(inv, totalCosto)
                                        End If
                                        ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
                                    End If
                                End If
                            Next
                        End If
                    End If
#End Region

                    'End If
                Next


                HeliosData.SaveChanges()
                ts.Complete()
            Catch ex As Exception
                Throw ex
            End Try
        End Using
    End Sub

    Private Sub CommitInventoryOperationsTransferencia(ventaDetalle As List(Of documentoventaAbarrotesDet), venta As documentoventaAbarrotes, cval As Integer)
        '   Dim cantidadGlobalXproducto As Decimal = 0
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim listaBeneficio As New List(Of String)
        listaBeneficio.Add("OFERTA")
        listaBeneficio.Add("REGALO")

        Dim listaTipoEx As New List(Of String)
        listaTipoEx.Add(TipoExistencia.Kit)
        listaTipoEx.Add("KIT")

        Dim listaTipoVenta As New List(Of String)
        listaTipoVenta.Add("KIT")

        Dim CodigoItemNuevo As Integer = 0

        Dim objitem As New detalleitems

        Dim EQUIVALECIA As New detalleitem_equivalencias
        Dim LISTAEQUIVALECIA As New List(Of detalleitem_equivalencias)
        Dim EQUIVALECIA_CAT As New detalleitemequivalencia_catalogos
        Dim LISTAEQUIVALECIA_CAT As New List(Of detalleitemequivalencia_catalogos)
        Dim EQUIVALECIA_pRECIO As New detalleitemequivalencia_precios
        Dim LISTAEQUIVALECIA_CAT_PRECIO As New List(Of detalleitemequivalencia_precios)

        '   Dim listaSecuenciaItem As New List(Of Integer)

        ' Dim obj As InventarioMovimiento
        Using ts As New TransactionScope
            Try
                Dim listaDetalleVenta = ventaDetalle.Where(Function(o) Not listaBeneficio.Contains(o.tipobeneficio) And Not listaTipoEx.Contains(o.tipoExistencia) And Not listaTipoVenta.Contains(o.tipoVenta)).ToList()

                For Each i In listaDetalleVenta.Where(Function(o) o.tipoExistencia <> "GS").ToList
                    'If (i.tipoExistencia <> "GS") Then


#Region "Validando stock x producto"
                    If i.monto1 > 0 Then

                        Dim CantidadSolicitada = i.monto1 * i.CustomEquivalencia.contenido_neto.GetValueOrDefault
                        Dim GetArticulosLote = ConsultaStockItemV2(i) 'ConsultaStockItem(i)
                        If GetArticulosLote.Count = 0 Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene lotes disponibles")
                        End If

                        Dim cantidadDisponible = GetArticulosLote.Where(Function(o) o.idAlmacen = i.idAlmacenOrigen).Sum(Function(o) o.cantidad)

                        If cantidadDisponible <= 0 Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        End If

                        If CantidadSolicitada > cantidadDisponible Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        End If


                        If CantidadSolicitada > 0 Then

                            For Each t In GetArticulosLote.Where(Function(o) o.idAlmacen = i.idAlmacenOrigen).ToList
                                If t.StockSaldo > 0 Then

                                    If t.StockSaldo > CantidadSolicitada Then
                                        Dim canUso = CantidadSolicitada
                                        t.CantidadUsada = canUso

                                    ElseIf t.StockSaldo = CantidadSolicitada Then
                                        t.CantidadUsada = CantidadSolicitada

                                        'Dim inv = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = t.idItem And o.codigoLote = t.codigoLote).SingleOrDefault
                                        'inv.cantidad = 0
                                    Else
                                        Dim canUso = t.StockSaldo
                                        t.CantidadUsada = canUso
                                    End If
                                    CantidadSolicitada -= t.CantidadUsada
                                    If t.CantidadUsada > 0 Then
                                        t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                                        i.TipoOperacion = venta.tipoOperacion ' "01"
                                        GetSalidaInventarioResult(venta, i, t)
                                        '    ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
                                        Dim costoUnit = t.importeSoles / t.cantidad
                                        Dim totalCosto As Decimal = 0
                                        totalCosto = t.CantidadUsada * costoUnit
                                        Dim inv = GetEntradaInventarioResult(venta, i, t, totalCosto)


                                        Dim existeDetalleItem = HeliosData.detalleitems.Any(Function(o) o.descripcionItem = i.CustomProducto.descripcionItem And o.idEstablecimiento = venta.idEstablecimientoDestino)

                                        If existeDetalleItem = False Then
                                            Dim ProductoOld = HeliosData.detalleitems _
                                                                            .Include(Function(o) o.detalleitem_equivalencias.Select(Function(c) c.detalleitemequivalencia_catalogos _
                                                                            .Select(Function(p) p.detalleitemequivalencia_precios))) _
                                                                            .Where(Function(o) o.codigodetalle = i.CustomProducto.codigodetalle) _
                                                                            .SingleOrDefault()


                                            If ProductoOld IsNot Nothing Then
                                                objitem.idItem = ProductoOld.idItem   'UCNuenExistencia.txtCategoria.Tag
                                                objitem.idEmpresa = ProductoOld.idEmpresa
                                                objitem.idEstablecimiento = venta.idEstablecimientoDestino  ' frmCanastaExistencias.cboEstablecimiento.SelectedValue
                                                objitem.marcaRef = ProductoOld.marcaRef
                                                objitem.descripcionItem = ProductoOld.descripcionItem
                                                objitem.tipoExistencia = ProductoOld.tipoExistencia
                                                objitem.unidad1 = ProductoOld.unidad1
                                                objitem.unidad2 = ProductoOld.unidad2  'UCNuenExistencia.txtSubCategoria.Tag
                                                objitem.cuenta = ProductoOld.cuenta
                                                objitem.cProductor = ProductoOld.cProductor
                                                objitem.cProveedor = ProductoOld.cProveedor
                                                objitem.cantMax = ProductoOld.cantMax
                                                objitem.cantMinima = ProductoOld.cantMinima
                                                objitem.codigo = ProductoOld.codigo
                                                objitem.origenProducto = ProductoOld.origenProducto
                                                objitem.tipoProducto = ProductoOld.tipoProducto
                                                objitem.Retencion = ProductoOld.Retencion
                                                objitem.idAlmacen = ProductoOld.idAlmacen
                                                objitem.tipoOtroImpuesto = ProductoOld.tipoOtroImpuesto
                                                objitem.modelo = ProductoOld.modelo
                                                objitem.composicion = ProductoOld.composicion
                                                objitem.presentacion = ProductoOld.presentacion
                                                objitem.color = ProductoOld.color
                                                objitem.talla = ProductoOld.talla
                                                objitem.nroOrden = ProductoOld.nroOrden
                                                objitem.capacidad = ProductoOld.capacidad
                                                objitem.electricidad = ProductoOld.electricidad
                                                objitem.presion = ProductoOld.presion
                                                objitem.transmision = ProductoOld.transmision
                                                objitem.rpm = ProductoOld.rpm
                                                objitem.nivelRuido = ProductoOld.nivelRuido
                                                objitem.Peso = ProductoOld.Peso
                                                objitem.Filtros = ProductoOld.Filtros
                                                objitem.ValorPercepcion = ProductoOld.ValorPercepcion
                                                objitem.ValorRetencion = ProductoOld.ValorRetencion
                                                objitem.Percepcion = ProductoOld.Percepcion
                                                objitem.AfectoCompra = ProductoOld.AfectoCompra
                                                objitem.AfectoVenta = ProductoOld.AfectoVenta
                                                objitem.precioCompra = ProductoOld.precioCompra
                                                objitem.preciocompratipo = ProductoOld.preciocompratipo
                                                objitem.firstpercent = ProductoOld.firstpercent
                                                objitem.beforepercent = ProductoOld.beforepercent
                                                objitem.productoRestringido = ProductoOld.productoRestringido
                                                objitem.otroImpuesto = ProductoOld.otroImpuesto
                                                objitem.igv = ProductoOld.igv
                                                objitem.AfectoStock = ProductoOld.AfectoStock
                                                objitem.otroImpuesto = ProductoOld.otroImpuesto
                                                objitem.tipoOtroImpuesto = ProductoOld.tipoOtroImpuesto
                                                objitem.cantidadMinima = ProductoOld.cantidadMinima
                                                objitem.cantidadMaxima = ProductoOld.cantidadMaxima
                                                objitem.fotoUrl = ProductoOld.fotoUrl
                                                objitem.estado = ProductoOld.estado
                                                objitem.tipoItem = ProductoOld.tipoItem
                                                objitem.tipoBien = ProductoOld.tipoBien
                                                objitem.idClasificacion = ProductoOld.idClasificacion
                                                objitem.idCaracteristica = ProductoOld.idCaracteristica
                                                objitem.codigoInterno = ProductoOld.codigoInterno
                                                objitem.usuarioActualizacion = ProductoOld.usuarioActualizacion
                                                objitem.fechaActualizacion = DateTime.Now

                                                For Each EQUIVAOLD In ProductoOld.detalleitem_equivalencias

                                                    For Each EQUIVA_CAT_OLD In EQUIVAOLD.detalleitemequivalencia_catalogos

                                                        For Each EQUIVA_PRECIO_OLD In EQUIVA_CAT_OLD.detalleitemequivalencia_precios

                                                            EQUIVALECIA_pRECIO = New detalleitemequivalencia_precios
                                                            EQUIVALECIA_pRECIO.rango_inicio = EQUIVA_PRECIO_OLD.rango_inicio
                                                            EQUIVALECIA_pRECIO.rango_final = EQUIVA_PRECIO_OLD.rango_final
                                                            EQUIVALECIA_pRECIO.precioCode = EQUIVA_PRECIO_OLD.precioCode
                                                            EQUIVALECIA_pRECIO.precio = EQUIVA_PRECIO_OLD.precio
                                                            EQUIVALECIA_pRECIO.precioUSD = EQUIVA_PRECIO_OLD.precioUSD
                                                            EQUIVALECIA_pRECIO.precioCredito = EQUIVA_PRECIO_OLD.precioCredito
                                                            EQUIVALECIA_pRECIO.precioCreditoUSD = EQUIVA_PRECIO_OLD.precioCreditoUSD
                                                            EQUIVALECIA_pRECIO.estado = EQUIVA_PRECIO_OLD.estado
                                                            EQUIVALECIA_pRECIO.usuarioActualizacion = EQUIVA_PRECIO_OLD.usuarioActualizacion
                                                            EQUIVALECIA_pRECIO.fechaActualizacion = EQUIVA_PRECIO_OLD.fechaActualizacion
                                                            LISTAEQUIVALECIA_CAT_PRECIO.Add(EQUIVALECIA_pRECIO)
                                                        Next

                                                        EQUIVALECIA_CAT = New detalleitemequivalencia_catalogos
                                                        EQUIVALECIA_CAT.nombre_corto = EQUIVA_CAT_OLD.nombre_corto
                                                        EQUIVALECIA_CAT.nombre_largo = EQUIVA_CAT_OLD.nombre_largo
                                                        EQUIVALECIA_CAT.predeterminado = EQUIVA_CAT_OLD.predeterminado
                                                        EQUIVALECIA_CAT.estado = EQUIVA_CAT_OLD.estado
                                                        EQUIVALECIA_CAT.detalleitemequivalencia_precios = LISTAEQUIVALECIA_CAT_PRECIO

                                                        LISTAEQUIVALECIA_CAT.Add(EQUIVALECIA_CAT)

                                                    Next

                                                    EQUIVALECIA = New detalleitem_equivalencias
                                                    EQUIVALECIA.detalle = EQUIVAOLD.detalle
                                                    EQUIVALECIA.unidadComercial = EQUIVAOLD.unidadComercial
                                                    EQUIVALECIA.contenido = EQUIVAOLD.contenido
                                                    EQUIVALECIA.fraccionUnidad = EQUIVAOLD.fraccionUnidad
                                                    EQUIVALECIA.estado = EQUIVAOLD.estado
                                                    EQUIVALECIA.contenido_neto = EQUIVAOLD.contenido_neto
                                                    EQUIVALECIA.flag = EQUIVAOLD.flag
                                                    EQUIVALECIA.usuarioActualizacion = EQUIVAOLD.usuarioActualizacion
                                                    EQUIVALECIA.fechaActualizacion = EQUIVAOLD.fechaActualizacion
                                                    EQUIVALECIA.detalleitemequivalencia_catalogos = LISTAEQUIVALECIA_CAT

                                                    LISTAEQUIVALECIA.Add(EQUIVALECIA)
                                                Next

                                                objitem.detalleitem_equivalencias = LISTAEQUIVALECIA

                                                Dim detalleBE = CrearNuevoItemUN(objitem)

                                                i.CustomProducto = detalleBE

                                                HeliosData.SaveChanges()
                                                'ts.Complete()
                                                i.IdEstablecimiento = detalleBE.idEstablecimiento
                                                i.CustomProducto.idEstablecimiento = detalleBE.idEstablecimiento
                                                i.CustomProducto.codigodetalle = detalleBE.codigodetalle
                                                't.idItem = detalleBE.codigodetalle
                                                inv.idItem = detalleBE.codigodetalle
                                                inv.customProducto.codigodetalle = detalleBE.codigodetalle
                                            End If
                                        Else
                                            'Throw New Exception("Existencia existente en la base de datos, ingrese otro!")
                                        End If


                                        'Dim existeItem = HeliosData.totalesAlmacen.Any(Function(o) o.idAlmacen = i.idalmacenDestino And o.codigoLote = t.codigoLote And o.idItem = i.CustomProducto.codigodetalle)

                                        Dim existeItem = HeliosData.totalesAlmacen.Any(Function(o) o.idEstablecimiento = venta.idEstablecimientoDestino And o.idAlmacen = i.idalmacenDestino And o.codigoLote = t.codigoLote And o.idItem = i.CustomProducto.codigodetalle)
                                        If existeItem = False Then
                                            RegistrarInventarioValorizadoTransferencia(inv, totalCosto)
                                        End If
                                        ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
                                    End If
                                End If
                            Next
                        End If
                    End If
#End Region

                    'End If
                Next


                HeliosData.SaveChanges()
                ts.Complete()
            Catch ex As Exception
                Throw ex
            End Try
        End Using
    End Sub


    Public Function CrearNuevoItemUN(detalleitemsbe As detalleitems) As detalleitems
        Try
            Dim ProductoBL As New detalleitemsBL
            Dim detalleItemBE As New detalleitems

            Dim newProd As New detalleitems
            newProd = detalleitemsbe

            detalleItemBE = ProductoBL.Insert(newProd)

            Return detalleItemBE

        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Private Sub CommitInventoryTrasladoClientes(ventaDetalle As List(Of documentoventaAbarrotesDet), venta As documentoventaAbarrotes, cval As Integer)
        '   Dim cantidadGlobalXproducto As Decimal = 0
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim listaBeneficio As New List(Of String)
        listaBeneficio.Add("OFERTA")
        listaBeneficio.Add("REGALO")

        Dim listaTipoEx As New List(Of String)
        listaTipoEx.Add(TipoExistencia.Kit)
        listaTipoEx.Add("KIT")

        Dim listaTipoVenta As New List(Of String)
        listaTipoVenta.Add("KIT")

        '   Dim listaSecuenciaItem As New List(Of Integer)

        ' Dim obj As InventarioMovimiento
        Using ts As New TransactionScope
            Try
                Dim listaDetalleVenta = ventaDetalle.Where(Function(o) Not listaBeneficio.Contains(o.tipobeneficio) And Not listaTipoEx.Contains(o.tipoExistencia) And Not listaTipoVenta.Contains(o.tipoVenta)).ToList()

                For Each i In listaDetalleVenta.Where(Function(o) o.tipoExistencia <> "GS").ToList
                    'If (i.tipoExistencia <> "GS") Then


#Region "Validando stock x producto"
                    If i.monto1 > 0 Then

                        Dim CantidadSolicitada = i.monto1 * i.CustomEquivalencia.fraccionUnidad.GetValueOrDefault
                        Dim GetArticulosLote = ConsultaStockItemV2(i) 'ConsultaStockItem(i)
                        If GetArticulosLote.Count = 0 Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene lotes disponibles")
                        End If

                        Dim cantidadDisponible = GetArticulosLote.Where(Function(o) o.idAlmacen = i.idAlmacenOrigen).Sum(Function(o) o.cantidad)

                        If cantidadDisponible <= 0 Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        End If

                        If CantidadSolicitada > cantidadDisponible Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        End If


                        If CantidadSolicitada > 0 Then

                            For Each t In GetArticulosLote.Where(Function(o) o.idAlmacen = i.idAlmacenOrigen).ToList
                                If t.StockSaldo > 0 Then

                                    If t.StockSaldo > CantidadSolicitada Then
                                        Dim canUso = CantidadSolicitada
                                        t.CantidadUsada = canUso

                                    ElseIf t.StockSaldo = CantidadSolicitada Then
                                        t.CantidadUsada = CantidadSolicitada

                                        'Dim inv = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = t.idItem And o.codigoLote = t.codigoLote).SingleOrDefault
                                        'inv.cantidad = 0
                                    Else
                                        Dim canUso = t.StockSaldo
                                        t.CantidadUsada = canUso
                                    End If
                                    CantidadSolicitada -= t.CantidadUsada
                                    If t.CantidadUsada > 0 Then
                                        t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                                        i.TipoOperacion = venta.tipoOperacion ' "01"
                                        GetSalidaInventarioResult(venta, i, t)
                                        ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
                                    End If
                                End If
                            Next
                        End If
                    End If
#End Region

                    'End If
                Next


                HeliosData.SaveChanges()
                ts.Complete()
            Catch ex As Exception
                Throw ex
            End Try
        End Using
    End Sub

    Private Sub CommitInventoryOperationsLote(ventaDetalle As List(Of documentoventaAbarrotesDet), venta As documentoventaAbarrotes, cval As Integer)
        '   Dim cantidadGlobalXproducto As Decimal = 0
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim listaBeneficio As New List(Of String)
        listaBeneficio.Add("OFERTA")
        listaBeneficio.Add("REGALO")

        Dim listaTipoEx As New List(Of String)
        listaTipoEx.Add(TipoExistencia.Kit)
        listaTipoEx.Add("KIT")

        Dim listaTipoVenta As New List(Of String)
        listaTipoVenta.Add("KIT")

        '   Dim listaSecuenciaItem As New List(Of Integer)

        ' Dim obj As InventarioMovimiento
        Using ts As New TransactionScope
            Try
                Dim listaDetalleVenta = ventaDetalle.Where(Function(o) Not listaBeneficio.Contains(o.tipobeneficio) And Not listaTipoEx.Contains(o.tipoExistencia) And Not listaTipoVenta.Contains(o.tipoVenta)).ToList()

                For Each i In listaDetalleVenta.Where(Function(o) o.tipoExistencia <> "GS").ToList
                    'If (i.tipoExistencia <> "GS") Then


#Region "Validando stock x producto"
                    If i.monto1 > 0 Then

                        Dim CantidadSolicitada = i.monto1 * i.CustomEquivalencia.fraccionUnidad.GetValueOrDefault
                        Dim GetArticulosLote = ConsultaStockItemV2(i) 'ConsultaStockItem(i)
                        If GetArticulosLote.Count = 0 Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene lotes disponibles")
                        End If

                        Dim cantidadDisponible = GetArticulosLote.Where(Function(o) o.idAlmacen = i.idAlmacenOrigen And o.codigoLote = i.Customlote.codigoLote).Sum(Function(o) o.cantidad)

                        If cantidadDisponible <= 0 Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        End If

                        If CantidadSolicitada > cantidadDisponible Then
                            Throw New Exception("El producto " & i.nombreItem & " no tiene stock suficiente")
                        End If


                        If CantidadSolicitada > 0 Then

                            For Each t In GetArticulosLote.Where(Function(o) o.idAlmacen = i.idAlmacenOrigen And o.codigoLote = i.Customlote.codigoLote).ToList
                                If t.StockSaldo > 0 Then

                                    If t.StockSaldo > CantidadSolicitada Then
                                        Dim canUso = CantidadSolicitada
                                        t.CantidadUsada = canUso

                                    ElseIf t.StockSaldo = CantidadSolicitada Then
                                        t.CantidadUsada = CantidadSolicitada

                                        'Dim inv = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = t.idItem And o.codigoLote = t.codigoLote).SingleOrDefault
                                        'inv.cantidad = 0
                                    Else
                                        Dim canUso = t.StockSaldo
                                        t.CantidadUsada = canUso
                                    End If
                                    CantidadSolicitada -= t.CantidadUsada
                                    If t.CantidadUsada > 0 Then
                                        t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                                        i.TipoOperacion = venta.tipoOperacion ' "01"
                                        GetSalidaInventarioResult(venta, i, t)
                                        '    ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
                                        Dim costoUnit = t.importeSoles / t.cantidad
                                        Dim totalCosto As Decimal = 0
                                        totalCosto = t.CantidadUsada * costoUnit
                                        Dim inv = GetEntradaInventarioResult(venta, i, t, totalCosto)
                                        Dim existeItem = HeliosData.totalesAlmacen.Any(Function(o) o.idAlmacen = i.idalmacenDestino And o.codigoLote = t.codigoLote And o.idItem = i.CustomProducto.codigodetalle)
                                        If existeItem = False Then
                                            RegistrarInventarioValorizado(inv, totalCosto)
                                        End If
                                        ActualizarInventarioPorItem(venta, t.idItem, t.codigoLote)
                                    End If
                                End If
                            Next
                        End If
                    End If
#End Region

                    'End If
                Next


                HeliosData.SaveChanges()
                ts.Complete()
            Catch ex As Exception
                Throw ex
            End Try
        End Using
    End Sub

    'Public Function GetUbicarFechaCompraArticuloXLote(codigoLote As Integer) As DateTime?
    '    Dim consulta = (From n In HeliosData.documentocompra
    '                    Join det In HeliosData.documentocompradetalle On det.idDocumento Equals n.idDocumento
    '                    Where det.codigoLote = codigoLote
    '                    Select New With {
    '                        .FechaCompra = n.fechaDoc
    '                        }).FirstOrDefault

    '    Return consulta.FechaCompra
    'End Function

    Public Sub DetalleInventarioJiuni_Logistica(ventaDetalle As List(Of documentocompradetalle), venta As documentocompra, cval As Integer)
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        ' Dim obj As InventarioMovimiento
        Using ts As New TransactionScope
            Try
                For Each i In ventaDetalle
                    Dim CantidadSolicitada = i.monto1
                    Dim GetArticulosLote = (From x In
                                                        HeliosData.totalesAlmacen
                                            Where x.idAlmacen = i.almacenRef _
                                                        And x.idItem = i.idItem _
                                                        And x.cantidad > 0).ToList

                    Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

                    If cantidadDisponible <= 0 Then
                        Throw New Exception("El producto" & i.descripcionItem & " no tiene stock suficiente")
                    End If

                    If i.monto1 > cantidadDisponible Then
                        Throw New Exception("El producto" & i.descripcionItem & " no tiene stock suficiente")
                    End If

                    If CantidadSolicitada > 0 Then
                        For Each t In GetArticulosLote
                            If t.StockSaldo > 0 Then
                                If t.StockSaldo > CantidadSolicitada Then
                                    Dim canUso = CantidadSolicitada
                                    t.CantidadUsada = canUso

                                ElseIf t.StockSaldo = CantidadSolicitada Then
                                    t.CantidadUsada = CantidadSolicitada
                                Else
                                    Dim canUso = t.StockSaldo
                                    t.CantidadUsada = canUso
                                End If
                            End If

                            CantidadSolicitada -= t.CantidadUsada
                            t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                            GetSalidaInventarioLogistica(venta, i, t)
                            If venta.destino = TIPO_COMPRA.MOVIMIENTO_ALMACEN.TRANSFERENCIA_ALMACENES Then
                                GetEntradaXtransLogistica(venta, i, t)

                                Dim articuloExiste = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = i.almacenDestino And
                                                                                         o.codigoLote = t.codigoLote).FirstOrDefault
                                If articuloExiste Is Nothing Then
                                    Dim nuevoArticulo As New totalesAlmacen
                                    nuevoArticulo.idEmpresa = venta.idEmpresa
                                    nuevoArticulo.idEstablecimiento = venta.idCentroCosto
                                    nuevoArticulo.codigoLote = t.codigoLote
                                    nuevoArticulo.idAlmacen = i.almacenDestino
                                    nuevoArticulo.origenRecaudo = i.destino
                                    nuevoArticulo.tipoExistencia = i.tipoExistencia
                                    nuevoArticulo.idItem = i.idItem
                                    nuevoArticulo.descripcion = i.descripcionItem
                                    nuevoArticulo.idUnidad = i.unidad1
                                    nuevoArticulo.unidadMedida = i.unidad1
                                    nuevoArticulo.cantidad = 0
                                    nuevoArticulo.cantidad2 = 0
                                    nuevoArticulo.precioUnitarioCompra = 0
                                    nuevoArticulo.importeSoles = 0
                                    nuevoArticulo.importeDolares = 0
                                    nuevoArticulo.montoIsc = 0
                                    nuevoArticulo.montoIscUS = 0
                                    nuevoArticulo.Otros = 0
                                    nuevoArticulo.OtrosUS = 0
                                    nuevoArticulo.cantidadMaxima = 10
                                    nuevoArticulo.cantidadMinima = 100
                                    nuevoArticulo.status = 1
                                    nuevoArticulo.usuarioActualizacion = i.usuarioModificacion
                                    nuevoArticulo.fechaActualizacion = i.fechaModificacion
                                    HeliosData.totalesAlmacen.Add(nuevoArticulo)
                                End If
                            End If

                        Next
                    End If
                Next
                HeliosData.SaveChanges()
                ts.Complete()
            Catch ex As Exception
                Throw ex
            End Try
        End Using
    End Sub


    Private Sub InsertarInventarioXoferta(venta As documentoventaAbarrotes, ofertaDetails As List(Of ofertadetalle))
        Dim codOferta As Integer = ofertaDetails(0).id_oferta
        Dim oferta = HeliosData.oferta.Where(Function(o) o.id = codOferta).FirstOrDefault

        Dim numeroProductosOferta = ofertaDetails.Count
        Dim precioDistribuidoXitem = Math.Round(oferta.precioventa.GetValueOrDefault / numeroProductosOferta, 2)

        For Each i In ofertaDetails
            Dim CantidadSolicitada = i.cantidad
            Dim GetArticulosLote = (From x In
                                        HeliosData.totalesAlmacen
                                    Where x.idAlmacen = 2 _
                                        And x.idItem = i.iditem _
                                        And x.cantidad > 0).ToList

            Dim cantidadDisponible = GetArticulosLote.Sum(Function(o) o.cantidad)

            If cantidadDisponible <= 0 Then
                Throw New Exception("El producto" & i.detalle & " no tiene stock suficiente")
            End If

            If i.cantidad > cantidadDisponible Then
                Throw New Exception("El producto" & i.detalle & " no tiene stock suficiente")
            End If

            If CantidadSolicitada > 0 Then
                For Each t In GetArticulosLote
                    If t.StockSaldo > 0 Then
                        If t.StockSaldo > CantidadSolicitada Then
                            Dim canUso = CantidadSolicitada
                            t.CantidadUsada = canUso

                        ElseIf t.StockSaldo = CantidadSolicitada Then
                            t.CantidadUsada = CantidadSolicitada
                        Else
                            Dim canUso = t.StockSaldo
                            t.CantidadUsada = canUso
                        End If
                    End If
                    CantidadSolicitada -= t.CantidadUsada
                    t.precioUnitarioCompra = (t.importeSoles / t.cantidad) * t.CantidadUsada
                    GetSalidaInventarioOferta(venta, i, t, precioDistribuidoXitem)
                Next
            End If

        Next
    End Sub



    Private Sub GetSalidaInventario(venta As documentoventaAbarrotes, i As documentoventaAbarrotesDet, t As totalesAlmacen)
        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = i.secuencia
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idEstablecimiento
            obj.idAlmacen = t.idAlmacen ' i.idAlmacenOrigen
            obj.nrolote = t.codigoLote ' i.codigoLote
            obj.tipoOperacion = i.TipoOperacion ' "01"
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serieVenta
            obj.numero = venta.numeroVenta
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idDocumento
            obj.descripcion = i.nombreItem
            obj.fechaLaboral = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.fecha = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.tipoRegistro = "S"
            obj.destinoGravadoItem = i.destino
            obj.tipoProducto = i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = t.CantidadUsada * -1 ' i.monto1 * -1
            obj.unidad = i.unidad1
            obj.cantidad2 = 0
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = t.CantidadUsada * i.precioUnitario
            obj.montoUSD = t.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = t.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now
            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub


    Private Sub GetSalidaInventarioResultAlmacen(venta As documentoventaAbarrotes, i As documentoventaAbarrotesDet, t As usp_GetValidacionLotesAlmacen_Result)
        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = i.secuencia
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idEstablecimiento
            obj.idAlmacen = t.idAlmacen ' i.idAlmacenOrigen
            obj.nrolote = t.codigoLote ' i.codigoLote
            obj.tipoOperacion = i.TipoOperacion ' "01"
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serieVenta
            obj.numero = venta.numeroVenta
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idDocumento
            obj.descripcion = i.nombreItem
            obj.fechaLaboral = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.fecha = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.tipoRegistro = "S"
            obj.destinoGravadoItem = i.destino
            obj.tipoProducto = i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = t.CantidadUsada * -1 ' i.monto1 * -1
            obj.unidad = i.unidad1
            obj.unidad2 = i.CustomEquivalencia.unidadComercial
            obj.cantidad2 = t.CantidadUsada / i.CustomEquivalencia.contenido_neto * -1 '/ i.ContenidoNetoUnidadComercialMaxima.GetValueOrDefault * -1 ' i.monto1.GetValueOrDefault * -1
            obj.contenido_neto = i.CustomEquivalencia.contenido_neto
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = obj.cantidad2 * CDec(i.monto2) * -1 'i.importeMN ' t.CantidadUsada * i.precioUnitario | obj.cantidad2 * CDec(i.monto2) * -1
            obj.montoUSD = i.importeME.GetValueOrDefault ' t.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = t.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now
            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub GetSalidaInventarioResult(venta As documentoventaAbarrotes, i As documentoventaAbarrotesDet, t As usp_GetValidacionLotes_Result)
        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = i.secuencia
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idEstablecimiento
            obj.idAlmacen = t.idAlmacen ' i.idAlmacenOrigen
            obj.nrolote = t.codigoLote ' i.codigoLote
            obj.tipoOperacion = i.TipoOperacion ' "01"
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serieVenta
            obj.numero = venta.numeroVenta
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idDocumento
            obj.descripcion = i.nombreItem
            obj.fechaLaboral = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.fecha = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.tipoRegistro = "S"
            obj.destinoGravadoItem = i.destino
            obj.tipoProducto = i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = t.CantidadUsada * -1 ' i.monto1 * -1
            obj.unidad = i.unidad1
            obj.unidad2 = i.CustomEquivalencia.unidadComercial
            obj.cantidad2 = t.CantidadUsada / i.CustomEquivalencia.contenido_neto * -1  ' i.ContenidoNetoUnidadComercialMaxima.GetValueOrDefault * -1 ' i.monto1.GetValueOrDefault * -1
            obj.contenido_neto = i.CustomEquivalencia.contenido_neto
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = obj.cantidad2 * CDec(i.monto2) * -1 'i.importeMN ' t.CantidadUsada * i.precioUnitario | obj.cantidad2 * CDec(i.monto2) * -1
            obj.montoUSD = i.importeME.GetValueOrDefault ' t.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = t.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now
            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Function GetEntradaInventarioResult(venta As documentoventaAbarrotes, i As documentoventaAbarrotesDet, t As usp_GetValidacionLotes_Result, costo As Decimal) As InventarioMovimiento
        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.customProducto = i.CustomProducto
            obj.idorigenDetalle = i.secuencia
            obj.idEmpresa = venta.idEmpresaDes
            obj.idEstablecimiento = venta.idEstablecimientoDestino 
            obj.idAlmacen = i.idalmacenDestino ' i.idAlmacenOrigen
            obj.nrolote = t.codigoLote ' i.codigoLote
            obj.tipoOperacion = i.TipoOperacion ' "01"
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serieVenta
            obj.numero = venta.numeroVenta
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idDocumento
            obj.descripcion = i.nombreItem
            obj.fechaLaboral = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.fecha = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.tipoRegistro = "E"
            obj.destinoGravadoItem = i.destino
            obj.tipoProducto = i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = t.CantidadUsada
            obj.unidad = i.unidad1
            obj.unidad2 = i.CustomEquivalencia.unidadComercial
            obj.cantidad2 = t.CantidadUsada * i.CustomEquivalencia.contenido_neto '* i.ContenidoNetoUnidadComercialMaxima.GetValueOrDefault ' i.monto1.GetValueOrDefault * -1
            obj.contenido_neto = i.CustomEquivalencia.contenido_neto
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = costo 'obj.cantidad2 * CDec(i.monto2)  'i.importeMN ' t.CantidadUsada * i.precioUnitario | obj.cantidad2 * CDec(i.monto2) * -1
            obj.montoUSD = 0 ' i.importeME.GetValueOrDefault ' t.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = t.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now
            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
            GetEntradaInventarioResult = obj
        End Using
    End Function


    Private Sub RegistrarInventarioValorizado(i As InventarioMovimiento, costo As Decimal)
        Using ts As New TransactionScope
            Dim nuevoTA As New totalesAlmacen With
                                    {
                                        .idEmpresa = i.idEmpresa,
                                        .idEstablecimiento = i.idEstablecimiento,
                                        .codigoLote = i.nrolote,
                                        .idAlmacen = i.idAlmacen,
                                        .origenRecaudo = i.customProducto.origenProducto,
                                        .tipoExistencia = i.customProducto.tipoExistencia,
                                        .idItem = i.customProducto.codigodetalle,
                                        .descripcion = i.customProducto.descripcionItem,
                                        .idUnidad = i.customProducto.unidad1,
                                        .unidadMedida = i.customProducto.unidad1,
                                        .cantidad = i.cantidad,
                                        .importeSoles = costo,
                                        .importeDolares = 0,
                                        .cantidadMaxima = 10000,
                                        .cantidadMinima = 10,
                                        .fechaVcto = i.fechavcto,
                                        .status = StatusArticulo.Activo,
                                        .usuarioActualizacion = i.usuarioActualizacion,
                                        .fechaActualizacion = i.fechaActualizacion
            }
            HeliosData.totalesAlmacen.Add(nuevoTA)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub RegistrarInventarioValorizadoTransferencia(i As InventarioMovimiento, costo As Decimal)
        Using ts As New TransactionScope
            Dim nuevoTA As New totalesAlmacen With
                                    {
                                        .idEmpresa = i.idEmpresa,
                                        .idEstablecimiento = i.idEstablecimiento,
                                        .codigoLote = i.nrolote,
                                        .idAlmacen = i.idAlmacen,
                                        .origenRecaudo = i.customProducto.origenProducto,
                                        .tipoExistencia = i.customProducto.tipoExistencia,
                                        .idItem = i.customProducto.codigodetalle,
                                        .descripcion = i.customProducto.descripcionItem,
                                        .idUnidad = i.customProducto.unidad1,
                                        .unidadMedida = i.customProducto.unidad1,
                                        .cantidad = i.cantidad,
                                        .importeSoles = costo,
                                        .importeDolares = 0,
                                        .cantidadMaxima = 10000,
                                        .cantidadMinima = 10,
                                        .fechaVcto = i.fechavcto,
                                        .status = StatusArticulo.Activo,
                                        .usuarioActualizacion = i.usuarioActualizacion,
                                        .fechaActualizacion = i.fechaActualizacion
            }
            HeliosData.totalesAlmacen.Add(nuevoTA)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    'Private Sub GetSalidaInventarioKit(venta As documentoventaAbarrotes, t As usp_GetValidacionLotes_Result, ax As detalleitems_conexo)
    '    Dim obj As New InventarioMovimiento

    '    Dim prod = HeliosData.detalleitems.Find(ax.codigodetalle)


    '    Using ts As New TransactionScope
    '        obj = New InventarioMovimiento
    '        obj.idorigenDetalle = 0 ' i.secuencia
    '        obj.idEmpresa = venta.idEmpresa
    '        obj.idEstablecimiento = venta.idEstablecimiento
    '        obj.idAlmacen = t.idAlmacen ' i.idAlmacenOrigen
    '        obj.nrolote = t.codigoLote ' i.codigoLote
    '        obj.tipoOperacion = "01"
    '        obj.tipoDocAlmacen = "99"
    '        obj.serie = venta.serieVenta
    '        obj.numero = venta.numeroVenta
    '        obj.idDocumento = venta.idDocumento
    '        obj.idDocumentoRef = venta.idDocumento
    '        obj.descripcion = ax.detalle ' i.nombreItem
    '        obj.fechaLaboral = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
    '        obj.fecha = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
    '        obj.tipoRegistro = "S"
    '        obj.destinoGravadoItem = i.destino
    '        obj.tipoProducto = i.tipoExistencia
    '        obj.OrigentipoProducto = "N"
    '        obj.idItem = ax.codigodetalle ' i.idItem
    '        obj.cantidad = t.CantidadUsada * -1 ' i.monto1 * -1
    '        obj.unidad = i.unidad1
    '        obj.unidad2 = ax.unidadComercial ' i.CustomEquivalencia.unidadComercial
    '        obj.cantidad2 = ax.cantidad * -1 ' i.monto1.GetValueOrDefault * -1
    '        obj.precUnite = 0
    '        obj.precUniteUSD = 0
    '        obj.monto = 0 ' t.CantidadUsada * i.precioUnitario
    '        obj.montoUSD = 0 ' t.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
    '        obj.montoOther = t.precioUnitarioCompra
    '        obj.monedaOther = 0
    '        obj.status = "D"
    '        obj.entragado = "SI"
    '        obj.usuarioActualizacion = venta.usuarioActualizacion
    '        obj.fechaActualizacion = Date.Now
    '        HeliosData.InventarioMovimiento.Add(obj)
    '        HeliosData.SaveChanges()
    '        ts.Complete()
    '    End Using
    'End Sub

    Private Sub GetSalidaInventarioLogistica(venta As documentocompra, i As documentocompradetalle, t As totalesAlmacen)
        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = i.secuencia
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idCentroCosto
            obj.idAlmacen = i.almacenRef
            obj.nrolote = t.codigoLote ' i.codigoLote
            obj.tipoOperacion = i.TipoOperacion ' StatusTipoOperacion.OTRAS_SALIDAS_DE_ALMACEN
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serie
            obj.numero = venta.numeroDoc
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idDocumento
            obj.descripcion = i.descripcionItem
            obj.fechaLaboral = venta.fechaDoc
            obj.fecha = venta.fechaDoc
            obj.tipoRegistro = "S"
            obj.destinoGravadoItem = i.destino
            obj.tipoProducto = i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = t.CantidadUsada * -1 ' i.monto1 * -1
            obj.unidad = i.unidad1
            obj.cantidad2 = 0
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = t.CantidadUsada * i.precioUnitario
            obj.montoUSD = t.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = t.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now
            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub GetEntradaXtransLogistica(venta As documentocompra, i As documentocompradetalle, t As totalesAlmacen)
        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = i.secuencia
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idCentroCosto
            obj.idAlmacen = i.almacenDestino
            obj.nrolote = t.codigoLote ' i.codigoLote
            obj.tipoOperacion = "11"
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serie
            obj.numero = venta.numeroDoc
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idDocumento
            obj.descripcion = i.descripcionItem
            obj.fechaLaboral = venta.fechaDoc
            obj.fecha = venta.fechaDoc
            obj.tipoRegistro = "E"
            obj.destinoGravadoItem = i.destino
            obj.tipoProducto = i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = t.CantidadUsada  ' i.monto1 * -1
            obj.unidad = i.unidad1
            obj.cantidad2 = 0
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = t.CantidadUsada * t.UltimoPMmn ' t.CantidadUsada * i.precioUnitario
            obj.montoUSD = 0 ' t.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = t.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now
            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub GetSalidaInventarioOferta(venta As documentoventaAbarrotes, i As ofertadetalle, t As totalesAlmacen, precioDistribuidoXitem As Decimal)
        Dim productoBE = HeliosData.detalleitems.Where(Function(o) o.codigodetalle = i.iditem).FirstOrDefault

        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = 0
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idEstablecimiento
            obj.idAlmacen = 2
            obj.nrolote = t.codigoLote ' i.codigoLote
            obj.tipoOperacion = "01"
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serieVenta
            obj.numero = venta.numeroVenta
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idDocumento
            obj.descripcion = i.detalle
            obj.fechaLaboral = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.fecha = If(venta.fechaConfirmacion.HasValue, venta.fechaConfirmacion, venta.fechaDoc)
            obj.tipoRegistro = "S"
            obj.destinoGravadoItem = productoBE.origenProducto
            obj.tipoProducto = productoBE.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = productoBE.codigodetalle
            obj.cantidad = t.CantidadUsada * -1 ' i.monto1 * -1
            obj.unidad = productoBE.unidad1
            obj.cantidad2 = 0
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = t.CantidadUsada * precioDistribuidoXitem
            obj.montoUSD = 0
            obj.montoOther = t.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now
            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub CobrarVentaRapida_SPK(be As documento)
        Dim AsientoBL As New AsientoBL
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer
        Try
            Using ts As New TransactionScope
                Dim doc = HeliosData.documento.Where(Function(o) o.idDocumento = be.idDocumento).Single
                Select Case be.documentoventaAbarrotes.tipoDocumento
                    Case "12.1", "12.2"
                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(be.documentoventaAbarrotes.IdNumeracion))
                    Case "9907"
                        Dim nroNota = GetNumeracionNotaVenta(New documentoventaAbarrotes With
                                              {
                                              .idEmpresa = doc.idEmpresa,
                                              .tipoVenta = TIPO_VENTA.NOTA_DE_VENTA
                                              })
                        cval = nroNota
                End Select
                Dim venta = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).Single

                If venta IsNot Nothing Then
                    doc.nroDoc = be.documentoventaAbarrotes.serieVenta & "-" & cval
                    be.nroDoc = be.documentoventaAbarrotes.serieVenta & "-" & cval
                    be.CustomSerie = be.documentoventaAbarrotes.serieVenta
                    be.CustomNumero = cval
                    With venta
                        .idClientePedido = be.documentoventaAbarrotes.idClientePedido
                        .idCliente = be.documentoventaAbarrotes.idCliente
                        .terminos = be.documentoventaAbarrotes.terminos
                        .estadoCobro = TIPO_VENTA.PAGO.COBRADO
                        .serieVenta = be.documentoventaAbarrotes.serieVenta
                        .numeroVenta = cval
                        .fechaConfirmacion = be.documentoventaAbarrotes.fechaConfirmacion
                        .tipoDocumento = be.documentoventaAbarrotes.tipoDocumento
                        .estadoCobro = be.documentoventaAbarrotes.estadoCobro
                        .tipoVenta = be.documentoventaAbarrotes.tipoVenta
                        .glosa = be.documentoventaAbarrotes.glosa
                    End With
                End If
                DetalleInventarioAprobado(be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList, venta, cval)
                PagoDeLaVenta(be, be.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)
                AsientoBL.SavebyGroupDoc(be)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Private Sub DetalleInventarioAprobado(ventaDetalle As List(Of documentoventaAbarrotesDet), venta As documentoventaAbarrotes, cval As Integer)
        Dim obj As InventarioMovimiento
        Using ts As New TransactionScope
            Try
                For Each i In ventaDetalle

                    Dim inv = HeliosData.totalesAlmacen.Where(Function(o) i.idItem = o.idItem And o.codigoLote = i.codigoLote).ToList

                    Dim cantidadDisponible = inv.Sum(Function(o) o.cantidad)

                    If cantidadDisponible <= 0 Then
                        Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
                    End If

                    If i.monto1 > cantidadDisponible Then
                        Throw New Exception("El producto" & i.nombreItem & " no tiene stock suficiente")
                    End If

                    obj = New InventarioMovimiento
                    obj.idorigenDetalle = i.secuencia
                    obj.idEmpresa = venta.idEmpresa
                    obj.idEstablecimiento = venta.idEstablecimiento
                    obj.idAlmacen = i.idAlmacenOrigen
                    obj.nrolote = i.codigoLote
                    obj.tipoOperacion = "01"
                    obj.tipoDocAlmacen = "99"
                    obj.serie = venta.serieVenta
                    obj.numero = cval
                    obj.idDocumento = venta.idDocumento
                    obj.idDocumentoRef = venta.idDocumento
                    obj.descripcion = i.nombreItem
                    obj.fechaLaboral = venta.fechaConfirmacion
                    obj.fecha = venta.fechaConfirmacion
                    obj.tipoRegistro = "S"
                    obj.destinoGravadoItem = i.destino
                    obj.tipoProducto = i.tipoExistencia
                    obj.OrigentipoProducto = "N"
                    obj.idItem = i.idItem
                    obj.cantidad = i.monto1 * -1
                    obj.unidad = i.unidad1
                    obj.cantidad2 = 0
                    obj.precUnite = 0
                    obj.precUniteUSD = 0
                    obj.monto = 0
                    obj.montoUSD = 0
                    obj.montoOther = 0
                    obj.monedaOther = 0
                    obj.status = "D"
                    obj.entragado = "SI"
                    obj.usuarioActualizacion = venta.usuarioActualizacion
                    obj.fechaActualizacion = Date.Now
                    HeliosData.InventarioMovimiento.Add(obj)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
            Catch ex As Exception
                Throw ex
            End Try
        End Using
    End Sub

    Public Function GenerarComprobanteVenta(objDocumento As documento) As Integer
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim totalesBL As New totalesAlmacenBL
        Dim inventario As New InventarioMovimientoBL
        Using ts As New TransactionScope
            Dim fechaActual = New Date(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1)
            Dim fechaAnterior = fechaActual.AddMonths(-1)

            'si es false es porque no esta dentro del inicio de operaciones
            Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(objDocumento.idEmpresa, fechaActual, objDocumento.idCentroCosto)
            If valor = "False" Then
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaAnterior.Year, fechaAnterior.Month, objDocumento.idCentroCosto) = False Then
                    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                End If
            ElseIf valor = "True" Then
                Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
            Else
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If
            End If
            '---------------------------------------------------------------------------------------------------------------------

            Dim codVenta = GenerarComprobanteVentaSPK(objDocumento)
            Dim listaVentaDet = objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList
            Dim ListaArticulos = (From n In listaVentaDet
                                  Where n.tipoExistencia <> "GS"
                                  Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct.ToList

            Dim fechaEnvioAlmacen = objDocumento.fechaProceso
            For Each a In ListaArticulos
                Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                    New InventarioMovimiento With {
                                                .idAlmacen = a.idAlmacenOrigen,
                                                .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                                                .tipoProducto = a.tipoExistencia,
                                                .idItem = a.idItem,
                                                .nrolote = a.codigoLote}, Nothing)
                totalesBL.GetCurarKardexCaberasLOTE(lista)
            Next
            HeliosData.SaveChanges()
            ts.Complete()
            Return codVenta
        End Using
    End Function

    Public Function GenerarComprobanteVentaSPK(objDocumento As documento) As Integer
        Dim asientoBL As New AsientoBL
        Dim cajaDetBL As New documentoCajaDetalleBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim codDocumentoVenta As Integer
        Dim codDocumentoNota As Integer
        Try
            codDocumentoNota = objDocumento.documentoventaAbarrotes.idPadre
            Using ts As New TransactionScope()

                Dim docNota = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = codDocumentoNota).Single

                If docNota.estado = StatusNotaDeVentas.Sustentado Then
                    Throw New Exception("La nota ya fue sustentada, verifique la nota de venta")
                End If

                docNota.estado = StatusNotaDeVentas.Sustentado

                cajaDetBL.DeleteDocumentoCaja(codDocumentoNota)

                objDocumento.fechaActualizacion = DateTime.Now
                'Documento insertado
                Part_Documento(objDocumento)
                codDocumentoVenta = objDocumento.idDocumento
                'Documento venta
                InsertSingleContado(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                'Documento venta detalle

                '  Dim listaPagos = GetMappingPagos(codDocumentoNota, codDocumentoVenta)
                'GetU
                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingleContado(i, objDocumento.idDocumento)
                Next
                GetActualizarInventarioFecha(codDocumentoNota, objDocumento)
                PagoDeLaVenta(objDocumento, objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)
                objDocumento.documentoGuia.serie = objDocumento.CustomSerie
                objDocumento.documentoGuia.numeroDoc = objDocumento.CustomNumero
                GuiaRemisionVenta(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Private Sub GetActualizarInventarioFecha(codDocumentoNota As Integer, venta As documento)
        Dim inventarioDoc = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = codDocumentoNota).ToList
        Using ts As New TransactionScope
            For Each i In inventarioDoc
                i.idorigenDetalle = Nothing
                i.idDocumento = venta.idDocumento
                i.idDocumentoRef = venta.idDocumento
                i.fecha = venta.fechaProceso
                i.tipoOperacion = "01"
                i.tipoDocAlmacen = venta.tipoDoc
                i.serie = venta.CustomSerie
                i.numero = venta.CustomNumero
            Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Function GetMappingPagos(codDocumentoNota As Integer, codDocumentoVenta As Integer) As List(Of documento)
        Dim cajaDetBL As New documentoCajaDetalleBL
        Dim pagoBL As New documentoventaAbarrotesBL
        Dim cajaBL As New documentoCajaBL
        Dim listaPagos = cajaBL.GetPagoByComprobanteV2(codDocumentoNota)
        Using ts As New TransactionScope
            cajaDetBL.DeleteDocumentoCaja(codDocumentoNota)
            'For Each i In listaPagos
            '    pagoBL.SaveCaja(i, codDocumentoVenta)
            'Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
        Return listaPagos
    End Function

    Public Function AddVentaSinInventario(objDocumento As documento) As Integer
        Dim asientoBL As New AsientoBL
        Dim codDocumentoVenta As Integer
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now
                'Documento insertado
                Part_Documento(objDocumento)
                codDocumentoVenta = objDocumento.idDocumento
                'Documento venta
                InsertSingleContado(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                'Documento venta detalle
                Part_DetalleSinInventario(objDocumento)
                Select Case objDocumento.documentoventaAbarrotes.tipoVenta
                    Case TIPO_VENTA.VENTA_AL_TICKET

                    Case TIPO_VENTA.VENTA_POS_DIRECTA
                        PagoDeLaVentaSinLote(objDocumento, objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)
                        ' asientoBL.SavebyGroupDoc(objDocumento)
                        'GuiaRemisionVenta(objDocumento)
                End Select
                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Function AddVentaSinLote(objDocumento As documento) As Integer
        Dim asientoBL As New AsientoBL
        Dim anticipoBL As New DocumentoAnticipoConciliacionBL
        Dim codDocumentoVenta As Integer
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now
                'Documento insertado
                Part_Documento(objDocumento)
                codDocumentoVenta = objDocumento.idDocumento
                'Documento venta
                InsertSingleContado(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                'Documento venta detalle
                Part_DetalleSinLote(objDocumento)
                Select Case objDocumento.documentoventaAbarrotes.tipoVenta
                    Case TIPO_VENTA.VENTA_AL_TICKET

                    Case TIPO_VENTA.VENTA_POS_DIRECTA, TIPO_VENTA.VENTA_ELECTRONICA
                        PagoDeLaVentaSinLote(objDocumento, objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)
                        asientoBL.SavebyGroupDoc(objDocumento)
                        GuiaRemisionVenta(objDocumento)
                End Select

                If objDocumento.ListaDetalleAnticipos IsNot Nothing Then
                    If objDocumento.ListaDetalleAnticipos.Count > 0 Then

                        For Each i In objDocumento.ListaDetalleAnticipos
                            i.idDocumentoPadre = codDocumentoVenta
                            'i.docAfectado = codDocumentoVenta
                            anticipoBL.Insert(i)
                        Next
                    End If
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function AddVenta(objDocumento As documento) As Integer
        Dim asientoBL As New AsientoBL
        Dim codDocumentoVenta As Integer
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now
                'Documento insertado
                Part_Documento(objDocumento)
                codDocumentoVenta = objDocumento.idDocumento
                'Documento venta
                InsertSingleContado(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                'Documento venta detalle
                Part_Detalle(objDocumento)

                Select Case objDocumento.documentoventaAbarrotes.tipoVenta
                    Case TIPO_VENTA.VENTA_AL_TICKET

                    Case TIPO_VENTA.VENTA_POS_DIRECTA
                        PagoDeLaVenta(objDocumento, objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)
                        asientoBL.SavebyGroupDoc(objDocumento)
                        GuiaRemisionVenta(objDocumento)
                End Select
                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function AddVentaNota(objDocumento As documento) As Integer
        Dim asientoBL As New AsientoBL
        Dim codDocumentoVenta As Integer
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now
                'Documento insertado
                Part_DocumentoNota(objDocumento)
                codDocumentoVenta = objDocumento.idDocumento
                'Documento venta
                InsertSingleContado(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                'Documento venta detalle
                Part_Detalle(objDocumento)

                PagoDeLaVenta(objDocumento, objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function AddVentaNotaCustom(objDocumento As documento) As Integer
        Dim asientoBL As New AsientoBL
        Dim codDocumentoVenta As Integer
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now
                'Documento insertado
                Part_DocumentoNota(objDocumento)
                codDocumentoVenta = objDocumento.idDocumento
                'Documento venta
                InsertSingleContado(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                'Documento venta detalle
                Part_Detalle(objDocumento)

                PagoDeLaVenta(objDocumento, objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)
                ' asientoBL.SavebyGroupDoc(objDocumento)
                '  GuiaRemisionVenta(objDocumento)

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function AddVentaNotaCustomSinLote(objDocumento As documento) As Integer
        Dim asientoBL As New AsientoBL
        Dim anticipoBL As New DocumentoAnticipoConciliacionBL
        Dim docAnticipoBL As New documentoAnticipoBL
        Dim codDocumentoVenta As Integer
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now
                'Documento insertado
                Part_DocumentoNota(objDocumento)
                codDocumentoVenta = objDocumento.idDocumento
                'Documento venta
                InsertSingleContado(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                'Documento venta detalle
                Part_DetalleSinLote(objDocumento)

                PagoDeLaVentaSinLote(objDocumento, objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)

                If objDocumento.ListaDetalleAnticipos IsNot Nothing Then
                    If objDocumento.ListaDetalleAnticipos.Count > 0 Then

                        For Each i In objDocumento.ListaDetalleAnticipos
                            i.idDocumentoPadre = codDocumentoVenta
                            'i.docAfectado = codDocumentoVenta
                            anticipoBL.Insert(i)
                        Next
                    End If
                End If

                ' asientoBL.SavebyGroupDoc(objDocumento)
                '  GuiaRemisionVenta(objDocumento)

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function AddVentaNotaSinInventario(objDocumento As documento) As Integer
        Dim asientoBL As New AsientoBL
        Dim codDocumentoVenta As Integer
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now
                'Documento insertado
                Part_DocumentoNota(objDocumento)
                codDocumentoVenta = objDocumento.idDocumento
                'Documento venta
                InsertSingleContado(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)
                'Documento venta detalle
                Part_DetalleSinInventario(objDocumento)

                PagoDeLaVentaSinLote(objDocumento, objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)
                ' asientoBL.SavebyGroupDoc(objDocumento)
                '  GuiaRemisionVenta(objDocumento)

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Private Shared Sub GuiaRemisionVenta(objDocumento As documento)
        Dim guiaBL As New documentoGuiaBL
        If (Not IsNothing(objDocumento.documentoGuia)) Then
            If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
            End If
        End If
    End Sub

    Private Sub PagoDeLaVenta(objDocumento As documento, listaVenta As List(Of documentoventaAbarrotesDet))
        If Not IsNothing(objDocumento.ListaCustomDocumento) Then
            For Each i In objDocumento.ListaCustomDocumento
                If objDocumento.documentoventaAbarrotes.IdNumeracion > 0 Then
                    i.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.CustomNumero
                    i.documentoCaja.numeroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.CustomNumero
                Else
                    i.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroVenta
                    i.documentoCaja.numeroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroVenta
                End If
                i.nroDoc = objDocumento.CustomSerie & "-" & objDocumento.CustomNumero
                '   SaveCajaJPS_SS(i, objDocumento.idDocumento, listaVenta)
                SaveCaja(i, objDocumento.idDocumento)
            Next
        End If
    End Sub

    Private Sub PagoDeLaVentaSinLote(objDocumento As documento, listaVenta As List(Of documentoventaAbarrotesDet))
        If Not IsNothing(objDocumento.ListaCustomDocumento) Then
            For Each i In objDocumento.ListaCustomDocumento
                If objDocumento.documentoventaAbarrotes.IdNumeracion > 0 Then
                    i.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.CustomNumero
                    i.documentoCaja.numeroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.CustomNumero
                Else
                    i.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroVenta
                    i.documentoCaja.numeroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroVenta
                End If
                i.nroDoc = objDocumento.CustomSerie & "-" & objDocumento.CustomNumero
                SaveCajaJPS_SinLote(i, objDocumento.idDocumento, objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList)
            Next
        End If
    End Sub




    Private Shared Sub Part_Detalle(objDocumento As documento)
        Dim totalesBL As New totalesAlmacenBL
        Dim inventario As New InventarioMovimientoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim t As New totalesAlmacen

        For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
            Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingleContado(i, objDocumento.idDocumento)
            If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                t = New totalesAlmacen
                t.idEmpresa = i.IdEmpresa
                t.idEstablecimiento = i.IdEstablecimiento
                t.codigoLote = i.codigoLote
                t.idAlmacen = i.idAlmacenOrigen
                t.origenRecaudo = i.destino
                t.idItem = i.idItem
                t.cantidad = i.monto1 * -1
                t.precioUnitarioCompra = i.precioUnitario * -1
                t.importeSoles = i.salidaCostoMN * -1
                t.importeDolares = i.salidaCostoME * -1

                Dim Product = totalesBL.ObtenerCanDisponibleProductLote(t)

                If i.monto1 > Product.cantidad Then
                    Throw New Exception("El producto: " & i.nombreItem & ", no tiene stock disponible!")
                End If

                i.secuencia = codSecuenciaDetalle
                i.Serie = objDocumento.CustomSerie
                i.NumDoc = objDocumento.CustomNumero
                inventario.InsertVentaPagada(i, objDocumento)
            End If
        Next
    End Sub


    Private Sub Part_DetalleSinLote(objDocumento As documento)
        Dim totalesBL As New totalesAlmacenBL
        Dim inventario As New InventarioMovimientoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim t As New totalesAlmacen

        Using ts As New TransactionScope
            For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingleContado(i, objDocumento.idDocumento)
                i.secuencia = codSecuenciaDetalle
            Next


            Dim numeroVenta = objDocumento.CustomNumero
            DetalleInventarioJiuni(objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList(), objDocumento.documentoventaAbarrotes, numeroVenta)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

        'For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
        '    Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingleContado(i, objDocumento.idDocumento)
        '    If i.tipoExistencia <> TipoRecurso.SERVICIO Then
        '        t = New totalesAlmacen
        '        t.idEmpresa = i.IdEmpresa
        '        t.idEstablecimiento = i.IdEstablecimiento
        '        t.codigoLote = i.codigoLote
        '        t.idAlmacen = i.idAlmacenOrigen
        '        t.origenRecaudo = i.destino
        '        t.idItem = i.idItem
        '        t.cantidad = i.monto1 * -1
        '        t.precioUnitarioCompra = i.precioUnitario * -1
        '        t.importeSoles = i.salidaCostoMN * -1
        '        t.importeDolares = i.salidaCostoME * -1
        '        gdfgdgdg
        '        Dim Product = totalesBL.ObtenerCanDisponibleProductLote(t)

        '        If i.monto1 > Product.cantidad Then
        '            Throw New Exception("El producto: " & i.nombreItem & ", no tiene stock disponible!")
        '        End If

        '        i.secuencia = codSecuenciaDetalle
        '        i.Serie = objDocumento.CustomSerie
        '        i.NumDoc = objDocumento.CustomNumero
        '        inventario.InsertVentaPagada(i, objDocumento)
        '    End If
        'Next
    End Sub

    Private Sub Part_DetalleSinInventario(objDocumento As documento)
        Dim totalesBL As New totalesAlmacenBL
        Dim inventario As New InventarioMovimientoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim t As New totalesAlmacen

        Using ts As New TransactionScope
            For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingleContado(i, objDocumento.idDocumento)
                i.secuencia = codSecuenciaDetalle
            Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Shared Sub Part_Documento(ByRef objDocumento As documento)
        Dim DocumentoBL As New documentoBL
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer = 0

        Select Case objDocumento.IsFormatoGeneral
            Case True
                objDocumento.nroDoc =
                    objDocumento.documentoventaAbarrotes.serieVenta & "-" & objDocumento.documentoventaAbarrotes.numeroVenta
            Case False
                If objDocumento.documentoventaAbarrotes.IdNumeracion > 0 Then
                    cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentoventaAbarrotes.IdNumeracion))
                    cval = cval
                    objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
                    objDocumento.documentoventaAbarrotes.numeroVenta = cval
                Else
                    objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroDoc
                    objDocumento.documentoventaAbarrotes.numeroVenta = objDocumento.documentoventaAbarrotes.numeroDoc
                End If
        End Select


        DocumentoBL.Insert(objDocumento)
        objDocumento.idDocumento = objDocumento.idDocumento
        Select Case objDocumento.IsFormatoGeneral
            Case True
                objDocumento.CustomSerie = objDocumento.documentoventaAbarrotes.serieVenta
                objDocumento.CustomNumero = objDocumento.documentoventaAbarrotes.numeroVenta
            Case False
                objDocumento.CustomSerie = objDocumento.documentoventaAbarrotes.serie
                objDocumento.CustomNumero = cval
        End Select

    End Sub

    Private Sub Part_DocumentoNota(ByRef objDocumento As documento)
        Dim DocumentoBL As New documentoBL

        Dim nroNota = GetNumeracionNotaVenta(New documentoventaAbarrotes With
                                          {
                                          .idEmpresa = objDocumento.idEmpresa,
                                          .tipoVenta = TIPO_VENTA.NOTA_DE_VENTA
                                          })


        objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serieVenta & "-" & nroNota
        objDocumento.documentoventaAbarrotes.serieVenta = "NOTA"
        objDocumento.documentoventaAbarrotes.numeroVenta = nroNota
        DocumentoBL.Insert(objDocumento)
        objDocumento.idDocumento = objDocumento.idDocumento
        objDocumento.CustomSerie = objDocumento.documentoventaAbarrotes.serieVenta
        objDocumento.CustomNumero = nroNota
    End Sub

    Public Function SaveVentaCobradaContado(objDocumento As documento) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()
                Dim codDocumentoVenta = VentaContado(objDocumento)

                'Dim consultaDetalle As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = codDocumentoVenta And
                '                                                                                                            o.tipoExistencia <> TipoExistencia.ServicioGasto).ToList

                Dim listaventaDet = objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList

                Dim ListaArticulos = (From n In listaventaDet
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.idAlmacenOrigen,
                                                                                                                     .fecha = New DateTime(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1),
                                                                                                                     .tipoProducto = a.tipoExistencia,
                                                                                                                     .idItem = a.idItem, .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function Grabar_VentaNota(objDocumento As documento) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()
                '#Region "Compra extra por inventario escaso"

                Dim listaAComprar = objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.Where(Function(o) o.monto2 > 0).ToList
                If listaAComprar.Count > 0 Then
                    Dim compraBL As New documentocompraBL
                    Dim obj As recursoCostoLote
                    Dim DetalleCompra As New List(Of documentocompradetalle)
                    Dim nuevoDetalle = (From member In listaAComprar
                                        Group member By keys = New With
                                            {
                                            Key member.codigoLote,
                                            Key member.idAlmacenOrigen,
                                            Key member.destino,
                                            Key member.idItem,
                                            Key member.nombreItem,
                                            Key member.tipoExistencia,
                                            Key member.unidad1
                                            }
                                            Into Group
                                        Select New With
                                            {
                                            keys.codigoLote,
                                            keys.idAlmacenOrigen,
                                            keys.idItem,
                                            keys.destino,
                                            keys.nombreItem,
                                            keys.tipoExistencia,
                                            keys.unidad1,
                                            .sumCantidad = Group.Sum(Function(x) x.monto2),
                                            .SumMonto = Group.Max(Function(x) x.importeMN)
                                            }).ToList

                    Dim proveedor = HeliosData.entidad.Where(Function(o) o.idEmpresa = objDocumento.idEmpresa And o.tipoEntidad = "VR").Single

                    Dim numeroNota = compraBL.GetNumeracionCompra(New documentocompra With
                                           {
                                           .idEmpresa = objDocumento.idEmpresa,
                                           .tipoCompra = TIPO_COMPRA.NOTA_DE_COMPRA
                                           })

                    Dim doc As documento = AddDocumento(objDocumento.documentoventaAbarrotes)
                    doc.nroDoc = numeroNota
                    doc.idEntidad = proveedor.idEntidad
                    doc.entidad = proveedor.nombreCompleto
                    doc.nrodocEntidad = "-"
                    doc.tipoEntidad = "PR"
                    '------------------------------------------------------------------------------------------------

                    Dim docCompra As documentocompra = AddNotaCompra(objDocumento.documentoventaAbarrotes, nuevoDetalle.Sum(Function(o) o.SumMonto).GetValueOrDefault)

                    doc.documentocompra = docCompra
                    doc.documentocompra.idProveedor = proveedor.idEntidad
                    doc.documentocompra.numeroDoc = numeroNota
                    '------------------------------------------------------------------------------------------------

                    For Each i In nuevoDetalle
                        obj = New recursoCostoLote With
                                 {
                                 .codigoLote = i.codigoLote,
                                 .nroLote = "NOTA",
                                 .detalle = i.nombreItem,
                                 .fechaProduccion = Nothing,
                                 .fechaVcto = Nothing,
                                 .productoSustentado = False
                                 }

                        DetalleCompra.Add(New documentocompradetalle With
                                          {
                                          .ItemEntregadototal = "S",
                                          .codigoLote = i.codigoLote,
                                          .nrolote = obj.nroLote,
                                          .CustomRecursoCostoLote = obj,
                                          .IdEmpresa = doc.idEmpresa,
                                          .IdEstablecimiento = doc.idCentroCosto,
                                          .tipoCompra = TIPO_COMPRA.COMPRA,
                                          .TipoOperacion = StatusTipoOperacion.COMPRA,
                                          .FechaDoc = doc.fechaProceso,
                                          .FechaLaboral = DateTime.Now,
                                          .CuentaProvedor = "4212",
                                          .NombreProveedor = proveedor.nombreCompleto,
                                          .Serie = "NT",
                                          .NumDoc = numeroNota,
                                          .TipoDoc = "9907",
                                          .idItem = i.idItem,
                                          .descripcionItem = i.nombreItem,
                                          .tipoExistencia = i.tipoExistencia,
                                          .destino = i.destino,
                                          .unidad1 = i.unidad1,
                                          .monto1 = i.sumCantidad,
                                          .precioUnitario = 0,
                                          .precioUnitarioUS = 0,
                                          .importe = 0,
                                          .importeUS = 0,
                                          .montokardex = 0,
                                          .montoIsc = 0,
                                          .montoIgv = 0,
                                          .otrosTributos = 0,
                                          .montokardexUS = 0,
                                          .montoIscUS = 0,
                                          .montoIgvUS = 0,
                                          .otrosTributosUS = 0,
                                          .almacenRef = i.idAlmacenOrigen,
                                          .fechaEntrega = DateTime.Now,
                                          .estadoPago = "PN",
                                          .usuarioModificacion = doc.usuarioActualizacion,
                                          .fechaModificacion = DateTime.Now
                                          })
                    Next
                    doc.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE"
                    doc.documentocompra.documentocompradetalle = DetalleCompra
                    compraBL.GrabarNotaCompraDirecta(doc)
                End If

                '#End Region
                Dim codDocumentoVenta = AddVentaNotaCustom(objDocumento)

                Dim listaventaDet = objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList

                Dim ListaArticulos = (From n In listaventaDet
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.idAlmacenOrigen,
                                                                                                                     .fecha = New DateTime(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1),
                                                                                                                     .tipoProducto = a.tipoExistencia,
                                                                                                                     .idItem = a.idItem, .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetVentasStatusPreparacionAlmacen(be As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)

        Dim consulta = (From n In HeliosData.documentoventaAbarrotes
                        Group Join ent In HeliosData.entidad On ent.idEntidad Equals n.idCliente Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where n.idEmpresa = be.idEmpresa AndAlso
                           n.idEstablecimiento = be.idEstablecimiento AndAlso
                           n.estadoEntrega = be.estadoEntrega).ToList

        GetVentasStatusPreparacionAlmacen = New List(Of documentoventaAbarrotes)

        Dim clientePedido = String.Empty
        For Each i In consulta

            If i.c IsNot Nothing Then
                clientePedido = i.c.nombreCompleto
            Else
                clientePedido = i.n.nombrePedido
            End If

            GetVentasStatusPreparacionAlmacen.Add(New documentoventaAbarrotes With
                                                  {
                                                    .idDocumento = i.n.idDocumento,
                                                    .fechaDoc = i.n.fechaDoc,
                                                    .tipoDocumento = i.n.tipoDocumento,
                                                    .serieVenta = i.n.serie,
                                                    .numeroVenta = i.n.numeroVenta,
                                                    .NombreEntidad = clientePedido,
                                                    .ImporteNacional = i.n.ImporteNacional,
                                                    .estadoCobro = i.n.estadoCobro
                                                  })
        Next

        'Return HeliosData.documentoventaAbarrotes.Where(
        '    Function(o) o.idEmpresa = be.idEmpresa AndAlso
        '    o.idEstablecimiento = be.idEstablecimiento AndAlso
        '    o.estadoEntrega = be.estadoEntrega).ToList()


    End Function


    Public Sub PrepararEntregaVenta(be As documentoventaAbarrotes)
        Using ts As New TransactionScope
            Dim venta = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = be.idDocumento).SingleOrDefault
            If venta IsNot Nothing Then
                venta.estadoEntrega = be.estadoEntrega
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Sub validarCierreMensual(objDocumento As documento)
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim fechaActual = New Date(objDocumento.documentoventaAbarrotes.fechaDoc.Value.Year,
                                       objDocumento.documentoventaAbarrotes.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)


        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(objDocumento.idEmpresa, fechaActual, objDocumento.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                            {.idEmpresa = objDocumento.idEmpresa,
                                            .idCentroCosto = objDocumento.idCentroCosto,
                                             .anio = fechaAnterior.Year,
                                             .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If
    End Sub

    Public Function Grabar_VentaNotaSinLote(objDocumento As documento) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim docAnticipoBL As New documentoAnticipoBL

        Dim BeneficioAnexado = If(objDocumento.CustomListaBeneficios Is Nothing, Nothing, objDocumento.CustomListaBeneficios.FirstOrDefault)
        Try
            Using ts As New TransactionScope()

                validarCierreMensual(objDocumento)

                Dim codDocumentoVenta = AddVentaNotaCustomSinLote(objDocumento)

                If objDocumento.ListaDetalleAnticipos IsNot Nothing Then
                    Dim codigoNotaCredito = objDocumento.ListaDetalleAnticipos.FirstOrDefault.idDocumento

                    Dim ant = docAnticipoBL.GetANTReclamacionesXDocumento(New documentoventaAbarrotes With {.idDocumento = codigoNotaCredito})

                    Dim Docanticipo = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = codigoNotaCredito).Single

                    If ant.SaldoReclamacion <= 0 Then
                        Docanticipo.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.Completado
                    Else
                        If ant.TotalNotas.GetValueOrDefault > 0 Then
                            Docanticipo.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.Parcial
                        Else
                            Docanticipo.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.Pendiente
                        End If
                    End If

                End If


                Dim listaVentaDet = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = codDocumentoVenta).ToList


                If BeneficioAnexado IsNot Nothing Then
                    Dim beneficio = HeliosData.beneficio.Where(Function(o) o.beneficio_id = BeneficioAnexado.beneficio_id).SingleOrDefault
                    beneficio.estado = 0
                End If

                Dim codigoPedido = objDocumento.documentoventaAbarrotes.idPadre
                Dim pedido = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = codigoPedido).SingleOrDefault
                If pedido IsNot Nothing Then
                    pedido.tipoVenta = "VNPE"
                End If


                If listaVentaDet.Count > 0 Then
                    Dim fechaEnvioAlmacen = objDocumento.documentoventaAbarrotes.fechaConfirmacion.Value.Date
                    For Each a In listaVentaDet
                        Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                        New InventarioMovimiento With {
                        .idAlmacen = a.idAlmacen,
                        .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                        .tipoProducto = a.tipoProducto,
                        .idItem = a.idItem,
                        .nrolote = a.nrolote}, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(lista)
                    Next
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function Grabar_VentaNotaSinInventario(objDocumento As documento) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()
                Dim codDocumentoVenta = AddVentaNotaSinInventario(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function Grabar_Venta(objDocumento As documento) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()
                Dim codDocumentoVenta = AddVenta(objDocumento)

                'Dim consultaDetalle As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = codDocumentoVenta And
                '                                                                                                            o.tipoExistencia <> TipoExistencia.ServicioGasto).ToList

                Dim listaventaDet = objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList

                Dim ListaArticulos = (From n In listaventaDet
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.idAlmacenOrigen,
                                                                                                                     .fecha = New DateTime(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1),
                                                                                                                     .tipoProducto = a.tipoExistencia,
                                                                                                                     .idItem = a.idItem, .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumentoVenta 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetConteoPedidosAprobado(intIdEstablec As Integer, strPeriodo As String, strTipo As String) As Integer
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consulta = (From compra In HeliosData.documentoventaAbarrotes
                        Where compra.idEstablecimiento = intIdEstablec And
                       compra.estadoEntrega = strTipo And
                       compra.fechaPeriodo = strPeriodo And ListaTipo.Contains(compra.tipoVenta)).Count


        Return consulta
    End Function

    Public Function UbicarVentaPorProveedorXperiodo(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, strPeriodo As String, tipo As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim list As New List(Of String)
        Dim listaTipoSituacion As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        Dim consulta2 = (From n In HeliosData.documentoventaAbarrotes
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                       On n.idDocumento Equals cajadet.documentoAfectado
                       Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento _
                       And n.idCliente = strRuc And n.fechaPeriodo = strPeriodo And (n.tipoVenta) = tipo
                         Group c By n.idDocumento, n.tipoVenta, n.fechaDoc, n.fechaPeriodo,
                       n.serie, n.numeroDoc, n.tipoDocumento, n.moneda, n.ImporteNacional, n.tipoCambio,
                       n.ImporteExtranjero, n.estadoCobro, n.igv01, n.bi01 Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoVenta,
                                      .fechaPeriodo = fechaPeriodo,
                                      .fechaDoc = fechaDoc,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDocumento,
                                      .moneda = moneda,
                                      .ImporteNacional = ImporteNacional,
                                      .tipoCambio = tipoCambio,
                                      .ImporteExtranjero = ImporteExtranjero,
                                      .estadoCobro = estadoCobro,
                                      .igv = igv01,
                                      .bio = bi01,
                                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.bi01 = i.igv
            doccompra.igv01 = i.bio
            objitemsaldoant = docanti.ObtenerPagosAnticipoPorDocumento(i.idDocumento)

            doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault + objitemsaldoant.MontoPagadoSoles
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function UbicarVentaPorProveedorXperiodoFull(strEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, tipo As String) As List(Of documentoventaAbarrotes)
        Dim doccompra As New documentoventaAbarrotes
        Dim compraLista As New List(Of documentoventaAbarrotes)
        Dim list As New List(Of String)
        Dim listaTipoSituacion As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        Dim consulta2 = (From n In HeliosData.documentoventaAbarrotes
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                       On n.idDocumento Equals cajadet.documentoAfectado
                       Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento _
                       And n.fechaPeriodo = strPeriodo And (n.tipoVenta) = tipo
                         Group c By n.idDocumento, n.tipoVenta, n.fechaDoc, n.fechaPeriodo,
                       n.serie, n.numeroDoc, n.tipoDocumento, n.moneda, n.ImporteNacional, n.tipoCambio,
                       n.ImporteExtranjero, n.estadoCobro, n.igv01, n.bi01 Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoVenta,
                                      .fechaPeriodo = fechaPeriodo,
                                      .fechaDoc = fechaDoc,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDocumento,
                                      .moneda = moneda,
                                      .ImporteNacional = ImporteNacional,
                                      .tipoCambio = tipoCambio,
                                      .ImporteExtranjero = ImporteExtranjero,
                                      .estadoCobro = estadoCobro,
                                      .igv = igv01,
                                      .bio = bi01,
                                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentoventaAbarrotes
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoVenta = i.tipoVenta
            doccompra.fechaPeriodo = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDocumento = i.tipoDocumento
            doccompra.moneda = i.moneda
            doccompra.ImporteNacional = i.ImporteNacional
            doccompra.tipoCambio = i.tipoCambio
            doccompra.ImporteExtranjero = i.ImporteExtranjero
            doccompra.estadoCobro = i.estadoCobro
            doccompra.bi01 = i.igv
            doccompra.igv01 = i.bio
            objitemsaldoant = docanti.ObtenerPagosAnticipoPorDocumento(i.idDocumento)

            doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault + objitemsaldoant.MontoPagadoSoles
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function GrabarVentaGeneralCredito(objDocumento As documento) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()

                Dim docCreado = VentaCredito(objDocumento)

                Dim listaventaDet = objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList

                Dim ListaArticulos = (From n In listaventaDet
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.idAlmacenOrigen, n.tipoExistencia, n.codigoLote).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.idAlmacenOrigen,
                                                                                                                     .fecha = New DateTime(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1),
                                                                                                                     .tipoProducto = a.tipoExistencia,
                                                                                                                     .idItem = a.idItem, .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next

                HeliosData.SaveChanges()
                ts.Complete()
                Return docCreado
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function VentaCredito(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cajaBL As New documentoCajaBL
        Dim guiaBL As New documentoGuiaBL
        Dim t As New totalesAlmacen
        Dim listaTortalesAlmacen As New List(Of totalesAlmacen)
        Dim docCreado As Integer
        Dim cval As Integer
        Dim numeracionBL As New numeracionBoletasBL
        Try
            Using ts As New TransactionScope()

                objDocumento.fechaActualizacion = DateTime.Now

                If objDocumento.documentoventaAbarrotes.IdNumeracion > 0 Then
                    cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentoventaAbarrotes.IdNumeracion))
                    objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & cval
                    objDocumento.documentoventaAbarrotes.serieVenta = objDocumento.documentoventaAbarrotes.serie
                    objDocumento.documentoventaAbarrotes.numeroVenta = cval
                    objDocumento.documentoventaAbarrotes.numeroDoc = cval
                Else
                    ' objDocumento.nroDoc = objDocumento.documentoventaAbarrotes.serie & "-" & objDocumento.documentoventaAbarrotes.numeroDoc
                    ' objDocumento.documentoventaAbarrotes.numeroVenta = objDocumento.documentoventaAbarrotes.numeroDoc
                End If

                DocumentoBL.Insert(objDocumento)

                docCreado = objDocumento.idDocumento

                Me.InsertCabeceraVenta(objDocumento.documentoventaAbarrotes, objDocumento.idDocumento)

                Dim consultaExisteItemsCaja = (From n In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                                               Where n.estadoPago = TIPO_VENTA.PAGO.COBRADO).Count

                If consultaExisteItemsCaja > 0 Then
                    docCodigoCaja = cajaBL.InsertDocumentoCajaVenta(objDocumento.documentoventaAbarrotes)
                End If

                For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
                    Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                        i.secuencia = codSecuenciaDetalle
                        inventario.InsertVentaPagada(i, objDocumento)

                        'actualizando cabecera total almacen
                        't = New totalesAlmacen
                        't.idEmpresa = i.IdEmpresa
                        't.idEstablecimiento = i.IdEstablecimiento
                        't.idAlmacen = i.idAlmacenOrigen
                        't.origenRecaudo = i.destino
                        't.idItem = i.idItem
                        't.cantidad = i.monto1 * -1
                        't.precioUnitarioCompra = 0
                        't.importeSoles = (i.importeMNK * i.monto1) * -1
                        't.importeDolares = (i.importeMEK * i.monto1) * -1
                        'listaTortalesAlmacen = totalesBL.UpdateTotalesVentas(t)

                    End If
                    If i.estadoPago = TIPO_VENTA.PAGO.COBRADO Then
                        cajaBL.InsertCajadetalleVenta(i, objDocumento.idDocumento, docCodigoCaja, codSecuenciaDetalle)
                    End If
                Next

                If ((listaTortalesAlmacen).Count = 0) Then
                    asientoBL.SavebyGroupDoc(objDocumento)
                Else
                    'Return listaTortalesAlmacen
                End If

                If (Not IsNothing(objDocumento.documentoGuia)) Then
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        '   guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                    End If

                End If

                HeliosData.SaveChanges()
                ts.Complete()
                Return docCreado
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    '  Function ListaTotalXVenta(listaidPersona As List(Of String), fechaInicio As DateTime, fechaFin As DateTime, periodo As Integer, tipo As String, strEmpresa As String, idEstablec As Integer, intAnio As Integer) As documentoventaAbarrotes
    '      Dim lista As New List(Of documentoventaAbarrotes)
    '      Dim docVentaAbarrotes As New documentoventaAbarrotes

    '      Dim listaCompra As New List(Of String)
    '      listaCompra.Add(TIPO_VENTA.VENTA_AL_TICKET)
    '      listaCompra.Add(TIPO_VENTA.VENTA_NOTA_PEDIDO)

    '      Dim listaCompraXCobrar As New List(Of String)
    '      listaCompraXCobrar.Add("VTAG")
    '      listaCompraXCobrar.Add("VPOS")

    '      Using ts As New TransactionScope
    '          Select Case tipo
    '              Case "XPeriodo"
    '                  Dim consultaCaja = (From d In HeliosData.documentoventaAbarrotes
    '                                      Where
    '                      d.fechaDoc.Value.Year = intAnio And
    '                      d.fechaDoc.Value.Month = periodo And
    '                           d.idEmpresa = strEmpresa And
    '                      d.idEstablecimiento = idEstablec
    '                                      Group d By d.idEmpresa Into g = Group
    '                                      Select
    'contadoVenta = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VTAG" And
    '    a.terminos = "CONTADO" And
    '             listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'contadoPOS = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VPOS" And
    '    a.terminos = "CONTADO" And
    '             listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'creditoPOS = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VPOS" And
    '    a.terminos = "CREDITO" And
    '             listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'creditoVenta = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VTAG" And
    '    a.terminos = "CREDITO" And
    '              listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'preVenta = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotesDet
    '   Where
    '    listaCompra.Contains(a.documentoventaAbarrotes.tipoVenta) And
    '                 listaidPersona.Contains(a.usuarioModificacion)
    '   Select New With {
    '    a.importeMN
    '  }) Into Sum(t1.importeMN)), Decimal?)),
    'cuentasXCobrar = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    listaCompraXCobrar.Contains(a.tipoVenta) And
    '     a.terminos = "CREDITO" And
    '    a.estadoCobro = "PN" And
    '              listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?))).FirstOrDefault

    '                  If (Not IsNothing(consultaCaja)) Then
    '                      docVentaAbarrotes = New documentoventaAbarrotes
    '                      With docVentaAbarrotes
    '                          .ventaPos = consultaCaja.creditoPOS.GetValueOrDefault
    '                          .ventaPosContado = consultaCaja.contadoPOS.GetValueOrDefault
    '                          .ventaVtag = consultaCaja.creditoVenta.GetValueOrDefault
    '                          .ventaVtaggContado = consultaCaja.contadoVenta.GetValueOrDefault
    '                          .preVenta = consultaCaja.preVenta.GetValueOrDefault
    '                          .cuentasXCobrar = consultaCaja.cuentasXCobrar.GetValueOrDefault

    '                      End With
    '                  End If

    '              Case "XDia"
    '                  Dim consultaCaja = (From d In HeliosData.documentoventaAbarrotes
    '                                      Where
    '                      d.fechaDoc.Value >= fechaInicio And
    '                      d.fechaDoc.Value <= fechaFin And
    '                       listaCompra.Contains(d.tipoVenta) And
    '                      d.idEmpresa = strEmpresa And
    '                      d.idEstablecimiento = idEstablec
    '                                      Group d By d.idEmpresa Into g = Group
    '                                      Select
    'contadoVenta = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VTAG" And
    '    a.terminos = "CONTADO" And
    '              listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'contadoPOS = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VPOS" And
    '    a.terminos = "CONTADO" And
    '             listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'creditoPOS = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VPOS" And
    '    a.terminos = "CREDITO" And
    '        (a.fechaDoc) >= fechaInicio And
    '                      (a.fechaDoc) <= fechaFin And
    '     listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'creditoVenta = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VTAG" And
    '    a.terminos = "CREDITO" And
    '              listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'preVenta = (CType((Aggregate t1 In
    '   (From a In HeliosData.documentoventaAbarrotesDet
    '    Where
    '    listaCompra.Contains(a.documentoventaAbarrotes.tipoVenta) And
    '                  listaidPersona.Contains(a.usuarioModificacion)
    '    Select New With {
    '    a.importeMN
    '  }) Into Sum(t1.importeMN)), Decimal?)),
    'cuentasXCobrar = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    listaCompraXCobrar.Contains(a.tipoVenta) And
    '     a.terminos = "CREDITO" And
    '    a.estadoCobro = "PN" And
    '             listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?))).FirstOrDefault


    '                  If (Not IsNothing(consultaCaja)) Then
    '                      docVentaAbarrotes = New documentoventaAbarrotes
    '                      With docVentaAbarrotes
    '                          .ventaPos = consultaCaja.creditoPOS.GetValueOrDefault
    '                          .ventaPosContado = consultaCaja.contadoPOS.GetValueOrDefault
    '                          .ventaVtag = consultaCaja.creditoVenta.GetValueOrDefault
    '                          .ventaVtaggContado = consultaCaja.contadoVenta.GetValueOrDefault
    '                          .preVenta = consultaCaja.preVenta.GetValueOrDefault
    '                          .cuentasXCobrar = consultaCaja.cuentasXCobrar.GetValueOrDefault

    '                      End With
    '                  End If

    '              Case "XTodo"
    '                  Dim consultaCaja = (From d In HeliosData.documentoventaAbarrotes
    '                                      Where
    '                                                d.idEmpresa = strEmpresa And
    '                      d.fechaDoc.Value.Year = intAnio And
    '                  d.idEstablecimiento = idEstablec
    '                                      Group d By d.idEmpresa Into g = Group
    '                                      Select
    'contadoVenta = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VTAG" And
    '    a.terminos = "CONTADO" And
    '     listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'contadoPOS = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VPOS" And
    '    a.terminos = "CONTADO" And
    '     listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'creditoPOS = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VPOS" And
    '    a.terminos = "CREDITO" And
    '     listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'creditoVenta = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    a.tipoVenta = "VTAG" And
    '    a.terminos = "CREDITO" And
    '     listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?)),
    'preVenta = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotesDet
    '   Where
    '    listaCompra.Contains(a.documentoventaAbarrotes.tipoVenta) And
    '         listaidPersona.Contains(a.usuarioModificacion)
    '   Select New With {
    '    a.importeMN
    '  }) Into Sum(t1.importeMN)), Decimal?)),
    'cuentasXCobrar = (CType((Aggregate t1 In
    '  (From a In HeliosData.documentoventaAbarrotes
    '   Where
    '    listaCompraXCobrar.Contains(a.tipoVenta) And
    '     a.terminos = "CREDITO" And
    '    a.estadoCobro = "PN" And
    '     listaidPersona.Contains(a.usuarioActualizacion)
    '   Select New With {
    '    a.ImporteNacional
    '  }) Into Sum(t1.ImporteNacional)), Decimal?))).FirstOrDefault

    '                  If (Not IsNothing(consultaCaja)) Then
    '                      docVentaAbarrotes = New documentoventaAbarrotes
    '                      With docVentaAbarrotes
    '                          .ventaPos = consultaCaja.creditoPOS.GetValueOrDefault
    '                          .ventaPosContado = consultaCaja.contadoPOS.GetValueOrDefault
    '                          .ventaVtag = consultaCaja.creditoVenta.GetValueOrDefault
    '                          .ventaVtaggContado = consultaCaja.contadoVenta.GetValueOrDefault
    '                          .preVenta = consultaCaja.preVenta.GetValueOrDefault
    '                          .cuentasXCobrar = consultaCaja.cuentasXCobrar.GetValueOrDefault

    '                      End With
    '                  End If

    '          End Select

    '          Return docVentaAbarrotes

    '      End Using
    '  End Function

    Function ListaTotalXVenta(listaidPersona As List(Of String), fechaInicio As DateTime, fechaFin As DateTime, periodo As Integer, tipo As String, strEmpresa As String, idEstablec As Integer, intAnio As Integer, intMes As Integer, intDia As Integer) As documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)
        Dim docVentaAbarrotes As New documentoventaAbarrotes

        Dim listaCompra As New List(Of String)
        listaCompra.Add(TIPO_VENTA.VENTA_AL_TICKET)
        listaCompra.Add(TIPO_VENTA.VENTA_NOTA_PEDIDO)

        Dim listaCompraXCobrar As New List(Of String)
        listaCompraXCobrar.Add("VTAG")
        listaCompraXCobrar.Add("VPOS")

        Using ts As New TransactionScope
            Select Case tipo
                Case "XPeriodo"
                    Dim consultaCaja = (From d In HeliosData.documentoventaAbarrotes
                                        Where
                                            d.fechaDoc.Value.Year = intAnio And
                                             d.fechaDoc.Value.Month = intMes And
                                            d.idEmpresa = strEmpresa And
                                            d.idEstablecimiento = idEstablec
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                            contadoVenta = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                             a.tipoVenta = "VTAG" And
                                             a.terminos = "CONTADO" And
                                             listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                             a.ImporteNacional
                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            contadoPOS = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                             a.tipoVenta = "VPOS" And
                                             a.terminos = "CONTADO" And
                                             listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                             a.ImporteNacional
                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            creditoPOS = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                             a.tipoVenta = "VPOS" And
                                             a.terminos = "CREDITO" And
                                             listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                             a.ImporteNacional
                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            creditoVenta = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                             a.tipoVenta = "VTAG" And
                                             a.terminos = "CREDITO" And
                                             listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                             a.ImporteNacional
                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            preVenta = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotesDet
                                         Where
                                             listaCompra.Contains(a.documentoventaAbarrotes.tipoVenta) And
                                             listaidPersona.Contains(a.usuarioModificacion)
                                         Select New With {
                                             a.importeMN
                                             }) Into Sum(t1.importeMN)), Decimal?)),
                                            cuentasXCobrar = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                          listaCompraXCobrar.Contains(a.tipoVenta) And
                                           a.terminos = "CREDITO" And
                                          a.estadoCobro = "PN" And
                                                    listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                          a.ImporteNacional
                                        }) Into Sum(t1.ImporteNacional)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docVentaAbarrotes = New documentoventaAbarrotes
                        With docVentaAbarrotes
                            .ventaPos = consultaCaja.creditoPOS.GetValueOrDefault
                            .ventaPosContado = consultaCaja.contadoPOS.GetValueOrDefault
                            .ventaVtag = consultaCaja.creditoVenta.GetValueOrDefault
                            .ventaVtaggContado = consultaCaja.contadoVenta.GetValueOrDefault
                            .preVenta = consultaCaja.preVenta.GetValueOrDefault
                            .cuentasXCobrar = consultaCaja.cuentasXCobrar.GetValueOrDefault

                        End With
                    End If

                Case "XDia"
                    Dim consultaCaja = (From d In HeliosData.documentoventaAbarrotes
                                        Where
                        d.fechaDoc >= fechaInicio And
                        d.fechaDoc <= fechaFin And
                             d.idEmpresa = strEmpresa And
                        d.idEstablecimiento = idEstablec
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                            contadoVenta = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                             a.tipoVenta = "VTAG" And
                                             a.terminos = "CONTADO" And
                                             listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                             a.ImporteNacional
                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            contadoPOS = (CType((Aggregate t1 In
                                       (From a In HeliosData.documentoventaAbarrotes
                                        Where
                                            a.tipoVenta = "VPOS" And
                                            a.terminos = "CONTADO" And
                                            listaidPersona.Contains(a.usuarioActualizacion)
                                        Select New With {
                                            a.ImporteNacional
                                            }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            creditoPOS = (CType((Aggregate t1 In
                                       (From a In HeliosData.documentoventaAbarrotes
                                        Where
                                            a.tipoVenta = "VPOS" And
                                            a.terminos = "CREDITO" And
                                            listaidPersona.Contains(a.usuarioActualizacion)
                                        Select New With {
                                            a.ImporteNacional
                                            }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            creditoVenta = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                             a.tipoVenta = "VTAG" And
                                             a.terminos = "CREDITO" And
                                             listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                             a.ImporteNacional
                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            preVenta = (CType((Aggregate t1 In
                                         (From a In HeliosData.documentoventaAbarrotesDet
                                          Where
                                              listaCompra.Contains(a.documentoventaAbarrotes.tipoVenta) And
                                              listaidPersona.Contains(a.usuarioModificacion)
                                          Select New With {
                                              a.importeMN
                                              }) Into Sum(t1.importeMN)), Decimal?)),
                                            cuentasXCobrar = (CType((Aggregate t1 In
                                         (From a In HeliosData.documentoventaAbarrotes
                                          Where
                                              listaCompraXCobrar.Contains(a.tipoVenta) And
                                              a.terminos = "CREDITO" And
                                              a.estadoCobro = "PN" And
                                              listaidPersona.Contains(a.usuarioActualizacion)
                                          Select New With {
                                              a.ImporteNacional
                                              }) Into Sum(t1.ImporteNacional)), Decimal?))).FirstOrDefault


                    If (Not IsNothing(consultaCaja)) Then
                        docVentaAbarrotes = New documentoventaAbarrotes
                        With docVentaAbarrotes
                            .ventaPos = consultaCaja.creditoPOS.GetValueOrDefault
                            .ventaPosContado = consultaCaja.contadoPOS.GetValueOrDefault
                            .ventaVtag = consultaCaja.creditoVenta.GetValueOrDefault
                            .ventaVtaggContado = consultaCaja.contadoVenta.GetValueOrDefault
                            .preVenta = consultaCaja.preVenta.GetValueOrDefault
                            .cuentasXCobrar = consultaCaja.cuentasXCobrar.GetValueOrDefault

                        End With
                    End If

                Case "XTodo"
                    Dim consultaCaja = (From d In HeliosData.documentoventaAbarrotes
                                        Where
                                                  d.idEmpresa = strEmpresa And
                        d.fechaDoc.Value.Year = intAnio And
                    d.idEstablecimiento = idEstablec
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                            contadoVenta = (CType((Aggregate t1 In
                                            (From a In HeliosData.documentoventaAbarrotes
                                             Where
                                                 a.tipoVenta = "VTAG" And
                                                 a.terminos = "CONTADO" And
                                                 listaidPersona.Contains(a.usuarioActualizacion)
                                             Select New With {
                                                 a.ImporteNacional
                                                 }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            contadoPOS = (CType((Aggregate t1 In
                                            (From a In HeliosData.documentoventaAbarrotes
                                             Where
                                                 a.tipoVenta = "VPOS" And
                                                 a.terminos = "CONTADO" And
                                                 listaidPersona.Contains(a.usuarioActualizacion)
                                             Select New With {
                                                 a.ImporteNacional
                                                 }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            creditoPOS = (CType((Aggregate t1 In
                                            (From a In HeliosData.documentoventaAbarrotes
                                             Where
                                                 a.tipoVenta = "VPOS" And
                                                 a.terminos = "CREDITO" And
                                                 listaidPersona.Contains(a.usuarioActualizacion)
                                             Select New With {
                                                 a.ImporteNacional
                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            creditoVenta = (CType((Aggregate t1 In
                                          (From a In HeliosData.documentoventaAbarrotes
                                           Where
                                               a.tipoVenta = "VTAG" And
                                               a.terminos = "CREDITO" And
                                               listaidPersona.Contains(a.usuarioActualizacion)
                                           Select New With {
                                               a.ImporteNacional
                                               }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            preVenta = (CType((Aggregate t1 In
                                          (From a In HeliosData.documentoventaAbarrotesDet
                                           Where
                                               listaCompra.Contains(a.documentoventaAbarrotes.tipoVenta) And
                                               listaidPersona.Contains(a.usuarioModificacion)
                                           Select New With {
                                               a.importeMN
                                               }) Into Sum(t1.importeMN)), Decimal?)),
                                            cuentasXCobrar = (CType((Aggregate t1 In
                                           (From a In HeliosData.documentoventaAbarrotes
                                            Where
                                                listaCompraXCobrar.Contains(a.tipoVenta) And
                                                a.terminos = "CREDITO" And
                                                a.estadoCobro = "PN" And
                                                listaidPersona.Contains(a.usuarioActualizacion)
                                            Select New With {
                                                a.ImporteNacional
                                                }) Into Sum(t1.ImporteNacional)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docVentaAbarrotes = New documentoventaAbarrotes
                        With docVentaAbarrotes
                            .ventaPos = consultaCaja.creditoPOS.GetValueOrDefault
                            .ventaPosContado = consultaCaja.contadoPOS.GetValueOrDefault
                            .ventaVtag = consultaCaja.creditoVenta.GetValueOrDefault
                            .ventaVtaggContado = consultaCaja.contadoVenta.GetValueOrDefault
                            .preVenta = consultaCaja.preVenta.GetValueOrDefault
                            .cuentasXCobrar = consultaCaja.cuentasXCobrar.GetValueOrDefault

                        End With
                    End If

                Case "XHora"
                    Dim consultaCaja = (From d In HeliosData.documentoventaAbarrotes
                                        Where
                                        d.fechaDoc.Value.Year = intAnio And
                                             d.fechaDoc.Value.Month = intMes And
                                             d.fechaDoc.Value.Day = intDia And
                                        d.fechaDoc.Value.Hour >= fechaInicio.Hour And
                                        d.fechaDoc.Value.Hour <= fechaFin.Hour And
                             d.idEmpresa = strEmpresa And
                        d.idEstablecimiento = idEstablec
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                            contadoVenta = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                             a.tipoVenta = "VTAG" And
                                             a.terminos = "CONTADO" And
                                             listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                             a.ImporteNacional
                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            contadoPOS = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                             a.tipoVenta = "VPOS" And
                                             a.terminos = "CONTADO" And
                                             listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                             a.ImporteNacional
                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            creditoPOS = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                             a.tipoVenta = "VPOS" And
                                             a.terminos = "CREDITO" And
                                             listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                             a.ImporteNacional
                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            creditoVenta = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                             a.tipoVenta = "VTAG" And
                                             a.terminos = "CREDITO" And
                                             listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                             a.ImporteNacional
                                             }) Into Sum(t1.ImporteNacional)), Decimal?)),
                                            preVenta = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotesDet
                                         Where
                                             listaCompra.Contains(a.documentoventaAbarrotes.tipoVenta) And
                                             listaidPersona.Contains(a.usuarioModificacion)
                                         Select New With {
                                             a.importeMN
                                             }) Into Sum(t1.importeMN)), Decimal?)),
                                            cuentasXCobrar = (CType((Aggregate t1 In
                                        (From a In HeliosData.documentoventaAbarrotes
                                         Where
                                          listaCompraXCobrar.Contains(a.tipoVenta) And
                                           a.terminos = "CREDITO" And
                                          a.estadoCobro = "PN" And
                                                    listaidPersona.Contains(a.usuarioActualizacion)
                                         Select New With {
                                          a.ImporteNacional
                                        }) Into Sum(t1.ImporteNacional)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docVentaAbarrotes = New documentoventaAbarrotes
                        With docVentaAbarrotes
                            .ventaPos = consultaCaja.creditoPOS.GetValueOrDefault
                            .ventaPosContado = consultaCaja.contadoPOS.GetValueOrDefault
                            .ventaVtag = consultaCaja.creditoVenta.GetValueOrDefault
                            .ventaVtaggContado = consultaCaja.contadoVenta.GetValueOrDefault
                            .preVenta = consultaCaja.preVenta.GetValueOrDefault
                            .cuentasXCobrar = consultaCaja.cuentasXCobrar.GetValueOrDefault

                        End With
                    End If


            End Select

            Return docVentaAbarrotes

        End Using
    End Function
    Public Function GetListarTransferenciaRecepcionInfGeneral(strIdEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, strMovimiento As List(Of String), tipo As String, listaUsuario As List(Of String), fechainicio As DateTime, fechaFin As DateTime) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        '  Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra
        Dim totalesBL As New almacenBL

        Select Case tipo
            Case "XTodo"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Where
  listaUsuario.Contains(b.usuarioModificacion) And
 b.documentocompra.idEmpresa = strIdEmpresa And
 b.documentocompra.idCentroCosto = intIdEstablecimiento And
 b.documentocompra.fechaDoc.Value.Year = fechainicio.Year And
 b.documentocompra.estadoEntrega = "DC" And
 b.documentocompra.tipoCompra = "TEA"
                                Group New With {b.documentocompra, b} By
  IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
  b.documentocompra.codigoLibro,
  b.documentocompra.idEmpresa,
  IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
  FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
  FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
  FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
  FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
  b.documentocompra.fechaContable,
  b.documentocompra.nroConstancia,
  b.documentocompra.periodoTributo,
  b.documentocompra.tipoDoc,
  b.documentocompra.serie,
  b.documentocompra.numeroDoc,
  IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
  b.documentocompra.idPersona,
  b.documentocompra.monedaDoc,
  TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
  TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
  Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
  b.documentocompra.tipoCompra,
   b.documentocompra.usuarioActualizacion,
  b.documentocompra.estadoPago
 Into g = Group
                                Select
  IdDocumento = CType(IdDocumento, Int32?),
  codigoLibro,
  idEmpresa,
  IdCentroCosto = CType(IdCentroCosto, Int32?),
  FechaLaboral = CType(FechaLaboral, DateTime?),
  FechaDoc = CType(FechaDoc, DateTime?),
  FechaVcto = CType(FechaVcto, DateTime?),
  FechaConstancia = CType(FechaConstancia, DateTime?),
  fechaContable,
  nroConstancia,
  periodoTributo,
  tipoDoc,
  serie,
  numeroDoc,
   monedaDoc,
  TasaIgv = CType(TasaIgv, Decimal?),
  TcDolLoc = CType(TcDolLoc, Decimal?),
  Tipocambio = CType(Tipocambio, Decimal?),
  tipoCompra,
  usuarioActualizacion,
  estadoPago,
  Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    'objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = Nothing
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XPeriodo"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Join ed In HeliosData.entidad On New With {.IdProveedor = CInt(b.documentocompra.idProveedor)} Equals New With {.IdProveedor = ed.idEntidad}
                                Where
listaUsuario.Contains(b.usuarioModificacion) And
b.IdEmpresa = strIdEmpresa And
b.IdEstablecimiento = intIdEstablecimiento And
b.documentocompra.fechaContable = strPeriodo And
 b.documentocompra.estadoEntrega = "DC" And
 b.documentocompra.tipoCompra = "TEA"
                                Group New With {b.documentocompra, b} By
  IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
  b.documentocompra.codigoLibro,
  b.documentocompra.idEmpresa,
  IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
  FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
  FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
  FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
  FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
  b.documentocompra.fechaContable,
  b.documentocompra.nroConstancia,
  b.documentocompra.periodoTributo,
  b.documentocompra.tipoDoc,
  b.documentocompra.serie,
  b.documentocompra.numeroDoc,
  IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
  b.documentocompra.idPersona,
  b.documentocompra.monedaDoc,
  TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
  TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
  Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
  b.documentocompra.tipoCompra,
   b.documentocompra.usuarioActualizacion,
  b.documentocompra.estadoPago
 Into g = Group
                                Select
  IdDocumento = CType(IdDocumento, Int32?),
  codigoLibro,
  idEmpresa,
  IdCentroCosto = CType(IdCentroCosto, Int32?),
  FechaLaboral = CType(FechaLaboral, DateTime?),
  FechaDoc = CType(FechaDoc, DateTime?),
  FechaVcto = CType(FechaVcto, DateTime?),
  FechaConstancia = CType(FechaConstancia, DateTime?),
  fechaContable,
  nroConstancia,
  periodoTributo,
  tipoDoc,
  serie,
  numeroDoc,
   monedaDoc,
  TasaIgv = CType(TasaIgv, Decimal?),
  TcDolLoc = CType(TcDolLoc, Decimal?),
  Tipocambio = CType(Tipocambio, Decimal?),
  tipoCompra,
  usuarioActualizacion,
  estadoPago,
  Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    'objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = Nothing
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XDia"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Join ed In HeliosData.entidad On New With {.IdProveedor = CInt(b.documentocompra.idProveedor)} Equals New With {.IdProveedor = ed.idEntidad}
                                Where
listaUsuario.Contains(b.usuarioModificacion) And
b.IdEmpresa = strIdEmpresa And
b.IdEstablecimiento = intIdEstablecimiento And
b.documentocompra.fechaDoc >= fechainicio And
b.documentocompra.fechaDoc <= fechaFin And
 b.documentocompra.estadoEntrega = "DC" And
 b.documentocompra.tipoCompra = "TEA"
                                Group New With {b.documentocompra, b} By
  IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
  b.documentocompra.codigoLibro,
  b.documentocompra.idEmpresa,
  IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
  FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
  FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
  FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
  FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
  b.documentocompra.fechaContable,
  b.documentocompra.nroConstancia,
  b.documentocompra.periodoTributo,
  b.documentocompra.tipoDoc,
  b.documentocompra.serie,
  b.documentocompra.numeroDoc,
  IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
  b.documentocompra.idPersona,
  b.documentocompra.monedaDoc,
  TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
  TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
  Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
  b.documentocompra.tipoCompra,
   b.documentocompra.usuarioActualizacion,
  b.documentocompra.estadoPago
 Into g = Group
                                Select
  IdDocumento = CType(IdDocumento, Int32?),
  codigoLibro,
  idEmpresa,
  IdCentroCosto = CType(IdCentroCosto, Int32?),
  FechaLaboral = CType(FechaLaboral, DateTime?),
  FechaDoc = CType(FechaDoc, DateTime?),
  FechaVcto = CType(FechaVcto, DateTime?),
  FechaConstancia = CType(FechaConstancia, DateTime?),
  fechaContable,
  nroConstancia,
  periodoTributo,
  tipoDoc,
  serie,
  numeroDoc,
   monedaDoc,
  TasaIgv = CType(TasaIgv, Decimal?),
  TcDolLoc = CType(TcDolLoc, Decimal?),
  Tipocambio = CType(Tipocambio, Decimal?),
  tipoCompra,
  usuarioActualizacion,
  estadoPago,
  Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    'objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = Nothing
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function Grabar_VentaList(listaDocumento As List(Of documento)) As List(Of documentoventaAbarrotes)
        Grabar_VentaList = New List(Of documentoventaAbarrotes)

        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL

        Dim Nota = listaDocumento.Where(Function(o) o.tipoDoc = "9907").SingleOrDefault
        Dim Documento = listaDocumento.Where(Function(o) o.tipoDoc <> "9907").SingleOrDefault
        ' Dim Consigandos = listaDocumento.Where(Function(o) o.tipoOperacion = StatusTipoOperacion.CONSIGNACION_RECIBIDA).SingleOrDefault
        Using ts As New TransactionScope
            '       If listaDocumento.Count > 0 Then
            '#Region "Documento de venta"
            If Documento IsNot Nothing Then
                Dim codDocumentoVenta = AddVenta(Documento)
                Dim listaventaDet = Documento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList
                Dim ListaArticulos = (From n In listaventaDet
                                      Where
                                              n.tipoExistencia <> "GS"
                                      Select
                                              n.idItem,
                                              n.idAlmacenOrigen,
                                              n.tipoExistencia,
                                              n.codigoLote).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                            New InventarioMovimiento With
                            {
                            .idAlmacen = a.idAlmacenOrigen,
                            .fecha = New DateTime(Documento.fechaProceso.Year, Documento.fechaProceso.Month, 1),
                            .tipoProducto = a.tipoExistencia,
                            .idItem = a.idItem,
                            .nrolote = a.codigoLote
                            }, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next

                Grabar_VentaList.Add(New documentoventaAbarrotes With
                                         {
                                         .idDocumento = codDocumentoVenta,
                                         .tipoVenta = TIPO_VENTA.VENTA_POS_DIRECTA
                                         })

            End If
            '#End Region

            '#Region "Nota de venta"
            If Nota IsNot Nothing Then
                Dim codDocumentoNotaVenta = AddVentaNota(Nota)
                Dim listaventaDet = Nota.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList
                Dim ListaArticulos = (From n In listaventaDet
                                      Where
                                              n.tipoExistencia <> "GS"
                                      Select
                                              n.idItem,
                                              n.idAlmacenOrigen,
                                              n.tipoExistencia,
                                              n.codigoLote).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                            New InventarioMovimiento With
                            {
                            .idAlmacen = a.idAlmacenOrigen,
                            .fecha = New DateTime(Nota.fechaProceso.Year, Nota.fechaProceso.Month, 1),
                            .tipoProducto = a.tipoExistencia,
                            .idItem = a.idItem,
                            .nrolote = a.codigoLote
                            }, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next

                Grabar_VentaList.Add(New documentoventaAbarrotes With
                                         {
                                         .idDocumento = codDocumentoNotaVenta,
                                         .tipoVenta = TIPO_VENTA.NOTA_DE_VENTA
                                         })
            End If
            '#End Region

            '#Region "Productos Consignados"
            'If Consigandos IsNot Nothing Then
            '    Dim listaProductosConsignados = Consigandos.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList
            '    For Each i In listaProductosConsignados
            '        If i.idItem = 0 Then
            '            GetProductoConsignadoNuevo(i)
            '        Else
            '            GetProductoConsignadoExistente(i)
            '        End If
            '    Next
            'End If
            '#End Region
            '   End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Function

    ''' <summary>
    ''' Omitiendo separacion de comprobantes y notas
    ''' </summary>
    ''' <param name="listaDocumento"></param>
    ''' <returns></returns>
    Public Function Grabar_VentaEspecial(listaDocumento As List(Of documento)) As List(Of documentoventaAbarrotes)

        Grabar_VentaEspecial = New List(Of documentoventaAbarrotes)
        Dim listaventaDet As New List(Of documentoventaAbarrotesDet)
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim Documento = listaDocumento.Where(Function(o) o.tipoDoc <> "9907").SingleOrDefault

        listaventaDet = New List(Of documentoventaAbarrotesDet)
        listaventaDet = Documento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList
        Using ts As New TransactionScope

            '#Region "Compra extra por inventario escaso"

            If listaDocumento.Count > 0 Then
                Dim listaAComprar = listaventaDet.Where(Function(o) o.monto2 > 0).ToList
                If listaAComprar.Count > 0 Then
                    Dim proveedor = HeliosData.entidad.Where(Function(o) o.idEmpresa = Documento.idEmpresa And o.tipoEntidad = "VR").Single

                    Dim compraBL As New documentocompraBL
                    Dim obj As recursoCostoLote
                    Dim DetalleCompra As New List(Of documentocompradetalle)
                    Dim nuevoDetalle = (From member In listaAComprar
                                        Group member By keys = New With
                                            {
                                            Key member.codigoLote,
                                            Key member.idAlmacenOrigen,
                                            Key member.destino,
                                            Key member.idItem,
                                            Key member.nombreItem,
                                            Key member.tipoExistencia,
                                            Key member.unidad1
                                            }
                                            Into Group
                                        Select New With
                                            {
                                            keys.codigoLote,
                                            keys.idAlmacenOrigen,
                                            keys.idItem,
                                            keys.destino,
                                            keys.nombreItem,
                                            keys.tipoExistencia,
                                            keys.unidad1,
                                            .sumCantidad = Group.Sum(Function(x) x.monto2),
                                            .SumMonto = Group.Max(Function(x) x.importeMN)
                                            }).ToList

                    Dim numeroNota = compraBL.GetNumeracionCompra(New documentocompra With
                                           {
                                           .idEmpresa = listaDocumento(0).documentoventaAbarrotes.idEmpresa,
                                           .tipoCompra = TIPO_COMPRA.NOTA_DE_COMPRA
                                           })

                    Dim doc As documento = AddDocumento(listaDocumento(0).documentoventaAbarrotes)
                    doc.idEntidad = proveedor.idEntidad
                    doc.entidad = proveedor.nombreCompleto
                    doc.nrodocEntidad = "-"
                    doc.tipoEntidad = "PR"
                    doc.nroDoc = numeroNota
                    '------------------------------------------------------------------------------------------------

                    Dim docCompra As documentocompra = AddNotaCompra(listaDocumento(0).documentoventaAbarrotes, nuevoDetalle.Sum(Function(o) o.SumMonto).GetValueOrDefault)
                    doc.documentocompra = docCompra
                    doc.documentocompra.numeroDoc = numeroNota
                    doc.documentocompra.idProveedor = proveedor.idEntidad
                    '-----------------------------------------------------------------------------------

                    For Each i In nuevoDetalle
                        obj = New recursoCostoLote With
                                 {
                                 .codigoLote = i.codigoLote,
                                 .nroLote = "NOTA",
                                 .detalle = i.nombreItem,
                                 .fechaProduccion = Nothing,
                                 .fechaVcto = Nothing,
                                 .productoSustentado = False
                                 }

                        DetalleCompra.Add(New documentocompradetalle With
                                          {
                                          .ItemEntregadototal = "S",
                                          .codigoLote = i.codigoLote,
                                          .nrolote = obj.nroLote,
                                          .CustomRecursoCostoLote = obj,
                                          .IdEmpresa = doc.idEmpresa,
                                          .IdEstablecimiento = doc.idCentroCosto,
                                          .tipoCompra = TIPO_COMPRA.COMPRA,
                                          .TipoOperacion = StatusTipoOperacion.COMPRA,
                                          .FechaDoc = doc.fechaProceso,
                                          .FechaLaboral = DateTime.Now,
                                          .CuentaProvedor = "4212",
                                          .NombreProveedor = proveedor.nombreCompleto,
                                          .Serie = "NT",
                                          .NumDoc = numeroNota,
                                          .TipoDoc = "9907",
                                          .idItem = i.idItem,
                                          .descripcionItem = i.nombreItem,
                                          .tipoExistencia = i.tipoExistencia,
                                          .destino = i.destino,
                                          .unidad1 = i.unidad1,
                                          .monto1 = i.sumCantidad,
                                          .precioUnitario = 0,
                                          .precioUnitarioUS = 0,
                                          .importe = 0,
                                          .importeUS = 0,
                                          .montokardex = 0,
                                          .montoIsc = 0,
                                          .montoIgv = 0,
                                          .otrosTributos = 0,
                                          .montokardexUS = 0,
                                          .montoIscUS = 0,
                                          .montoIgvUS = 0,
                                          .otrosTributosUS = 0,
                                          .almacenRef = i.idAlmacenOrigen,
                                          .fechaEntrega = DateTime.Now,
                                          .estadoPago = "PN",
                                          .usuarioModificacion = doc.usuarioActualizacion,
                                          .fechaModificacion = DateTime.Now
                                          })
                    Next
                    doc.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE"
                    doc.documentocompra.documentocompradetalle = DetalleCompra
                    compraBL.GrabarNotaCompraDirecta(doc)
                End If
            End If


            '#End Region

            '#Region "Documento de venta"
            If Documento IsNot Nothing Then
                Dim codDocumentoVenta = AddVenta(Documento)
                Dim ListaArticulos = (From n In listaventaDet
                                      Where
                                              n.tipoExistencia <> "GS"
                                      Select
                                              n.idItem,
                                              n.idAlmacenOrigen,
                                              n.tipoExistencia,
                                              n.codigoLote).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                            New InventarioMovimiento With
                            {
                            .idAlmacen = a.idAlmacenOrigen,
                            .fecha = New DateTime(Documento.fechaProceso.Year, Documento.fechaProceso.Month, 1),
                            .tipoProducto = a.tipoExistencia,
                            .idItem = a.idItem,
                            .nrolote = a.codigoLote
                            }, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next

                Grabar_VentaEspecial.Add(New documentoventaAbarrotes With
                                         {
                                         .idDocumento = codDocumentoVenta,
                                         .tipoVenta = TIPO_VENTA.VENTA_POS_DIRECTA
                                         })

            End If
            '#End Region

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Function

    Sub ValidarVentaElectronica(idCLiente As Integer, comprobante As String)
        Try
            Dim entidad = HeliosData.entidad.Where(Function(o) o.idEntidad = idCLiente).SingleOrDefault

            If entidad.tipoDoc = "1" And comprobante = "01" Then
                Throw New Exception("No puede registrar una factura, con un DNI")
            End If

            'If entidad.tipoDoc = "6" And comprobante = "03" Then
            '    Throw New Exception("Debe ingresar un DNI para confirmar la venta")
            'End If

            If entidad.tipoEntidad = "VR" And comprobante = "01" Then
                Throw New Exception("No puede registrar una factura, con clientes varios")
            ElseIf entidad.tipoEntidad = "PR" And comprobante = "01" Then
                Throw New Exception("No puede registrar una factura, con un proveedor")
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function Grabar_VentaEspecialSinLote(listaDocumento As List(Of documento)) As List(Of documentoventaAbarrotes)
        Dim docAnticipoBL As New documentoAnticipoBL
        Grabar_VentaEspecialSinLote = New List(Of documentoventaAbarrotes)
        Dim listaventaDet As New List(Of documentoventaAbarrotesDet)
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim Documento = listaDocumento.Where(Function(o) o.tipoDoc <> "9907").SingleOrDefault
        Dim BeneficioAnexado As beneficio

        Try
            If listaDocumento.FirstOrDefault.CustomListaBeneficios IsNot Nothing Then
                BeneficioAnexado = listaDocumento.FirstOrDefault.CustomListaBeneficios.FirstOrDefault
            Else
                BeneficioAnexado = Nothing
            End If
            listaventaDet = New List(Of documentoventaAbarrotesDet)
            listaventaDet = Documento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList
            Using ts As New TransactionScope
                '#Region "Documento de venta"
                If Documento IsNot Nothing Then
                    validarCierreMensual(Documento)


                    'Validando Registro de venta
                    ValidarVentaElectronica(Documento.documentoventaAbarrotes.idCliente, Documento.documentoventaAbarrotes.tipoDocumento)
                    '-----------------------------------------------------------------

                    Dim codDocumentoVenta = AddVentaSinLote(Documento)

                    If listaDocumento.FirstOrDefault.ListaDetalleAnticipos IsNot Nothing Then
                        Dim codigoNotaCredito = listaDocumento.FirstOrDefault.ListaDetalleAnticipos.FirstOrDefault.idDocumento

                        Dim ant = docAnticipoBL.GetANTReclamacionesXDocumento(New documentoventaAbarrotes With {.idDocumento = codigoNotaCredito})

                        Dim Docanticipo = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = codigoNotaCredito).Single

                        If ant.SaldoReclamacion <= 0 Then
                            Docanticipo.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.Completado
                        Else
                            If ant.TotalNotas.GetValueOrDefault > 0 Then
                                Docanticipo.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.Parcial
                            Else
                                Docanticipo.estadoCobro = General.Anticipo.EstadoCobroNotaCredito.Pendiente
                            End If
                        End If

                    End If

                    If BeneficioAnexado IsNot Nothing Then
                        Dim beneficio = HeliosData.beneficio.Where(Function(o) o.beneficio_id = BeneficioAnexado.beneficio_id).SingleOrDefault
                        beneficio.estado = 0
                    End If

                    Dim ListaArticulosVendidos = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = codDocumentoVenta).ToList


                    Dim codigoPedido = listaDocumento.FirstOrDefault.documentoventaAbarrotes.idPadre
                    Dim pedido = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = codigoPedido).SingleOrDefault
                    If pedido IsNot Nothing Then
                        pedido.tipoVenta = "VNPE"
                    End If

                    If ListaArticulosVendidos.Count > 0 Then
                        Dim fechaEnvioAlmacen = Documento.documentoventaAbarrotes.fechaDoc.Value.Date
                        For Each a In ListaArticulosVendidos
                            Dim lista = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                            New InventarioMovimiento With {
                            .idAlmacen = a.idAlmacen,
                            .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                            .tipoProducto = a.tipoProducto,
                            .idItem = a.idItem,
                            .nrolote = a.nrolote}, Nothing)
                            totalesBL.GetCurarKardexCaberasLOTE(lista)
                        Next
                    End If
                    Grabar_VentaEspecialSinLote.Add(New documentoventaAbarrotes With
                                             {
                                             .idDocumento = codDocumentoVenta,
                                             .tipoVenta = TIPO_VENTA.VENTA_POS_DIRECTA
                                             })

                End If
                '#End Region

                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Private Function AddNotaCompra(Be As documentoventaAbarrotes, ImporteTotal As Decimal) As documentocompra
        AddNotaCompra = New documentocompra With
        {
        .Action = BaseBE.EntityAction.INSERT,
        .codigoLibro = StatusCodigoLibroContable.REGISTRO_DE_COMPRAS,
        .idEmpresa = Gempresas.IdEmpresaRuc,
        .idCentroCosto = GEstableciento.IdEstablecimiento,
        .fechaLaboral = DateTime.Now,
        .fechaDoc = Be.fechaDoc.Value.AddMinutes(-10),
        .fechaContable = GetPeriodo(Be.fechaDoc, True),
        .tipoDoc = "9907",
        .serie = "NOTA",
        .numeroDoc = "1",
        .idProveedor = 1,
        .monedaDoc = "1",
        .tasaIgv = 0,
        .tcDolLoc = 0,
        .tipocambio = 0,
        .bi01 = ImporteTotal,
        .bi02 = 0,
        .bi03 = 0,
        .bi04 = 0,
        .isc01 = 0,
        .isc02 = 0,
        .isc03 = 0,
        .igv01 = 0,
        .igv02 = 0,
        .igv03 = 0,
        .otc01 = 0,
        .otc02 = 0,
        .otc03 = 0,
        .otc04 = 0,
        .bi01us = 0,
        .bi02us = 0,
        .bi03us = 0,
        .bi04us = 0,
        .isc01us = 0,
        .isc02us = 0,
        .isc03us = 0,
        .igv01us = 0,
        .igv02us = 0,
        .igv03us = 0,
        .otc01us = 0,
        .otc02us = 0,
        .otc03us = 0,
        .otc04us = 0,
        .importeTotal = ImporteTotal,
        .importeUS = 0,
        .destino = TIPO_COMPRA.NOTA_DE_COMPRA_EN_ESPERA,
        .estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO,
        .glosa = "Por la compra según nota de compra",
        .tipoCompra = TIPO_COMPRA.NOTA_DE_COMPRA_EN_ESPERA,
        .situacion = statusComprobantes.Normal,
        .tieneDetraccion = "N",
        .usuarioActualizacion = Be.usuarioActualizacion,
        .fechaActualizacion = DateTime.Now
            }
    End Function

    Private Function AddDocumento(be As documentoventaAbarrotes) As documento
        AddDocumento = New documento With
        {
        .Action = BaseBE.EntityAction.INSERT,
        .idEmpresa = be.idEmpresa,
        .idCentroCosto = be.idEstablecimiento,
        .tipoDoc = "9907",
        .fechaProceso = be.fechaDoc.Value.AddMinutes(-10),
        .moneda = "1",
        .idEntidad = 1,
        .entidad = "PELAYOS",
        .tipoEntidad = TIPO_ENTIDAD.PROVEEDOR,
        .nrodocEntidad = "55445545454",
        .nroDoc = "1",
        .tipoOperacion = StatusTipoOperacion.COMPRA,
        .usuarioActualizacion = be.usuarioActualizacion,
        .fechaActualizacion = DateTime.Now
        }
    End Function

    Private Sub GetProductoConsignadoExistente(i As documentoventaAbarrotesDet)
        Using ts As New TransactionScope

        End Using
    End Sub

    Private Sub GetProductoConsignadoNuevo(i As documentoventaAbarrotesDet)
        Using ts As New TransactionScope

        End Using
    End Sub

    Public Function GetListarAllVentasInformeGeneral(strIdEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, strMovimiento As String, tipo As String, listaUsuario As List(Of String), fechainicio As DateTime, fechaFin As DateTime, pago As String) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim objRecurso As New documentoventaAbarrotes

        Select Case tipo
            Case "XTodo"
                Dim consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                      On doc.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                      On compra.idCliente Equals entidad.idEntidad
                      Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where doc.idEmpresa = strIdEmpresa And doc.idCentroCosto = intIdEstablecimiento And
                      compra.fechaDoc.Value.Year = fechainicio.Year And (compra.tipoVenta) = strMovimiento _
                      And compra.estadoCobro <> "ANU" And
                     listaUsuario.Contains(compra.usuarioActualizacion) And
                     compra.terminos = pago
                                      Order By compra.fechaDoc Ascending).ToList

                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    Lista.Add(objRecurso)
                Next
            Case "XPeriodo"
                Dim consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                      On doc.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                      On compra.idCliente Equals entidad.idEntidad
                      Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where doc.idEmpresa = strIdEmpresa And doc.idCentroCosto = intIdEstablecimiento And
                      compra.fechaPeriodo = strPeriodo And (compra.tipoVenta) = strMovimiento _
                      And compra.estadoCobro <> "ANU" And
                     listaUsuario.Contains(compra.usuarioActualizacion) And
                     compra.terminos = pago
                                      Order By compra.fechaDoc Ascending).ToList

                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    Lista.Add(objRecurso)
                Next
            Case "XDia"
                Dim consultaVentas = (From doc In HeliosData.documento
                                      Join compra In HeliosData.documentoventaAbarrotes
                   On doc.idDocumento Equals compra.idDocumento
                                      Group Join entidad In HeliosData.entidad
                   On compra.idCliente Equals entidad.idEntidad
                   Into ords = Group
                                      From e In ords.DefaultIfEmpty
                                      Where doc.idEmpresa = strIdEmpresa And doc.idCentroCosto = intIdEstablecimiento And
                   compra.fechaDoc >= fechainicio And compra.fechaDoc <= fechaFin _
                   And (compra.tipoVenta) = strMovimiento _
                   And compra.estadoCobro <> "ANU" And
                  listaUsuario.Contains(compra.usuarioActualizacion) And
                     compra.terminos = pago
                                      Order By compra.fechaDoc Ascending).ToList

                For Each obj In consultaVentas
                    objRecurso = New documentoventaAbarrotes

                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDocumento = obj.compra.tipoDocumento
                    objRecurso.serie = obj.compra.serie
                    objRecurso.serieVenta = obj.compra.serieVenta
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.numeroVenta = obj.compra.numeroVenta
                    objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
                    objRecurso.nombrePedido = obj.compra.nombrePedido
                    If Not IsNothing(obj.e) Then
                        objRecurso.tipoDocEntidad = obj.e.tipoDoc
                        objRecurso.NroDocEntidad = obj.e.nrodoc
                        objRecurso.NombreEntidad = obj.e.nombreCompleto
                        objRecurso.TipoPersona = obj.e.tipoPersona
                    Else
                        objRecurso.tipoDocEntidad = String.Empty
                        objRecurso.NroDocEntidad = String.Empty
                        objRecurso.NombreEntidad = String.Empty
                        objRecurso.TipoPersona = String.Empty
                    End If
                    Select Case obj.compra.tipoDocumento
                        Case "07"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                        Case "08"
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                        Case Else
                            objRecurso.ImporteNacional = obj.compra.ImporteNacional
                            objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                    End Select

                    objRecurso.tipoCambio = obj.compra.tipoCambio
                    objRecurso.moneda = obj.compra.moneda
                    objRecurso.estadoCobro = obj.compra.estadoCobro
                    objRecurso.tipoVenta = obj.compra.tipoVenta
                    objRecurso.notaCredito = obj.compra.notaCredito
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.estadoEntrega = obj.compra.estadoEntrega
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetListarAllVentasPeriodoXUsuario(documentoventaAbarrotesBE As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_NOTA_PEDIDO)
        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)
        ListaTipo.Add("VNPE")
        ListaTipo.Add("VPOS")

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From venta In HeliosData.documentoventaAbarrotes
                              Group Join detalle In HeliosData.documentoCajaDetalle On venta.idDocumento Equals CInt(detalle.documentoAfectado) Into detalle_join = Group
                              From detalle In detalle_join.DefaultIfEmpty()
                              Group Join entidad In HeliosData.entidad On CInt(venta.idCliente) Equals entidad.idEntidad Into entidad_join = Group
                              From entidad In entidad_join.DefaultIfEmpty()
                              Group Join caja In HeliosData.cajaUsuario On CInt(detalle.idCajaUsuario) Equals caja.idcajaUsuario Into caja_join = Group
                              From caja In caja_join.DefaultIfEmpty()
                              Where
                                  venta.documento.idCentroCosto = documentoventaAbarrotesBE.idEstablecimiento And
                                  venta.fechaPeriodo = documentoventaAbarrotesBE.fechaPeriodo And
                                  ListaTipo.Contains(venta.tipoVenta) _
                                  And venta.estadoCobro <> "ANU" And
                                 venta.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
                              Order By venta.fechaDoc Ascending
                              Group New With {venta, entidad, detalle, caja} By
                                 venta.idDocumento,
                                  venta.tipoOperacion,
                                  FechaDoc = CType(venta.fechaDoc, DateTime?),
                                 venta.tipoDocumento,
                                  venta.serie,
                                  venta.serieVenta,
                                  venta.numeroDoc,
                                  NumeroVenta = CType(venta.numeroVenta, Int32?),
                                  venta.numeroDocNormal,
                                  venta.nombrePedido,
                                  entidad.tipoDoc,
                                  entidad.nrodoc,
                                  entidad.nombreCompleto,
                                  entidad.tipoPersona,
                                  ImporteNacional = CType(venta.ImporteNacional, Decimal?),
                                  ImporteExtranjero = CType(venta.ImporteExtranjero, Decimal?),
                                  tipoCambio = CType(venta.tipoCambio, Decimal?),
                                  venta.moneda,
                                  venta.estadoCobro,
                                  venta.tipoVenta,
                                  venta.notaCredito,
                                  venta.usuarioActualizacion,
                                  IdPadre = CType(venta.idPadre, Int32?),
                                  detalle.idCajaUsuario,
                                   caja.idPersona
                                  Into g = Group
                              Select
                                  idDocumento,
                                  tipoOperacion,
                                  FechaDoc = CType(FechaDoc, DateTime?),
                                  tipoDocumento,
                                  serie,
                                  serieVenta,
                                  numeroDoc,
                                  NumeroVenta = CType(NumeroVenta, Int32?),
                                  numeroDocNormal,
                                  nombrePedido,
                                  tipoDoc,
                                  nrodoc,
                                  nombreCompleto,
                                  tipoPersona,
                                  ImporteNacional = CType(ImporteNacional, Decimal?),
                                  ImporteExtranjero = CType(ImporteExtranjero, Decimal?),
                                  tipoCambio = CType(tipoCambio, Decimal?),
                                  moneda,
                                  estadoCobro,
                                  tipoVenta,
                                  notaCredito,
                                  usuarioActualizacion,
                                  IdPadre = CType(IdPadre, Int32?),
                                  idCajaUsuario,
                                    IdPersona = idPersona).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.idDocumento
            objRecurso.tipoOperacion = obj.tipoOperacion
            objRecurso.fechaDoc = obj.FechaDoc
            objRecurso.tipoDocumento = obj.tipoDocumento
            objRecurso.serie = obj.serie
            objRecurso.serieVenta = obj.serieVenta
            objRecurso.numeroDoc = obj.numeroDoc
            objRecurso.numeroVenta = obj.NumeroVenta
            objRecurso.numeroDocNormal = obj.numeroDocNormal
            objRecurso.nombrePedido = obj.nombrePedido
            If Not IsNothing(obj.nombreCompleto) Then
                objRecurso.tipoDocEntidad = obj.tipoDoc
                objRecurso.NroDocEntidad = obj.nrodoc
                objRecurso.NombreEntidad = obj.nombreCompleto
                objRecurso.TipoPersona = obj.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.tipoCambio
            objRecurso.moneda = obj.moneda
            objRecurso.estadoCobro = obj.estadoCobro
            objRecurso.tipoVenta = obj.tipoVenta
            objRecurso.notaCredito = obj.notaCredito
            objRecurso.usuarioActualizacion = obj.usuarioActualizacion
            objRecurso.estadoEntrega = obj.estadoCobro
            objRecurso.idPadre = obj.IdPadre
            objRecurso.CajaSeleccionada = obj.IdPersona
            Lista.Add(objRecurso)
        Next

        'ojo falta poner usuarioActualizacion
        '.idEmpresa = Gempresas.IdEmpresaRuc,
        Dim consultaMembresia = entidadembresiaBL.GetRegistroMembresiasByPeriodo(New Entidadmembresia_Gym With {
                                                                                 .idEstablecimiento = documentoventaAbarrotesBE.idEstablecimiento,
                                                                                 .periodo = documentoventaAbarrotesBE.fechaPeriodo,
                                                                                 .usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion})

        For Each i In consultaMembresia
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = i.idDocumento
            objRecurso.tipoOperacion = StatusTipoOperacion.VENTA
            objRecurso.fechaDoc = i.fechaRegistro
            objRecurso.tipoDocumento = i.tipodoc
            objRecurso.serie = i.serie
            objRecurso.serieVenta = i.serie
            objRecurso.numeroDoc = i.numero
            objRecurso.numeroVenta = i.numero
            objRecurso.numeroDocNormal = i.numero
            objRecurso.nombrePedido = "-"
            objRecurso.tipoDocEntidad = i.CustomEntidad.tipoDoc
            objRecurso.NroDocEntidad = i.CustomEntidad.nrodoc
            objRecurso.NombreEntidad = i.CustomEntidad.nombreCompleto
            objRecurso.TipoPersona = "Socio"
            objRecurso.ImporteNacional = i.importe
            objRecurso.ImporteExtranjero = 0
            objRecurso.tipoCambio = 1
            objRecurso.moneda = "NAC"
            objRecurso.estadoCobro = i.statusPago
            objRecurso.tipoVenta = TIPO_VENTA.VENTA_MEMBRESIAS_GIMANSIO
            objRecurso.notaCredito = 0
            objRecurso.usuarioActualizacion = "" ' i.usuarioActualizacion
            objRecurso.estadoEntrega = "E"
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarAllVentasDiaXUsuario(documentoventaAbarrotesBE As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        '  Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)


        ListaTipo.Add(TIPO_VENTA.VENTA_NOTA_PEDIDO)
        ListaTipo.Add(TIPO_VENTA.NOTA_DE_VENTA)
        ListaTipo.Add("VNPE")
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)

        Dim objRecurso As New documentoventaAbarrotes

        Dim consulta = (From venta In HeliosData.documentoventaAbarrotes
                        Group Join ent In HeliosData.entidad On ent.idEntidad Equals venta.idCliente Into ent_join = Group
                        From ent In ent_join.DefaultIfEmpty()
                        Where
                           venta.documento.idCentroCosto = documentoventaAbarrotesBE.idEstablecimiento And
                           venta.fechaDoc.Value.Year = documentoventaAbarrotesBE.fechaDoc.Value.Year And
                           venta.fechaDoc.Value.Month = documentoventaAbarrotesBE.fechaDoc.Value.Month And
                           venta.fechaDoc.Value.Day = documentoventaAbarrotesBE.fechaDoc.Value.Day And
                           ListaTipo.Contains(venta.tipoVenta) _
                           And venta.estadoCobro <> "ANU" And
                           venta.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
                        Order By venta.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.venta.idDocumento
            objRecurso.tipoOperacion = obj.venta.tipoOperacion
            objRecurso.fechaDoc = obj.venta.fechaDoc
            objRecurso.tipoDocumento = obj.venta.tipoDocumento
            objRecurso.serie = obj.venta.serie
            objRecurso.serieVenta = obj.venta.serieVenta
            objRecurso.numeroDoc = obj.venta.numeroDoc
            objRecurso.numeroVenta = obj.venta.numeroVenta
            objRecurso.numeroDocNormal = obj.venta.numeroDocNormal
            objRecurso.nombrePedido = obj.venta.nombrePedido
            If Not IsNothing(obj.ent) Then
                objRecurso.tipoDocEntidad = obj.ent.tipoDoc
                objRecurso.NroDocEntidad = obj.ent.nrodoc
                objRecurso.NombreEntidad = obj.ent.nombreCompleto
                objRecurso.TipoPersona = obj.ent.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.venta.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.venta.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.venta.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.venta.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.venta.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.venta.tipoCambio
            objRecurso.moneda = obj.venta.moneda
            objRecurso.estadoCobro = obj.venta.estadoCobro
            objRecurso.tipoVenta = obj.venta.tipoVenta
            objRecurso.notaCredito = obj.venta.notaCredito
            objRecurso.usuarioActualizacion = obj.venta.usuarioActualizacion
            objRecurso.estadoEntrega = obj.venta.estadoCobro
            objRecurso.idPadre = obj.venta.idPadre
            objRecurso.CajaSeleccionada = obj.venta.usuarioActualizacion
            Lista.Add(objRecurso)
        Next



        'Dim consultaVentas = (From venta In HeliosData.documentoventaAbarrotes
        '                      Group Join detalle In HeliosData.documentoCajaDetalle On venta.idDocumento Equals CInt(detalle.documentoAfectado) Into detalle_join = Group
        '                      From detalle In detalle_join.DefaultIfEmpty()
        '                      Group Join entidad In HeliosData.entidad On CInt(venta.idCliente) Equals entidad.idEntidad Into entidad_join = Group
        '                      From entidad In entidad_join.DefaultIfEmpty()
        '                      Group Join caja In HeliosData.cajaUsuario On CInt(detalle.idCajaUsuario) Equals caja.idcajaUsuario Into caja_join = Group
        '                      From caja In caja_join.DefaultIfEmpty()
        '                      Where
        '                          venta.documento.idCentroCosto = documentoventaAbarrotesBE.idEstablecimiento And
        '                          venta.fechaDoc.Value.Year = documentoventaAbarrotesBE.fechaDoc.Value.Year And
        '                          venta.fechaDoc.Value.Month = documentoventaAbarrotesBE.fechaDoc.Value.Month And
        '                          venta.fechaDoc.Value.Day = documentoventaAbarrotesBE.fechaDoc.Value.Day And
        '                          ListaTipo.Contains(venta.tipoVenta) _
        '                          And venta.estadoCobro <> "ANU" And
        '                         venta.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
        '                      Order By venta.fechaDoc Ascending
        '                      Group New With {venta, entidad, detalle, caja} By
        '                         venta.idDocumento,
        '                          venta.tipoOperacion,
        '                          FechaDoc = CType(venta.fechaDoc, DateTime?),
        '                         venta.tipoDocumento,
        '                          venta.serie,
        '                          venta.serieVenta,
        '                          venta.numeroDoc,
        '                          NumeroVenta = CType(venta.numeroVenta, Int32?),
        '                          venta.numeroDocNormal,
        '                          venta.nombrePedido,
        '                          entidad.tipoDoc,
        '                          entidad.nrodoc,
        '                          entidad.nombreCompleto,
        '                          entidad.tipoPersona,
        '                          ImporteNacional = CType(venta.ImporteNacional, Decimal?),
        '                          ImporteExtranjero = CType(venta.ImporteExtranjero, Decimal?),
        '                          tipoCambio = CType(venta.tipoCambio, Decimal?),
        '                          venta.moneda,
        '                          venta.estadoCobro,
        '                          venta.tipoVenta,
        '                          venta.notaCredito,
        '                          venta.usuarioActualizacion,
        '                          IdPadre = CType(venta.idPadre, Int32?),
        '                          detalle.idCajaUsuario,
        '                           caja.idPersona
        '                          Into g = Group
        '                      Select
        '                          idDocumento,
        '                          tipoOperacion,
        '                          FechaDoc = CType(FechaDoc, DateTime?),
        '                          tipoDocumento,
        '                          serie,
        '                          serieVenta,
        '                          numeroDoc,
        '                          NumeroVenta = CType(NumeroVenta, Int32?),
        '                          numeroDocNormal,
        '                          nombrePedido,
        '                          tipoDoc,
        '                          nrodoc,
        '                          nombreCompleto,
        '                          tipoPersona,
        '                          ImporteNacional = CType(ImporteNacional, Decimal?),
        '                          ImporteExtranjero = CType(ImporteExtranjero, Decimal?),
        '                          tipoCambio = CType(tipoCambio, Decimal?),
        '                          moneda,
        '                          estadoCobro,
        '                          tipoVenta,
        '                          notaCredito,
        '                          usuarioActualizacion,
        '                          IdPadre = CType(IdPadre, Int32?),
        '                          idCajaUsuario,
        '                            IdPersona = idPersona).ToList


        'For Each obj In consultaVentas
        '    objRecurso = New documentoventaAbarrotes

        '    objRecurso.idDocumento = obj.idDocumento
        '    objRecurso.tipoOperacion = obj.tipoOperacion
        '    objRecurso.fechaDoc = obj.FechaDoc
        '    objRecurso.tipoDocumento = obj.tipoDocumento
        '    objRecurso.serie = obj.serie
        '    objRecurso.serieVenta = obj.serieVenta
        '    objRecurso.numeroDoc = obj.numeroDoc
        '    objRecurso.numeroVenta = obj.NumeroVenta
        '    objRecurso.numeroDocNormal = obj.numeroDocNormal
        '    objRecurso.nombrePedido = obj.nombrePedido
        '    If Not IsNothing(obj.nombreCompleto) Then
        '        objRecurso.tipoDocEntidad = obj.tipoDoc
        '        objRecurso.NroDocEntidad = obj.nrodoc
        '        objRecurso.NombreEntidad = obj.nombreCompleto
        '        objRecurso.TipoPersona = obj.tipoPersona
        '    Else
        '        objRecurso.tipoDocEntidad = String.Empty
        '        objRecurso.NroDocEntidad = String.Empty
        '        objRecurso.NombreEntidad = String.Empty
        '        objRecurso.TipoPersona = String.Empty
        '    End If
        '    Select Case obj.tipoDocumento
        '        Case "07"
        '            objRecurso.ImporteNacional = obj.ImporteNacional * -1
        '            objRecurso.ImporteExtranjero = obj.ImporteExtranjero * -1
        '        Case "08"
        '            objRecurso.ImporteNacional = obj.ImporteNacional
        '            objRecurso.ImporteExtranjero = obj.ImporteExtranjero
        '        Case Else
        '            objRecurso.ImporteNacional = obj.ImporteNacional
        '            objRecurso.ImporteExtranjero = obj.ImporteExtranjero
        '    End Select

        '    objRecurso.tipoCambio = obj.tipoCambio
        '    objRecurso.moneda = obj.moneda
        '    objRecurso.estadoCobro = obj.estadoCobro
        '    objRecurso.tipoVenta = obj.tipoVenta
        '    objRecurso.notaCredito = obj.notaCredito
        '    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
        '    objRecurso.estadoEntrega = obj.estadoCobro
        '    objRecurso.idPadre = obj.IdPadre
        '    objRecurso.CajaSeleccionada = obj.IdPersona
        '    Lista.Add(objRecurso)
        'Next

        ''ojo falta poner usuarioActualizacion
        ''.idEmpresa = Gempresas.IdEmpresaRuc,
        'Dim consultaMembresia = entidadembresiaBL.GetRegistroMembresiasByPeriodo(New Entidadmembresia_Gym With {
        '                                                                         .idEstablecimiento = documentoventaAbarrotesBE.idEstablecimiento,
        '                                                                         .periodo = documentoventaAbarrotesBE.fechaPeriodo,
        '                                                                         .usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion})

        'For Each i In consultaMembresia
        '    objRecurso = New documentoventaAbarrotes

        '    objRecurso.idDocumento = i.idDocumento
        '    objRecurso.tipoOperacion = StatusTipoOperacion.VENTA
        '    objRecurso.fechaDoc = i.fechaRegistro
        '    objRecurso.tipoDocumento = i.tipodoc
        '    objRecurso.serie = i.serie
        '    objRecurso.serieVenta = i.serie
        '    objRecurso.numeroDoc = i.numero
        '    objRecurso.numeroVenta = i.numero
        '    objRecurso.numeroDocNormal = i.numero
        '    objRecurso.nombrePedido = "-"
        '    objRecurso.tipoDocEntidad = i.CustomEntidad.tipoDoc
        '    objRecurso.NroDocEntidad = i.CustomEntidad.nrodoc
        '    objRecurso.NombreEntidad = i.CustomEntidad.nombreCompleto
        '    objRecurso.TipoPersona = "Socio"
        '    objRecurso.ImporteNacional = i.importe
        '    objRecurso.ImporteExtranjero = 0
        '    objRecurso.tipoCambio = 1
        '    objRecurso.moneda = "NAC"
        '    objRecurso.estadoCobro = i.statusPago
        '    objRecurso.tipoVenta = TIPO_VENTA.VENTA_MEMBRESIAS_GIMANSIO
        '    objRecurso.notaCredito = 0
        '    objRecurso.usuarioActualizacion = "" ' i.usuarioActualizacion
        '    objRecurso.estadoEntrega = "E"
        '    Lista.Add(objRecurso)
        'Next

        Return Lista
    End Function

    Public Function GetListarAllCotizacionXPeriodoXUsuario(documentoventaAbarrotesBE As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.COTIZACION)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = documentoventaAbarrotesBE.idEstablecimiento And
                       compra.fechaPeriodo = documentoventaAbarrotesBE.fechaPeriodo And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro <> "ANU" And
                                  compra.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre

            Lista.Add(objRecurso)
        Next

        'ojo falta poner usuarioActualizacion
        '.idEmpresa = Gempresas.IdEmpresaRuc,
        Dim consultaMembresia = entidadembresiaBL.GetRegistroMembresiasByPeriodo(New Entidadmembresia_Gym With {
                                                                                 .idEstablecimiento = documentoventaAbarrotesBE.idEstablecimiento,
                                                                                 .periodo = documentoventaAbarrotesBE.fechaPeriodo,
                                                                                 .usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion})

        For Each i In consultaMembresia
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = i.idDocumento
            objRecurso.tipoOperacion = StatusTipoOperacion.VENTA
            objRecurso.fechaDoc = i.fechaRegistro
            objRecurso.tipoDocumento = i.tipodoc
            objRecurso.serie = i.serie
            objRecurso.serieVenta = i.serie
            objRecurso.numeroDoc = i.numero
            objRecurso.numeroVenta = i.numero
            objRecurso.numeroDocNormal = i.numero
            objRecurso.nombrePedido = "-"
            objRecurso.tipoDocEntidad = i.CustomEntidad.tipoDoc
            objRecurso.NroDocEntidad = i.CustomEntidad.nrodoc
            objRecurso.NombreEntidad = i.CustomEntidad.nombreCompleto
            objRecurso.TipoPersona = "Socio"
            objRecurso.ImporteNacional = i.importe
            objRecurso.ImporteExtranjero = 0
            objRecurso.tipoCambio = 1
            objRecurso.moneda = "NAC"
            objRecurso.estadoCobro = i.statusPago
            objRecurso.tipoVenta = TIPO_VENTA.VENTA_MEMBRESIAS_GIMANSIO
            objRecurso.notaCredito = 0
            objRecurso.usuarioActualizacion = "" ' i.usuarioActualizacion
            objRecurso.estadoEntrega = "E"
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarAllCotizacionXDiaXUsuario(documentoventaAbarrotesBE As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.COTIZACION)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = documentoventaAbarrotesBE.idEstablecimiento And
                       compra.fechaDoc.Value.Day = documentoventaAbarrotesBE.fechaDoc.Value.Day And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro <> "ANU" And
                                  compra.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
                              Order By compra.fechaDoc Ascending).ToList


        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre

            Lista.Add(objRecurso)
        Next

        'ojo falta poner usuarioActualizacion
        '.idEmpresa = Gempresas.IdEmpresaRuc,
        Dim consultaMembresia = entidadembresiaBL.GetRegistroMembresiasByPeriodo(New Entidadmembresia_Gym With {
                                                                                 .idEstablecimiento = documentoventaAbarrotesBE.idEstablecimiento,
                                                                                 .periodo = documentoventaAbarrotesBE.fechaPeriodo,
                                                                                 .usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion})

        For Each i In consultaMembresia
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = i.idDocumento
            objRecurso.tipoOperacion = StatusTipoOperacion.VENTA
            objRecurso.fechaDoc = i.fechaRegistro
            objRecurso.tipoDocumento = i.tipodoc
            objRecurso.serie = i.serie
            objRecurso.serieVenta = i.serie
            objRecurso.numeroDoc = i.numero
            objRecurso.numeroVenta = i.numero
            objRecurso.numeroDocNormal = i.numero
            objRecurso.nombrePedido = "-"
            objRecurso.tipoDocEntidad = i.CustomEntidad.tipoDoc
            objRecurso.NroDocEntidad = i.CustomEntidad.nrodoc
            objRecurso.NombreEntidad = i.CustomEntidad.nombreCompleto
            objRecurso.TipoPersona = "Socio"
            objRecurso.ImporteNacional = i.importe
            objRecurso.ImporteExtranjero = 0
            objRecurso.tipoCambio = 1
            objRecurso.moneda = "NAC"
            objRecurso.estadoCobro = i.statusPago
            objRecurso.tipoVenta = TIPO_VENTA.VENTA_MEMBRESIAS_GIMANSIO
            objRecurso.notaCredito = 0
            objRecurso.usuarioActualizacion = "" ' i.usuarioActualizacion
            objRecurso.estadoEntrega = "E"
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GrabarVentaSinIventario(listaDocumento As List(Of documento)) As List(Of documentoventaAbarrotes)
        GrabarVentaSinIventario = New List(Of documentoventaAbarrotes)
        Dim Documento = listaDocumento.Where(Function(o) o.tipoDoc <> "9907").SingleOrDefault
        Using ts As New TransactionScope
            '#Region "Documento de venta"
            If Documento IsNot Nothing Then
                Dim codDocumentoVenta = AddVentaSinInventario(Documento)

                GrabarVentaSinIventario.Add(New documentoventaAbarrotes With
                                         {
                                         .idDocumento = codDocumentoVenta,
                                         .tipoVenta = TIPO_VENTA.VENTA_POS_DIRECTA
                                         })

            End If
            '#End Region

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Function

    Public Function Grabar_VentaEspecialExistencia(listaDocumento As List(Of documento)) As List(Of documentoventaAbarrotes)

        Grabar_VentaEspecialExistencia = New List(Of documentoventaAbarrotes)
        Dim listaventaDet As New List(Of documentoventaAbarrotesDet)
        'Dim inventarioBL As New InventarioMovimientoBL
        'Dim totalesBL As New totalesAlmacenBL
        Dim Documento = listaDocumento.Where(Function(o) o.tipoDoc <> "9907").SingleOrDefault

        listaventaDet = New List(Of documentoventaAbarrotesDet)
        listaventaDet = Documento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList
        Using ts As New TransactionScope
            '#Region "Documento de venta"
            If Documento IsNot Nothing Then
                Dim codDocumentoVenta = AddVentaSinLote(Documento)

                'Dim ListaArticulosVendidos = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = codDocumentoVenta).ToList

                'If ListaArticulosVendidos.Count > 0 Then
                '    'Dim fechaEnvioAlmacen = Documento.documentoventaAbarrotes.fechaDoc.Value.Date
                '    'For Each a In ListaArticulosVendidos
                '    '    'Dim lista = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                '    '    'New InventarioMovimiento With {
                '    '    '.idAlmacen = a.idAlmacen,
                '    '    '.fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                '    '    '.tipoProducto = a.tipoProducto,
                '    '    '.idItem = a.idItem,
                '    '    '.nrolote = a.nrolote}, Nothing)
                '    '    'totalesBL.GetCurarKardexCaberasLOTE(lista)
                '    'Next
                'End If
                Grabar_VentaEspecialExistencia.Add(New documentoventaAbarrotes With
                                         {
                                         .idDocumento = codDocumentoVenta,
                                         .tipoVenta = TIPO_VENTA.VENTA_POS_DIRECTA
                                         })

            End If
            '#End Region

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Function

    Public Function GetListarAllVentasPorCliente(objDocumento As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add("VELC")
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = objDocumento.idEstablecimiento And
                    compra.idCliente = objDocumento.idCliente And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro <> "ANU"
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next

        '.idEmpresa = Gempresas.IdEmpresaRuc,
        Dim consultaMembresia = entidadembresiaBL.GetRegistroMembresiasByCliente(New Entidadmembresia_Gym With {
                                                                                 .idEstablecimiento = objDocumento.idEstablecimiento,
                                                                                 .idEntidad = objDocumento.idCliente})

        For Each i In consultaMembresia
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = i.idDocumento
            objRecurso.tipoOperacion = StatusTipoOperacion.VENTA
            objRecurso.fechaDoc = i.fechaRegistro
            objRecurso.tipoDocumento = i.tipodoc
            objRecurso.serie = i.serie
            objRecurso.serieVenta = i.serie
            objRecurso.numeroDoc = i.numero
            objRecurso.numeroVenta = i.numero
            objRecurso.numeroDocNormal = i.numero
            objRecurso.nombrePedido = "-"
            objRecurso.tipoDocEntidad = i.CustomEntidad.tipoDoc
            objRecurso.NroDocEntidad = i.CustomEntidad.nrodoc
            objRecurso.NombreEntidad = i.CustomEntidad.nombreCompleto
            objRecurso.TipoPersona = "Socio"
            objRecurso.ImporteNacional = i.importe
            objRecurso.ImporteExtranjero = 0
            objRecurso.tipoCambio = 1
            objRecurso.moneda = "NAC"
            objRecurso.estadoCobro = i.statusPago
            objRecurso.tipoVenta = TIPO_VENTA.VENTA_MEMBRESIAS_GIMANSIO
            objRecurso.notaCredito = 0
            objRecurso.usuarioActualizacion = "" ' i.usuarioActualizacion
            objRecurso.estadoEntrega = "E"
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarAllVentasPorDIa(objDocumento As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim entidadembresiaBL As New Entidadmembresia_GymBL
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_VENTA.VENTA_GENERAL)
        ListaTipo.Add(TIPO_VENTA.VENTA_HEREDAD)
        ListaTipo.Add(TIPO_VENTA.VENTA_POS_DIRECTA)
        ListaTipo.Add("VELC")
        ListaTipo.Add(TIPO_VENTA.VENTA_ANTICIPADA_OTORGADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CONTADO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_CREDITO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO)
        'ListaTipo.Add(TIPO_VENTA.VENTA_NORMAL_SERVICIO_CREDITO)
        ListaTipo.Add(TIPO_VENTA.VENTA_AL_TICKET)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim objRecurso As New documentoventaAbarrotes
        Dim consultaVentas = (From doc In HeliosData.documento
                              Join compra In HeliosData.documentoventaAbarrotes
                       On doc.idDocumento Equals compra.idDocumento
                              Group Join entidad In HeliosData.entidad
                       On compra.idCliente Equals entidad.idEntidad
                       Into ords = Group
                              From e In ords.DefaultIfEmpty
                              Where doc.idCentroCosto = objDocumento.idEstablecimiento And
                                  doc.idEmpresa = objDocumento.idEmpresa And
                    compra.fechaDoc = objDocumento.fechaDoc And ListaTipo.Contains(compra.tipoVenta) _
                       And compra.estadoCobro <> "ANU"
                              Order By compra.fechaDoc Ascending).ToList

        For Each obj In consultaVentas
            objRecurso = New documentoventaAbarrotes
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocumento = obj.compra.tipoDocumento
            objRecurso.serie = obj.compra.serie
            objRecurso.serieVenta = obj.compra.serieVenta
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.numeroVenta = obj.compra.numeroVenta
            objRecurso.numeroDocNormal = obj.compra.numeroDocNormal
            objRecurso.nombrePedido = obj.compra.nombrePedido
            If Not IsNothing(obj.e) Then
                objRecurso.tipoDocEntidad = obj.e.tipoDoc
                objRecurso.NroDocEntidad = obj.e.nrodoc
                objRecurso.NombreEntidad = obj.e.nombreCompleto
                objRecurso.TipoPersona = obj.e.tipoPersona
            Else
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If
            Select Case obj.compra.tipoDocumento
                Case "07"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional * -1
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero * -1
                Case "08"
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
                Case Else
                    objRecurso.ImporteNacional = obj.compra.ImporteNacional
                    objRecurso.ImporteExtranjero = obj.compra.ImporteExtranjero
            End Select

            objRecurso.tipoCambio = obj.compra.tipoCambio
            objRecurso.moneda = obj.compra.moneda
            objRecurso.estadoCobro = obj.compra.estadoCobro
            objRecurso.tipoVenta = obj.compra.tipoVenta
            objRecurso.notaCredito = obj.compra.notaCredito
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.EnvioSunat = obj.compra.EnvioSunat
            Lista.Add(objRecurso)
        Next

        '.idEmpresa = Gempresas.IdEmpresaRuc,
        Dim consultaMembresia = entidadembresiaBL.GetRegistroMembresiasByCliente(New Entidadmembresia_Gym With {
                                                                                 .idEstablecimiento = objDocumento.idEstablecimiento,
                                                                                 .idEntidad = objDocumento.idCliente})

        For Each i In consultaMembresia
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = i.idDocumento
            objRecurso.tipoOperacion = StatusTipoOperacion.VENTA
            objRecurso.fechaDoc = i.fechaRegistro
            objRecurso.tipoDocumento = i.tipodoc
            objRecurso.serie = i.serie
            objRecurso.serieVenta = i.serie
            objRecurso.numeroDoc = i.numero
            objRecurso.numeroVenta = i.numero
            objRecurso.numeroDocNormal = i.numero
            objRecurso.nombrePedido = "-"
            objRecurso.tipoDocEntidad = i.CustomEntidad.tipoDoc
            objRecurso.NroDocEntidad = i.CustomEntidad.nrodoc
            objRecurso.NombreEntidad = i.CustomEntidad.nombreCompleto
            objRecurso.TipoPersona = "Socio"
            objRecurso.ImporteNacional = i.importe
            objRecurso.ImporteExtranjero = 0
            objRecurso.tipoCambio = 1
            objRecurso.moneda = "NAC"
            objRecurso.estadoCobro = i.statusPago
            objRecurso.tipoVenta = TIPO_VENTA.VENTA_MEMBRESIAS_GIMANSIO
            objRecurso.notaCredito = 0
            objRecurso.usuarioActualizacion = "" ' i.usuarioActualizacion
            objRecurso.estadoEntrega = "E"
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function CobrosxDocumentoImpresion(iNtPadre As Integer) As List(Of documentoventaAbarrotes)
        Dim lista As New List(Of documentoventaAbarrotes)
        Dim a As New documentoventaAbarrotes

        Dim cc = (From c In HeliosData.documentoCaja
                  Join det In HeliosData.documentoCajaDetalle
                 On c.idDocumento Equals det.idDocumento
                  Join ent In HeliosData.estadosFinancieros
                  On c.entidadFinanciera Equals ent.idestado
                  Join des In HeliosData.tabladetalle On des.codigoDetalle Equals c.tipoDocPago
                  Where det.documentoAfectado = iNtPadre And des.idtabla = 10
                  Group det By
                      c.idDocumento,
                      c.idEmpresa,
                      c.idEstablecimiento,
                      c.codigoLibro,
                      c.tipoMovimiento,
                      c.codigoProveedor,
                      c.idPersonal,
                      c.tipoPersona,
                      c.fechaProceso,
                      c.periodo,
                      c.fechaCobro,
                      c.tipoDocPago,
                      c.formapago,
                      c.numeroDoc,
                      c.moneda,
                      c.entidadFinanciera,
                      c.entidadFinancieraDestino,
                      c.tipoOperacion,
                      c.numeroOperacion,
                       c.montoSoles,
                      c.montoUsd,
                      des.descripcion,
                      ent.nroCtaCorriente,
                      nombreentidad = ent.descripcion
                      Into g = Group
                  Select New With {
                      .idDocumento = idDocumento,
                      .idEmpresa = idEmpresa,
                      .idEstablecimiento = idEstablecimiento,
                      .codigoLibro = codigoLibro,
                      .tipoMovimiento = tipoMovimiento,
                      .codigoProveedor = codigoProveedor,
                      .idPersonal = idPersonal,
                      .tipoPersona = tipoPersona,
                      .fechaProceso = fechaProceso,
                      .periodo = periodo,
                      .fechaCobro = fechaCobro,
                      .tipoDocPago = tipoDocPago,
                      .formapago = formapago,
                      .numeroDoc = numeroDoc,
                      .moneda = moneda,
                      .entidadFinanciera = entidadFinanciera,
                      .entidadFinancieraDestino = entidadFinancieraDestino,
                      .tipoOperacion = tipoOperacion,
                      .numeroOperacion = numeroOperacion,
                      .terminos = descripcion,
                      .nroCuentaCorriente = nroCtaCorriente,
                      .nombreEntidad = nombreentidad,
                      .modulo = (From x In HeliosData.tabladetalle
                                 Where x.codigoDetalle = tipoOperacion And x.idtabla = 12 Select descrip = x.descripcion).FirstOrDefault,
                      g, .importeMN = g.Sum(Function(c) c.montoSoles),
                      .importeME = g.Sum(Function(c) c.montoUsd)
                      }
                      ).ToList

        For Each i In cc
            a = New documentoventaAbarrotes
            a.idDocumento = i.idDocumento
            a.tipoDocumento = i.tipoDocPago
            a.tipoOperacion = i.tipoOperacion
            a.numeroDocNormal = i.numeroDoc
            a.ImporteNacional = i.importeMN
            a.ImporteExtranjero = i.importeME
            a.terminos = i.terminos
            a.fechaDoc = i.fechaProceso
            a.tipoVenta = i.tipoMovimiento
            a.modulo = i.modulo
            a.entidadFinanciera = i.entidadFinanciera
            If i.numeroOperacion = "-" Then
                a.numeroVenta = 0
            Else
                a.numeroVenta = i.numeroOperacion
            End If
            a.sustentado = i.formapago
            a.NroDocEntidad = i.nroCuentaCorriente
            a.NombreEntidad = i.nombreEntidad
            lista.Add(a)
        Next
        Return lista
    End Function

#Region "REstaurat"
    Public Function GetListaVentaID(be As documento) As List(Of documentoventaAbarrotes)
        Dim objDocumento As New documentoventaAbarrotes
        GetListaVentaID = New List(Of documentoventaAbarrotes)
        'Dim venta = (From v In HeliosData.documentoventaAbarrotes
        '            Join det In HeliosData.documentoventaAbarrotesDet On det.idDocumento Equals v.idDocumento
        '            Join ent In HeliosData.entidad On ent.idEntidad Equals v.idCliente
        '            Join prod In HeliosData.detalleitems.Include("detalleitem_equivalencias") On prod.codigodetalle Equals det.idItem
        '            Where v.idDocumento = be.idDocumento).SIN

        Dim documentoLista = HeliosData.documentoventaAbarrotes.Join(HeliosData.entidad, Function(venta) venta.idCliente, Function(cli) cli.idEntidad, Function(venta, cli) New With {
                                                                                                                                    .vent = venta,
                                                                                                                                    .cliente = cli
                                                                                                                                          }) _
            .Include(Function(det) det.vent.documentoventaAbarrotesDet) _
            .Where(Function(o) be.ListaDocumentoID.Contains(o.vent.idDocumento) And o.vent.tipoVenta = be.tipoDoc).Select(Function(x) New With
                                                          {
                                                          .cliente = x.cliente,
                                                          .documentoventa = x,
                                                          .documentoventaAbarrotesDetalle = x.vent.documentoventaAbarrotesDet.GroupJoin _
                                                            (HeliosData.detalleitem_equivalencias, Function(vt) vt.equivalencia_id, Function(eq) eq.equivalencia_id, Function(vt, eq) New With {
                                                            .detalleitem_equivalencias = eq.FirstOrDefault,
                                                            .detalle_venta = vt
                                                            }).GroupJoin(HeliosData.detalleitems, Function(g) CInt(g.detalle_venta.idItem), Function(gg) gg.codigodetalle, Function(g, gg) New With
                                                              {
                                                              .cliente = x.cliente,
                                                              .documentoventa = x,
                                                              .ventaDetail = g.detalle_venta,
                                                              .equivalencia = g.detalleitem_equivalencias,
                                                              .Producto = gg.FirstOrDefault
                                                              }).GroupJoin(HeliosData.detalleitemequivalencia_catalogos, Function(t) t.ventaDetail.catalogo_id, Function(tt) tt.idCatalogo, Function(t, tt) New With
                                                                                                                                                {
                                                                                                                                                .cliente = x.cliente,
                                                                                                                                                .documentoventa = x,
                                                                                                                                                .ventaDetail = t.ventaDetail,
                                                                                                                                                .equivalencia = t.equivalencia,
                                                                                                                                                .Producto = t.Producto,
                                                                                                                                                .catalogo = tt.FirstOrDefault
                                                                                                                                                })
                                                                          }).ToList

        'Dim i = HeliosData.documentoventaAbarrotes _
        '    .Include(Function(det) det.documentoventaAbarrotesDet) _
        '    .Where(Function(o) o.idDocumento = be.idDocumento).Select(Function(x) New With
        '                                                  {
        '                                                  .documentoventa = x,
        '                                                  .documentoventaAbarrotesDetalle = x.documentoventaAbarrotesDet.Join _
        '                                                    (HeliosData.detalleitem_equivalencias, Function(vt) vt.equivalencia_id, Function(eq) eq.equivalencia_id, Function(vt, eq) New With {
        '                                                    .detalleitem_equivalencias = eq,
        '                                                    .detalle_venta = vt
        '                                                    })
        '                                                   }).SingleOrDefault


        objDocumento = New documentoventaAbarrotes
        Dim ListVenta As New List(Of documentoventaAbarrotesDet)

        Dim equivalencia_table As detalleitem_equivalencias
        Dim producto_table As detalleitems
        Dim catalogo_table As detalleitemequivalencia_catalogos

        For Each i In documentoLista

            For Each o In i.documentoventaAbarrotesDetalle.ToList
                If o.equivalencia IsNot Nothing Then
                    equivalencia_table = New detalleitem_equivalencias With
                                {
                                .codigodetalle = o.equivalencia.codigodetalle,
                                .equivalencia_id = o.equivalencia.equivalencia_id,
                                .detalle = o.equivalencia.detalle,
                                .unidadComercial = o.equivalencia.unidadComercial,
                                .contenido = o.equivalencia.contenido,
                                .fraccionUnidad = o.equivalencia.fraccionUnidad,
                                .estado = o.equivalencia.estado
                                }
                Else
                    equivalencia_table = Nothing
                End If

                If (o.ventaDetail.tipoExistencia = "IF") Then

                    'Dim consulta = (From infra In HeliosData.distribucionInfraestructura Where (infra.idDistribucion = i.documentoventa.vent.idDistribucion)).FirstOrDefault
                    Dim consulta = (From infra In HeliosData.distribucionInfraestructura Where (infra.idDistribucion = o.ventaDetail.idDistribucion)).FirstOrDefault
                    producto_table = New detalleitems With
                                    {
                                    .codigodetalle = consulta.idDistribucion,
                                    .idItem = Nothing,
                                    .idEmpresa = consulta.idEmpresa,
                                    .idEstablecimiento = consulta.idEstablecimiento,
                                    .descripcionItem = consulta.descripcionDistribucion & " " & consulta.numeracion,
                                    .presentacion = Nothing,
                                    .unidad1 = "NIU",
                                    .unidad2 = Nothing,
                                    .tipoExistencia = "IF",
                                    .origenProducto = "1",
                                    .tipoProducto = Nothing,
                                    .composicion = Nothing,
                                    .productoRestringido = Nothing,
                                    .estado = "A"
                                    }
                Else
                    If o.Producto IsNot Nothing Then
                        producto_table = New detalleitems With
                                    {
                                    .codigodetalle = o.Producto.codigodetalle,
                                    .idItem = o.Producto.idItem,
                                    .idEmpresa = o.Producto.idEmpresa,
                                    .idEstablecimiento = o.Producto.idEstablecimiento,
                                    .descripcionItem = o.Producto.descripcionItem,
                                    .presentacion = o.Producto.presentacion,
                                    .unidad1 = o.Producto.unidad1,
                                    .unidad2 = o.Producto.unidad2,
                                    .tipoExistencia = o.Producto.tipoExistencia,
                                    .origenProducto = o.Producto.origenProducto,
                                    .tipoProducto = o.Producto.tipoProducto,
                                    .composicion = o.Producto.composicion,
                                    .productoRestringido = o.Producto.productoRestringido,
                                    .estado = o.Producto.estado
                                    }
                    Else
                        producto_table = Nothing
                    End If
                End If

                If o.catalogo IsNot Nothing Then
                    catalogo_table = New detalleitemequivalencia_catalogos With
                              {
                              .idCatalogo = o.catalogo.idCatalogo,
                              .codigodetalle = o.catalogo.codigodetalle,
                              .equivalencia_id = o.catalogo.equivalencia_id,
                              .nombre_corto = o.catalogo.nombre_corto,
                              .nombre_largo = o.catalogo.nombre_largo,
                              .predeterminado = o.catalogo.predeterminado,
                              .estado = o.catalogo.estado
                              }
                Else
                    catalogo_table = Nothing
                End If

                ListVenta.Add(New documentoventaAbarrotesDet With
                              {
                              .CustomEquivalencia = equivalencia_table,
                              .CustomProducto = producto_table,
                              .CustomCatalogo = catalogo_table,
                              .CodigoCosto = o.ventaDetail.secuencia,
                              .idDocumento = o.ventaDetail.idDocumento,
                              .equivalencia_id = If(o.equivalencia IsNot Nothing, o.equivalencia.equivalencia_id, 0),
                              .secuencia = o.ventaDetail.secuencia,
                              .idAlmacenOrigen = o.ventaDetail.idAlmacenOrigen,
                              .establecimientoOrigen = o.ventaDetail.establecimientoOrigen,
                              .cuentaOrigen = o.ventaDetail.cuentaOrigen,
                              .idItem = o.ventaDetail.idItem,
                              .nombreItem = o.ventaDetail.nombreItem,
                              .fechaVcto = o.ventaDetail.fechaVcto,
                              .tipoExistencia = o.ventaDetail.tipoExistencia,
                              .destino = o.ventaDetail.destino,
                              .unidad1 = o.ventaDetail.unidad1,
                              .monto1 = o.ventaDetail.monto1,
                              .unidad2 = o.ventaDetail.unidad2,
                              .monto2 = o.ventaDetail.monto2,
                              .precioUnitario = o.ventaDetail.precioUnitario,
                              .precioUnitarioUS = o.ventaDetail.precioUnitarioUS,
                              .importeMN = o.ventaDetail.importeMN,
                              .importeME = o.ventaDetail.importeME,
                              .importeMNK = o.ventaDetail.importeMNK,
                              .importeMEK = o.ventaDetail.importeMEK,
                              .descuentoMN = o.ventaDetail.descuentoMN,
                              .descuentoME = o.ventaDetail.descuentoME,
                              .montokardex = o.ventaDetail.montokardex,
                              .montoIsc = o.ventaDetail.montoIsc,
                              .montoIgv = o.ventaDetail.montoIgv,
                              .otrosTributos = o.ventaDetail.otrosTributos,
                              .montokardexUS = o.ventaDetail.montokardexUS,
                              .montoIscUS = o.ventaDetail.montoIscUS,
                              .montoIgvUS = o.ventaDetail.montoIgvUS,
                              .otrosTributosUS = o.ventaDetail.otrosTributosUS,
                              .salidaCostoMN = o.ventaDetail.salidaCostoMN,
                              .salidaCostoME = o.ventaDetail.salidaCostoME,
                              .cantidadCredito = o.ventaDetail.cantidadCredito,
                              .cantidadDebito = o.ventaDetail.cantidadDebito,
                              .notaCreditoMN = o.ventaDetail.notaCreditoMN,
                              .notaCreditoME = o.ventaDetail.notaCreditoME,
                              .notaDebitoMN = o.ventaDetail.notaDebitoMN,
                              .notaDebitoME = o.ventaDetail.notaDebitoME,
                              .preEvento = o.ventaDetail.preEvento,
                              .idPadreDTVenta = o.ventaDetail.idPadreDTVenta,
                              .estadoMovimiento = o.ventaDetail.estadoMovimiento,
                              .tipoVenta = o.ventaDetail.tipoVenta,
                              .entregado = o.ventaDetail.entregado,
                              .estadoPago = o.ventaDetail.estadoPago,
                              .categoria = o.ventaDetail.categoria,
                              .estadoEntrega = o.ventaDetail.estadoEntrega,
                              .idCajaUsuario = o.ventaDetail.idCajaUsuario,
                              .codigoLote = o.ventaDetail.codigoLote,
                              .idbeneficio = o.ventaDetail.idbeneficio,
                              .tipobeneficio = o.ventaDetail.tipobeneficio,
                              .beneficiobase = o.ventaDetail.beneficiobase,
                              .bonificacion = o.ventaDetail.bonificacion,
                              .estadoDistribucion = o.ventaDetail.estadoDistribucion,
                              .idDistribucion = o.ventaDetail.idDistribucion,
                              .usuarioModificacion = o.ventaDetail.usuarioModificacion,
                              .fechaModificacion = o.ventaDetail.fechaModificacion})
            Next

            objDocumento = New documentoventaAbarrotes With
                               {
                               .CustomEntidad = New entidad With
                                    {
                                    .idEntidad = i.cliente.idEntidad,
                                    .email = i.cliente.email,
                                    .nombreCompleto = i.cliente.nombreCompleto,
                                    .nrodoc = i.cliente.nrodoc,
                                    .tipoEntidad = i.cliente.tipoEntidad,
                                    .tipoDoc = i.cliente.tipoDoc,
                                    .direccion = i.cliente.direccion
                                },
                               .idDocumento = i.documentoventa.vent.idDocumento,
                               .tipoOperacion = i.documentoventa.vent.tipoOperacion,
                               .codigoLibro = i.documentoventa.vent.codigoLibro,
                               .idEmpresa = i.documentoventa.vent.idEmpresa,
                               .idEstablecimiento = i.documentoventa.vent.idEstablecimiento,
                               .tipoDocumento = i.documentoventa.vent.tipoDocumento,
                               .fechaLaboral = i.documentoventa.vent.fechaLaboral,
                               .fechaDoc = i.documentoventa.vent.fechaDoc,
                               .fechaVcto = i.documentoventa.vent.fechaVcto,
                               .horaVenta = i.documentoventa.vent.horaVenta,
                               .fechaConfirmacion = i.documentoventa.vent.fechaConfirmacion,
                               .fechaPeriodo = i.documentoventa.vent.fechaPeriodo,
                               .serie = i.documentoventa.vent.serie,
                               .numeroDoc = i.documentoventa.vent.numeroDoc,
                               .numeroDocNormal = i.documentoventa.vent.numeroDocNormal,
                               .serieVenta = i.documentoventa.vent.serieVenta,
                               .numeroVenta = i.documentoventa.vent.numeroVenta,
                               .idClientePedido = i.documentoventa.vent.idClientePedido,
                               .nombrePedido = i.documentoventa.vent.nombrePedido,
                               .idCliente = i.documentoventa.vent.idCliente,
                               .moneda = i.documentoventa.vent.moneda,
                               .tipoCambio = i.documentoventa.vent.tipoCambio,
                               .tasaIgv = i.documentoventa.vent.tasaIgv,
                               .bi01 = i.documentoventa.vent.bi01,
                               .bi02 = i.documentoventa.vent.bi02,
                               .isc01 = i.documentoventa.vent.isc01,
                               .isc02 = i.documentoventa.vent.isc02,
                               .igv01 = i.documentoventa.vent.igv01,
                               .igv02 = i.documentoventa.vent.igv02,
                               .otc01 = i.documentoventa.vent.otc01,
                               .otc02 = i.documentoventa.vent.otc02,
                               .bi01us = i.documentoventa.vent.bi01us,
                               .bi02us = i.documentoventa.vent.bi02us,
                               .isc01us = i.documentoventa.vent.isc01us,
                               .isc02us = i.documentoventa.vent.isc02us,
                               .igv01us = i.documentoventa.vent.igv01us,
                               .igv02us = i.documentoventa.vent.igv02us,
                               .otc01us = i.documentoventa.vent.otc01us,
                               .otc02us = i.documentoventa.vent.otc02us,
                               .ImporteNacional = i.documentoventa.vent.ImporteNacional,
                               .ImporteExtranjero = i.documentoventa.vent.ImporteExtranjero,
                               .importeCostoMN = i.documentoventa.vent.importeCostoMN,
                               .importeCostoME = i.documentoventa.vent.importeCostoME,
                               .estadoCobro = i.documentoventa.vent.estadoCobro,
                               .establecimientoCobro = i.documentoventa.vent.establecimientoCobro,
                               .entidadFinanciera = i.documentoventa.vent.entidadFinanciera,
                               .glosa = i.documentoventa.vent.glosa,
                               .terminos = i.documentoventa.vent.terminos,
                               .notaCredito = i.documentoventa.vent.notaCredito,
                               .tipoVenta = i.documentoventa.vent.tipoVenta,
                               .modulo = i.documentoventa.vent.modulo,
                               .idPadre = i.documentoventa.vent.idPadre,
                               .notificacionAsiento = i.documentoventa.vent.notificacionAsiento,
                               .estado = i.documentoventa.vent.estado,
                               .estadoEntrega = i.documentoventa.vent.estadoEntrega,
                               .nroImpresion = i.documentoventa.vent.nroImpresion,
                               .usuarioActualizacion = i.documentoventa.vent.usuarioActualizacion,
                               .fechaActualizacion = i.documentoventa.vent.fechaActualizacion,
                               .EnvioSunat = i.documentoventa.vent.EnvioSunat,
                              .ticketElectronico = i.documentoventa.vent.ticketElectronico,
                               .numeracionElectronica = i.documentoventa.vent.numeracionElectronica,
                               .documentoventaAbarrotesDet = ListVenta
                               }

            GetListaVentaID.Add(objDocumento)
        Next

        '  Dim result = warmCountries.Join(europeanCountries, Function(warm) warm, Function(european) european, Function(warm, european) warm)

    End Function

    Public Function GrabarVentaEquivalenciaXListaDoc(be As List(Of documento)) As documento
        Dim documentoBL As New documentoBL
        Dim ocupacionInfraBL As New ocupacionInfraestructuraBL
        Dim personabeneficioBL As New personaBeneficioBL
        Dim documentoDetBL As New documentoPedidoDetBL
        Dim distribucionInfraestructurabl As New distribucionInfraestructuraBL
        Dim distribucionInfraestructuraBE As New distribucionInfraestructura

        Try

            Using ts As New TransactionScope
                'If ValidacionCierreMensual(be) Then

                If (be.Count > 0) Then
                    For Each document In be
                        RegistrarVentaV2(document)

                        If (Not IsNothing(document.documentoventaAbarrotes.ListaEstado)) Then
                            If (document.documentoventaAbarrotes.ListaEstado.Count > 0) Then
                                documentoDetBL.EditarEstadoXDocumento(document.documentoventaAbarrotes.ListaEstado)
                            End If
                        End If

                        ActualizarEstadoPreVentaFull(document)

                        HeliosData.SaveChanges()
                    Next

                    distribucionInfraestructuraBE.idEmpresa = be(0).documentoventaAbarrotes.idEmpresa
                    distribucionInfraestructuraBE.idDistribucion = be(0).documentoventaAbarrotes.documentoventaAbarrotesDet(0).idDistribucion
                    distribucionInfraestructuraBE.estado = "P"
                    distribucionInfraestructurabl.updateDistribucionxID(distribucionInfraestructuraBE)

                End If

                'End If

                ts.Complete()

            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return Nothing
    End Function

    Public Function GetListarAllVentasPeriodoPendienteInfra(intIdEstablec As Integer, strPeriodo As String, listaIdDistribucion As List(Of String)) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)

        Dim objRecurso As New documentoventaAbarrotes
        'Dim consulta = (From doc In HeliosData.documento
        '                Join compra In HeliosData.documentoventaAbarrotes
        '               On doc.idDocumento Equals compra.idDocumento
        '                Join compradet In HeliosData.documentoventaAbarrotesDet
        '               On compra.idDocumento Equals compradet.idDocumento
        '                Group Join entidad In HeliosData.entidad
        '               On compra.idCliente Equals entidad.idEntidad
        '               Into ords = Group
        '                From e In ords.DefaultIfEmpty
        '                Where doc.idCentroCosto = intIdEstablec And
        '               compra.fechaPeriodo = strPeriodo And (compra.tipoVenta) = "VNP" _
        '               And compra.estadoCobro = "PN" And
        '                    compradet.idDistribucion = idDistribucion
        '                Order By compra.fechaDoc Ascending).ToList

        'det.documentoventaAbarrotes.tipoVenta = "VNP" And
        '                    CLng(det.documentoventaAbarrotes.idCliente) = idDistribucion And
        '                    det.documentoventaAbarrotes.estadoCobro = "PN" And
        '                    det.estadoDistribucion = "A"

        Dim CONSULTA = (From det In HeliosData.documentoventaAbarrotesDet
                        Join ent In HeliosData.entidad On CType(CInt(det.documentoventaAbarrotes.idCliente), Int32?) Equals ent.idEntidad
                        Where
                            det.documentoventaAbarrotes.tipoVenta = "VNP" And
                           listaIdDistribucion.Contains(det.idDistribucion) And
                            det.documentoventaAbarrotes.estadoCobro = "PN" And
                            det.estadoDistribucion = "A"
                        Group New With {ent, det.documentoventaAbarrotes} By
                            ent.idEntidad,
                            ent.nombreCompleto,
                            ent.nrodoc,
                               ent.tipoPersona,
                               ent.tipoDoc,
                            ImporteNacional = CType(det.documentoventaAbarrotes.ImporteNacional, Decimal?),
                            TipoCambio = CType(det.documentoventaAbarrotes.tipoCambio, Decimal?),
                            ImporteExtranjero = CType(det.documentoventaAbarrotes.ImporteExtranjero, Decimal?),
                            det.documentoventaAbarrotes.notaCredito,
                            det.documentoventaAbarrotes.estadoEntrega,
                            det.documentoventaAbarrotes.moneda,
                            det.documentoventaAbarrotes.usuarioActualizacion,
                            det.documentoventaAbarrotes.serie,
                            det.documentoventaAbarrotes.serieVenta,
                                  det.documentoventaAbarrotes.numeroVenta,
                            det.documentoventaAbarrotes.numeroDoc,
                             det.documentoventaAbarrotes.estadoCobro,
                             det.documentoventaAbarrotes.tipoVenta,
                            det.documentoventaAbarrotes.tipoDocumento,
                             det.documentoventaAbarrotes.nombrePedido,
                            Column1 = det.documentoventaAbarrotes.numeroDoc,
                            det.documentoventaAbarrotes.tipoOperacion,
                            FechaDoc = CType(det.documentoventaAbarrotes.fechaDoc, DateTime?),
                            det.documentoventaAbarrotes.idDocumento
                            Into g = Group
                        Select
                            idEntidad,
                            nombreCompleto,
                            nrodoc,
                            tipoPersona,
                            tipoDoc,
                            ImporteNacional = CType(ImporteNacional, Decimal?),
                            tipoCambio = CType(TipoCambio, Decimal?),
                            ImporteExtranjero = CType(ImporteExtranjero, Decimal?),
                            notaCredito,
                            estadoEntrega,
                            moneda,
                            tipoDocumento,
                            usuarioActualizacion,
                            serie,
                            estadoCobro,
                            tipoVenta,
                            nombrePedido,
                            serieVenta,
                                 numeroVenta,
                            numeroDoc,
                            Column1 = numeroDoc,
                            tipoOperacion,
                            FechaDoc = CType(FechaDoc, DateTime?),
                            idDocumento).ToList


        'Dim consulta = (From doc In HeliosData.documento
        '                Join compra In HeliosData.documentoventaAbarrotes
        '               On doc.idDocumento Equals compra.idDocumento
        '                Group Join entidad In HeliosData.entidad
        '               On compra.idCliente Equals entidad.idEntidad
        '               Into ords = Group
        '                From e In ords.DefaultIfEmpty
        '                Where doc.idCentroCosto = intIdEstablec And
        '               compra.fechaPeriodo = strPeriodo And (compra.tipoVenta) = TIPO_VENTA.NOTA_DE_VENTA _
        '               And compra.estadoCobro = "PN"
        '                Order By compra.fechaDoc Ascending).ToList

        For Each obj In CONSULTA
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.idDocumento
            objRecurso.tipoOperacion = obj.tipoOperacion
            objRecurso.fechaDoc = obj.FechaDoc
            objRecurso.tipoDocumento = obj.tipoDocumento
            objRecurso.serie = obj.serie
            objRecurso.numeroDoc = obj.numeroDoc
            objRecurso.serieVenta = obj.serieVenta
            objRecurso.numeroVenta = obj.numeroVenta
            objRecurso.numeroDocNormal = obj.Column1
            objRecurso.nombrePedido = obj.nombrePedido

            If Not IsNothing(obj.idEntidad) Then
                objRecurso.idCliente = obj.idEntidad
                objRecurso.tipoDocEntidad = obj.tipoDoc
                objRecurso.NroDocEntidad = obj.nrodoc
                objRecurso.NombreEntidad = obj.nombreCompleto
                objRecurso.TipoPersona = obj.tipoPersona
            Else
                objRecurso.idCliente = 0
                objRecurso.tipoDocEntidad = String.Empty
                objRecurso.NroDocEntidad = String.Empty
                objRecurso.NombreEntidad = String.Empty
                objRecurso.TipoPersona = String.Empty
            End If

            objRecurso.ImporteNacional = obj.ImporteNacional
            objRecurso.tipoCambio = obj.tipoCambio
            objRecurso.ImporteExtranjero = obj.ImporteExtranjero
            objRecurso.moneda = obj.moneda
            objRecurso.estadoCobro = obj.estadoCobro
            objRecurso.tipoVenta = obj.tipoVenta
            objRecurso.notaCredito = obj.notaCredito
            objRecurso.usuarioActualizacion = obj.usuarioActualizacion
            objRecurso.estadoEntrega = obj.estadoEntrega
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Private Sub ActualizarEstadoPreVentaFull(be As documento)
        Using ts As New TransactionScope
            Dim DocuemntoPedido As New documentoPedidoDetBL

            If be.TipoEnvio = "PREVENTA" Then
                If (Not IsNothing(be.documentoventaAbarrotes.ListaEstado)) Then
                    If (be.documentoventaAbarrotes.ListaEstado.Count > 0) Then
                        For Each item In be.documentoventaAbarrotes.ListaEstado
                            Dim codigoPedido = item
                            Dim pedido = HeliosData.documentoventaAbarrotes.Where(Function(o) o.idDocumento = codigoPedido).SingleOrDefault
                            If pedido IsNot Nothing Then
                                pedido.tipoVenta = "VNPE"

                                HeliosData.SaveChanges()
                            End If
                        Next

                        'DocuemntoPedido.EditarEstadoXDocumento(be.documentoventaAbarrotes.ListaEstado)
                    End If
                End If
            End If

            ts.Complete()
        End Using
    End Sub

    Public Function GetListarAllVentasXIdDistribucion(distribucionBE As distribucionInfraestructura) As List(Of documentoventaAbarrotes)
        Dim conteo As Integer = 1
        Dim objRecurso As New documentoventaAbarrotes
        Dim lista As New List(Of documentoventaAbarrotes)

        Dim consulta = (From b In HeliosData.documentoventaAbarrotesDet
                        Where
                            b.estadoDistribucion = distribucionBE.estado And
                            CLng(b.idDistribucion) = distribucionBE.idDistribucion
                        Group b.documentoventaAbarrotes By
                            b.documentoventaAbarrotes.idDocumento,
                            b.documentoventaAbarrotes.usuarioActualizacion
                            Into g = Group
                        Select
                            idDocumento,
                            usuarioActualizacion).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.idDocumento
            objRecurso.usuarioActualizacion = obj.usuarioActualizacion
            objRecurso.preVenta = conteo

            conteo += 1

            lista.Add(objRecurso)
        Next

        Return lista
    End Function

    Public Function GetImprimirPedido(distribucionBE As documento) As List(Of documentoventaAbarrotesDet)
        Dim conteo As Integer = 1
        Dim objRecurso As New documentoventaAbarrotesDet
        Dim lista As New List(Of documentoventaAbarrotesDet)
        Dim detalleConexoBE As detalleitems_conexo
        Dim detalleConexoLista As New List(Of detalleitems_conexo)


        Dim consulta = (From DET In HeliosData.documentoventaAbarrotesDet
                        Where
                            CLng(DET.idDocumento) = distribucionBE.idDocumento).ToList

        For Each obj In consulta.Where(Function(o) o.tipoVenta <> "KIT").ToList
            detalleConexoLista = New List(Of detalleitems_conexo)
            For Each conexo In consulta.Where(Function(o) o.tipoVenta = "KIT" And o.idPadre = obj.idItem).ToList

                detalleConexoBE = New detalleitems_conexo
                detalleConexoBE.conexo_id = conexo.idItem
                detalleConexoBE.detalle = conexo.nombreItem
                detalleConexoBE.cantidad = conexo.monto1
                detalleConexoBE.idProducto = conexo.idPadre
                detalleConexoBE.tipo = conexo.tipoVenta
                detalleConexoBE.usuarioActualizacion = conexo.detalleAdicional
                detalleConexoLista.Add(detalleConexoBE)
            Next

            objRecurso = New documentoventaAbarrotesDet
            objRecurso.monto1 = obj.monto1
            objRecurso.usuarioModificacion = obj.usuarioModificacion
            objRecurso.nombreItem = obj.nombreItem
            objRecurso.idItem = obj.idItem
            objRecurso.idPadre = obj.idPadre
            objRecurso.tipoVenta = obj.tipoVenta
            objRecurso.detalleAdicional = obj.detalleAdicional
            objRecurso.listaConexos = detalleConexoLista


            lista.Add(objRecurso)
        Next
        Return lista
    End Function

    Public Function GetImprimirPrecuenta(distribucionBE As documento) As List(Of documentoventaAbarrotesDet)
        Dim conteo As Integer = 1
        Dim objRecurso As New documentoventaAbarrotesDet
        Dim lista As New List(Of documentoventaAbarrotesDet)
        Dim detalleConexoBE As detalleitems_conexo
        Dim detalleConexoLista As New List(Of detalleitems_conexo)
        'Dim consulta = (From DET In HeliosData.documentoventaAbarrotesDet
        '                Where
        '                    CLng(DET.idDistribucion) = distribucionBE.idDocumento And
        '                    DET.estadoDistribucion = distribucionBE.entidad
        '                Group DET By
        '                    DET.monto1,
        '                    DET.nombreItem,
        '                    DET.tipoVenta,
        '                    DET.usuarioModificacion,
        '                    DET.idPadre,
        '                    DET.idItem,
        '                    DET.detalleAdicional,
        '                    DET.importeMN
        '                    Into g = Group
        '                Select
        '                    CANTIDAD = CType(g.Count(Function(p) p.monto1 <> Nothing), Int64?),
        '                    nombreItem,
        '                    tipoVenta,
        '                    usuarioModificacion,
        '                    idPadre,
        '                    idItem,
        '                    detalleAdicional,
        '                    importeMN).ToList

        Dim consulta = (From DET In HeliosData.documentoventaAbarrotesDet
                        Where
                            CLng(DET.idDistribucion) = distribucionBE.idDocumento And
                            DET.estadoDistribucion = distribucionBE.entidad).ToList

        For Each obj In consulta.Where(Function(o) o.tipoVenta <> "KIT").ToList
            detalleConexoLista = New List(Of detalleitems_conexo)
            For Each conexo In consulta.Where(Function(o) o.tipoVenta = "KIT" And o.idPadre = obj.idItem).ToList

                detalleConexoBE = New detalleitems_conexo
                detalleConexoBE.conexo_id = conexo.idItem
                detalleConexoBE.detalle = conexo.nombreItem
                detalleConexoBE.cantidad = conexo.monto1
                detalleConexoBE.idProducto = conexo.idPadre
                detalleConexoBE.tipo = conexo.tipoVenta
                detalleConexoBE.usuarioActualizacion = conexo.detalleAdicional
                detalleConexoLista.Add(detalleConexoBE)
            Next

            objRecurso = New documentoventaAbarrotesDet
            objRecurso.importeMN = obj.importeMN
            objRecurso.monto1 = obj.monto1
            objRecurso.usuarioModificacion = obj.usuarioModificacion
            objRecurso.nombreItem = obj.nombreItem
            objRecurso.idItem = obj.idItem
            objRecurso.idPadre = obj.idPadre
            objRecurso.tipoVenta = obj.tipoVenta
            objRecurso.detalleAdicional = obj.detalleAdicional
            objRecurso.listaConexos = detalleConexoLista


            lista.Add(objRecurso)
        Next
        Return lista
    End Function

    Public Function ListaClienteActivo(i As entidad) As List(Of documentoventaAbarrotes)
        Try
            Dim listaDocumento As New List(Of documentoventaAbarrotes)
            Dim documentoBE As documentoventaAbarrotes

            Dim consulta = (From docdet In HeliosData.documentoventaAbarrotesDet
                            Join ENT In HeliosData.entidad On CType(CInt(docdet.documentoventaAbarrotes.idCliente), Int32?) Equals ENT.idEntidad
                            Where
                                docdet.estadoDistribucion = "A" And
                                docdet.tipoExistencia = "IF"
                            Group New With {ENT, docdet.documentoventaAbarrotes, docdet} By
                                ENT.idEntidad,
                                ENT.tipoEntidad,
                                ENT.tipoPersona,
                                ENT.tipoDoc,
                                ENT.nrodoc,
                                ENT.nombreCompleto,
                                docdet.documentoventaAbarrotes.idDocumento,
                                docdet.estadoDistribucion
                                Into g = Group
                            Select
                                idEntidad,
                                tipoEntidad,
                                tipoPersona,
                                tipoDoc,
                                nrodoc,
                                nombreCompleto,
                                estadoDistribucion,
                                nroHospedados = (CType((Aggregate t1 In
                                                  (From per In HeliosData.personaBeneficio
                                                   Where
                                                       per.idDocumento = idDocumento
                                                   Select New With {
                                                       per.idPersonaBeneficio
                                                       }) Into Count()), Int64?)),
                                nroHabitaciones = (CType((Aggregate t1 In
                                                (From det In HeliosData.documentoventaAbarrotesDet
                                                 Where
                                                     det.idDocumento = idDocumento And
                                                     det.tipoExistencia = "IF"
                                                 Select New With {
                                                     det.idDocumento
                                                     }) Into Count()), Int64?))).ToList

            For Each ITEM In consulta
                documentoBE = New documentoventaAbarrotes
                documentoBE.idCliente = ITEM.idEntidad
                documentoBE.numeroDocNormal = ITEM.nrodoc
                documentoBE.nombreCliente = ITEM.nombreCompleto
                documentoBE.tipoDocEntidad = ITEM.tipoEntidad
                documentoBE.estado = ITEM.estadoDistribucion
                documentoBE.nroImpresion = ITEM.nroHospedados
                documentoBE.nroOrdenVenta = ITEM.nroHabitaciones
                listaDocumento.Add(documentoBE)
            Next

            Return listaDocumento

        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GrabarVentaEquivalenciaXInfra(be As documento) As documento
        Dim documentoBL As New documentoBL
        Dim ocupacionInfraBL As New ocupacionInfraestructuraBL
        Dim personabeneficioBL As New personaBeneficioBL
        Dim documentoDetBL As New documentoPedidoDetBL
        Dim EscajaActiva As Boolean
        Try
            Using ts As New TransactionScope
                If ValidacionCierreMensual(be) Then

                    If (be.documentoventaAbarrotes.tipoDocumento <> "1000") Then
                        Dim usuarioIDCaja = be.IDCajaUsuario
                        EscajaActiva = HeliosData.cajaUsuario.Any(Function(o) o.idcajaUsuario = usuarioIDCaja And o.estadoCaja = "A")
                    Else
                        EscajaActiva = False
                    End If

                    'Validando Registro de venta
                    ValidarVentaElectronica(be.documentoventaAbarrotes.idCliente, be.documentoventaAbarrotes.tipoDocumento)

                    Dim afectoInventario = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Any(Function(o) o.AfectoInventario = True)

                    RegistrarVentaV2(be)

                    If (Not IsNothing(be.documentoventaAbarrotes.ListaEstado)) Then
                        If ((be.documentoventaAbarrotes.ListaEstado.Count > 0)) Then
                            documentoDetBL.EditarEstadoXDocumento(be.documentoventaAbarrotes.ListaEstado)
                        End If
                    End If
                    'If (Not IsNothing(be.personaBeneficio)) Then
                    '    personabeneficioBL.SavePersonaBeneficio(be.personaBeneficio, be.idDocumento)
                    'End If

                    'If (Not IsNothing(be.ocupacionInfra)) Then
                    '    ocupacionInfraBL.SaveOcupacionInfraestructura(be.ocupacionInfra)
                    'End If

                    ' If be.AfectaInventario = True Then
                    If afectoInventario = True Then
                        RegistrarEnInventario(be)
                    End If
                    ' End If



                    If EscajaActiva Then
                        RegistrarPagos(be)
                    Else
                        If (be.documentoventaAbarrotes.tipoDocumento <> "1000") Then
                            Throw New Exception("El usuario no tiene una caja activa!")
                        End If
                    End If
                    'ActualizarEstadoPreVenta(be)
                    ActualizarEstadoPreVentaFull(be)
                    ' If be.AfectaInventario = True Then
                    If afectoInventario Then
                        ActualizarInventario(be)
                    End If


                End If
                HeliosData.SaveChanges()
                ts.Complete()
                be = LimpiarEntidades(be)
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return be
    End Function

    Public Function GrabarVentaEquivalenciaXInfraMasivo(be As documento) As documento
        Dim documentoBL As New documentoBL
        Dim ocupacionInfraBL As New ocupacionInfraestructuraBL
        Dim personabeneficioBL As New personaBeneficioBL
        Try
            Using ts As New TransactionScope
                If ValidacionCierreMensual(be) Then
                    'Validando Registro de venta
                    ValidarVentaElectronica(be.documentoventaAbarrotes.idCliente, be.documentoventaAbarrotes.tipoDocumento)

                    Dim afectoInventario = be.documentoventaAbarrotes.documentoventaAbarrotesDet.Any(Function(o) o.AfectoInventario = True)

                    RegistrarVentaV2(be)

                    'If (Not IsNothing(be.personaBeneficio)) Then
                    '    personabeneficioBL.SavePersonaBeneficio(be.personaBeneficio, be.idDocumento)
                    'End If

                    'If (Not IsNothing(be.ocupacionInfra)) Then
                    '    ocupacionInfraBL.SaveOcupacionInfraestructura(be.ocupacionInfra)
                    'End If

                    ' If be.AfectaInventario = True Then
                    If afectoInventario = True Then
                        RegistrarEnInventario(be)
                    End If
                    ' End If
                    RegistrarPagos(be)
                    'ActualizarEstadoPreVenta(be)
                    ActualizarEstadoPreVentaFull(be)
                    ' If be.AfectaInventario = True Then
                    If afectoInventario Then
                        ActualizarInventario(be)
                    End If
                End If
                HeliosData.SaveChanges()
                ts.Complete()
                be = LimpiarEntidades(be)
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return be
    End Function

    Public Function GrabarVentaEquivalenciaXPedido(be As documento) As documento
        Dim documentoBL As New documentoBL
        Dim ocupacionInfraBL As New ocupacionInfraestructuraBL
        Dim personabeneficioBL As New personaBeneficioBL
        Try
            Using ts As New TransactionScope
                If ValidacionCierreMensualPedido(be) Then

                    RegistrarVentaV2(be)

                End If
                HeliosData.SaveChanges()
                ts.Complete()
                be = LimpiarEntidades(be)
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return be
    End Function

    Private Function ValidacionCierreMensualPedido(be As documento) As Boolean
        ValidacionCierreMensualPedido = True

        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim codDoc As Integer = 0
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL


        Dim fechaActual = New Date(be.documentoPedido.fechaDoc.Value.Year, be.documentoPedido.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(be.idEmpresa, fechaActual, be.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                ValidacionCierreMensualPedido = False
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = be.idEmpresa,
                                                .idCentroCosto = be.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                ValidacionCierreMensualPedido = False
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            ValidacionCierreMensualPedido = False
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                ValidacionCierreMensualPedido = False
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If
    End Function

    Public Function GetListaPedidosXCliente(documentoVentaBE As documentoventaAbarrotes) As List(Of documentoventaAbarrotes)
        Dim Lista As New List(Of documentoventaAbarrotes)
        Dim objRecurso As New documentoventaAbarrotes
        Dim num As Integer = 1
        Dim consulta = (From det In HeliosData.documentoventaAbarrotesDet
                        Join dis In HeliosData.distribucionInfraestructura On CInt(det.idDistribucion) Equals dis.idDistribucion
                        Where
                            documentoVentaBE.ListaEstado.Contains(det.idDistribucion) And
                            det.estadoDistribucion = documentoVentaBE.estado
                        Group New With {det, dis} By
                            det.estadoPago,
                            det.estadoEntrega,
                            det.idDocumento,
                            dis.numeracion
                            Into g = Group
                        Select
        importeSoles = (CType((Aggregate t1 In
                      (From sumaVenta In HeliosData.documentoventaAbarrotesDet
                       Where
                           (documentoVentaBE.ListaEstado.Contains(sumaVenta.idDistribucion)) And
                          sumaVenta.idDocumento = idDocumento And
                           (sumaVenta.estadoDistribucion) = documentoVentaBE.estado
                       Select New With {
                           sumaVenta.importeMN
                           }) Into Sum(t1.importeMN)), Decimal?)),
                            estadoPago,
                            estadoEntrega,
                            idDocumento,
                            numeracion).ToList

        For Each obj In consulta
            objRecurso = New documentoventaAbarrotes

            objRecurso.idDocumento = obj.idDocumento
            objRecurso.ImporteNacional = obj.importeSoles
            objRecurso.usuarioActualizacion = "PEDIDO " & num
            objRecurso.estadoEntrega = obj.estadoEntrega
            objRecurso.estadoCobro = obj.estadoPago
            objRecurso.EnvioSunat = obj.numeracion

            Lista.Add(objRecurso)
            num += 1
        Next

        Return Lista
    End Function

    Public Sub EditarPersonaBeneficio(i As ocupacionInfraestructura)
        Try
            Using ts As New TransactionScope
                Dim consulta = (HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.estadoDistribucion = "A" And i.listaId.Contains(o.idDistribucion))).ToList
                For Each ITEM In consulta
                    ITEM.estadoDistribucion = "C"
                    HeliosData.SaveChanges()
                Next
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

#End Region

End Class
