Imports Helios.Cont.Business.Entity
Imports System.Transactions
Imports Helios.General.Constantes
Imports Helios.Cont.Data.EF
Imports System.Data.Entity.DbFunctions
Public Class documentocompraBL
    Inherits BaseBL

#Region "DEPURADO"
    Public Function GetListarComprasPorDia_CONT_CONTADO(documentocompraBE As documentocompra, Optional UsuarioCaja As String = Nothing) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        Select Case documentocompraBE.tipoConsulta
            Case "EMPRESA"

                If Not IsNothing(UsuarioCaja) Then

                    Dim consulta = (From doc In HeliosData.documento
                                    Join compra In HeliosData.documentocompra
                           On doc.idDocumento Equals compra.idDocumento
                                    Join entidad In HeliosData.entidad
                           On compra.idProveedor Equals entidad.idEntidad
                                    Where compra.fechaDoc.Value.Day = DateTime.Now.Day And
                            compra.fechaDoc.Value.Month = DateTime.Now.Month And
                            compra.fechaDoc.Value.Year = DateTime.Now.Year And compra.usuarioActualizacion = UsuarioCaja _
                           And compra.idEmpresa = documentocompraBE.idEmpresa _
                           And listaTipoCompra.Contains(compra.tipoCompra) _
                           And listaTipoSituacion.Contains(compra.situacion)
                                    Order By compra.fechaDoc Ascending).ToList

                    For Each obj In consulta
                        objRecurso = New documentocompra
                        objRecurso.fechaContable = obj.compra.fechaContable
                        objRecurso.periodoTributo = obj.compra.periodoTributo
                        objRecurso.idDocumento = obj.compra.idDocumento
                        objRecurso.tipoCompra = obj.compra.tipoCompra
                        objRecurso.tipoOperacion = obj.doc.tipoOperacion
                        objRecurso.fechaDoc = obj.compra.fechaDoc
                        objRecurso.tipoDoc = obj.compra.tipoDoc
                        objRecurso.serie = obj.compra.serie
                        objRecurso.numeroDoc = obj.compra.numeroDoc
                        objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                        objRecurso.NroDocEntidad = obj.entidad.nrodoc
                        objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                        objRecurso.TipoPersona = obj.entidad.tipoPersona
                        objRecurso.importeTotal = obj.compra.importeTotal
                        objRecurso.tcDolLoc = obj.compra.tcDolLoc
                        objRecurso.importeUS = obj.compra.importeUS
                        objRecurso.monedaDoc = obj.compra.monedaDoc
                        objRecurso.estadoPago = obj.compra.estadoPago
                        objRecurso.idPadre = obj.compra.idPadre
                        objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                        objRecurso.situacion = obj.compra.situacion
                        objRecurso.aprobado = obj.compra.aprobado
                        Lista.Add(objRecurso)
                    Next
                Else


                    Dim consulta = (From doc In HeliosData.documento
                                    Join compra In HeliosData.documentocompra
                           On doc.idDocumento Equals compra.idDocumento
                                    Join entidad In HeliosData.entidad
                           On compra.idProveedor Equals entidad.idEntidad
                                    Where compra.fechaDoc.Value.Day = DateTime.Now.Day And
                            compra.fechaDoc.Value.Month = DateTime.Now.Month And
                            compra.fechaDoc.Value.Year = DateTime.Now.Year _
                           And compra.idEmpresa = documentocompraBE.idEmpresa _
                           And listaTipoCompra.Contains(compra.tipoCompra) _
                           And listaTipoSituacion.Contains(compra.situacion)
                                    Order By compra.fechaDoc Ascending).ToList

                    For Each obj In consulta
                        objRecurso = New documentocompra
                        objRecurso.fechaContable = obj.compra.fechaContable
                        objRecurso.periodoTributo = obj.compra.periodoTributo
                        objRecurso.idDocumento = obj.compra.idDocumento
                        objRecurso.tipoCompra = obj.compra.tipoCompra
                        objRecurso.tipoOperacion = obj.doc.tipoOperacion
                        objRecurso.fechaDoc = obj.compra.fechaDoc
                        objRecurso.tipoDoc = obj.compra.tipoDoc
                        objRecurso.serie = obj.compra.serie
                        objRecurso.numeroDoc = obj.compra.numeroDoc
                        objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                        objRecurso.NroDocEntidad = obj.entidad.nrodoc
                        objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                        objRecurso.TipoPersona = obj.entidad.tipoPersona
                        objRecurso.importeTotal = obj.compra.importeTotal
                        objRecurso.tcDolLoc = obj.compra.tcDolLoc
                        objRecurso.importeUS = obj.compra.importeUS
                        objRecurso.monedaDoc = obj.compra.monedaDoc
                        objRecurso.estadoPago = obj.compra.estadoPago
                        objRecurso.idPadre = obj.compra.idPadre
                        objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                        objRecurso.situacion = obj.compra.situacion
                        Lista.Add(objRecurso)
                    Next
                End If

            Case "UNIDAD_ORGANICA"

                If Not IsNothing(UsuarioCaja) Then

                    Dim consulta = (From doc In HeliosData.documento
                                    Join compra In HeliosData.documentocompra
                           On doc.idDocumento Equals compra.idDocumento
                                    Join entidad In HeliosData.entidad
                           On compra.idProveedor Equals entidad.idEntidad
                                    Where compra.fechaDoc.Value.Day = DateTime.Now.Day And
                            compra.fechaDoc.Value.Month = DateTime.Now.Month And
                            compra.fechaDoc.Value.Year = DateTime.Now.Year And compra.usuarioActualizacion = UsuarioCaja _
                                        And compra.idEmpresa = documentocompraBE.idEmpresa _
                           And compra.idCentroCosto = documentocompraBE.idCentroCosto _
                           And listaTipoCompra.Contains(compra.tipoCompra) _
                           And listaTipoSituacion.Contains(compra.situacion)
                                    Order By compra.fechaDoc Ascending).ToList

                    For Each obj In consulta
                        objRecurso = New documentocompra
                        objRecurso.fechaContable = obj.compra.fechaContable
                        objRecurso.periodoTributo = obj.compra.periodoTributo
                        objRecurso.idDocumento = obj.compra.idDocumento
                        objRecurso.tipoCompra = obj.compra.tipoCompra
                        objRecurso.tipoOperacion = obj.doc.tipoOperacion
                        objRecurso.fechaDoc = obj.compra.fechaDoc
                        objRecurso.tipoDoc = obj.compra.tipoDoc
                        objRecurso.serie = obj.compra.serie
                        objRecurso.numeroDoc = obj.compra.numeroDoc
                        objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                        objRecurso.NroDocEntidad = obj.entidad.nrodoc
                        objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                        objRecurso.TipoPersona = obj.entidad.tipoPersona
                        objRecurso.importeTotal = obj.compra.importeTotal
                        objRecurso.tcDolLoc = obj.compra.tcDolLoc
                        objRecurso.importeUS = obj.compra.importeUS
                        objRecurso.monedaDoc = obj.compra.monedaDoc
                        objRecurso.estadoPago = obj.compra.estadoPago
                        objRecurso.idPadre = obj.compra.idPadre
                        objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                        objRecurso.situacion = obj.compra.situacion
                        objRecurso.aprobado = obj.compra.aprobado
                        Lista.Add(objRecurso)
                    Next
                Else


                    Dim consulta = (From doc In HeliosData.documento
                                    Join compra In HeliosData.documentocompra
                           On doc.idDocumento Equals compra.idDocumento
                                    Join entidad In HeliosData.entidad
                           On compra.idProveedor Equals entidad.idEntidad
                                    Where compra.fechaDoc.Value.Day = DateTime.Now.Day And
                            compra.fechaDoc.Value.Month = DateTime.Now.Month And
                            compra.fechaDoc.Value.Year = DateTime.Now.Year _
                             And compra.idEmpresa = documentocompraBE.idEmpresa _
                           And compra.idCentroCosto = documentocompraBE.idCentroCosto _
                           And listaTipoCompra.Contains(compra.tipoCompra) _
                           And listaTipoSituacion.Contains(compra.situacion)
                                    Order By compra.fechaDoc Ascending).ToList

                    For Each obj In consulta
                        objRecurso = New documentocompra
                        objRecurso.fechaContable = obj.compra.fechaContable
                        objRecurso.periodoTributo = obj.compra.periodoTributo
                        objRecurso.idDocumento = obj.compra.idDocumento
                        objRecurso.tipoCompra = obj.compra.tipoCompra
                        objRecurso.tipoOperacion = obj.doc.tipoOperacion
                        objRecurso.fechaDoc = obj.compra.fechaDoc
                        objRecurso.tipoDoc = obj.compra.tipoDoc
                        objRecurso.serie = obj.compra.serie
                        objRecurso.numeroDoc = obj.compra.numeroDoc
                        objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                        objRecurso.NroDocEntidad = obj.entidad.nrodoc
                        objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                        objRecurso.TipoPersona = obj.entidad.tipoPersona
                        objRecurso.importeTotal = obj.compra.importeTotal
                        objRecurso.tcDolLoc = obj.compra.tcDolLoc
                        objRecurso.importeUS = obj.compra.importeUS
                        objRecurso.monedaDoc = obj.compra.monedaDoc
                        objRecurso.estadoPago = obj.compra.estadoPago
                        objRecurso.idPadre = obj.compra.idPadre
                        objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                        objRecurso.situacion = obj.compra.situacion
                        Lista.Add(objRecurso)
                    Next
                End If

        End Select

        Return Lista
    End Function

    Public Function GetListarComprasPorDia_CONT(documentocompraBE As documentocompra) As List(Of documentocompra)

        'intIdEstablecimiento As Integer, fechaLaboral As Date

        Dim Lista As New List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaTipoCompra.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_PAGADA)

        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        'If IsNothing(UsuarioCaja) 
        '            Order By compra.fechaDoc
        'por ejemplo junio-2017
        'compras normales sin detraccion

        Select Case documentocompraBE.tipoConsulta
            Case "EMPRESA"
                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
                                    On doc.idDocumento Equals compra.idDocumento
                                Join entidad In HeliosData.entidad
                                    On compra.idProveedor Equals entidad.idEntidad
                                Where
                                    compra.fechaDoc.Value.Year = documentocompraBE.fechaDoc.Value.Year And
                                    compra.fechaDoc.Value.Month = documentocompraBE.fechaDoc.Value.Month And
                                    compra.fechaDoc.Value.Day = documentocompraBE.fechaDoc.Value.Day _
                                    And compra.idEmpresa = documentocompraBE.idEmpresa _
                                    And listaTipoCompra.Contains(compra.tipoCompra) _
                                    And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                    objRecurso.NroDocEntidad = obj.entidad.nrodoc
                    objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                    objRecurso.TipoPersona = obj.entidad.tipoPersona
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    Select Case obj.compra.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.compra.importeTotal * -1
                            objRecurso.importeUS = obj.compra.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    objRecurso.aprobado = obj.compra.aprobado
                    objRecurso.tieneDetraccion = obj.compra.tieneDetraccion

                    Lista.Add(objRecurso)
                Next
            Case "UNIDAD_ORGANICA"
                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
                                    On doc.idDocumento Equals compra.idDocumento
                                Join entidad In HeliosData.entidad
                                    On compra.idProveedor Equals entidad.idEntidad
                                Where
                                        compra.fechaDoc.Value.Year = documentocompraBE.fechaDoc.Value.Year And
                                    compra.fechaDoc.Value.Month = documentocompraBE.fechaDoc.Value.Month And
                                    compra.fechaDoc.Value.Day = documentocompraBE.fechaDoc.Value.Day _
                                    And compra.idEmpresa = documentocompraBE.idEmpresa _
                                    And compra.idCentroCosto = documentocompraBE.idCentroCosto _
                                    And listaTipoCompra.Contains(compra.tipoCompra) _
                                    And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                    objRecurso.NroDocEntidad = obj.entidad.nrodoc
                    objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                    objRecurso.TipoPersona = obj.entidad.tipoPersona
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    Select Case obj.compra.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.compra.importeTotal * -1
                            objRecurso.importeUS = obj.compra.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    objRecurso.aprobado = obj.compra.aprobado
                    objRecurso.tieneDetraccion = obj.compra.tieneDetraccion

                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetListarComprasPorPeriodoGeneral_CONT_CONTADO(documentocompraBE As documentocompra, strPeriodo As String, Optional UsuarioCaja As String = Nothing) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        '  Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaTipoCompra.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_PAGADA)

        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        'If IsNothing(UsuarioCaja) 
        '            Order By compra.fechaDoc
        'por ejemplo junio-2017
        'compras normales sin detraccion

        Select Case documentocompraBE.tipoConsulta
            Case "EMPRESA"
                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
                            On doc.idDocumento Equals compra.idDocumento
                                Join entidad In HeliosData.entidad
                            On compra.idProveedor Equals entidad.idEntidad
                                Where compra.fechaContable = strPeriodo _
                            And compra.idEmpresa = documentocompraBE.idEmpresa _
                            And listaTipoCompra.Contains(compra.tipoCompra) _
                            And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList


                strPeriodo = strPeriodo.Replace("/", "")
                Dim consulta2 = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentocompra
                             On doc.idDocumento Equals compra.idDocumento
                                 Join entidad In HeliosData.entidad
                             On compra.idProveedor Equals entidad.idEntidad
                                 Where compra.periodoTributo = strPeriodo _
                     And compra.idEmpresa = documentocompraBE.idEmpresa _
                             And listaTipoCompra.Contains(compra.tipoCompra) _
                             And compra.tieneDetraccion = "S" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                Dim con3 = consulta.Concat(consulta2).OrderBy(Function(o) o.compra.fechaDoc).ToList

                For Each obj In con3
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                    objRecurso.NroDocEntidad = obj.entidad.nrodoc
                    objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                    objRecurso.TipoPersona = obj.entidad.tipoPersona
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    Select Case obj.compra.tipoDoc
                        Case "07", "87"
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault * -1
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault * -1
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault * -1
                            objRecurso.importeTotal = obj.compra.importeTotal * -1
                            objRecurso.importeUS = obj.compra.importeUS * -1

                        Case "08", "88"
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                        Case Else
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    objRecurso.aprobado = obj.compra.aprobado
                    objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next

            Case "UNIDAD_ORGANICA"
                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
                            On doc.idDocumento Equals compra.idDocumento
                                Join entidad In HeliosData.entidad
                            On compra.idProveedor Equals entidad.idEntidad
                                Where compra.fechaContable = strPeriodo _
                                             And compra.idEmpresa = documentocompraBE.idEmpresa _
                            And compra.idCentroCosto = documentocompraBE.idCentroCosto _
                            And listaTipoCompra.Contains(compra.tipoCompra) _
                            And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList


                strPeriodo = strPeriodo.Replace("/", "")
                Dim consulta2 = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentocompra
                             On doc.idDocumento Equals compra.idDocumento
                                 Join entidad In HeliosData.entidad
                             On compra.idProveedor Equals entidad.idEntidad
                                 Where compra.periodoTributo = strPeriodo _
                                              And compra.idEmpresa = documentocompraBE.idEmpresa _
                             And compra.idCentroCosto = documentocompraBE.idCentroCosto _
                             And listaTipoCompra.Contains(compra.tipoCompra) _
                             And compra.tieneDetraccion = "S" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                Dim con3 = consulta.Concat(consulta2).OrderBy(Function(o) o.compra.fechaDoc).ToList

                For Each obj In con3
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                    objRecurso.NroDocEntidad = obj.entidad.nrodoc
                    objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                    objRecurso.TipoPersona = obj.entidad.tipoPersona
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    Select Case obj.compra.tipoDoc
                        Case "07", "87"
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault * -1
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault * -1
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault * -1
                            objRecurso.importeTotal = obj.compra.importeTotal * -1
                            objRecurso.importeUS = obj.compra.importeUS * -1

                        Case "08", "88"
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                        Case Else
                            objRecurso.bi01 = obj.compra.bi01.GetValueOrDefault
                            objRecurso.bi02 = obj.compra.bi02.GetValueOrDefault
                            objRecurso.igv01 = obj.compra.igv01.GetValueOrDefault
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    objRecurso.aprobado = obj.compra.aprobado
                    objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next

        End Select



        Return Lista
    End Function

    Public Function GetComprasCriterio(be As documentocompra) As List(Of documentocompra)
        Dim objRecurso As documentocompra
        Dim Lista As New List(Of documentocompra)
        Dim consultaCompras As Object = Nothing
        Dim listaTipoCompra As New List(Of String)


        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaTipoCompra.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_PAGADA)

        Select Case be.tipoConsulta
            Case "EMPRESA"
                Select Case be.terminos
                    Case "PROVEEDOR"

                        Dim consulta = (From doc In HeliosData.documento
                                        Join compra In HeliosData.documentocompra
                            On doc.idDocumento Equals compra.idDocumento
                                        Join entidad In HeliosData.entidad
                            On compra.idProveedor Equals entidad.idEntidad
                                        Where
                                    compra.fechaContable = be.fechaContable _
                                            And compra.idEmpresa = be.idEmpresa _
                                          And compra.idProveedor = be.idProveedor _
                                    And listaTipoCompra.Contains(compra.tipoCompra) _
                                    And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList


                        be.fechaContable = be.fechaContable.Replace("/", "")
                        Dim consulta2 = (From doc In HeliosData.documento
                                         Join compra In HeliosData.documentocompra
                                     On doc.idDocumento Equals compra.idDocumento
                                         Join entidad In HeliosData.entidad
                                     On compra.idProveedor Equals entidad.idEntidad
                                         Where
                                     compra.periodoTributo = be.fechaContable _
                                      And compra.idEmpresa = be.idEmpresa _
                                     And compra.idProveedor = be.idProveedor _
                                     And listaTipoCompra.Contains(compra.tipoCompra) _
                                     And compra.tieneDetraccion = "S" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                        consultaCompras = consulta.Concat(consulta2).OrderByDescending(Function(o) o.compra.fechaDoc).ToList


                    Case "COMPROBANTE"
                        Dim consulta = (From doc In HeliosData.documento
                                        Join compra In HeliosData.documentocompra
                            On doc.idDocumento Equals compra.idDocumento
                                        Join entidad In HeliosData.entidad
                            On compra.idProveedor Equals entidad.idEntidad
                                        Where
                                    compra.fechaContable = be.fechaContable _
                                And compra.idEmpresa = be.idEmpresa _
                                    And compra.tipoDoc = be.tipoDoc _
                                    And compra.serie.Contains(be.serie) _
                                    And compra.numeroDoc.Contains(be.numeroDoc) _
                                    And listaTipoCompra.Contains(compra.tipoCompra) _
                                    And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList




                        consultaCompras = consulta 'consulta.Concat(consulta2).OrderByDescending(Function(o) o.compra.fechaDoc).ToList
                End Select



                For Each obj In consultaCompras
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                    objRecurso.NroDocEntidad = obj.entidad.nrodoc
                    objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                    objRecurso.TipoPersona = obj.entidad.tipoPersona
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    Select Case obj.compra.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.compra.importeTotal * -1
                            objRecurso.importeUS = obj.compra.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    objRecurso.aprobado = obj.compra.aprobado
                    objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next


            Case "UNIDAD_ORGANICA"
                Select Case be.terminos
                    Case "PROVEEDOR"

                        Dim consulta = (From doc In HeliosData.documento
                                        Join compra In HeliosData.documentocompra
                            On doc.idDocumento Equals compra.idDocumento
                                        Join entidad In HeliosData.entidad
                            On compra.idProveedor Equals entidad.idEntidad
                                        Where
                                    compra.fechaContable = be.fechaContable _
                                                And compra.idEmpresa = be.idEmpresa _
                                    And compra.idCentroCosto = be.idCentroCosto _
                                    And compra.idProveedor = be.idProveedor _
                                    And listaTipoCompra.Contains(compra.tipoCompra) _
                                    And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList


                        be.fechaContable = be.fechaContable.Replace("/", "")
                        Dim consulta2 = (From doc In HeliosData.documento
                                         Join compra In HeliosData.documentocompra
                                     On doc.idDocumento Equals compra.idDocumento
                                         Join entidad In HeliosData.entidad
                                     On compra.idProveedor Equals entidad.idEntidad
                                         Where
                                     compra.periodoTributo = be.fechaContable _
                                                 And compra.idEmpresa = be.idEmpresa _
                                     And compra.idCentroCosto = be.idCentroCosto _
                                     And compra.idProveedor = be.idProveedor _
                                     And listaTipoCompra.Contains(compra.tipoCompra) _
                                     And compra.tieneDetraccion = "S" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                        consultaCompras = consulta.Concat(consulta2).OrderByDescending(Function(o) o.compra.fechaDoc).ToList


                    Case "COMPROBANTE"
                        Dim consulta = (From doc In HeliosData.documento
                                        Join compra In HeliosData.documentocompra
                            On doc.idDocumento Equals compra.idDocumento
                                        Join entidad In HeliosData.entidad
                            On compra.idProveedor Equals entidad.idEntidad
                                        Where
                                    compra.fechaContable = be.fechaContable And
                                                 compra.idEmpresa = be.idEmpresa _
                                    And compra.idCentroCosto = be.idCentroCosto _
                                    And compra.tipoDoc = be.tipoDoc _
                                    And compra.serie.Contains(be.serie) _
                                    And compra.numeroDoc.Contains(be.numeroDoc) _
                                    And listaTipoCompra.Contains(compra.tipoCompra) _
                                    And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList




                        consultaCompras = consulta 'consulta.Concat(consulta2).OrderByDescending(Function(o) o.compra.fechaDoc).ToList
                End Select



                For Each obj In consultaCompras
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                    objRecurso.NroDocEntidad = obj.entidad.nrodoc
                    objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                    objRecurso.TipoPersona = obj.entidad.tipoPersona
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    Select Case obj.compra.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.compra.importeTotal * -1
                            objRecurso.importeUS = obj.compra.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    objRecurso.aprobado = obj.compra.aprobado
                    objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next

        End Select





        Return Lista
    End Function


#End Region



    Public Function VoucherCompromiso(tipoDoc As String, tipoventa As String)

        Dim consulta = (From i In HeliosData.documentocompra
                        Where i.tipoDoc = tipoDoc And i.tipoCompra = tipoventa).Count

        Return consulta + 1

    End Function

    Public Function GrabarReclamacionCompromisoCobro(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim docuemntoAnticipoBL As New documentoAnticipoBL
        Dim ventaDetalleBL As New documentocompradetalleBL
        Try
            Using ts As New TransactionScope()
                Dim codigoAnticipo = objDocumento.documentocompra.idPadre

                Dim numeracion = VoucherCompromiso(objDocumento.documentocompra.tipoDoc, objDocumento.documentocompra.tipoCompra)

                objDocumento.nroDoc = "COMP" & "-" & numeracion
                objDocumento.documentocompra.serie = "COMP"
                objDocumento.documentocompra.numeroDoc = numeracion


                GrabarVentaDocumentoGeneralSPK(objDocumento)

                Dim anticipoDoc = HeliosData.documentocompra.Where(Function(o) o.idDocumento = codigoAnticipo).Single


                Dim docEstado = docuemntoAnticipoBL.ObtenerSaldoReclamacionCobro(codigoAnticipo)
                If docEstado.Saldo <= 0 Then
                    anticipoDoc.estado = General.Anticipo.Estado.Compensado
                Else
                    If docEstado.MontoPagadoSoles > 0 Then
                        anticipoDoc.estado = General.Anticipo.Estado.NotaCreditoParcial
                    Else
                        anticipoDoc.estado = General.Anticipo.Estado.NotaCredito
                    End If
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetCuentasCobrarReclamacionesSoloProveedor(parametro As documentocompra) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim lista As New List(Of documentocompra)

        Dim con = (From c In HeliosData.documentocompra
                   Join cli In HeliosData.entidad
                           On cli.idEntidad Equals c.idProveedor
                   Where
                  (New String() {"EXD"}).Contains(c.tipoCompra) And
                   c.idEmpresa = parametro.idEmpresa And c.idCentroCosto = parametro.idCentroCosto _
                       And c.fechaDoc.Value.Year = parametro.fechaDoc.Value.Year _
                       And c.fechaDoc.Value.Month = parametro.fechaDoc.Value.Month _
                       And c.monedaDoc = parametro.monedaDoc And c.tipoDoc = "9910" _
                       And c.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO And Not c.estado = 4 _
                       And c.idProveedor = parametro.idProveedor
                   Select
                  c.idDocumento,
                       c.idProveedor,
                       cli.nombreCompleto,
                       cli.nrodoc,
                  c.tipoCompra,
                  c.fechaContable,
                  c.fechaDoc,
                  c.serie,
                  c.numeroDoc,
                  c.tipoDoc,
                  c.monedaDoc,
                  c.importeTotal,
                  c.tcDolLoc,
                  c.importeUS,
                  c.estadoPago,
                       MontoUsado = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"9911"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "VRC"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       MontoUsadoME = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"9911"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "VRC"
                                           Select New With {
                                               Documentocompra.importeUS
                                           }) Into Sum(t1.importeUS)), Decimal?))).ToList



        For Each i In con
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.idProveedor = i.idProveedor
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.tipoCompra = i.tipoCompra
            doccompra.fechaContable = i.fechaContable
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDoc
            doccompra.monedaDoc = i.monedaDoc
            doccompra.importeTotal = i.importeTotal
            doccompra.tcDolLoc = i.tcDolLoc
            doccompra.importeUS = i.importeUS
            doccompra.estadoPago = i.estadoPago
            doccompra.PagoSumaMN = i.MontoUsado.GetValueOrDefault 'i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.MontoUsadoME.GetValueOrDefault 'i.PagosME.GetValueOrDefault
            'doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
            'doccompra.PagoNotaCreditoMN = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            ' doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            'doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            'doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Function GetCuentasCobrarReclamacionesProveedor(parametro As documentocompra) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim lista As New List(Of documentocompra)

        Dim con = (From c In HeliosData.documentocompra
                   Join cli In HeliosData.entidad
                           On cli.idEntidad Equals c.idProveedor
                   Where
                  (New String() {"EXD"}).Contains(c.tipoCompra) And
                   c.idEmpresa = parametro.idEmpresa And c.idCentroCosto = parametro.idCentroCosto _
                       And c.fechaDoc.Value.Year = parametro.fechaDoc.Value.Year _
                       And c.fechaDoc.Value.Month = parametro.fechaDoc.Value.Month _
                       And c.monedaDoc = parametro.monedaDoc And c.tipoDoc = "9910" _
                       And c.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO And Not c.estado = 4
                   Select
                  c.idDocumento,
                       c.idProveedor,
                       cli.nombreCompleto,
                       cli.nrodoc,
                  c.tipoCompra,
                  c.fechaContable,
                  c.fechaDoc,
                  c.serie,
                  c.numeroDoc,
                  c.tipoDoc,
                  c.monedaDoc,
                  c.importeTotal,
                  c.tcDolLoc,
                  c.importeUS,
                  c.estadoPago,
                       MontoUsado = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"9911"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "VRC"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       MontoUsadoME = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"9911"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "VRC"
                                           Select New With {
                                               Documentocompra.importeUS
                                           }) Into Sum(t1.importeUS)), Decimal?))).ToList



        For Each i In con
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.idProveedor = i.idProveedor
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.tipoCompra = i.tipoCompra
            doccompra.fechaContable = i.fechaContable
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDoc
            doccompra.monedaDoc = i.monedaDoc
            doccompra.importeTotal = i.importeTotal
            doccompra.tcDolLoc = i.tcDolLoc
            doccompra.importeUS = i.importeUS
            doccompra.estadoPago = i.estadoPago
            doccompra.PagoSumaMN = i.MontoUsado.GetValueOrDefault 'i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.MontoUsadoME.GetValueOrDefault 'i.PagosME.GetValueOrDefault
            'doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedente.GetValueOrDefault
            'doccompra.PagoNotaCreditoMN = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            ' doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            'doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            'doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Function GrabarCompraDocumentoGeneral(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim docuemntoAnticipoBL As New documentoAnticipoBL
        Dim ventaDetalleBL As New documentocompradetalleBL
        Try
            Using ts As New TransactionScope()
                Dim codigoAnticipo = objDocumento.documentocompra.idPadre
                GrabarVentaDocumentoGeneralSPK(objDocumento)

                Dim anticipoDoc = HeliosData.documentoAnticipo.Where(Function(o) o.idDocumento = codigoAnticipo).Single

                Dim docEstado = docuemntoAnticipoBL.ObtenerSaldoAnticipoV2Compra(codigoAnticipo)
                If docEstado.Saldo <= 0 Then
                    anticipoDoc.estado = General.Anticipo.Estado.Compensado
                Else
                    If docEstado.MontoPagadoSoles > 0 Then
                        anticipoDoc.estado = General.Anticipo.Estado.NotaCreditoParcial
                    Else
                        anticipoDoc.estado = General.Anticipo.Estado.NotaCredito
                    End If
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GrabarVentaDocumentoGeneralSPK(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim ventaDetalleBL As New documentocompradetalleBL
        Try
            Using ts As New TransactionScope()
                objDocumento.fechaActualizacion = DateTime.Now



                DocumentoBL.Insert(objDocumento)
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    ventaDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function HistorialDePagos(iNtPadre As Integer) As List(Of documentocompra)
        Dim listaCobros = (Me.NotasDocumentoCompra(iNtPadre)).Concat(Me.PagosxDocumento(iNtPadre)).Concat(Me.CompensacionesCompra(iNtPadre)).ToList()
        Return listaCobros
    End Function

    Public Function DocumentoCompraAfectadoNC(be As documentocompra) As documentocompra
        Try

            Dim documento As New documentocompra
            Dim cabezera As documentocompra

            Dim consulta = (From i In HeliosData.documentocompra
                            Join e In HeliosData.entidad On i.idProveedor Equals e.idEntidad
                            Where i.idDocumento = be.idDocumento).SingleOrDefault


            cabezera = New documentocompra
            cabezera.idDocumento = consulta.i.idDocumento
            cabezera.tipocambio = consulta.i.tipocambio
            cabezera.monedaDoc = consulta.i.monedaDoc
            cabezera.tasaIgv = consulta.i.tasaIgv
            cabezera.igv01 = consulta.i.igv01
            cabezera.importeTotal = consulta.i.importeTotal
            cabezera.serie = consulta.i.serie
            cabezera.numeroDoc = consulta.i.numeroDoc
            cabezera.idProveedor = consulta.i.idProveedor
            cabezera.nombreProveedor = consulta.e.nombreCompleto
            cabezera.rucProveedor = consulta.e.nrodoc
            cabezera.tipoDoc = consulta.i.tipoDoc
            cabezera.tcDolLoc = consulta.i.tcDolLoc


            documento = cabezera
            Dim detalle = GetCompraDetalleNotaAfectada(be)
            documento.documentocompradetalle = detalle
            Return documento
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Function ContenidoNeto(id As Integer) As Decimal

        Dim consulta = (From i In HeliosData.detalleitem_equivalencias
                        Where i.equivalencia_id = id).SingleOrDefault
        Return consulta.contenido_neto
    End Function

    Public Function GetCompraDetalleNotaAfectada(be As documentocompra) As List(Of documentocompradetalle)
        Dim doccompra As New documentocompradetalle
        Dim lista As New List(Of documentocompradetalle)

        Dim listaNC As New List(Of String)
        listaNC.Add("07")
        listaNC.Add("87")

        Dim detalle = (From p In HeliosData.documentocompradetalle
                       Group Join c In HeliosData.documentoCajaDetalle
                      On p.idDocumento Equals c.documentoAfectado _
                      And p.secuencia Equals c.documentoAfectadodetalle
                      Into ords = Group
                       From c In ords.DefaultIfEmpty
                       Where p.idDocumento = be.idDocumento
                       Group c By
                      p.idDocumento, p.secuencia, p.destino, p.tipoExistencia,
                      p.idItem, p.descripcionItem, p.importe, p.importeUS,
                     p.monto1, p.almacenRef, p.estadoPago, p.montokardex, p.montokardexUS, p.montoIgv, p.montoIgvUS, p.unidad1, p.precioUnitario, p.precioUnitarioUS, p.equivalencia_id
                      Into g = Group
                       Select New With {.iditem = idItem,
                                       .iddocumento = idDocumento,
                                       .Descripcion = descripcionItem,
                                       .ImporteDeudaSoles = importe,
                                       .ImporteDeudaUSD = importeUS,
                                       g, .TotalImportePagadoSoles = g.Sum(Function(c) c.montoSoles),
                                       .TotalImportePagadoDolares = g.Sum(Function(c) c.montoUsd),
                                       .secuencia = secuencia,
                                       .destino = destino,
                                       .tipoex = tipoExistencia,
                                       .cantidad = monto1,
                                       .almacenRef = almacenRef,
                                       .estadoPago = estadoPago,
                                       .equivalencia_id = equivalencia_id,
                                        .contenidoneto = (From i In HeliosData.detalleitem_equivalencias
                                                          Where i.equivalencia_id = equivalencia_id Select i.contenido_neto).FirstOrDefault,
                                       .montoKardex = montokardex,
                                       .montoKardexUS = montokardexUS,
                                       .montoIgv = montoIgv,
                                       .montoIgvUS = montoIgvUS,
                                        .preciounitario = precioUnitario,
                                        .preciounitariome = precioUnitarioUS,
                                        .unidad1 = unidad1
                                   }
                               ).ToList


        For Each i In detalle
            doccompra = New documentocompradetalle

            'doccompra = DetalleAfectacionporItem()

            doccompra.idDocumento = i.iddocumento
            doccompra.secuencia = i.secuencia
            doccompra.destino = i.destino
            doccompra.codigoLote = 0 'i.codigoLote
            doccompra.tipoExistencia = i.tipoex
            doccompra.almacenRef = i.almacenRef
            doccompra.idItem = i.iditem
            doccompra.descripcionItem = i.Descripcion
            doccompra.unidad1 = i.unidad1
            doccompra.estadoPago = i.estadoPago
            doccompra.equivalencia_id = i.equivalencia_id
            'doccompra.estadoEntrega = i.c.estadoEntrega

            doccompra.precioUnitario = i.preciounitario
            doccompra.precioUnitarioUS = i.preciounitariome


            Dim afectacion = MontosCompraAfectadosItems(i.secuencia, i.iddocumento)



            doccompra.CantVenta = afectacion.CantVenta
            doccompra.monto1 = (i.cantidad * i.contenidoneto) - afectacion.cantNC
            doccompra.montoIgv = i.montoIgv - afectacion.igvNC
            doccompra.montoIgvUS = i.montoIgvUS - afectacion.igvNCME

            doccompra.montokardex = i.montoKardex - afectacion.biNC
            doccompra.montokardexUS = i.montoKardexUS - afectacion.biNCME

            doccompra.importe = i.ImporteDeudaSoles - afectacion.montoNC ' - afectacion.montoCompesacion  '- i.PagosMN.GetValueOrDefault - i.NotaCreMN.GetValueOrDefault - i.MontoCompensado.GetValueOrDefault
            doccompra.importeUS = i.ImporteDeudaUSD - afectacion.montoNCME ' - afectacion.montoCompesacionme

            doccompra.PagoSumaMN = i.TotalImportePagadoSoles.GetValueOrDefault - afectacion.montoDevuelto + afectacion.montoCompesacion
            doccompra.PagoSumaME = i.TotalImportePagadoDolares.GetValueOrDefault - afectacion.montoDevueltome + afectacion.montoCompesacionme


            lista.Add(doccompra)
        Next


        Return lista
    End Function






    Public Function MontosCompraAfectadosItems(secuencia As Integer, idPadre As Integer) As documentocompradetalle

        Dim objeto As documentocompradetalle

        Dim lista As New List(Of String)
        lista.Add("07")
        'lista.Add("87")

        Dim notasCredito = Aggregate p In HeliosData.documentocompradetalle
                      Join compra In HeliosData.documentocompra
                      On p.idDocumento Equals compra.idDocumento
                                 Where p.idPadreDTCompra = secuencia And Not compra.tipoCompra = "EXD" _
                                 And compra.tipoCompra = "NTC" _
                                 And lista.Contains(compra.tipoDoc)
                                 Into monto = Sum(p.importe),
                                      montous = Sum(p.importeUS),
                                      cantidad = Sum(p.monto1),
                                      kard = Sum(p.montokardex),
                                      kardme = Sum(p.montokardexUS),
                                      igv = Sum(p.montoIgv),
                                      igvme = Sum(p.montoIgvUS)

        Dim PagoDevuelto = Aggregate p In HeliosData.documentocompradetalle
                      Join compra In HeliosData.documentocompra
                      On p.idDocumento Equals compra.idDocumento
                                 Where p.idPadreDTCompra = secuencia _
                                 And compra.tipoDoc = "9910" And compra.tipoCompra = "EXD"
                                 Into comp = Sum(p.importe),
                                 compme = Sum(p.importeUS)


        Dim Compensacion = Aggregate p In HeliosData.documentoAnticipoConciliacion
                                 Where p.idDetalle = secuencia And p.idDocumentoPadre = idPadre
                                 Into comp = Sum(p.importe),
                                 compme = Sum(p.importe)


        Dim Karedex = (From Y In HeliosData.InventarioMovimiento
                       Where Y.idDocumento = idPadre And Y.tipoRegistro = "E"
                       Select Y.idItem,
                                                 Y.nrolote,
                                                 Y.cantidad,
                                                 Y.monto,
                                                Y.idAlmacen,
                                                Y.montoOther,
                                                nota = (Aggregate k In HeliosData.InventarioMovimiento
                                                        Where k.tipoOperacion = "9913" And
                                                        k.nrolote = Y.nrolote And k.tipoRegistro = "E" And k.idItem = Y.idItem _
                                                            And k.idAlmacen = Y.idAlmacen
                                                        Into NCmn = Sum(k.cantidad)),
                                              ventas = (Aggregate k In HeliosData.InventarioMovimiento
                                                        Where k.tipoOperacion = "01" And
                                                        k.nrolote = Y.nrolote And k.tipoRegistro = "S" And k.idItem = Y.idItem _
                                                            And k.idAlmacen = Y.idAlmacen
                                                        Into NCmn = Sum(k.cantidad))).FirstOrDefault



        objeto = New documentocompradetalle

        objeto.CantVenta = Karedex.ventas.GetValueOrDefault + Karedex.nota.GetValueOrDefault

        objeto.montoNC = notasCredito.monto.GetValueOrDefault
        objeto.montoNCME = notasCredito.montous.GetValueOrDefault
        objeto.cantNC = notasCredito.cantidad.GetValueOrDefault
        objeto.igvNC = notasCredito.igv.GetValueOrDefault
        objeto.igvNCME = notasCredito.igvme.GetValueOrDefault
        objeto.biNC = notasCredito.kard.GetValueOrDefault
        objeto.biNCME = notasCredito.kardme.GetValueOrDefault

        objeto.montoDevuelto = PagoDevuelto.comp.GetValueOrDefault
        objeto.montoDevueltome = PagoDevuelto.compme.GetValueOrDefault

        objeto.montoCompesacion = Compensacion.comp.GetValueOrDefault
        objeto.montoCompesacionme = Compensacion.compme.GetValueOrDefault


        Return objeto


    End Function

    Public Function SaveNotaCreditoCompraFE(objDocumento As documento, nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()

                Dim codVentaOriginal = objDocumento.documentocompra.idPadre
                Dim listaArticulosVendidos = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = codVentaOriginal).ToList

                Dim codDoc = InsertNotaCreditoCompraFE(objDocumento, nDocumentoNota, nDocumentoSaldoVenta)
                If listaArticulosVendidos.Count > 0 Then
                    Dim fechaEnvioAlmacen = objDocumento.documentocompra.fechaDoc.Value
                    For Each a In listaArticulosVendidos
                        Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                        New InventarioMovimiento With {
                        .idAlmacen = a.idAlmacen,
                        .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                        .tipoProducto = a.tipoProducto,
                        .idItem = a.idItem,
                        .nrolote = a.nrolote}, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(lista)
                    Next
                End If


                HeliosData.SaveChanges()
                ts.Complete()
                Return codDoc
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Private Sub GetSalidaInventarioNC(i As InventarioMovimiento, venta As documentocompra, operacion As String)
        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = i.idorigenDetalle 'i.Secuencia
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idCentroCosto
            obj.idAlmacen = i.idAlmacen 'i.idAlmacenOrigen
            obj.nrolote = i.nrolote  ' t.codigoLote ' i.codigoLote
            obj.tipoOperacion = operacion '"07"
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serie
            obj.numero = venta.numeroDoc
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idDocumento
            obj.descripcion = i.descripcion 'i.nombreItem
            obj.fechaLaboral = If(venta.fechaActualizacion.HasValue, venta.fechaActualizacion, venta.fechaDoc)
            obj.fecha = If(venta.fechaActualizacion.HasValue, venta.fechaActualizacion, venta.fechaDoc)
            obj.tipoRegistro = "S"
            obj.destinoGravadoItem = i.destinoGravadoItem 'i.destino
            obj.tipoProducto = i.tipoProducto  'i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = i.cantidad * -1 't.CantidadUsada  -1 ' i.monto1 * -1
            obj.unidad = i.unidad  'i.unidad1
            obj.cantidad2 = 0
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = i.montoOther 'i.monto 't.CantidadUsada * i.precioUnitario
            obj.montoUSD = 0 'i.montoUSD 't.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = i.montoOther 't.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now
            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Function InsertNotaCreditoCompraFE(objDocumento As documento, nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim CAN_BOF As Decimal = 0
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0

        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0
        Dim cajaBL As New documentoCajaDetalleBL

        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer = 0

        Dim InventarioMovimientoBL As New InventarioMovimientoBL

        Dim t As New totalesAlmacen
        Try
            Using ts As New TransactionScope()

                'Dim num = numeracionBL.GenerarNumero(objDocumento.documentocompra.idCentroCosto, "NTC", "07")
                'objDocumento.nroDoc = num.serie & "-" & num.valorInicial
                'objDocumento.documentocompra.serie = num.serie
                'objDocumento.documentocompra.numeroDoc = num.valorInicial




                DocumentoBL.Insert(objDocumento)
                Dim venta As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = objDocumento.documentocompra.idPadre).FirstOrDefault

                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                Dim IdDocNotaCab = objDocumento.idDocumento

                For Each i In objDocumento.documentocompra.documentocompradetalle
                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    cajaBL.ActualizarItemsPagosCompra(i, objDocumento.documentocompra.idPadre)
                Next

                Select Case objDocumento.documentocompra.notaCredito
                    Case "01", "02", "06"

                        Dim idDocVenta = objDocumento.documentocompra.idPadre

                        Dim lista = (From i In HeliosData.InventarioMovimiento
                                     Where i.idDocumento = idDocVenta).ToList

                        For Each i In lista

                            If objDocumento.documentocompra.notaCredito = "01" Then

                                GetSalidaInventarioNC(i, objDocumento.documentocompra, "9933")
                            ElseIf objDocumento.documentocompra.notaCredito = "02" Then

                                GetSalidaInventarioNC(i, objDocumento.documentocompra, "9915")
                            ElseIf objDocumento.documentocompra.notaCredito = "06" Then
                                GetSalidaInventarioNC(i, objDocumento.documentocompra, "9916")
                            End If
                        Next

                    Case "07", "08", "05"

                        'For Each i In objDocumento.documentocompra.documentocompradetalle


                        For Each i In (From z In objDocumento.documentocompra.documentocompradetalle
                                       Where Not z.tipoExistencia = TipoExistencia.ServicioGasto).ToList

                            Dim pm As Decimal = 0
                            Dim cant As Decimal = 0
                            Dim costo As Decimal = 0
                            Dim codigolote As Integer = 0
                            Dim cantidadEnviada As Decimal = 0

                            cantidadEnviada = i.monto1

                            Dim idDocVenta = objDocumento.documentocompra.idPadre

                            Dim lista2 = (From Y In HeliosData.InventarioMovimiento
                                          Where Y.idDocumento = idDocVenta And Y.tipoRegistro = "E" And Y.idorigenDetalle = i.secuenciaOrigen
                                          Select Y.idItem,
                                                 Y.nrolote,
                                                 Y.cantidad,
                                                 Y.monto,
                                                Y.idAlmacen,
                                                Y.montoOther,
                                                nota = (Aggregate k In HeliosData.documentocompra
                                                        Join p In HeliosData.documentocompra On k.idPadre Equals p.idDocumento
                                                        Join inv In HeliosData.InventarioMovimiento On k.idDocumento Equals inv.idDocumento
                                                        Where p.idDocumento = idDocVenta And k.tipoDoc = "07" And
                                                        inv.nrolote = Y.nrolote And inv.tipoRegistro = "S" And inv.idItem = Y.idItem And
                                                            inv.idorigenDetalle = i.secuencia
                                                        Into NCmn = Sum(inv.cantidad)),
                                              ventas = (Aggregate k In HeliosData.documentocompra
                                                        Join p In HeliosData.documentocompra On k.idPadre Equals p.idDocumento
                                                        Join inv In HeliosData.InventarioMovimiento On k.idDocumento Equals inv.idDocumento
                                                        Where p.idDocumento = idDocVenta And k.tipoDoc = "01" And
                                                        inv.nrolote = Y.nrolote And inv.tipoRegistro = "S" And inv.idItem = Y.idItem And
                                                            inv.idorigenDetalle = i.secuencia
                                                        Into NCmn = Sum(inv.cantidad))).ToList

                            For Each h In lista2
                                If cantidadEnviada > 0 Then

                                    If i.idItem = h.idItem Then

                                        Dim cantAct As Decimal = 0

                                        cantAct = (h.cantidad) - h.nota.GetValueOrDefault - h.ventas.GetValueOrDefault

                                        If cantAct > 0 Then

                                            If cantAct >= cantidadEnviada Then
                                                cant = cantidadEnviada
                                            ElseIf cantAct <= cantidadEnviada Then
                                                cant = cantAct

                                            End If

                                            pm = h.monto / (h.cantidad)
                                            codigolote = h.nrolote

                                            costo = cant * pm

                                            i.salidaCostoMN = costo
                                            i.precioUnitario = pm
                                            i.codigoLote = codigolote
                                            i.monto1 = cant

                                            i.almacenRef = h.idAlmacen


                                            If i.TipoOperacion = "9940" Then
                                                i.salidaCostoMN = 0
                                                i.salidaCostoME = 0
                                            End If

                                            GetSalidaInventarioParcialNC(i, objDocumento.documentocompra)

                                            cantidadEnviada = cantidadEnviada - cant


                                        End If


                                    End If

                                ElseIf cantidadEnviada = 0 Then
                                    i.codigoLote = h.nrolote
                                    i.almacenRef = h.idAlmacen
                                    i.salidaCostoMN = i.montokardex
                                    i.salidaCostoME = i.montokardexUS
                                    GetSalidaInventarioParcialNC(i, objDocumento.documentocompra)

                                End If
                            Next

                        Next

                End Select

                'If objDocumento.documentoventaAbarrotes.idPSE > 0 Then
                '    If My.Computer.Network.IsAvailable = True Then
                '        If My.Computer.Network.Ping("148.102.27.231") Then
                '            If Gempresas.ubigeo > 0 Then
                '                EnviarNotaCreditoElectronico(objDocumento.documentoventaAbarrotes)
                '            End If
                '        End If
                '    End If
                'End If


                If Not IsNothing(objDocumento.documentoGuia) Then
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If
                End If

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If
                'Cobrando Saldo de la venta cuando es una venta al credito
                '    If objDocumento.documentoventaAbarrotes.ImporteDevMN > 0 Then
                'If objDocumento.documentoventaAbarrotes.SaldoVentaMN > 0 Then
                If Not IsNothing(nDocumentoSaldoVenta.documentoCaja) Then
                    If Not IsNothing(nDocumentoSaldoVenta.documentoCaja.idEmpresa) Then
                        SaveCaja(nDocumentoSaldoVenta, objDocumento.documentocompra.idPadre)
                    End If
                End If
                '-----------------------------------------------------------------------------------
                'creando documento de excendente por devolucion de dinero
                If Not IsNothing(objDocumento.documentocompra.EstadoPagoDevolucion) Then
                    Dim codGenerado = GrabarDocumentoDevolucion(objDocumento)
                    'Select Case objDocumento.documentoventaAbarrotes.EstadoPagoDevolucion
                    '    Case TIPO_VENTA.PAGO.COBRADO
                    '        If Not IsNothing(nDocumentoNota.idEmpresa) Then
                    '            Dim listaPagos As List(Of documentoventaAbarrotesDet) = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.idDocumento = codGenerado).ToList
                    '            SaveCajaVenta(nDocumentoNota, codGenerado, listaPagos)
                    '        End If
                    '    Case TIPO_VENTA.PAGO.PENDIENTE_PAGO

                    'End Select

                End If


                Dim ventaDetalle = (From n In HeliosData.documentocompradetalle
                                    Where n.idDocumento = venta.idDocumento AndAlso n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO).Count

                If ventaDetalle > 0 Then
                    venta.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                Else
                    'venta.estadoCobro = TIPO_VENTA.PAGO.COBRADO
                    venta.estadoPago = TIPO_VENTA.AnuladaPorNotaCredito
                End If
                'venta.estadoCobro = TIPO_VENTA.AnuladaPorNotaCredito




                HeliosData.SaveChanges()
                ts.Complete()
                Return IdDocNotaCab 'objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Private Sub GetInventarioCompraVinculada(i As documentocompradetalle, venta As documentocompra)
        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = i.secuencia
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idCentroCosto
            obj.idAlmacen = i.almacenRef
            obj.nrolote = i.codigoLote ' i.codigoLote
            'obj.tipoOperacion = "07"
            obj.tipoOperacion = venta.tipoOperacion
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serie
            obj.numero = venta.numeroDoc
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idPadre
            obj.descripcion = i.descripcionItem
            obj.fechaLaboral = If(venta.fechaActualizacion.HasValue, venta.fechaActualizacion, venta.fechaDoc)
            obj.fecha = If(venta.fechaActualizacion.HasValue, venta.fechaActualizacion, venta.fechaDoc)
            obj.tipoRegistro = "E"
            obj.destinoGravadoItem = i.destino
            obj.tipoProducto = i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = 0 ' i.monto1  't.CantidadUsada  -1 ' i.monto1  -1
            obj.unidad = i.unidad1  'i.unidad1
            obj.cantidad2 = 0
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = i.salidaCostoMN  't.CantidadUsada * i.precioUnitario
            obj.montoUSD = i.salidaCostoME 't.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = i.precioUnitario 't.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now

            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub GetSalidaInventarioParcialNC(i As documentocompradetalle, venta As documentocompra)
        Dim obj As New InventarioMovimiento
        Using ts As New TransactionScope
            obj = New InventarioMovimiento
            obj.idorigenDetalle = i.secuencia
            obj.idEmpresa = venta.idEmpresa
            obj.idEstablecimiento = venta.idCentroCosto
            obj.idAlmacen = i.almacenRef
            obj.nrolote = i.codigoLote ' i.codigoLote
            'obj.tipoOperacion = "07"
            obj.tipoOperacion = i.TipoOperacion
            obj.tipoDocAlmacen = "99"
            obj.serie = venta.serie
            obj.numero = venta.numeroDoc
            obj.idDocumento = venta.idDocumento
            obj.idDocumentoRef = venta.idDocumento
            obj.descripcion = i.descripcionItem
            obj.fechaLaboral = If(venta.fechaActualizacion.HasValue, venta.fechaActualizacion, venta.fechaDoc)
            obj.fecha = If(venta.fechaActualizacion.HasValue, venta.fechaActualizacion, venta.fechaDoc)
            obj.tipoRegistro = "S"
            obj.destinoGravadoItem = i.destino
            obj.tipoProducto = i.tipoExistencia
            obj.OrigentipoProducto = "N"
            obj.idItem = i.idItem
            obj.cantidad = i.monto1 * -1 't.CantidadUsada  -1 ' i.monto1  -1
            obj.unidad = i.unidad1  'i.unidad1
            obj.cantidad2 = 0
            obj.precUnite = 0
            obj.precUniteUSD = 0
            obj.monto = i.salidaCostoMN * -1 't.CantidadUsada * i.precioUnitario
            obj.montoUSD = i.salidaCostoME * -1 't.CantidadUsada * i.precioUnitarioUS.GetValueOrDefault
            obj.montoOther = i.precioUnitario 't.precioUnitarioCompra
            obj.monedaOther = 0
            obj.status = "D"
            obj.entragado = "SI"
            obj.usuarioActualizacion = venta.usuarioActualizacion
            obj.fechaActualizacion = Date.Now

            HeliosData.InventarioMovimiento.Add(obj)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub GrabarDocumentoCajaDevolucionCobro(be As documento)
        Dim anticipoBL As New documentocompraBL
        Using ts As New TransactionScope
            PagoDeLaDevolucion(be)
            Dim docSaldo = anticipoBL.GetDevolucionesByDocumentoNotaCompra(New documentocompra With {.idDocumento = be.idDocumento})

            Dim documentoDev = HeliosData.documentocompra.Where(Function(o) o.idDocumento = be.idDocumento).Single

            If docSaldo.SaldoReclamacion.GetValueOrDefault <= 0 Then
                documentoDev.estadoPago = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteCompleto
            Else
                If docSaldo.ImporteDevMN.GetValueOrDefault > 0 Then
                    documentoDev.estadoPago = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteParcial
                Else
                    documentoDev.estadoPago = General.Anticipo.EstadoCobroNotaCredito.DevolucionTramitePendiente
                End If
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub PagoDeLaDevolucion(be As documento)
        Using ts As New TransactionScope
            If Not IsNothing(be.ListaCustomDocumento) Then
                For Each i In be.ListaCustomDocumento
                    SaveCajaDev(i)
                Next
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub SaveCajaDev(nCaja As documento)
        Dim nDetalle As documentoCajaDetalle
        Dim DocumentoBL As New documentoBL
        Dim documentoCajaBL As New documentoCajaBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Using ts As New TransactionScope
            DocumentoBL.Insert(nCaja)
            nCaja.documentoCaja.numeroDoc = nCaja.nroDoc
            documentoCajaBL.Insert(nCaja.documentoCaja, nCaja.idDocumento)
            For Each i In nCaja.documentoCaja.documentoCajaDetalle
                nDetalle = New documentoCajaDetalle
                nDetalle.idDocumento = nCaja.idDocumento
                nDetalle.documentoAfectado = i.documentoAfectado
                nDetalle.documentoAfectadodetalle = i.documentoAfectadodetalle
                nDetalle.secuencia = i.secuencia
                nDetalle.fecha = i.fecha
                nDetalle.idItem = i.idItem
                nDetalle.DetalleItem = i.DetalleItem
                nDetalle.montoSoles = i.montoSoles
                nDetalle.montoSolesTransacc = i.montoSoles
                nDetalle.montoUsd = i.montoUsd
                nDetalle.montoUsdTransacc = i.montoUsd
                nDetalle.entregado = i.entregado
                nDetalle.diferTipoCambio = i.diferTipoCambio
                nDetalle.tipoCambioTransacc = i.tipoCambioTransacc
                nDetalle.idCajaUsuario = i.idCajaUsuario
                nDetalle.otroMN = i.otroMN
                nDetalle.usuarioModificacion = i.usuarioModificacion
                nDetalle.fechaModificacion = i.fechaModificacion
                HeliosData.documentoCajaDetalle.Add(nDetalle)
            Next
            '   documentoCajaDetalleBL.Insert(nCaja, nCaja.idDocumento, intIdCompra)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Public Function GetDevolucionesByDocumentoNotaCompra(be As documentocompra) As documentocompra
        GetDevolucionesByDocumentoNotaCompra = New documentocompra

        Dim lista As New List(Of String)
        lista.Add(General.Anticipo.EstadoCobroNotaCredito.DevolucionTramitePendiente)
        lista.Add(General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteParcial)
        lista.Add(General.Anticipo.EstadoCobroNotaCredito.DevolucionTramiteCompleto)

        Dim obj As documentocompra
        Dim consulta = (From doc In HeliosData.documentocompra
                        Join ent In HeliosData.entidad
                              On ent.idEntidad Equals doc.idProveedor
                        Group Join caja In HeliosData.documentoCajaDetalle
                            On caja.documentoAfectado Equals doc.idDocumento
                            Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where
                            doc.idDocumento = be.idDocumento And
                            lista.Contains(doc.estadoPago)
                        Group c By
                            doc.idDocumento,
                            doc.numeroDoc,
                            doc.fechaDoc,
                            doc.serie,
                            ent.idEntidad,
                            ent.tipoEntidad,
                            ent.nombreCompleto,
                            ent.nrodoc,
                            doc.importeTotal,
                            doc.importeUS,
                            doc.estadoPago
                            Into g = Group
                        Select New With
                            {
                             idDocumento,
                             numeroDoc,
                             fechaDoc,
                            serie,
                            idEntidad,
                            tipoEntidad,
                            nombreCompleto,
                            nrodoc,
                            importeTotal,
                            importeUS,
                            estadoPago,
                            g, .sumaDevoluciones = g.Sum(Function(c) c.montoSoles)
                            }).FirstOrDefault

        obj = New documentocompra
        If consulta IsNot Nothing Then
            obj.idDocumento = consulta.idDocumento
            obj.fechaDoc = consulta.fechaDoc
            obj.numeroDoc = $"{consulta.serie}-{consulta.numeroDoc }"
            obj.CustomEntidad = New entidad With
                    {
                    .idEntidad = consulta.idEntidad,
                    .tipoEntidad = consulta.tipoEntidad,
                    .nombreCompleto = consulta.nombreCompleto,
                    .nrodoc = consulta.nrodoc
                    }
            obj.importeTotal = consulta.importeTotal
            obj.importeUS = consulta.importeUS
            obj.ImporteDevMN = consulta.sumaDevoluciones.GetValueOrDefault
            obj.estadoPago = consulta.estadoPago
            GetDevolucionesByDocumentoNotaCompra = obj
        End If

    End Function


#Region "Pagos"
    Public Function NotasDocumentoCompra(iNtPadre As Integer) As List(Of documentocompra)

        Dim lista As New List(Of documentocompra)
        Dim a As New documentocompra

        Dim docs As New List(Of String)
        docs.Add("07")
        docs.Add("9910")

        Dim CC = (From i In HeliosData.documentocompra
                  Join h In HeliosData.tabladetalle
                  On h.codigoDetalle Equals i.tipoDoc
                  Where docs.Contains(i.tipoDoc) And
                  i.idPadre = iNtPadre And h.idtabla = 10
                  Select
                      iddocumento = i.idDocumento,
                      tipoDocumento = i.tipoDoc,
                      terminos = h.descripcion,
                     fecha = i.fechaDoc,
                      moneda = i.monedaDoc,
                     numeroventa = i.numeroDoc,
                      serie = i.serie,
                     tipooperacion = i.tipoOperacion,
                  importe = i.importeTotal,
                  importeme = i.importeUS,
                  opDescripcion = (From x In HeliosData.tabladetalle
                                   Where x.codigoDetalle = i.tipoOperacion And x.idtabla = 12 'i.tipoOperacion And x.idtabla = 12
                                   Select
                                   descripcion = x.descripcion).FirstOrDefault,
                  tipo = i.tipoCompra).ToList()



        For Each i In CC
            a = New documentocompra
            a.idDocumento = i.iddocumento
            a.tipoDoc = i.tipoDocumento
            a.tipoOperacion = i.tipooperacion
            a.modulo = i.opDescripcion
            'a.numeroDoc = i.numeroventa
            a.terminos = i.terminos
            a.fechaDoc = i.fecha
            a.tipoCompra = i.tipo
            a.monedaDoc = i.moneda
            If i.tipo = "EXD" Then
                a.importeTotal = -1 * i.importe  '- i.exedente.GetValueOrDefault
                a.importeUS = -1 * i.importeme   '- i.exedenteme.GetValueOrDefault
                a.numeroDoc = i.numeroventa
            Else
                a.importeTotal = i.importe   '- i.exedente.GetValueOrDefault
                a.importeUS = i.importeme   '- i.exedenteme.GetValueOrDefault
                a.numeroDoc = i.serie & "-" & i.numeroventa
            End If
            a.ImportePagoMN = 0
            a.ImportePagoME = 0


            lista.Add(a)
        Next
        Return lista


    End Function



    Public Function PagosxDocumento(iNtPadre As Integer) As List(Of documentocompra)
        Dim lista As New List(Of documentocompra)
        Dim a As New documentocompra

        Dim cc = (From c In HeliosData.documentoCaja
                  Join det In HeliosData.documentoCajaDetalle
                 On c.idDocumento Equals det.idDocumento
                  Join des In HeliosData.tabladetalle On des.codigoDetalle Equals c.tipoDocPago
                  Where det.documentoAfectado = iNtPadre And des.idtabla = 10
                  Group det By
                      c.idDocumento,
                      c.idEmpresa,
                      c.idEstablecimiento,
                      c.codigoLibro,
                      c.tipoMovimiento,
                      c.codigoProveedor,
                      c.idPersonal,
                      c.tipoPersona,
                      c.fechaProceso,
                      c.periodo,
                      c.fechaCobro,
                      c.tipoDocPago,
                      c.formapago,
                      c.numeroDoc,
                      c.moneda,
                      c.entidadFinanciera,
                      c.entidadFinancieraDestino,
                      c.tipoOperacion,
                      c.numeroOperacion,
                       c.montoSoles,
                      c.montoUsd,
                      des.descripcion
                      Into g = Group
                  Select New With {
                      .idDocumento = idDocumento,
                      .idEmpresa = idEmpresa,
                      .idEstablecimiento = idEstablecimiento,
                      .codigoLibro = codigoLibro,
                      .tipoMovimiento = tipoMovimiento,
                      .codigoProveedor = codigoProveedor,
                      .idPersonal = idPersonal,
                      .tipoPersona = tipoPersona,
                      .fechaProceso = fechaProceso,
                      .periodo = periodo,
                      .fechaCobro = fechaCobro,
                      .tipoDocPago = tipoDocPago,
                      .formapago = formapago,
                      .numeroDoc = numeroDoc,
                      .moneda = moneda,
                      .entidadFinanciera = entidadFinanciera,
                      .entidadFinancieraDestino = entidadFinancieraDestino,
                      .tipoOperacion = tipoOperacion,
                      .numeroOperacion = numeroOperacion,
                      .terminos = descripcion,
                      .modulo = (From x In HeliosData.tabladetalle
                                 Where x.codigoDetalle = tipoOperacion And x.idtabla = 12 Select descrip = x.descripcion).FirstOrDefault,
                      g, .importeMN = g.Sum(Function(c) c.montoSoles),
                      .importeME = g.Sum(Function(c) c.montoUsd),
                      .montoCajaMN = montoSoles,
                      .montoCajaME = montoUsd
                      }
                      ).ToList

        For Each i In cc
            a = New documentocompra
            a.idDocumento = i.idDocumento
            a.tipoDoc = i.tipoDocPago
            a.tipoOperacion = i.tipoOperacion
            a.numeroDoc = i.numeroDoc
            a.importeTotal = i.importeMN
            a.importeUS = i.importeME
            a.terminos = i.terminos
            a.monedaDoc = i.moneda
            a.fechaDoc = i.fechaProceso
            a.tipoCompra = i.tipoMovimiento
            a.modulo = i.modulo
            a.ImportePagoMN = i.montoCajaMN.GetValueOrDefault
            a.ImportePagoME = i.montoCajaME.GetValueOrDefault
            lista.Add(a)
        Next
        Return lista
    End Function


    Public Function CompensacionesCompra(iNtPadre As Integer) As List(Of documentocompra)

        Dim lista As New List(Of documentocompra)
        Dim a As New documentocompra

        Dim cc = (From i In HeliosData.documentoAnticipoConciliacionCompra
                  Join h In HeliosData.tabladetalle
                  On h.codigoDetalle Equals i.tipoOperacion
                  Where i.idDocumentoPadre = iNtPadre And h.idtabla = 12).ToList

        For Each i In cc
            a = New documentocompra
            a.idDocumento = i.i.idDocumento
            a.tipoDoc = i.i.tipoDocumento
            a.tipoOperacion = i.i.tipoOperacion
            a.modulo = i.h.descripcion
            'a.numeroDoc = "1"
            a.terminos = i.i.tipoConciliacion
            a.fechaDoc = i.i.fechaRegistro
            a.tipoCompra = i.i.tipoConciliacion
            a.monedaDoc = "1"

            a.importeTotal = i.i.importe  '- i.exedente.GetValueOrDefault
            a.importeUS = 0  '- i.exedenteme.GetValueOrDefault
            a.numeroDoc = "1"
            a.ImportePagoMN = 0
            a.ImportePagoME = 0
            'If i.tipo = "EXD" Then
            '    a.ImporteNacional = -1 * i.importe  '- i.exedente.GetValueOrDefault
            '    a.ImporteExtranjero = -1 * i.importeme   '- i.exedenteme.GetValueOrDefault
            '    a.numeroDocNormal = i.numeroventa
            'Else
            '    a.ImporteNacional = i.importe   '- i.exedente.GetValueOrDefault
            '    a.ImporteExtranjero = i.importeme   '- i.exedenteme.GetValueOrDefault
            '    a.numeroDocNormal = i.serie & "-" & i.numeroventa
            'End If



            lista.Add(a)
        Next
        Return lista


    End Function
#End Region

    Public Function GetInventarioInicial(be As documentocompra) As List(Of documentocompra)
        Dim compra As documentocompra
        Dim detalle As List(Of documentocompradetalle)
        Dim consulta = HeliosData.documentocompra.Include("documentocompradetalle").Where(Function(o) _
                                                                                              o.tipoCompra = TIPO_COMPRA.APORTE_INICIAL And
                                                                                              o.idEmpresa = be.idEmpresa And
                                                                                              o.idCentroCosto = be.idCentroCosto).ToList


        GetInventarioInicial = New List(Of documentocompra)
        For Each i In consulta

            detalle = New List(Of documentocompradetalle)
            For Each det In i.documentocompradetalle.ToList
                detalle.Add(New documentocompradetalle With
                            {
                            .secuencia = det.secuencia,
                            .idItem = det.idItem,
                            .destino = det.destino,
                            .descripcionItem = det.descripcionItem,
                            .unidad1 = det.unidad1,
                            .tipoExistencia = det.tipoExistencia,
                            .monto1 = det.monto1,
                            .precioUnitario = det.precioUnitario,
                            .importe = det.importe,
                            .almacenRef = det.almacenRef
                            })
            Next

            compra = New documentocompra With
            {
            .idDocumento = i.idDocumento,
            .fechaDoc = i.fechaDoc,
            .usuarioActualizacion = i.usuarioActualizacion,
            .documentocompradetalle = detalle
            }
            GetInventarioInicial.Add(compra)
        Next
    End Function

    Public Function GetListarTodasCompras(be As documentocompra, tipoConsulta As String) As List(Of documentocompra)
        Dim objRecurso As documentocompra
        Dim Lista As New List(Of documentocompra)
        Dim ListaTipo As New List(Of String)

        ListaTipo.Add(TIPO_COMPRA.COMPRA)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DE_COMPRA)
        ListaTipo.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        ListaTipo.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        ListaTipo.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        ListaTipo.Add(TIPO_COMPRA.NOTA_CREDITO)
        ListaTipo.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        ListaTipo.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        ListaTipo.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        ListaTipo.Add(TIPO_COMPRA.COMPRA_PAGADA)
        Select Case tipoConsulta
            Case "PERIODO"
                Dim consultaCompras = (From doc In HeliosData.documento
                                       Join compra In HeliosData.documentocompra
                               On doc.idDocumento Equals compra.idDocumento
                                       Group Join entidad In HeliosData.entidad
                               On compra.idProveedor Equals entidad.idEntidad
                               Into ords = Group
                                       From e In ords.DefaultIfEmpty
                                       Where
                                          doc.idCentroCosto = be.idCentroCosto And
                                          compra.fechaContable = be.fechaContable And
                                          ListaTipo.Contains(compra.tipoCompra) And
                                          compra.estadoPago <> "ANU"
                                       Order By compra.fechaDoc Descending).ToList


                For Each obj In consultaCompras
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.e.tipoDoc
                    objRecurso.NroDocEntidad = obj.e.nrodoc
                    objRecurso.NombreEntidad = obj.e.nombreCompleto
                    objRecurso.TipoPersona = obj.e.tipoPersona

                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    Select Case obj.compra.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.compra.importeTotal * -1
                            objRecurso.importeUS = obj.compra.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
                    objRecurso.bi03 = obj.compra.bi03
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.igv02 = obj.compra.igv02
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    objRecurso.aprobado = obj.compra.aprobado
                    objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
                    '-------------------------------------------------------------


                    Lista.Add(objRecurso)
                Next

            Case "DIA"
                Dim consultaCompras = (From doc In HeliosData.documento
                                       Join compra In HeliosData.documentocompra
                               On doc.idDocumento Equals compra.idDocumento
                                       Group Join entidad In HeliosData.entidad
                               On compra.idProveedor Equals entidad.idEntidad
                               Into ords = Group
                                       From e In ords.DefaultIfEmpty
                                       Where
                                          doc.idCentroCosto = be.idCentroCosto And
                                          compra.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                          compra.fechaDoc.Value.Month = be.fechaDoc.Value.Month And
                                          compra.fechaDoc.Value.Day = be.fechaDoc.Value.Day And
                                          ListaTipo.Contains(compra.tipoCompra) And
                                          compra.estadoPago <> "ANU"
                                       Order By compra.fechaDoc Descending).ToList

                For Each obj In consultaCompras
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.e.tipoDoc
                    objRecurso.NroDocEntidad = obj.e.nrodoc
                    objRecurso.NombreEntidad = obj.e.nombreCompleto
                    objRecurso.TipoPersona = obj.e.tipoPersona

                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    Select Case obj.compra.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.compra.importeTotal * -1
                            objRecurso.importeUS = obj.compra.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
                    objRecurso.bi03 = obj.compra.bi03
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.igv02 = obj.compra.igv02
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    objRecurso.aprobado = obj.compra.aprobado
                    objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetCompraID(be As documento) As documentocompra
        Dim ListCompra As List(Of documentocompradetalle) = Nothing

        Dim i = HeliosData.documentocompra _
            .Include("documentocompradetalle") _
            .Where(Function(o) o.idDocumento = be.idDocumento).SingleOrDefault

        ListCompra = New List(Of documentocompradetalle)
        For Each det In i.documentocompradetalle.ToList
            ListCompra.Add _
            (
            New documentocompradetalle With
            {
            .idDocumento = det.idDocumento,
            .secuencia = det.secuencia,
            .idItem = det.idItem,
            .descripcionItem = det.descripcionItem,
            .tipoExistencia = det.tipoExistencia,
            .destino = det.destino,
            .unidad1 = det.unidad1,
            .monto1 = det.monto1,
            .equivalencia_id = det.equivalencia_id,
            .unidad2 = det.unidad2,
            .monto2 = det.monto2,
            .precioUnitario = det.precioUnitario,
            .precioUnitarioUS = det.precioUnitarioUS,
            .importe = det.importe,
            .importeUS = det.importeUS,
            .montokardex = det.montokardex,
            .montoIsc = det.montoIsc,
            .montoIgv = det.montoIgv,
            .otrosTributos = det.otrosTributos,
            .montokardexUS = det.montokardexUS,
            .montoIscUS = det.montoIscUS,
            .montoIgvUS = det.montoIgvUS,
            .otrosTributosUS = det.otrosTributosUS,
            .preEvento = det.preEvento,
            .cantidadCredito = det.cantidadCredito,
            .cantidadDebito = det.cantidadDebito,
            .notaCreditoMN = det.notaCreditoMN,
            .notaCreditoME = det.notaCreditoME,
            .notaDebitoMN = det.notaDebitoMN,
            .notaDebitoME = det.notaDebitoME,
            .percepcionMN = det.percepcionMN,
            .percepcionME = det.percepcionME,
            .bonificacion = det.bonificacion,
            .nrolote = det.nrolote,
            .almacenRef = det.almacenRef,
            .almacenDestino = det.almacenDestino,
            .situacion = det.situacion,
            .idPadreDTCompra = det.idPadreDTCompra,
            .entregable = det.entregable,
            .fechaEntrega = det.fechaEntrega,
            .estadoPago = det.estadoPago,
            .usuarioCaja = det.usuarioCaja,
            .operacionNota = det.operacionNota,
            .categoria = det.categoria,
            .idCosto = det.idCosto,
            .tipoCosto = det.tipoCosto,
            .ItemEntregadototal = det.ItemEntregadototal,
            .codigoLote = det.codigoLote,
            .tipoRecaudo = det.tipoRecaudo,
            .porcRecaudo = det.porcRecaudo,
            .valorRecaudo = det.valorRecaudo,
            .usuarioModificacion = det.usuarioModificacion,
            .fechaModificacion = det.fechaModificacion
            }
            )
        Next


        GetCompraID = New documentocompra With
        {
        .idDocumento = i.idDocumento,
        .codigoLibro = i.codigoLibro,
        .idEmpresa = i.idEmpresa,
        .idCentroCosto = i.idCentroCosto,
        .fechaLaboral = i.fechaLaboral,
        .fechaDoc = i.fechaDoc,
        .fechaVcto = i.fechaVcto,
        .fechaConstancia = i.fechaConstancia,
        .fechaContable = i.fechaContable,
        .nroConstancia = i.nroConstancia,
        .periodoTributo = i.periodoTributo,
        .tipoDoc = i.tipoDoc,
        .serie = i.serie,
        .numeroDoc = i.numeroDoc,
        .idProveedor = i.idProveedor,
        .idPersona = i.idPersona,
        .monedaDoc = i.monedaDoc,
        .tasaIgv = i.tasaIgv,
        .tcDolLoc = i.tcDolLoc,
        .tipocambio = i.tipocambio,
        .tipoRecaudo = i.tipoRecaudo,
        .regimen = i.regimen,
        .tasaRegimen = i.tasaRegimen,
        .nroRegimen = i.nroRegimen,
        .bi01 = i.bi01,
        .bi02 = i.bi02,
        .bi03 = i.bi03,
        .bi04 = i.bi04,
        .isc01 = i.isc01,
        .isc02 = i.isc02,
        .isc03 = i.isc03,
        .igv01 = i.igv01,
        .igv02 = i.igv02,
        .igv03 = i.igv03,
        .otc01 = i.otc01,
        .otc02 = i.otc02,
        .otc03 = i.otc03,
        .otc04 = i.otc04,
        .bi01us = i.bi01us,
        .bi02us = i.bi02us,
        .bi03us = i.bi03us,
        .bi04us = i.bi04us,
        .isc01us = i.isc01us,
        .isc02us = i.isc02us,
        .isc03us = i.isc03us,
        .igv01us = i.igv01us,
        .igv02us = i.igv02us,
        .igv03us = i.igv03us,
        .otc01us = i.otc01us,
        .otc02us = i.otc02us,
        .otc03us = i.otc03us,
        .otc04us = i.otc04us,
        .percepcion = i.percepcion,
        .percepcionus = i.percepcionus,
        .importeTotal = i.importeTotal,
        .importeUS = i.importeUS,
        .destino = i.destino,
        .estadoPago = i.estadoPago,
        .glosa = i.glosa,
        .referenciaDestino = i.referenciaDestino,
        .saldoMontoNota = i.saldoMontoNota,
        .saldoMontoNotaUSD = i.saldoMontoNotaUSD,
        .tipoCompra = i.tipoCompra,
        .sustentado = i.sustentado,
        .idPadre = i.idPadre,
        .situacion = i.situacion,
        .aprobado = i.aprobado,
        .apruebaPago = i.apruebaPago,
        .tieneDetraccion = i.tieneDetraccion,
        .asignacionPorcentaje = i.asignacionPorcentaje,
        .detraccionPorcentaje = i.detraccionPorcentaje,
        .estadoEntrega = i.estadoEntrega,
        .usuarioActualizacion = i.usuarioActualizacion,
        .fechaActualizacion = i.fechaActualizacion,
        .documentocompradetalle = ListCompra
        }
        '  Dim result = warmCountries.Join(europeanCountries, Function(warm) warm, Function(european) european, Function(warm, european) warm)

    End Function

    Public Function GrabarCompraVinculada(be As documento) As documento
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                If ValidacionCierreMensual(be) Then
                    RegistrarCompra(be)
                    RegistrarInventarioAfectado(be)



                    'RegistrarPagos(be)
                    'ActualizarInventario(be)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    be = LimpiarEntidades(be)
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return be
    End Function


    Public Sub RegistrarInventarioAfectado(be As documento)


        'Select Case be.documentocompra.notaCredito
        '    Case "01", "02", "06"

        '        Dim idDocVenta = be.documentocompra.idPadre

        '        Dim lista = (From i In HeliosData.InventarioMovimiento
        '                     Where i.idDocumento = idDocVenta).ToList

        '        For Each i In lista

        '            If be.documentocompra.notaCredito = "01" Then

        '                GetSalidaInventarioNC(i, be.documentocompra, "9933")
        '            ElseIf be.documentocompra.notaCredito = "02" Then

        '                GetSalidaInventarioNC(i, be.documentocompra, "9915")
        '            ElseIf be.documentocompra.notaCredito = "06" Then
        '                GetSalidaInventarioNC(i, be.documentocompra, "9916")
        '            End If
        '        Next

        '    Case "07", "08", "05"

        For Each i In be.documentocompra.documentocompradetalle

            Dim pm As Decimal = 0
            Dim cant As Decimal = 0
            Dim costo As Decimal = 0
            Dim codigolote As Integer = 0
            Dim cantidadEnviada As Decimal = 0

            'cantidadEnviada = i.monto1

            Dim idDocVenta = be.documentocompra.idPadre

            Dim lista2 = (From Y In HeliosData.InventarioMovimiento
                          Where Y.idDocumento = idDocVenta And Y.tipoRegistro = "E"
                          Select Y.idItem,
                                         Y.nrolote,
                                         Y.cantidad,
                                         Y.monto,
                                       Y.descripcion,
                                        Y.idAlmacen,
                                        Y.montoOther,
                                        nota = (Aggregate k In HeliosData.documentocompra
                                                Join p In HeliosData.documentocompra On k.idPadre Equals p.idDocumento
                                                Join inv In HeliosData.InventarioMovimiento On k.idDocumento Equals inv.idDocumento
                                                Where p.idDocumento = idDocVenta And k.tipoDoc = "07" And
                                                inv.nrolote = Y.nrolote And inv.tipoRegistro = "S" And inv.idItem = Y.idItem
                                                Into NCmn = Sum(inv.cantidad)),
                                      ventas = (Aggregate k In HeliosData.InventarioMovimiento
                                                Where k.tipoOperacion = "01" And
                                                k.nrolote = Y.nrolote And k.tipoRegistro = "S" And k.idItem = Y.idItem
                                                Into NCmn = Sum(k.cantidad))).ToList

            For Each h In lista2
                'If cantidadEnviada > 0 Then

                If i.idItem = h.idItem Then

                    Dim cantAct As Decimal = 0

                    cantAct = (h.cantidad) - h.nota.GetValueOrDefault + h.ventas.GetValueOrDefault

                    If cantAct > 0 Then

                        '            If cantAct >= cantidadEnviada Then
                        '                cant = cantidadEnviada
                        '            ElseIf cantAct <= cantidadEnviada Then
                        '                cant = cantAct

                        '            End If

                        '            pm = h.monto / (h.cantidad)
                        '            codigolote = h.nrolote

                        '            costo = cant * pm

                        '            i.salidaCostoMN = costo
                        '            i.precioUnitario = pm
                        '            i.codigoLote = codigolote
                        '            i.monto1 = cant

                        '            i.almacenRef = h.idAlmacen


                        '            If i.TipoOperacion = "9940" Then
                        '                i.salidaCostoMN = 0
                        '                i.salidaCostoME = 0
                        '            End If

                        '            GetSalidaInventarioParcialNC(i, be.documentocompra)

                        '            cantidadEnviada = cantidadEnviada - cant


                        i.codigoLote = h.nrolote
                        i.almacenRef = h.idAlmacen
                        i.salidaCostoMN = i.montokardex
                        i.salidaCostoME = i.montokardexUS
                        GetInventarioCompraVinculada(i, be.documentocompra)


                    Else


                        Throw New Exception("El item:!" & h.descripcion & "No tiene Stock Disponible")
                    End If


                End If

                'ElseIf cantidadEnviada = 0 Then


                'i.codigoLote = h.nrolote
                '    i.almacenRef = h.idAlmacen
                '    i.salidaCostoMN = i.montokardex
                '    i.salidaCostoME = i.montokardexUS
                '    GetInventarioCompraVinculada(i, be.documentocompra)


                'End If
            Next

        Next

        ' End Select

    End Sub


    Public Function ValidarCompra(be As documentocompra) As Integer

        Dim consulta = (From i In HeliosData.documentocompra
                        Where i.idProveedor = be.idProveedor And i.tipoDoc = be.tipoDoc And i.serie = be.serie And i.numeroDoc = be.numeroDoc And Not i.estadoPago = "ANU").Count

        Return consulta
    End Function

    Public Function GrabarCompraEquivalencia(be As documento) As documento
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                If ValidacionCierreMensual(be) Then

                    Dim val = ValidarCompra(be.documentocompra)
                    If val = 0 Then

                        RegistrarCompra(be)
                        RegistrarEnInventario(be)
                        RegistrarPagos(be)
                        'ActualizarInventario(be)
                        HeliosData.SaveChanges()
                        ts.Complete()
                        be = LimpiarEntidades(be)
                    Else
                        Throw New Exception("Numero de Documento Existente ")

                    End If
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return be
    End Function

    Private Sub ActualizarInventario(be As documento)
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL

        Dim listaArticulos = be.documentocompra.documentocompradetalle.ToList

        Dim Envios = (From n In listaArticulos
                      Select
                          n.CustomProducto.tipoExistencia, n.CustomProducto.codigodetalle, n.almacenRef, n.codigoLote).Distinct.ToList()

        For Each a In Envios
            Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                                New InventarioMovimiento With {
                                .idAlmacen = a.almacenRef,
                                .fecha = Date.Now,
                                .tipoProducto = a.tipoExistencia,
                                .idItem = a.codigodetalle,
                                .nrolote = a.codigoLote
                                }, Nothing)
            totalesBL.GetCurarKardexCaberasLOTE(lista)
        Next
        HeliosData.SaveChanges()
    End Sub

    Public Function GrabarAporteGeneral(be As documento) As documento


        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                If ValidacionCierreMensual(be) Then
                    RegistrarCompra(be)
                    RegistrarEnInventario(be)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    be = LimpiarEntidades(be)
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return be
    End Function

    Private Sub RegistrarPagos(be As documento)
        Dim documentoBL As New documentoBL
        Dim documentocajaBL As New documentoCajaBL
        Dim documentocajadetalleBL As New documentoCajaDetalleBL
        Using ts As New TransactionScope
            Dim codigoCompra = be.idDocumento

            If be.ListaCustomDocumento IsNot Nothing Then
                If be.ListaCustomDocumento.Count > 0 Then
                    For Each i In be.ListaCustomDocumento.ToList
                        documentoBL.Insert(i)
                        documentocajaBL.Insert(i.documentoCaja, i.idDocumento)

                        For Each det In i.documentoCaja.documentoCajaDetalle.ToList
                            det.idDocumento = i.idDocumento
                            det.documentoAfectado = codigoCompra
                            HeliosData.documentoCajaDetalle.Add(det)
                        Next
                    Next
                    'HeliosData.documento.AddRange(be.ListaCustomDocumento)
                End If
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Function ValidacionCierreMensual(be As documento) As Boolean
        ValidacionCierreMensual = True

        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim codDoc As Integer = 0
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL


        Dim fechaActual = New Date(be.documentocompra.fechaDoc.Value.Year, be.documentocompra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(be.idEmpresa, fechaActual, be.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                ValidacionCierreMensual = False
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = be.idEmpresa,
                                                .idCentroCosto = be.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                ValidacionCierreMensual = False
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            ValidacionCierreMensual = False
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                ValidacionCierreMensual = False
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If
    End Function

    'Private Sub RegistrarEnInventario(be As documento)
    '    ' Dim obj As InventarioMovimiento
    '    Dim listaInventario As List(Of InventarioMovimiento)
    '    Dim lote As recursoCostoLote = Nothing
    '    Dim listaLotes As List(Of recursoCostoLote)

    '    Using ts As New TransactionScope
    '        listaLotes = New List(Of recursoCostoLote)
    '        listaInventario = New List(Of InventarioMovimiento)
    '        Dim lotesExiste As Boolean = False
    '        For Each i In be.documentocompra.documentocompradetalle.ToList
    '            '   If lotesExiste = False Then
    '            lote = New recursoCostoLote With
    '                {
    '                .idDocumento = be.idDocumento,
    '                .codigoProducto = i.idItem,
    '                .moneda = be.moneda,
    '                .fechaentrada = be.fechaProceso,
    '                .nroLote = be.nroDoc,
    '                .detalle = i.CustomProducto.descripcionItem,
    '                .cantidad = i.monto1,
    '                .precioUnitarioIva = i.importe,
    '                .fechaProduccion = Date.Now,
    '                .fechaVcto = Date.Now.AddYears(1),
    '                .productoSustentado = True
    '                }
    '            listaLotes.Add(lote)
    '            '     RegistrarLoteCompra(lote)


    '            '   lotesExiste = HeliosData.recursoCostoLote.Any(Function(o) o.codigoProducto = i.idItem And o.codigoLote = lote.codigoLote)
    '            '  End If

    '            For Each prod In i.CustomListaInventarioMovimiento
    '                prod.idDocumento = be.idDocumento
    '                prod.idorigenDetalle = i.secuencia
    '                prod.nrolote = lote.codigoLote
    '                i.codigoLote = lote.codigoLote
    '                i.FechaVcto = lote.fechaVcto
    '                prod.customProducto = i.CustomProducto
    '                listaInventario.Add(prod)
    '                HeliosData.InventarioMovimiento.Add(prod)

    '                RegistrarInventarioValorizado(i, prod)
    '            Next
    '            '   RegistrarInventarioValorizado(i)
    '        Next


    '        Dim EnviosLotes = (From q In listaLotes
    '                           Group q By
    '                                q.idDocumento,
    '                                q.codigoProducto,
    '                                q.moneda,
    '                                q.nroLote,
    '                                q.detalle
    '                              Into g = Group
    '                           Select
    '                              idDocumento,
    '                              codigoProducto,
    '                              moneda,
    '                              nroLote,
    '                              detalle,
    '                              SumCantidades = CType(g.Sum(Function(p) p.cantidad), Decimal?),
    '                              SumImportes = CType(g.Sum(Function(p) p.cantidad), Decimal?)).ToList



    '        For Each env In EnviosLotes
    '            lote = New recursoCostoLote With
    '                {
    '                .idDocumento = env.idDocumento,
    '                .codigoProducto = env.codigoProducto,
    '                .moneda = env.moneda,
    '                .fechaentrada = be.fechaProceso,
    '                .nroLote = env.nroLote,
    '                .detalle = env.detalle,
    '                .cantidad = env.SumCantidades,
    '                .precioUnitarioIva = env.SumImportes,
    '                .fechaProduccion = Date.Now,
    '                .fechaVcto = Date.Now.AddYears(1),
    '                .productoSustentado = True
    '                }
    '            RegistrarLoteCompra(lote)
    '        Next


    '        HeliosData.SaveChanges()
    '        ts.Complete()
    '    End Using
    'End Sub


    Private Sub RegistrarEnInventario(be As documento)
        Dim obj As InventarioMovimiento
        Dim listaInventario As List(Of InventarioMovimiento)
        Using ts As New TransactionScope

            listaInventario = New List(Of InventarioMovimiento)

            For Each i In be.documentocompra.documentocompradetalle.ToList
                'Dim lote As New recursoCostoLote With
                '    {
                '    .idDocumento = be.idDocumento,
                '    .codigoProducto = i.idItem,
                '    .moneda = be.moneda,
                '    .fechaentrada = be.fechaProceso,
                '    .nroLote = be.nroDoc,
                '    .detalle = i.CustomProducto.descripcionItem,
                '    .cantidad = i.monto1,
                '    .precioUnitarioIva = i.importe,
                '    .fechaProduccion = Date.Now,
                '    .fechaVcto = Date.Now.AddYears(1),
                '    .productoSustentado = True
                '    }
                'RegistrarLoteCompra(lote)

                For Each prod In i.CustomListaInventarioMovimiento
                    '    prod.idDocumento = be.idDocumento
                    'prod.idorigenDetalle = i.secuencia
                    'prod.nrolote = lote.codigoLote
                    'i.codigoLote = lote.codigoLote
                    'i.FechaVcto = lote.fechaVcto
                    prod.customProducto = i.CustomProducto
                    prod.idorigenDetalle = i.secuencia
                    listaInventario.Add(prod)
                    ' HeliosData.InventarioMovimiento.Add(prod)

                    ' RegistrarInventarioValorizado(i, prod)
                Next
                '   RegistrarInventarioValorizado(i)
            Next


            Dim conInventario = (From inv In listaInventario
                                 Group inv By
                                     inv.customProducto.origenProducto,
                                     inv.customProducto.tipoExistencia,
                                     inv.customProducto.codigodetalle,
                                     inv.customProducto.descripcionItem,
                                     inv.customProducto.unidad1,
                                    inv.idEmpresa,
                                       inv.idEstablecimiento,
                                    inv.idAlmacen,
                                     inv.descripcion,
                                    inv.tipoOperacion,
                                    inv.tipoDocAlmacen,
                                    inv.tipoRegistro,
                                    inv.destinoGravadoItem,
                                    inv.tipoProducto,
                                     inv.idorigenDetalle,
                                    inv.idItem,
                                       inv.unidad
                            Into g = Group
                                 Select
                                     origenProducto,
                                     tipoExistencia,
                                     codigodetalle,
                                     descripcionItem,
                                     unidad1,
                                        idEmpresa,
                                        idEstablecimiento,
                                        idAlmacen,
                                     descripcion,
                                      tipoOperacion,
                                      tipoDocAlmacen,
                                    tipoRegistro,
                                    destinoGravadoItem,
                                    tipoProducto,
                                     idorigenDetalle,
                                    idItem,
                                      unidad,
                                      SumCantidades = CType(g.Sum(Function(p) p.cantidad), Decimal?),
                                      SumCosto = CType(g.Sum(Function(p) p.monto), Decimal?),
                                     SumCostoME = CType(g.Sum(Function(p) p.montoUSD), Decimal?)).ToList

            'Dim conInventario = (From inv In listaInventario
            '                     Group inv By
            '                        inv.idEmpresa,
            '                        inv.idEstablecimiento,
            '                        inv.idAlmacen,
            '                        inv.tipoOperacion,
            '                        inv.tipoDocAlmacen,
            '                        inv.serie,
            '                        inv.numero,
            '                        inv.descripcion,
            '                        inv.fechaLaboral,
            '                        inv.fecha,
            '                        inv.tipoRegistro,
            '                        inv.destinoGravadoItem,
            '                        inv.tipoProducto,
            '                        inv.idItem,
            '                        inv.marca,
            '                        inv.unidad,
            '                        inv.precUnite,
            '                        inv.precUniteUSD,
            '                        inv.monto,
            '                        inv.montoUSD,
            '                        inv.status,
            '                        inv.entragado
            '                Into g = Group
            '                     Select
            '                            idEmpresa,
            '                            idEstablecimiento,
            '                            idAlmacen,
            '                            tipoOperacion,
            '                            tipoDocAlmacen,
            '                            serie,
            '                            numero,
            '                            descripcion,
            '                            fechaLaboral,
            '                            fecha,
            '                            tipoRegistro,
            '                            destinoGravadoItem,
            '                            tipoProducto,
            '                            idItem,
            '                            marca,
            '                            unidad,
            '                            precUnite,
            '                            precUniteUSD,
            '                            monto,
            '                            montoUSD,
            '                            status,
            '                            entragado,
            '                            SumCantidades = CType(g.Sum(Function(p) p.cantidad), Decimal?)).ToList

            '      Throw New Exception("Repetir")


            For Each p In listaInventario



                If p.cantidad.GetValueOrDefault > 0 Then

                    Dim lote As New recursoCostoLote With
                    {
                    .idDocumento = be.idDocumento,
                    .codigoProducto = p.idItem,
                    .moneda = be.moneda,
                    .fechaentrada = be.fechaProceso,
                    .nroLote = be.nroDoc,
                    .detalle = p.descripcion,
                    .cantidad = p.cantidad.GetValueOrDefault,
                    .precioUnitarioIva = p.monto.GetValueOrDefault,
                    .precioUnitarioIvaME = p.montoUSD.GetValueOrDefault,
                    .fechaProduccion = Date.Now,
                    .fechaVcto = Date.Now.AddYears(1),
                    .productoSustentado = True,
                    .verificado = False
                    }
                    RegistrarLoteCompra(lote)


                    obj = New InventarioMovimiento With
                    {
                    .customProducto = New detalleitems With
                    {
                    .origenProducto = p.customProducto.origenProducto,
                    .codigodetalle = p.customProducto.codigodetalle,
                    .tipoExistencia = p.customProducto.tipoExistencia,
                    .descripcionItem = p.customProducto.descripcionItem,
                    .unidad1 = p.customProducto.unidad1
                    },
                    .cantidad = p.cantidad.GetValueOrDefault,
                    .idorigenDetalle = p.idorigenDetalle,
                    .idEmpresa = p.idEmpresa,
                    .idEstablecimiento = p.idEstablecimiento,
                    .idAlmacen = p.idAlmacen,
                    .nrolote = lote.codigoLote,
                    .tipoOperacion = p.tipoOperacion,
                    .tipoDocAlmacen = p.tipoDocAlmacen,
                    .serie = be.documentocompra.serie,
                    .numero = be.documentocompra.numeroDoc,
                    .descripcion = p.descripcion,
                    .fechaLaboral = be.fechaProceso,
                    .fecha = be.fechaProceso,
                    .tipoRegistro = p.tipoRegistro,
                    .destinoGravadoItem = p.destinoGravadoItem,
                    .tipoProducto = p.tipoProducto,
                    .idItem = p.idItem,
                    .unidad = p.unidad,
                    .precUnite = CalculoPrecioUnitario(p.monto, p.cantidad),
                    .precUniteUSD = CalculoPrecioUnitario(p.montoUSD, p.cantidad),
                    .monto = p.monto,
                    .montoUSD = p.montoUSD,
                    .status = "D",
                    .entragado = "S",
                    .consignado = "N"
                    }
                    HeliosData.InventarioMovimiento.Add(obj)

                    obj.usuarioActualizacion = "1"
                    obj.fechaActualizacion = DateTime.Now

                    obj.idDocumento = be.idDocumento
                    ' obj.idorigenDetalle = i.secuencia
                    obj.nrolote = lote.codigoLote
                    obj.fechavcto = lote.fechaVcto

                    RegistrarInventarioValorizado2(obj)
                End If
            Next

            'For Each p In conInventario
            '    ¡For Each p In conInventario


            '    If p.SumCantidades.GetValueOrDefault > 0 Then

            '        Dim lote As New recursoCostoLote With
            '        {
            '        .idDocumento = be.idDocumento,
            '        .codigoProducto = p.idItem,
            '        .moneda = be.moneda,
            '        .fechaentrada = be.fechaProceso,
            '        .nroLote = be.nroDoc,
            '        .detalle = p.descripcion,
            '        .cantidad = p.SumCantidades.GetValueOrDefault,
            '        .precioUnitarioIva = p.SumCosto.GetValueOrDefault,
            '        .precioUnitarioIvaME = p.SumCostoME.GetValueOrDefault,
            '        .fechaProduccion = Date.Now,
            '        .fechaVcto = Date.Now.AddYears(1),
            '        .productoSustentado = True
            '        }
            '        RegistrarLoteCompra(lote)


            '        obj = New InventarioMovimiento With
            '        {
            '        .customProducto = New detalleitems With
            '        {
            '        .origenProducto = p.origenProducto,
            '        .codigodetalle = p.codigodetalle,
            '        .tipoExistencia = p.tipoExistencia,
            '        .descripcionItem = p.descripcionItem,
            '        .unidad1 = p.unidad1
            '        },
            '        .cantidad = p.SumCantidades.GetValueOrDefault,
            '        .idEmpresa = p.idEmpresa,
            '        .idEstablecimiento = p.idEstablecimiento,
            '        .idAlmacen = p.idAlmacen,
            '        .nrolote = lote.codigoLote,
            '        .tipoOperacion = p.tipoOperacion,
            '        .tipoDocAlmacen = p.tipoDocAlmacen,
            '        .serie = be.documentocompra.serie,
            '        .numero = be.documentocompra.numeroDoc,
            '        .descripcion = p.descripcion,
            '        .fechaLaboral = be.fechaProceso,
            '        .fecha = be.fechaProceso,
            '        .tipoRegistro = p.tipoRegistro,
            '        .destinoGravadoItem = p.destinoGravadoItem,
            '        .tipoProducto = p.tipoProducto,
            '        .idItem = p.idItem,
            '        .unidad = p.unidad,
            '        .precUnite = CalculoPrecioUnitario(p.SumCosto, p.SumCantidades),
            '        .precUniteUSD = CalculoPrecioUnitario(p.SumCostoME, p.SumCantidades),
            '        .monto = p.SumCosto,
            '        .montoUSD = p.SumCostoME,
            '        .status = "D",
            '        .entragado = "S",
            '        .consignado = "N"
            '        }
            '        HeliosData.InventarioMovimiento.Add(obj)

            '        obj.usuarioActualizacion = "1"
            '        obj.fechaActualizacion = DateTime.Now

            '        obj.idDocumento = be.idDocumento
            '        ' obj.idorigenDetalle = i.secuencia
            '        obj.nrolote = lote.codigoLote
            '        obj.fechavcto = lote.fechaVcto

            '        RegistrarInventarioValorizado2(obj)
            '    End If
            'Next

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub RegistrarInventarioValorizado2(i As InventarioMovimiento)
        Using ts As New TransactionScope
            Dim nuevoTA As New totalesAlmacen With
                                    {
                                        .idEmpresa = i.idEmpresa,
                                        .idEstablecimiento = i.idEstablecimiento,
                                        .codigoLote = i.nrolote,
                                        .idAlmacen = i.idAlmacen,
                                        .origenRecaudo = i.customProducto.origenProducto,
                                        .tipoExistencia = i.customProducto.tipoExistencia,
                                        .idItem = i.customProducto.codigodetalle,
                                        .descripcion = i.customProducto.descripcionItem,
                                        .idUnidad = i.customProducto.unidad1,
                                        .unidadMedida = i.customProducto.unidad1,
                                        .cantidad = i.cantidad,
                                        .importeSoles = i.monto,
                                        .importeDolares = i.montoUSD,
                                        .cantidadMaxima = 10000,
                                        .cantidadMinima = 10,
                                        .fechaVcto = i.fechavcto,
                                        .status = StatusArticulo.Activo,
                                        .usuarioActualizacion = i.usuarioActualizacion,
                                        .fechaActualizacion = i.fechaActualizacion
            }
            HeliosData.totalesAlmacen.Add(nuevoTA)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub RegistrarInventarioValorizado(i As documentocompradetalle)
        Using ts As New TransactionScope
            Dim nuevoTA As New totalesAlmacen With
                                    {
                                        .idEmpresa = i.documentocompra.idEmpresa,
                                        .idEstablecimiento = i.documentocompra.idCentroCosto,
                                        .codigoLote = i.codigoLote,
                                        .idAlmacen = i.almacenRef,
                                        .origenRecaudo = i.CustomProducto.origenProducto,
                                        .tipoExistencia = i.CustomProducto.tipoExistencia,
                                        .idItem = i.CustomProducto.codigodetalle,
                                        .descripcion = i.CustomProducto.descripcionItem,
                                        .idUnidad = i.CustomProducto.unidad1,
                                        .unidadMedida = i.CustomProducto.unidad1,
                                        .cantidad = i.monto1,
                                        .importeSoles = i.montokardex,
                                        .importeDolares = i.montokardexUS,
                                        .cantidadMaxima = 10000,
                                        .cantidadMinima = 10,
                                        .fechaVcto = i.FechaVcto,
                                        .status = StatusArticulo.Activo,
                                        .usuarioActualizacion = i.usuarioModificacion,
                                        .fechaActualizacion = i.fechaModificacion
            }
            HeliosData.totalesAlmacen.Add(nuevoTA)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    'Private Sub RegistrarProductoValorizado(i As documentocompradetalle, prod As InventarioMovimiento)
    '    Dim nuevoTA As totalesAlmacen = Nothing
    '    Using ts As New TransactionScope

    '        Dim prodExiste = HeliosData.totalesAlmacen.Any(Function(o) o.idItem = i.CustomProducto.codigodetalle)
    '        If prodExiste = False Then
    '            nuevoTA = New totalesAlmacen With
    '                                {
    '                                    .idEmpresa = i.documentocompra.idEmpresa,
    '                                    .idEstablecimiento = i.documentocompra.idCentroCosto,
    '                                    .codigoLote = i.codigoLote,
    '                                    .idAlmacen = prod.idAlmacen,
    '                                    .origenRecaudo = i.CustomProducto.origenProducto,
    '                                    .tipoExistencia = i.CustomProducto.tipoExistencia,
    '                                    .idItem = i.CustomProducto.codigodetalle,
    '                                    .descripcion = i.CustomProducto.descripcionItem,
    '                                    .idUnidad = i.CustomProducto.unidad1,
    '                                    .unidadMedida = i.CustomProducto.unidad1,
    '                                    .cantidad = prod.cantidad,
    '                                    .importeSoles = prod.monto,
    '                                    .importeDolares = 0,
    '                                    .cantidadMaxima = 10000,
    '                                    .cantidadMinima = 10,
    '                                    .fechaVcto = i.FechaVcto,
    '                                    .status = StatusArticulo.Activo,
    '                                    .usuarioActualizacion = i.usuarioModificacion,
    '                                    .fechaActualizacion = i.fechaModificacion
    '        }
    '        End If
    '        HeliosData.SaveChanges()
    '        ts.Complete()
    '    End Using
    'End Sub

    Private Sub RegistrarInventarioValorizado(i As documentocompradetalle, prod As InventarioMovimiento)
        Dim nuevoTA As totalesAlmacen = Nothing
        Using ts As New TransactionScope

            Dim prodExiste = HeliosData.totalesAlmacen.Any(Function(o) o.idItem = i.CustomProducto.codigodetalle)
            If prodExiste = False Then
                nuevoTA = New totalesAlmacen With
                                    {
                                        .idEmpresa = i.documentocompra.idEmpresa,
                                        .idEstablecimiento = i.documentocompra.idCentroCosto,
                                        .codigoLote = i.codigoLote,
                                        .idAlmacen = prod.idAlmacen,
                                        .origenRecaudo = i.CustomProducto.origenProducto,
                                        .tipoExistencia = i.CustomProducto.tipoExistencia,
                                        .idItem = i.CustomProducto.codigodetalle,
                                        .descripcion = i.CustomProducto.descripcionItem,
                                        .idUnidad = i.CustomProducto.unidad1,
                                        .unidadMedida = i.CustomProducto.unidad1,
                                        .cantidad = prod.cantidad,
                                        .importeSoles = prod.monto,
                                        .importeDolares = 0,
                                        .cantidadMaxima = 10000,
                                        .cantidadMinima = 10,
                                        .fechaVcto = i.FechaVcto,
                                        .status = StatusArticulo.Activo,
                                        .usuarioActualizacion = i.usuarioModificacion,
                                        .fechaActualizacion = i.fechaModificacion
            }
                HeliosData.totalesAlmacen.Add(nuevoTA)
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub RegistrarLoteCompra(lote As recursoCostoLote)
        Using ts As New TransactionScope
            HeliosData.recursoCostoLote.Add(lote)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Shared Function LimpiarEntidades(be As documento) As documento
        be.ListaCustomDocumento = New List(Of documento)
        For Each i In be.documentocompra.documentocompradetalle
            i.documentocompra = Nothing
            i.CustomListaInventarioMovimiento = New List(Of InventarioMovimiento)
            i.CustomProducto = Nothing
            i.CustomPrecios = New List(Of configuracionPrecioProducto)
            i.CustomListaDocumentoGuia = New List(Of documento)
            i.CustomRecursoCostoLote = Nothing
            i.CustomProducto_equivalencia = Nothing
            i.recursoCosto_compraDetalle = New List(Of recursoCosto_compraDetalle)
            i.inventarioTransito = New List(Of inventarioTransito)
            'i.documentocompra.documento = Nothing
        Next
        be.documentocompra = Nothing
        Return be
    End Function

    Private Sub RegistrarCompra(be As documento)
        Try
            Dim tipoDocInterno As String = String.Empty
            Dim nroDocInterno As String = String.Empty
            Dim serieDocInterno As String = String.Empty
            Dim numeracionBL As New numeracionBoletasBL

            If (be.IdPerfil > 0) Then
                Dim nuevoNumero = numeracionBL.NumeracionBoletasSelV2(be.idCentroCosto, "CP", "9903", be.IdPerfil)
                If (Not IsNothing(nuevoNumero)) Then
                    serieDocInterno = nuevoNumero.serie
                    tipoDocInterno = nuevoNumero.tipo
                    nroDocInterno = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(nuevoNumero.IdEnumeracion))
                Else
                    Throw New Exception("Verificar Permiso")
                End If
            Else
                Throw New Exception("Verificar datos")
            End If

            Dim SERIE As String = String.Empty
            Dim NUMERO As String = String.Empty
            Select Case be.tipoDoc
                Case "01", "03"

                    be.documentocompra.serieInterno = serieDocInterno
                    be.documentocompra.numeroInterno = nroDocInterno
                    be.documentocompra.tipoDocInterno = tipoDocInterno

                    SERIE = be.documentocompra.serie
                    NUMERO = be.documentocompra.numeroDoc
                Case "9907"
                    SERIE = "N9907"
                    NUMERO = HeliosData.documentocompra.Where(Function(c) c.tipoDoc = be.tipoDoc).Count
                    NUMERO = NUMERO + 1

                    be.documentocompra.serie = SERIE
                    be.documentocompra.numeroDoc = NUMERO

                    be.documentocompra.serieInterno = serieDocInterno
                    be.documentocompra.numeroInterno = nroDocInterno
                    be.documentocompra.tipoDocInterno = tipoDocInterno
            End Select
            be.nroDoc = $"{SERIE}-{NUMERO}"

            Using ts As New TransactionScope
                HeliosData.documento.Add(be)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using

        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function GetEscaneadasCRapidas(be As documentocompra) As List(Of documentocompra)
        'Dim FechInicio = New DateTime(be.fechaDoc.Value.Year, be.fechaDoc.Value.Month, be.fechaDoc.Value.Day, 0, 0, 0)
        Dim fechaFinal = New DateTime(DateTime.Now.Year, 12, 31, 0, 0, 0)

        Dim s As New DateTime(DateTime.Now.Year, 1, 1)
        Dim addDay As DateTime = s.AddDays(CInt(30))

        GetEscaneadasCRapidas = New List(Of documentocompra)

        Dim consulta30 = (From doc In HeliosData.documentocompra
                          Join det In HeliosData.documentocompradetalle
                                        On det.idDocumento Equals doc.idDocumento
                          Where
                                    doc.idEmpresa = be.idEmpresa And
                              doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    doc.fechaDoc = s And
                                    doc.fechaDoc <= addDay
                          Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    det.secuencia,
                                    det.idItem,
                                    det.descripcionItem,
                                    det.unidad1,
                                    det.monto1
                                    }).Count

        GetEscaneadasCRapidas.Add(New documentocompra With
                                  {
                                  .referenciaDestino = "0-30",
                                  .conteoCuotas = consulta30
                                  })

        '--------------------------------- 60 ------------------------------------------
        addDay = addDay.AddDays(1)
        Dim s60 As New DateTime(DateTime.Now.Year, addDay.Date.Month, addDay.Date.Day)
        Dim addDay60 As DateTime = s60.AddDays(CInt(30))
        Dim consulta60 = (From doc In HeliosData.documentocompra
                          Join det In HeliosData.documentocompradetalle
                                        On det.idDocumento Equals doc.idDocumento
                          Where
                                    doc.idEmpresa = be.idEmpresa And
                              doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    doc.fechaDoc >= s60 And
                                    doc.fechaDoc <= addDay60
                          Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    det.secuencia,
                                    det.idItem,
                                    det.descripcionItem,
                                    det.unidad1,
                                    det.monto1
                                    }).Count


        GetEscaneadasCRapidas.Add(New documentocompra With
                                  {
                                  .referenciaDestino = "31-60",
                                  .conteoCuotas = consulta60
                                  })

        '****************************************** 61 a mas***********************************************
        addDay60 = addDay60.AddDays(1)
        Dim s90 As New DateTime(DateTime.Now.Year, addDay60.Date.Month, addDay60.Date.Day)
        '  Dim dias90 = DateDiff(DateInterval.Day, s, DateTime.Now.Date)
        Dim addDay90 As DateTime = s90.AddDays(CInt(30))
        Dim consulta90 = (From doc In HeliosData.documentocompra
                          Join det In HeliosData.documentocompradetalle
                                        On det.idDocumento Equals doc.idDocumento
                          Where
                                    doc.idEmpresa = be.idEmpresa And
                              doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    doc.fechaDoc >= s90 And
                                    doc.fechaDoc <= fechaFinal'addDay90
                          Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    det.secuencia,
                                    det.idItem,
                                    det.descripcionItem,
                                    det.unidad1,
                                    det.monto1
                                    }).Count

        GetEscaneadasCRapidas.Add(New documentocompra With
                                 {
                                 .referenciaDestino = "61-mas",
                                 .conteoCuotas = consulta90
                                 })


    End Function

    Public Function GetEscaneadasConteoNotaCompra(be As documentocompra) As List(Of documentocompra)
        'Dim FechInicio = New DateTime(be.fechaDoc.Value.Year, be.fechaDoc.Value.Month, be.fechaDoc.Value.Day, 0, 0, 0)
        Dim fechaFinal = New DateTime(DateTime.Now.Year, 12, 31, 0, 0, 0)

        Dim s As New DateTime(DateTime.Now.Year, 1, 1)
        Dim addDay As DateTime = s.AddDays(CInt(30))

        GetEscaneadasConteoNotaCompra = New List(Of documentocompra)

        Dim consulta30 = (From doc In HeliosData.documentocompra
                          Where
                              doc.idEmpresa = be.idEmpresa And
                              doc.idCentroCosto = be.idCentroCosto And
                              doc.tipoCompra = be.tipoCompra And
                              doc.fechaDoc = s And
                              doc.fechaDoc <= addDay
                          Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc
                                    }).Count

        GetEscaneadasConteoNotaCompra.Add(New documentocompra With
                                  {
                                  .referenciaDestino = "0-30",
                                  .conteoCuotas = consulta30
                                  })

        '--------------------------------- 60 ------------------------------------------
        addDay = addDay.AddDays(1)
        Dim s60 As New DateTime(DateTime.Now.Year, addDay.Date.Month, addDay.Date.Day)
        Dim addDay60 As DateTime = s60.AddDays(CInt(30))
        Dim consulta60 = (From doc In HeliosData.documentocompra
                          Where
                              doc.idEmpresa = be.idEmpresa And
                              doc.idCentroCosto = be.idCentroCosto And
                              doc.tipoCompra = be.tipoCompra And
                              doc.fechaDoc >= s60 And
                              doc.fechaDoc <= addDay60
                          Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc
                                    }).Count


        GetEscaneadasConteoNotaCompra.Add(New documentocompra With
                                  {
                                  .referenciaDestino = "31-60",
                                  .conteoCuotas = consulta60
                                  })

        '****************************************** 61 a mas***********************************************
        addDay60 = addDay60.AddDays(1)
        Dim s90 As New DateTime(DateTime.Now.Year, addDay60.Date.Month, addDay60.Date.Day)
        '  Dim dias90 = DateDiff(DateInterval.Day, s, DateTime.Now.Date)
        Dim addDay90 As DateTime = s90.AddDays(CInt(30))
        Dim consulta90 = (From doc In HeliosData.documentocompra
                          Where
                              doc.idEmpresa = be.idEmpresa And
                              doc.idCentroCosto = be.idCentroCosto And
                              doc.tipoCompra = be.tipoCompra And
                              doc.fechaDoc >= s90 And
                              doc.fechaDoc <= fechaFinal'addDay90
                          Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc
                                    }).Count

        GetEscaneadasConteoNotaCompra.Add(New documentocompra With
                                 {
                                 .referenciaDestino = "61-mas",
                                 .conteoCuotas = consulta90
                                 })


    End Function

    Public Function GetEscaneadasCRapidasListNC(be As documentocompra) As List(Of documentocompra)
        'Dim FechInicio = New DateTime(be.fechaDoc.Value.Year, be.fechaDoc.Value.Month, be.fechaDoc.Value.Day, 0, 0, 0)
        Dim fechaFinal = New DateTime(DateTime.Now.Year, 12, 31, 0, 0, 0)
        Dim addDay60 As DateTime
        Dim s As New DateTime(DateTime.Now.Year, 1, 1)
        Dim addDay As DateTime = s.AddDays(CInt(30))

        GetEscaneadasCRapidasListNC = New List(Of documentocompra)

        Select Case be.tipoOperacion
            Case "30"
                Dim consulta30 = (From doc In HeliosData.documentocompra
                                  Join enti In HeliosData.entidad On enti.idEntidad Equals doc.idProveedor
                                  Group Join mov In HeliosData.documentocompra On doc.idDocumento Equals mov.idPadre Into
                                      mov_join = Group
                                  From mov In mov_join.DefaultIfEmpty()
                                  Where
                                            doc.idEmpresa = be.idEmpresa And
                                      doc.idCentroCosto = be.idCentroCosto And
                                            doc.tipoCompra = be.tipoCompra And
                                            doc.fechaDoc = s And
                                            doc.fechaDoc <= addDay
                                  Select New With
                                            {
                                            doc.aprobado,
                                            doc.idDocumento,
                                            doc.fechaDoc,
                                            doc.tipoDoc,
                                            doc.serie,
                                            doc.numeroDoc,
                                      enti.nombreCompleto,
                                      .IDCompra = CType(mov.idDocumento, Integer?)
                                            }).ToList

                For Each i In consulta30
                    GetEscaneadasCRapidasListNC.Add(New documentocompra With
                                                {
                                                .idPadre = i.IDCompra.GetValueOrDefault,
                                                .aprobado = i.aprobado,
                                                .idDocumento = i.idDocumento,
                                                .fechaDoc = i.fechaDoc,
                                                .tipoDoc = i.tipoDoc,
                                                .serie = i.serie,
                                                .numeroDoc = i.numeroDoc,
                                                .nombreProveedor = i.nombreCompleto
                                                })
                Next
            Case "60"
                '--------------------------------- 60 ------------------------------------------
                addDay = addDay.AddDays(1)
                Dim s60 As New DateTime(DateTime.Now.Year, addDay.Date.Month, addDay.Date.Day)
                addDay60 = s60.AddDays(CInt(30))
                Dim consulta60 = (From doc In HeliosData.documentocompra
                                  Join enti In HeliosData.entidad On enti.idEntidad Equals doc.idProveedor
                                  Group Join mov In HeliosData.documentocompra On doc.idDocumento Equals mov.idPadre Into
                                      mov_join = Group
                                  From mov In mov_join.DefaultIfEmpty()
                                  Where
                                            doc.idEmpresa = be.idEmpresa And
                                      doc.idCentroCosto = be.idCentroCosto And
                                            doc.tipoCompra = be.tipoCompra And
                                            doc.fechaDoc >= s60 And
                                            doc.fechaDoc <= addDay60
                                  Select New With
                                            {
                                            doc.aprobado,
                                            doc.idDocumento,
                                            doc.fechaDoc,
                                            doc.tipoDoc,
                                            doc.serie,
                                            doc.numeroDoc,
                                      enti.nombreCompleto,
                                      .IDCompra = CType(mov.idDocumento, Integer?)
                                            }).ToList

                For Each i In consulta60
                    GetEscaneadasCRapidasListNC.Add(New documentocompra With
                                               {
                                               .idPadre = i.IDCompra.GetValueOrDefault,
                                               .aprobado = i.aprobado,
                                               .idDocumento = i.idDocumento,
                                               .fechaDoc = i.fechaDoc,
                                               .tipoDoc = i.tipoDoc,
                                               .serie = i.serie,
                                               .numeroDoc = i.numeroDoc,
                                               .nombreProveedor = i.nombreCompleto
                                               })
                Next


            Case "61"
                '****************************************** 61 a mas***********************************************
                addDay60 = addDay60.AddDays(1)
                Dim s90 As New DateTime(DateTime.Now.Year, addDay60.Date.Month, addDay60.Date.Day)
                '  Dim dias90 = DateDiff(DateInterval.Day, s, DateTime.Now.Date)
                Dim addDay90 As DateTime = s90.AddDays(CInt(30))
                Dim consulta90 = (From doc In HeliosData.documentocompra
                                  Join enti In HeliosData.entidad On enti.idEntidad Equals doc.idProveedor
                                  Group Join mov In HeliosData.documentocompra On doc.idDocumento Equals mov.idPadre Into
                                      mov_join = Group
                                  From mov In mov_join.DefaultIfEmpty()
                                  Where
                                            doc.idEmpresa = be.idEmpresa And
                                      doc.idCentroCosto = be.idCentroCosto And
                                            doc.tipoCompra = be.tipoCompra And
                                            doc.fechaDoc >= s90 And
                                            doc.fechaDoc <= fechaFinal'addDay90
                                  Select New With
                                            {
                                            doc.aprobado,
                                            doc.idDocumento,
                                            doc.fechaDoc,
                                            doc.tipoDoc,
                                            doc.serie,
                                            doc.numeroDoc,
                                       enti.nombreCompleto,
                                      .IDCompra = CType(mov.idDocumento, Integer?)
                                            }).ToList


                For Each i In consulta90
                    GetEscaneadasCRapidasListNC.Add(New documentocompra With
                                               {
                                               .idPadre = i.IDCompra.GetValueOrDefault,
                                               .aprobado = i.aprobado,
                                               .idDocumento = i.idDocumento,
                                               .fechaDoc = i.fechaDoc,
                                               .tipoDoc = i.tipoDoc,
                                               .serie = i.serie,
                                               .numeroDoc = i.numeroDoc,
                                               .nombreProveedor = i.nombreCompleto
                                               })
                Next
        End Select

    End Function

    Public Function GetEscaneadasCRapidasList(be As documentocompra) As List(Of documentocompra)
        'Dim FechInicio = New DateTime(be.fechaDoc.Value.Year, be.fechaDoc.Value.Month, be.fechaDoc.Value.Day, 0, 0, 0)
        Dim fechaFinal = New DateTime(DateTime.Now.Year, 12, 31, 0, 0, 0)
        Dim addDay60 As DateTime
        Dim s As New DateTime(DateTime.Now.Year, 1, 1)
        Dim addDay As DateTime = s.AddDays(CInt(30))

        GetEscaneadasCRapidasList = New List(Of documentocompra)

        Select Case be.tipoOperacion
            Case "30"
                Dim consulta30 = (From doc In HeliosData.documentocompra
                                  Join det In HeliosData.documentocompradetalle
                                                On det.idDocumento Equals doc.idDocumento
                                  Group Join mov In HeliosData.documentocompra On doc.idDocumento Equals mov.idPadre Into
                                      mov_join = Group
                                  From mov In mov_join.DefaultIfEmpty()
                                  Where
                                            doc.idEmpresa = be.idEmpresa And
                                            doc.tipoCompra = be.tipoCompra And
                                            doc.fechaDoc = s And
                                            doc.fechaDoc <= addDay
                                  Select New With
                                            {
                                            doc.aprobado,
                                            doc.idDocumento,
                                            doc.fechaDoc,
                                            doc.tipoDoc,
                                            doc.serie,
                                            doc.numeroDoc,
                                            det.secuencia,
                                            det.idItem,
                                            det.descripcionItem,
                                            det.unidad1,
                                            det.monto1,
                                      .IDCompra = CType(mov.idDocumento, Integer?)
                                            }).ToList

                For Each i In consulta30
                    GetEscaneadasCRapidasList.Add(New documentocompra With
                                                {
                                                .idPadre = i.IDCompra.GetValueOrDefault,
                                                .aprobado = i.aprobado,
                                                .idDocumento = i.idDocumento,
                                                .fechaDoc = i.fechaDoc,
                                                .tipoDoc = i.tipoDoc,
                                                .serie = i.serie,
                                                .numeroDoc = i.numeroDoc,
                                                .CustomDetalleCompra = New documentocompradetalle With
                                                {
                                                .secuencia = i.secuencia,
                                                .idItem = i.idItem,
                                                .descripcionItem = i.descripcionItem,
                                                .unidad1 = i.unidad1,
                                                .monto1 = i.monto1
                                                }
                                                })
                Next
            Case "60"
                '--------------------------------- 60 ------------------------------------------
                addDay = addDay.AddDays(1)
                Dim s60 As New DateTime(DateTime.Now.Year, addDay.Date.Month, addDay.Date.Day)
                addDay60 = s60.AddDays(CInt(30))
                Dim consulta60 = (From doc In HeliosData.documentocompra
                                  Join det In HeliosData.documentocompradetalle
                                                On det.idDocumento Equals doc.idDocumento
                                  Group Join mov In HeliosData.documentocompra On doc.idDocumento Equals mov.idPadre Into
                                      mov_join = Group
                                  From mov In mov_join.DefaultIfEmpty()
                                  Where
                                            doc.idEmpresa = be.idEmpresa And
                                            doc.tipoCompra = be.tipoCompra And
                                            doc.fechaDoc >= s60 And
                                            doc.fechaDoc <= addDay60
                                  Select New With
                                            {
                                            doc.aprobado,
                                            doc.idDocumento,
                                            doc.fechaDoc,
                                            doc.tipoDoc,
                                            doc.serie,
                                            doc.numeroDoc,
                                            det.secuencia,
                                            det.idItem,
                                            det.descripcionItem,
                                            det.unidad1,
                                            det.monto1,
                                      .IDCompra = CType(mov.idDocumento, Integer?)
                                            }).ToList

                For Each i In consulta60
                    GetEscaneadasCRapidasList.Add(New documentocompra With
                                               {
                                               .idPadre = i.IDCompra.GetValueOrDefault,
                                               .aprobado = i.aprobado,
                                               .idDocumento = i.idDocumento,
                                               .fechaDoc = i.fechaDoc,
                                               .tipoDoc = i.tipoDoc,
                                               .serie = i.serie,
                                               .numeroDoc = i.numeroDoc,
                                               .CustomDetalleCompra = New documentocompradetalle With
                                               {
                                               .secuencia = i.secuencia,
                                               .idItem = i.idItem,
                                               .descripcionItem = i.descripcionItem,
                                               .unidad1 = i.unidad1,
                                               .monto1 = i.monto1
                                               }
                                               })
                Next


            Case "61"
                '****************************************** 61 a mas***********************************************
                addDay60 = addDay60.AddDays(1)
                Dim s90 As New DateTime(DateTime.Now.Year, addDay60.Date.Month, addDay60.Date.Day)
                '  Dim dias90 = DateDiff(DateInterval.Day, s, DateTime.Now.Date)
                Dim addDay90 As DateTime = s90.AddDays(CInt(30))
                Dim consulta90 = (From doc In HeliosData.documentocompra
                                  Join det In HeliosData.documentocompradetalle
                                                On det.idDocumento Equals doc.idDocumento
                                  Group Join mov In HeliosData.documentocompra On doc.idDocumento Equals mov.idPadre Into
                                      mov_join = Group
                                  From mov In mov_join.DefaultIfEmpty()
                                  Where
                                            doc.idEmpresa = be.idEmpresa And
                                            doc.tipoCompra = be.tipoCompra And
                                            doc.fechaDoc >= s90 And
                                            doc.fechaDoc <= fechaFinal'addDay90
                                  Select New With
                                            {
                                            doc.aprobado,
                                            doc.idDocumento,
                                            doc.fechaDoc,
                                            doc.tipoDoc,
                                            doc.serie,
                                            doc.numeroDoc,
                                            det.secuencia,
                                            det.idItem,
                                            det.descripcionItem,
                                            det.unidad1,
                                            det.monto1,
                                      .IDCompra = CType(mov.idDocumento, Integer?)
                                            }).ToList


                For Each i In consulta90
                    GetEscaneadasCRapidasList.Add(New documentocompra With
                                               {
                                               .idPadre = i.IDCompra.GetValueOrDefault,
                                               .aprobado = i.aprobado,
                                               .idDocumento = i.idDocumento,
                                               .fechaDoc = i.fechaDoc,
                                               .tipoDoc = i.tipoDoc,
                                               .serie = i.serie,
                                               .numeroDoc = i.numeroDoc,
                                               .CustomDetalleCompra = New documentocompradetalle With
                                               {
                                               .secuencia = i.secuencia,
                                               .idItem = i.idItem,
                                               .descripcionItem = i.descripcionItem,
                                               .unidad1 = i.unidad1,
                                               .monto1 = i.monto1
                                               }
                                               })
                Next
        End Select

    End Function

    Public Function GetEscaneadasCRapidasPeriodo(be As documentocompra) As List(Of documentocompra)
        'Dim FechInicio = New DateTime(be.fechaDoc.Value.Year, be.fechaDoc.Value.Month, be.fechaDoc.Value.Day, 0, 0, 0)
        Dim consulta = (From doc In HeliosData.documentocompra
                        Join det In HeliosData.documentocompradetalle
                                        On det.idDocumento Equals doc.idDocumento
                        Where
                                    doc.idEmpresa = be.idEmpresa And
                            doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    doc.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                                    doc.fechaDoc.Value.Month = be.fechaDoc.Value.Month
                        Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    det.secuencia,
                                    det.idItem,
                                    det.descripcionItem,
                                    det.unidad1,
                                    det.monto1
                                    }).ToList

        GetEscaneadasCRapidasPeriodo = New List(Of documentocompra)
        For Each i In consulta
            GetEscaneadasCRapidasPeriodo.Add(New documentocompra With
                                                {
                                                .aprobado = i.aprobado,
                                                .idDocumento = i.idDocumento,
                                                .fechaDoc = i.fechaDoc,
                                                .tipoDoc = i.tipoDoc,
                                                .serie = i.serie,
                                                .numeroDoc = i.numeroDoc,
                                                .CustomDetalleCompra = New documentocompradetalle With
                                                {
                                                .secuencia = i.secuencia,
                                                .idItem = i.idItem,
                                                .descripcionItem = i.descripcionItem,
                                                .unidad1 = i.unidad1,
                                                .monto1 = i.monto1
                                                }
                                                })
        Next


    End Function

    Public Function GetEscaneadasNotaComprasseriodo(be As documentocompra) As List(Of documentocompra)
        'Dim FechInicio = New DateTime(be.fechaDoc.Value.Year, be.fechaDoc.Value.Month, be.fechaDoc.Value.Day, 0, 0, 0)
        Dim consulta = (From doc In HeliosData.documentocompra
                        Join enti In HeliosData.entidad On enti.idEntidad Equals doc.idProveedor
                        Where
                            doc.idEmpresa = be.idEmpresa And
                            doc.idCentroCosto = be.idCentroCosto And
                            doc.tipoCompra = be.tipoCompra And
                            doc.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                            doc.fechaDoc.Value.Month = be.fechaDoc.Value.Month
                        Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                            enti.nombreCompleto
                                    }).ToList

        GetEscaneadasNotaComprasseriodo = New List(Of documentocompra)
        For Each i In consulta
            GetEscaneadasNotaComprasseriodo.Add(New documentocompra With
                                                {
                                                .aprobado = i.aprobado,
                                                .idDocumento = i.idDocumento,
                                                .fechaDoc = i.fechaDoc,
                                                .tipoDoc = i.tipoDoc,
                                                .serie = i.serie,
                                                .numeroDoc = i.numeroDoc,
                                                .nombreProveedor = i.nombreCompleto
                                                })
        Next


    End Function

    Public Function GetCRapidaRecientes(be As documentocompra) As List(Of documentocompra)
        Dim FechInicio = New DateTime(be.fechaDoc.Value.Year, be.fechaDoc.Value.Month, be.fechaDoc.Value.Day, 0, 0, 0)

        Dim ultimas24 = be.fechaDoc.Value.Date
        Dim ultimos2Dias = be.fechaDoc.Value.Date.AddDays(-2)
        Dim ultimas3Dias = be.fechaDoc.Value.Date.AddDays(-3)
        Dim ultimas5Dias = be.fechaDoc.Value.Date.AddDays(-5)
        Dim ultimas7Dias = be.fechaDoc.Value.Date.AddDays(-7)

        GetCRapidaRecientes = New List(Of documentocompra)
        Select Case be.tipoOperacion
            Case "24 horas"
                Dim consulta = (From doc In HeliosData.documentocompra
                                Join det In HeliosData.documentocompradetalle
                                        On det.idDocumento Equals doc.idDocumento
                                Where
                                    doc.idEmpresa = be.idEmpresa And
                                    doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    doc.fechaDoc.Value.Year = FechInicio.Year And
                                    doc.fechaDoc.Value.Month = FechInicio.Month And
                                    doc.fechaDoc.Value.Day = FechInicio.Day
                                Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    det.secuencia,
                                    det.idItem,
                                    det.descripcionItem,
                                    det.unidad1,
                                    det.monto1
                                    }).ToList



                For Each i In consulta
                    GetCRapidaRecientes.Add(New documentocompra With
                                        {
                                        .aprobado = i.aprobado,
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .CustomDetalleCompra = New documentocompradetalle With
                                        {
                                        .secuencia = i.secuencia,
                                        .idItem = i.idItem,
                                        .descripcionItem = i.descripcionItem,
                                        .unidad1 = i.unidad1,
                                        .monto1 = i.monto1
                                        }
                                        })
                Next
            Case "2 días"

                Dim consulta = (From doc In HeliosData.documentocompra
                                Join det In HeliosData.documentocompradetalle
                                        On det.idDocumento Equals doc.idDocumento
                                Where doc.idEmpresa = be.idEmpresa And
                                    doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    TruncateTime(doc.fechaDoc.Value) >= ultimos2Dias And
                                    TruncateTime(doc.fechaDoc.Value) <= FechInicio
                                Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    det.secuencia,
                                    det.idItem,
                                    det.descripcionItem,
                                    det.unidad1,
                                    det.monto1
                                    }).ToList


                For Each i In consulta
                    GetCRapidaRecientes.Add(New documentocompra With
                                        {
                                        .aprobado = i.aprobado,
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .CustomDetalleCompra = New documentocompradetalle With
                                        {
                                        .secuencia = i.secuencia,
                                        .idItem = i.idItem,
                                        .descripcionItem = i.descripcionItem,
                                        .unidad1 = i.unidad1,
                                        .monto1 = i.monto1
                                        }
                                        })
                Next

            Case "3 días"

                Dim consulta = (From doc In HeliosData.documentocompra
                                Join det In HeliosData.documentocompradetalle
                                        On det.idDocumento Equals doc.idDocumento
                                Where doc.idEmpresa = be.idEmpresa And
                                    doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    TruncateTime(doc.fechaDoc.Value) >= ultimas3Dias And
                                    TruncateTime(doc.fechaDoc.Value) <= FechInicio
                                Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    det.secuencia,
                                    det.idItem,
                                    det.descripcionItem,
                                    det.unidad1,
                                    det.monto1
                                    }).ToList



                For Each i In consulta
                    GetCRapidaRecientes.Add(New documentocompra With
                                        {
                                        .aprobado = i.aprobado,
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .CustomDetalleCompra = New documentocompradetalle With
                                        {
                                        .secuencia = i.secuencia,
                                        .idItem = i.idItem,
                                        .descripcionItem = i.descripcionItem,
                                        .unidad1 = i.unidad1,
                                        .monto1 = i.monto1
                                        }
                                        })
                Next
            Case "5 días"
                Dim consulta = (From doc In HeliosData.documentocompra
                                Join det In HeliosData.documentocompradetalle
                                        On det.idDocumento Equals doc.idDocumento
                                Where doc.idEmpresa = be.idEmpresa And
                                    doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    TruncateTime(doc.fechaDoc.Value) >= ultimas5Dias And
                                    TruncateTime(doc.fechaDoc.Value) <= FechInicio
                                Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    det.secuencia,
                                    det.idItem,
                                    det.descripcionItem,
                                    det.unidad1,
                                    det.monto1
                                    }).ToList


                For Each i In consulta
                    GetCRapidaRecientes.Add(New documentocompra With
                                        {
                                        .aprobado = i.aprobado,
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .CustomDetalleCompra = New documentocompradetalle With
                                        {
                                        .secuencia = i.secuencia,
                                        .idItem = i.idItem,
                                        .descripcionItem = i.descripcionItem,
                                        .unidad1 = i.unidad1,
                                        .monto1 = i.monto1
                                        }
                                        })
                Next
            Case "7 días"

                Dim consulta = (From doc In HeliosData.documentocompra
                                Join det In HeliosData.documentocompradetalle
                                        On det.idDocumento Equals doc.idDocumento
                                Where doc.idEmpresa = be.idEmpresa And
                                    doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    TruncateTime(doc.fechaDoc.Value) >= ultimas7Dias And
                                    TruncateTime(doc.fechaDoc.Value) <= FechInicio
                                Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    det.secuencia,
                                    det.idItem,
                                    det.descripcionItem,
                                    det.unidad1,
                                    det.monto1
                                    }).ToList


                For Each i In consulta
                    GetCRapidaRecientes.Add(New documentocompra With
                                        {
                                        .aprobado = i.aprobado,
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .CustomDetalleCompra = New documentocompradetalle With
                                        {
                                        .secuencia = i.secuencia,
                                        .idItem = i.idItem,
                                        .descripcionItem = i.descripcionItem,
                                        .unidad1 = i.unidad1,
                                        .monto1 = i.monto1
                                        }
                                        })
                Next

        End Select

    End Function

    Public Function GetNotaCompraRecientes(be As documentocompra) As List(Of documentocompra)
        Dim FechInicio = New DateTime(be.fechaDoc.Value.Year, be.fechaDoc.Value.Month, be.fechaDoc.Value.Day, 0, 0, 0)

        Dim ultimas24 = be.fechaDoc.Value.Date
        Dim ultimos2Dias = be.fechaDoc.Value.Date.AddDays(-2)
        Dim ultimas3Dias = be.fechaDoc.Value.Date.AddDays(-3)
        Dim ultimas5Dias = be.fechaDoc.Value.Date.AddDays(-5)
        Dim ultimas7Dias = be.fechaDoc.Value.Date.AddDays(-7)

        GetNotaCompraRecientes = New List(Of documentocompra)
        Select Case be.tipoOperacion
            Case "24 horas"
                Dim consulta = (From doc In HeliosData.documentocompra
                                Join enti In HeliosData.entidad On enti.idEntidad Equals doc.idProveedor
                                Where
                                    doc.idEmpresa = be.idEmpresa And
                                    doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    doc.fechaDoc.Value.Year = FechInicio.Year And
                                    doc.fechaDoc.Value.Month = FechInicio.Month And
                                    doc.fechaDoc.Value.Day = FechInicio.Day
                                Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                     enti.nombreCompleto
                                    }).ToList



                For Each i In consulta
                    GetNotaCompraRecientes.Add(New documentocompra With
                                        {
                                        .aprobado = i.aprobado,
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .nombreProveedor = i.nombreCompleto
                                        })
                Next
            Case "2 días"

                Dim consulta = (From doc In HeliosData.documentocompra
                                Join enti In HeliosData.entidad On enti.idEntidad Equals doc.idProveedor
                                Where doc.idEmpresa = be.idEmpresa And
                                    doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    TruncateTime(doc.fechaDoc.Value) >= ultimos2Dias And
                                    TruncateTime(doc.fechaDoc.Value) <= FechInicio
                                Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    enti.nombreCompleto
                                    }).ToList


                For Each i In consulta
                    GetNotaCompraRecientes.Add(New documentocompra With
                                        {
                                        .aprobado = i.aprobado,
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .nombreProveedor = i.nombreCompleto
                                        })
                Next

            Case "3 días"

                Dim consulta = (From doc In HeliosData.documentocompra
                                Join enti In HeliosData.entidad On enti.idEntidad Equals doc.idProveedor
                                Where doc.idEmpresa = be.idEmpresa And
                                    doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    TruncateTime(doc.fechaDoc.Value) >= ultimas3Dias And
                                    TruncateTime(doc.fechaDoc.Value) <= FechInicio
                                Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                     enti.nombreCompleto
                                    }).ToList



                For Each i In consulta
                    GetNotaCompraRecientes.Add(New documentocompra With
                                        {
                                        .aprobado = i.aprobado,
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .nombreProveedor = i.nombreCompleto
                                        })
                Next
            Case "5 días"
                Dim consulta = (From doc In HeliosData.documentocompra
                                Join enti In HeliosData.entidad On enti.idEntidad Equals doc.idProveedor
                                Where doc.idEmpresa = be.idEmpresa And
                                    doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    TruncateTime(doc.fechaDoc.Value) >= ultimas5Dias And
                                    TruncateTime(doc.fechaDoc.Value) <= FechInicio
                                Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                     enti.nombreCompleto
                                    }).ToList


                For Each i In consulta
                    GetNotaCompraRecientes.Add(New documentocompra With
                                        {
                                        .aprobado = i.aprobado,
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .nombreProveedor = i.nombreCompleto
                                        })
                Next
            Case "7 días"

                Dim consulta = (From doc In HeliosData.documentocompra
                                Join enti In HeliosData.entidad On enti.idEntidad Equals doc.idProveedor
                                Where doc.idEmpresa = be.idEmpresa And
                                    doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    TruncateTime(doc.fechaDoc.Value) >= ultimas7Dias And
                                    TruncateTime(doc.fechaDoc.Value) <= FechInicio
                                Select New With
                                    {
                                    doc.aprobado,
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    enti.nombreCompleto
                                    }).ToList


                For Each i In consulta
                    GetNotaCompraRecientes.Add(New documentocompra With
                                        {
                                        .aprobado = i.aprobado,
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .nombreProveedor = i.nombreCompleto
                                        })
                Next

        End Select

    End Function

    Public Function GetContadorCRapidaRecientes(be As documentocompra) As Integer
        GetContadorCRapidaRecientes = 0

        Dim FechInicio = New DateTime(be.fechaDoc.Value.Year, be.fechaDoc.Value.Month, be.fechaDoc.Value.Day, 0, 0, 0)

        Dim ultimas24 = be.fechaDoc.Value.Date
        Dim ultimos2Dias = be.fechaDoc.Value.Date.AddDays(-2)
        Dim ultimas3Dias = be.fechaDoc.Value.Date.AddDays(-3)
        Dim ultimas5Dias = be.fechaDoc.Value.Date.AddDays(-5)
        Dim ultimas7Dias = be.fechaDoc.Value.Date.AddDays(-7)


        Select Case be.tipoOperacion
            Case "24 horas"
                Dim ventas24 = HeliosData.documentocompra.Where(Function(o) _
                     o.idEmpresa = be.idEmpresa And
                     o.idCentroCosto = be.idCentroCosto And
                     o.tipoCompra = be.tipoCompra And
                     TruncateTime(o.fechaDoc.Value) = FechInicio And
                     o.idEmpresa = be.idEmpresa).Count

                Return ventas24
            Case "2 días"
                Dim ventas2Dias = HeliosData.documentocompra.Where(
                    Function(o) o.idEmpresa = be.idEmpresa And
                    o.idCentroCosto = be.idCentroCosto And
                    o.tipoCompra = be.tipoCompra And
                    TruncateTime(o.fechaDoc.Value) >= ultimos2Dias And
                    TruncateTime(o.fechaDoc.Value) <= FechInicio And
                    o.idEmpresa = be.idEmpresa).Count

                Return ventas2Dias

            Case "3 días"
                Dim ventas3Dias = HeliosData.documentocompra.Where(
                    Function(o) o.idEmpresa = be.idEmpresa And
                    o.idCentroCosto = be.idCentroCosto And
                    o.tipoCompra = be.tipoCompra And
                    TruncateTime(o.fechaDoc.Value) >= ultimas3Dias And
                    TruncateTime(o.fechaDoc.Value) <= FechInicio And
                    o.idEmpresa = be.idEmpresa).Count

                Return ventas3Dias
            Case "5 días"
                Dim ventas5Dias = HeliosData.documentocompra.Where(
                    Function(o) o.idEmpresa = be.idEmpresa And
                    o.idCentroCosto = be.idCentroCosto And
                    o.tipoCompra = be.tipoCompra And
                    TruncateTime(o.fechaDoc.Value) >= ultimas5Dias And
                    TruncateTime(o.fechaDoc.Value) <= FechInicio And
                    o.idEmpresa = be.idEmpresa).Count

                Return ventas5Dias
            Case "7 días"
                Dim ventas7Dias = HeliosData.documentocompra.Where(
                    Function(o) o.idEmpresa = be.idEmpresa And
                    o.idCentroCosto = be.idCentroCosto And
                    o.tipoCompra = be.tipoCompra And
                    TruncateTime(o.fechaDoc.Value) >= ultimas7Dias And
                    TruncateTime(o.fechaDoc.Value) <= FechInicio And
                    o.idEmpresa = be.idEmpresa).Count
                Return ventas7Dias
        End Select

    End Function

    Public Function GetStatusAprobacionList(be As documentocompra) As List(Of documentocompra)
        'Select Case be.aprobado
        '    Case "N"
        Dim consulta = (From doc In HeliosData.documentocompra
                        Join det In HeliosData.documentocompradetalle
                            On det.idDocumento Equals doc.idDocumento
                        Where
                            doc.idEmpresa = be.idEmpresa And
                            doc.idCentroCosto = be.idCentroCosto And
                            doc.tipoCompra = be.tipoCompra And
                            doc.aprobado = be.aprobado
                        Select New With
                                    {
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                                    det.secuencia,
                                    det.idItem,
                                    det.descripcionItem,
                                    det.unidad1,
                                    det.monto1
                                    }).ToList

        GetStatusAprobacionList = New List(Of documentocompra)
        For Each i In consulta
            GetStatusAprobacionList.Add(New documentocompra With
                                        {
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .CustomDetalleCompra = New documentocompradetalle With
                                        {
                                        .secuencia = i.secuencia,
                                        .idItem = i.idItem,
                                        .descripcionItem = i.descripcionItem,
                                        .unidad1 = i.unidad1,
                                        .monto1 = i.monto1
                                        }
                                        })
        Next


        '    Case "O"

        '    Case "R"

        'End Select
    End Function

    Public Function GetStatusAprobacionListNotaCompra(be As documentocompra) As List(Of documentocompra)
        'Select Case be.aprobado
        '    Case "N"
        Dim consulta = (From doc In HeliosData.documentocompra
                        Join enti In HeliosData.entidad On enti.idEntidad Equals doc.idProveedor
                        Where doc.idEmpresa = be.idEmpresa And
                            doc.idCentroCosto = be.idCentroCosto And
                                    doc.tipoCompra = be.tipoCompra And
                                    doc.aprobado = be.aprobado
                        Select New With
                                    {
                                    doc.idDocumento,
                                    doc.fechaDoc,
                                    doc.tipoDoc,
                                    doc.serie,
                                    doc.numeroDoc,
                             enti.nombreCompleto
                                    }).ToList

        GetStatusAprobacionListNotaCompra = New List(Of documentocompra)
        For Each i In consulta
            GetStatusAprobacionListNotaCompra.Add(New documentocompra With
                                        {
                                        .idDocumento = i.idDocumento,
                                        .fechaDoc = i.fechaDoc,
                                        .tipoDoc = i.tipoDoc,
                                        .serie = i.serie,
                                        .numeroDoc = i.numeroDoc,
                                        .nombreProveedor = i.nombreCompleto
                                        })
        Next


        '    Case "O"

        '    Case "R"

        'End Select
    End Function

    Public Function GetStatusAprobacion(be As documentocompra) As List(Of documentocompra)
        Dim query = HeliosData.documentocompra.Where(Function(o) _
                                                         o.idEmpresa = be.idEmpresa And
                                                         o.idCentroCosto = be.idCentroCosto And
                                                         o.tipoCompra = be.tipoCompra And o.estadoPago <> "ANU").GroupBy(Function(g) New With
                 {
                                                                                                                                          Key g.aprobado,
                                                                                                                                          Key g.tipoCompra
                                                                                                                                          }).
           Select(Function(group) New With
           {
           .tipoCompra = group.Key.tipoCompra,
           .aprobado = group.Key.aprobado,
           .TotalCount = group.Count()
                      }).ToList()

        GetStatusAprobacion = New List(Of documentocompra)
        For Each i In query
            GetStatusAprobacion.Add(New documentocompra With
                                    {
                                    .tipoCompra = i.tipoCompra,
                                    .aprobado = i.aprobado,
                                    .conteoCuotas = i.TotalCount
                                    })
        Next
    End Function


    Public Function GetDocumentosCompraByTipo(be As documentocompra) As List(Of documentocompra)
        Return HeliosData.documentocompra.Where(Function(o) o.idEmpresa = be.idEmpresa And o.idCentroCosto = be.idCentroCosto And o.tipoCompra = be.tipoCompra).ToList
    End Function

    Public Function GetListaPersonasTrasnferenciasXconfirmar(be As documentocompra) As List(Of entidad)
        Dim obj As entidad
        Dim consulta = (From compra In HeliosData.documentocompra
                        Where compra.idEmpresa = be.idEmpresa And
                            compra.idCentroCosto = be.idCentroCosto And
                            compra.tipoCompra = "TEA" And
                            compra.estadoEntrega = EstadoTransferenciaAlmacen.Pedido
                        Select
                            ObjPersona = (From person In HeliosData.Persona
                                          Where person.idPersona = compra.idPersona).FirstOrDefault,
                            ObjEntidad = (From ent In HeliosData.entidad
                                          Where ent.idEntidad = compra.idProveedor).FirstOrDefault,
                            idPersona = compra.idPersona,
                            idEntidad = compra.idProveedor).ToList

        'Dim consulta = (From compra In HeliosData.documentocompra
        '                Group Join entidad In HeliosData.entidad On entidad.idEntidad Equals compra.idProveedor
        '                    Into Ent = Group From ex In Ent.DefaultIfEmpty()
        '                Group Join person In HeliosData.Persona On CInt(person.idPersona) Equals CInt(compra.idPersona)
        '                    Into Per = Group From px In Per.DefaultIfEmpty()
        '                Where compra.idEmpresa = be.idEmpresa And
        '                    compra.tipoCompra = "TEA" And
        '                    compra.estadoEntrega = "PN"
        '                Select
        '                    idEntidad = ex.idEntidad,
        '                    NombreEntidad = ex.nombreCompleto,
        '                    NroDocEntidad = ex.nrodoc,
        '                    TipoEntida = ex.tipoEntidad,
        '                    idPersona = px.idPersona,
        '                    NomPersona = px.nombreCompleto,
        '                    NroDocPersona = px.idPersona).Distinct.ToList

        Dim con = consulta.Distinct.ToList

        GetListaPersonasTrasnferenciasXconfirmar = New List(Of entidad)
        For Each i In con
            obj = New entidad
            If i.ObjPersona IsNot Nothing Then
                obj.idEntidad = i.ObjPersona.idPersona
                obj.tipoEntidad = "Otros"
                obj.nombreCompleto = i.ObjPersona.nombreCompleto
                obj.nrodoc = i.ObjPersona.idPersona
            ElseIf i.ObjEntidad IsNot Nothing Then
                obj.idEntidad = i.ObjEntidad.idEntidad
                obj.tipoEntidad = If(i.ObjEntidad.tipoEntidad = "PR", "Proveedor", "Cliente")
                obj.nombreCompleto = i.ObjEntidad.nombreCompleto
                obj.nrodoc = i.ObjEntidad.nrodoc
            End If
            'If i.NombreEntidad IsNot Nothing Then
            '    obj.idEntidad = i.idEntidad
            '    obj.tipoEntidad = i.TipoEntida
            '    obj.nombreCompleto = i.NombreEntidad
            '    obj.nrodoc = i.NroDocEntidad
            'ElseIf i.NomPersona IsNot Nothing Then
            '    obj.idEntidad = i.idPersona
            '    obj.tipoEntidad = "TR"
            '    obj.nombreCompleto = i.NomPersona
            'End If

            GetListaPersonasTrasnferenciasXconfirmar.Add(obj)
        Next

    End Function

    Public Function GetListaTrasnferenciasPersonaXconfirmar(be As documentocompra) As List(Of documentocompra)
        Dim con As New List(Of documentocompra)
        Select Case be.entidad.tipoEntidad
            Case "PR", "CL"
                con = (From compra In HeliosData.documentocompra
                       Where compra.idEmpresa = be.idEmpresa And
                           compra.idProveedor = be.entidad.idEntidad And
                           compra.tipoCompra = "TEA" And
                           compra.estadoEntrega = "PN").ToList
            Case "TR"
                con = (From compra In HeliosData.documentocompra
                       Where compra.idEmpresa = be.idEmpresa And
                           compra.idPersona = be.entidad.idEntidad And
                           compra.tipoCompra = "TEA" And
                           compra.estadoEntrega = "PN").ToList
        End Select
        GetListaTrasnferenciasPersonaXconfirmar = New List(Of documentocompra)
        For Each i In con
            GetListaTrasnferenciasPersonaXconfirmar.Add(New documentocompra With {
                                                        .idDocumento = i.idDocumento,
                                                        .serie = i.serie,
                                                        .numeroDoc = i.numeroDoc,
                                                        .fechaDoc = i.fechaDoc,
                                                        .importeTotal = i.importeTotal,
                                                        .glosa = i.glosa})
        Next

    End Function

    Public Function GrabarPercepcion(objDocumento As documento, nDocumentoNota As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim cajaBL As New documentoCajaDetalleBL

        Try
            Using ts As New TransactionScope()

                Dim codDocumento = GrabarPercepcion_SPK(objDocumento, nDocumentoNota)

                'Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                '                      Where n.tipoExistencia <> "GS"
                '                      Select n.idItem, n.almacenRef, n.tipoExistencia, n.codigoLote).Distinct.ToList

                'For Each a In ListaArticulos
                '    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                '                                                                                                       .fecha = New DateTime(objDocumento.fechaProceso.Year,
                '                                                                                                                             objDocumento.fechaProceso.Month, 1),
                '                                                                                                       .tipoProducto = a.tipoExistencia,
                '                                                                                                       .idItem = a.idItem,
                '                                                                                                       .nrolote = a.codigoLote}, Nothing)
                '    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                'Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetListarPercepciones(intIdEstablecimiento As Integer, strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        '  Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'listaTipoCompra.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        'listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        'listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        ''listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_PAGADA)
        listaTipoCompra.Add(TIPO_COMPRA.PERCEPCION)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        'If IsNothing(UsuarioCaja) 
        '            Order By compra.fechaDoc
        'por ejemplo junio-2017
        'compras normales sin detraccion
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                            On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                            On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable = strPeriodo _
                            And compra.idCentroCosto = intIdEstablecimiento _
                            And listaTipoCompra.Contains(compra.tipoCompra) _
                            And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList


        'strPeriodo = strPeriodo.Replace("/", "")
        'Dim consulta2 = (From doc In HeliosData.documento
        '                 Join compra In HeliosData.documentocompra
        '                     On doc.idDocumento Equals compra.idDocumento
        '                 Join entidad In HeliosData.entidad
        '                     On compra.idProveedor Equals entidad.idEntidad
        '                 Where compra.periodoTributo = strPeriodo _
        '                     And compra.idCentroCosto = intIdEstablecimiento _
        '                     And listaTipoCompra.Contains(compra.tipoCompra) _
        '                     And compra.tieneDetraccion = "S" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

        'Dim con3 = consulta.Concat(consulta2).OrderBy(Function(o) o.compra.fechaDoc).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.compra.fechaContable
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            'Select Case obj.compra.tipoDoc
            '    Case "07", "87"
            '        objRecurso.importeTotal = obj.compra.importeTotal * -1
            '        objRecurso.importeUS = obj.compra.importeUS * -1

            '    Case "08", "88"
            '        objRecurso.importeTotal = obj.compra.importeTotal
            '        objRecurso.importeUS = obj.compra.importeUS
            '    Case Else
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.importeUS = obj.compra.importeUS
            ' End Select

            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            objRecurso.aprobado = obj.compra.aprobado
            objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
            'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
            Lista.Add(objRecurso)
        Next





        Return Lista
    End Function

    Public Function GrabarPercepcion_SPK(objDocumento As documento, nDocumentoNota As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim cajaBL As New documentoCajaDetalleBL

        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Dim venta As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = objDocumento.documentocompra.idPadre).FirstOrDefault
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    i.preEvento = Nothing
                    Dim itemDetalle = compraDetalleBL.GetUbicar_documentocompradetallePorID(i.secuencia)
                    i.codigoLote = itemDetalle.codigoLote
                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    cajaBL.ActualizarItemsPagosCompra(i, objDocumento.documentocompra.idPadre)
                    'Select Case i.tipoExistencia
                    '    Case "GS"

                    '    Case Else
                    '        Select Case i.TipoOperacion
                    '            Case "9921" 'INCREMENTO DEL COSTO

                    '                i.nrolote = itemDetalle.codigoLote
                    '                inventario.InsertNotaDebito(i, objDocumento)
                    '                't = New totalesAlmacen
                    '                't.idEmpresa = i.IdEmpresa
                    '                't.idEstablecimiento = i.IdEstablecimiento
                    '                't.idAlmacen = i.almacenRef
                    '                't.origenRecaudo = i.destino
                    '                't.idItem = i.idItem
                    '                't.cantidad = 0
                    '                't.precioUnitarioCompra = i.precioUnitario
                    '                't.importeSoles = i.montokardex
                    '                't.importeDolares = i.montokardexUS
                    '                'totalesBL.UpdateSingle2(t)
                    '            Case "9923" 'OTROS

                    '        End Select

                    'End Select
                Next
                'asientoBL.SavebyGroupDoc(objDocumento)
                'If Not IsNothing(nDocumentoNota.idEmpresa) Then
                '    SaveCaja(nDocumentoNota, objDocumento.idDocumento)
                'End If

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If


                Dim ventaDetalle = (From n In HeliosData.documentocompradetalle
                                    Where n.idDocumento = venta.idDocumento _
                                AndAlso n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
                                AndAlso n.bonificacion <> "S").Count

                If ventaDetalle > 0 Then
                    venta.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                Else
                    venta.estadoPago = TIPO_COMPRA.PAGO.PAGADO
                End If


                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function ServiciosSinCosteo(compraBE As documentocompra) As List(Of documentocompradetalle)
        Dim doccompra As New documentocompradetalle
        Dim compraLista As New List(Of documentocompradetalle)

        Dim consulta = (From det In HeliosData.documentocompradetalle
                        Where
                      det.tipoExistencia = "GS" And
                      det.documentocompra.idEmpresa = compraBE.idEmpresa And
                      CStr(det.documentocompra.idCentroCosto) = compraBE.idCentroCosto And
                      (New String() {"CMP", "BOFR", "NTC", "NDB", "CSP", "CRH"}).Contains(det.documentocompra.tipoCompra) _
                      And det.idItem = "189" And Not (New String() {"PC", "PG", "HC", "HG"}).Contains(det.tipoCosto)
                        Select det.idPadreDTCompra,
                          det.documentocompra.entidad.nombreCompleto,
                          det.documentocompra.tipoDoc,
                          det.documentocompra.serie,
                          det.documentocompra.numeroDoc,
                          det.documentocompra.monedaDoc,
                          fechaDoc = CType(det.documentocompra.fechaDoc, DateTime?),
                          det.idDocumento,
                          det.secuencia,
                          det.idItem,
                          det.tipoCosto,
                          det.descripcionItem,
                          det.tipoExistencia,
                          det.destino,
                          det.monto1,
                          det.precioUnitario,
                          det.precioUnitarioUS,
                          det.montokardex,
                          det.montokardexUS,
                          det.importe,
                          det.importeUS).ToList
        'Dim consulta = (From det In HeliosData.documentocompradetalle
        '                Where
        '              det.tipoExistencia = "GS" And
        '              det.documentocompra.idEmpresa = compraBE.idEmpresa And
        '              CStr(det.documentocompra.idCentroCosto) = compraBE.idCentroCosto And
        '              (New String() {"CMP", "BOFR", "NTC", "NDB", "CSP", "CRH"}).Contains(det.documentocompra.tipoCompra) _
        '              And Not ((New String() {"11", "18"}).Contains(det.idItem.Substring(1 - 1, 2))) _
        '              And (New String() {"63", "64", "65", "66", "67", "68"}).Contains(det.idItem.Substring(1 - 1, 2)) _
        '              And det.tipoCosto = tipoCosteo
        '                Select det.idPadreDTCompra,
        '                  det.documentocompra.entidad.nombreCompleto,
        '                  det.documentocompra.tipoDoc,
        '                  det.documentocompra.serie,
        '                  det.documentocompra.numeroDoc,
        '                  det.documentocompra.monedaDoc,
        '                  fechaDoc = CType(det.documentocompra.fechaDoc, DateTime?),
        '                  det.idDocumento,
        '                  det.secuencia,
        '                  det.idItem,
        '                  det.tipoCosto,
        '                  det.descripcionItem,
        '                  det.tipoExistencia,
        '                  det.destino,
        '                  det.monto1,
        '                  det.precioUnitario,
        '                  det.precioUnitarioUS,
        '                  det.montokardex,
        '                  det.montokardexUS,
        '                  det.importe,
        '                  det.importeUS,
        '                  MontoUsado = (CType((Aggregate t1 In
        '                                  (From Doc In HeliosData.recursoCostoDetalle
        '                                   Where
        '                                   Doc.itemRef = det.secuencia And Doc.documentoRef = det.idDocumento And Doc.tipoCosto = "RL"
        '                                   Select New With {
        '                                       Doc.montoMN
        '                                   }) Into Sum(t1.montoMN)), Decimal?))).ToList



        For Each i In consulta
            doccompra = New documentocompradetalle
            doccompra.idPadreDTCompra = i.idPadreDTCompra
            doccompra.NombreProveedor = i.nombreCompleto
            doccompra.TipoDoc = i.tipoDoc
            doccompra.Serie = i.serie
            doccompra.NumDoc = i.numeroDoc
            doccompra.Moneda = i.monedaDoc
            doccompra.FechaDoc = i.fechaDoc
            doccompra.idDocumento = i.idDocumento
            doccompra.secuencia = i.secuencia
            doccompra.idItem = i.idItem
            doccompra.descripcionItem = i.descripcionItem
            doccompra.tipoExistencia = i.tipoExistencia
            doccompra.destino = i.destino
            doccompra.unidad1 = "UND"
            doccompra.monto1 = i.monto1
            doccompra.precioUnitario = i.precioUnitario
            doccompra.precioUnitarioUS = i.precioUnitarioUS
            doccompra.montokardex = i.montokardex
            doccompra.montokardexUS = i.montokardexUS
            doccompra.importe = i.importe
            doccompra.importeUS = i.importeUS
            doccompra.tipoExistencia = i.tipoExistencia
            doccompra.TipoOperacion = "02"
            doccompra.tipoCosto = i.tipoCosto
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function GetComprasPorAprobarPago(be As documentocompra) As List(Of documentocompra)
        Dim consulta = (From c In HeliosData.documentocompra
                        Join e In HeliosData.entidad
                            On c.idProveedor Equals e.idEntidad
                        Where c.idEmpresa = be.idEmpresa And c.apruebaPago = be.apruebaPago).ToList

        GetComprasPorAprobarPago = New List(Of documentocompra)
        For Each i In consulta
            GetComprasPorAprobarPago.Add(New documentocompra With
                                         {
                                         .idDocumento = i.c.idDocumento,
                                         .fechaDoc = i.c.fechaDoc,
                                         .serie = i.c.serie,
                                         .numeroDoc = i.c.numeroDoc,
                                         .importeTotal = i.c.importeTotal,
                                         .idProveedor = i.e.idEntidad,
                                         .CustomEntidad = New entidad With {
                                                                            .idEntidad = i.e.idEntidad,
                                                                            .nrodoc = i.e.nrodoc,
                                                                            .nombreCompleto = i.e.nombreCompleto}
                                         })
        Next

    End Function

    Public Function GetCuentasPorPagarStatusCount(be As documentocompra) As Integer
        Dim consulta = (From c In HeliosData.documentocompra
                        Join e In HeliosData.entidad
                            On c.idProveedor Equals e.idEntidad
                        Where c.idEmpresa = be.idEmpresa And c.apruebaPago = be.apruebaPago).Count

        GetCuentasPorPagarStatusCount = consulta
    End Function


    Public Function ListaCompraDeServicios(compraBE As documentocompra, tipoCosteo As String) As List(Of documentocompradetalle)
        Dim doccompra As New documentocompradetalle
        Dim compraLista As New List(Of documentocompradetalle)


        Dim consulta = (From det In HeliosData.documentocompradetalle
                        Where
                      det.tipoExistencia = "GS" And
                      det.documentocompra.idEmpresa = compraBE.idEmpresa And
                      CStr(det.documentocompra.idCentroCosto) = compraBE.idCentroCosto And
                      (New String() {"CMP", "BOFR", "NTC", "NDB", "CSP", "CRH"}).Contains(det.documentocompra.tipoCompra) _
                      And det.idItem = "189" _
                      And det.tipoCosto = tipoCosteo
                        Select det.idPadreDTCompra,
                          det.documentocompra.entidad.nombreCompleto,
                          det.documentocompra.tipoDoc,
                          det.documentocompra.serie,
                          det.documentocompra.numeroDoc,
                          det.documentocompra.monedaDoc,
                          fechaDoc = CType(det.documentocompra.fechaDoc, DateTime?),
                          det.idDocumento,
                          det.secuencia,
                          det.idItem,
                          det.tipoCosto,
                          det.descripcionItem,
                          det.tipoExistencia,
                          det.destino,
                          det.monto1,
                          det.precioUnitario,
                          det.precioUnitarioUS,
                          det.montokardex,
                          det.montokardexUS,
                          det.importe,
                          det.importeUS,
                          MontoUsado = (CType((Aggregate t1 In
                                          (From Doc In HeliosData.recursoCostoDetalle
                                           Where
                                           Doc.itemRef = det.secuencia And Doc.documentoRef = det.idDocumento And Doc.tipoCosto = "RL"
                                           Select New With {
                                               Doc.montoMN
                                           }) Into Sum(t1.montoMN)), Decimal?))).ToList


        'Dim consulta = (From det In HeliosData.documentocompradetalle
        '                Where
        '              det.tipoExistencia = "GS" And
        '              det.documentocompra.idEmpresa = compraBE.idEmpresa And
        '              CStr(det.documentocompra.idCentroCosto) = compraBE.idCentroCosto And
        '              (New String() {"CMP", "BOFR", "NTC", "NDB", "CSP", "CRH"}).Contains(det.documentocompra.tipoCompra) _
        '              And Not ((New String() {"11", "18"}).Contains(det.idItem.Substring(1 - 1, 2))) _
        '              And (New String() {"63", "64", "65", "66", "67", "68"}).Contains(det.idItem.Substring(1 - 1, 2)) _
        '              And det.tipoCosto = tipoCosteo
        '                Select det.idPadreDTCompra,
        '                  det.documentocompra.entidad.nombreCompleto,
        '                  det.documentocompra.tipoDoc,
        '                  det.documentocompra.serie,
        '                  det.documentocompra.numeroDoc,
        '                  det.documentocompra.monedaDoc,
        '                  fechaDoc = CType(det.documentocompra.fechaDoc, DateTime?),
        '                  det.idDocumento,
        '                  det.secuencia,
        '                  det.idItem,
        '                  det.tipoCosto,
        '                  det.descripcionItem,
        '                  det.tipoExistencia,
        '                  det.destino,
        '                  det.monto1,
        '                  det.precioUnitario,
        '                  det.precioUnitarioUS,
        '                  det.montokardex,
        '                  det.montokardexUS,
        '                  det.importe,
        '                  det.importeUS,
        '                  MontoUsado = (CType((Aggregate t1 In
        '                                  (From Doc In HeliosData.recursoCostoDetalle
        '                                   Where
        '                                   Doc.itemRef = det.secuencia And Doc.documentoRef = det.idDocumento And Doc.tipoCosto = "RL"
        '                                   Select New With {
        '                                       Doc.montoMN
        '                                   }) Into Sum(t1.montoMN)), Decimal?))).ToList



        For Each i In consulta
            doccompra = New documentocompradetalle
            doccompra.idPadreDTCompra = i.idPadreDTCompra
            doccompra.NombreProveedor = i.nombreCompleto
            doccompra.TipoDoc = i.tipoDoc
            doccompra.Serie = i.serie
            doccompra.NumDoc = i.numeroDoc
            doccompra.Moneda = i.monedaDoc
            doccompra.FechaDoc = i.fechaDoc
            doccompra.idDocumento = i.idDocumento
            doccompra.secuencia = i.secuencia
            doccompra.idItem = i.idItem
            doccompra.descripcionItem = i.descripcionItem
            doccompra.tipoExistencia = i.tipoExistencia
            doccompra.destino = i.destino
            doccompra.unidad1 = "UND"
            doccompra.monto1 = i.monto1
            doccompra.precioUnitario = i.precioUnitario
            doccompra.precioUnitarioUS = i.precioUnitarioUS
            doccompra.montokardex = i.montokardex - i.MontoUsado.GetValueOrDefault
            doccompra.montokardexUS = i.montokardexUS
            doccompra.importe = i.importe
            doccompra.importeUS = i.importeUS
            doccompra.tipoExistencia = i.tipoExistencia
            doccompra.TipoOperacion = "02"
            doccompra.tipoCosto = i.tipoCosto
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Sub GrabarSalidaProduccion(objDocumento As documento)

        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope
                InsertarEnvioTrasnferenciaSinConfirmarProduccion(objDocumento)

                Dim listaAlmacenes = HeliosData.almacen.Where(Function(o) o.idEmpresa = Gempresas.IdEmpresaRuc And o.tipo = TipoAlmacen.Deposito).ToList

                For Each a In listaAlmacenes
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacen(New InventarioMovimiento With {.idAlmacen = a.idAlmacen, .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year, objDocumento.documentocompra.fechaDoc.Value.Month, 1)},
                                                                              Nothing)
                    totalesBL.GetCurarKardexCaberas(listaAcurar)
                Next




                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Sub InsertarEnvioTrasnferenciaSinConfirmarProduccion(objDocumento As documento)
        Dim DocumentoBL As New documentoBL
        Dim AsientoBL As New AsientoBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim t As New totalesAlmacen
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim numeracionBL As New numeracionBoletasBL
        Try
            Using ts As New TransactionScope

                If (Not IsNothing(objDocumento.documentocompra.numeroDoc)) Then
                    DocumentoBL.Insert(objDocumento)
                Else
                    Dim cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentocompra.IdNumeracion))
                    objDocumento.nroDoc = objDocumento.documentocompra.serie & "-" & cval
                    DocumentoBL.Insert(objDocumento)
                    objDocumento.documentocompra.numeroDoc = cval
                End If

                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    compraDetalleBL.InsertSingleTransAlmacenProduccion(i, objDocumento.idDocumento)

                    i.TipoRegistro = "S"
                    'inventarioBL.InsertTransferencia(i, objDocumento)
                    inventarioBL.InsertTransferencia(i)

                    'i.TipoRegistro = "E"
                    'inventarioBL.InsertTransferencia(i, objDocumento)

                    ''ENTRADA DE ITEMS AL ALMACEN DE DESTINO

                    't = New totalesAlmacen
                    't.idEmpresa = i.IdEmpresa
                    't.idEstablecimiento = i.IdEstablecimiento
                    't.idAlmacen = i.almacenDestino  ' almacen de DESTINO
                    't.origenRecaudo = i.destino
                    't.idItem = i.idItem
                    't.descripcion = i.descripcionItem
                    't.tipoExistencia = i.tipoExistencia
                    't.tipoCambio = 0
                    't.idUnidad = i.unidad1
                    't.cantidad = i.monto1
                    't.importeSoles = i.importe
                    't.importeDolares = i.importeUS
                    't.usuarioActualizacion = i.usuarioModificacion
                    't.fechaActualizacion = i.fechaModificacion
                    'totalesBL.ActualizarItemsTransferencia(t)

                    'SALIDA DE ITEMS DEL ALMACEN DE ORIGEN
                    t = New totalesAlmacen
                    t.idEmpresa = i.IdEmpresa
                    t.idEstablecimiento = i.IdEstablecimiento
                    t.idAlmacen = i.almacenRef ' almacen de origen de donde sale la mercaderia
                    t.origenRecaudo = i.destino
                    t.idItem = i.idItem
                    t.descripcion = i.descripcionItem
                    t.tipoExistencia = i.tipoExistencia
                    t.tipoCambio = 0
                    t.idUnidad = i.unidad1
                    t.cantidad = i.monto1 * -1
                    t.importeSoles = i.importe * -1
                    t.importeDolares = i.importeUS * -1
                    t.usuarioActualizacion = i.usuarioModificacion
                    t.fechaActualizacion = i.fechaModificacion
                    totalesBL.ActualizarItemsTransferencia(t)
                Next
                If (Not IsNothing(objDocumento.documentoGuia)) Then
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                    End If
                End If
                AsientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function CompensacionDocCompraAnticipo(objDocumento As documento, objDocComp As documento) As Integer
        Dim compensacionBL As New CompensacionBL
        Dim anticipoBL As New documentoCajaBL

        Try
            Dim idDocumentoOrigen As Integer
            Dim idDocumentoDestino As Integer

            idDocumentoOrigen = Me.SaveCompensacion(objDocumento)
            idDocumentoDestino = anticipoBL.SaveCompensacionAnticipo(objDocComp)
            compensacionBL.SaveTablaCompensacion(idDocumentoOrigen, idDocumentoDestino, "02", "104")

            Return 1
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Function InsertarOtrasEntradas_Produccion(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim guiaBL As New documentoGuiaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim precio As New listadoPreciosBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim nuevoTA As New totalesAlmacen
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento
        Dim cuentaMascara As New cuentaMascara
        Dim cuentaMascaraBL As New cuentaMascaraBL
        Dim codDocumento As Integer = 0
        Dim loteBL As New recursoCostoLoteBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                codDocumento = objDocumento.idDocumento
                Me.InsertEntradaProduccion(objDocumento.documentocompra, objDocumento.idDocumento)

                'If objDocumento.documentocompra.tipoOperacion = "10.01" Then
                '    nAsiento = New asiento
                '    nAsiento.idDocumento = objDocumento.idDocumento
                '    nAsiento.idEmpresa = Gempresas.IdEmpresaRuc
                '    nAsiento.idCentroCostos = GEstableciento.IdEstablecimiento
                '    nAsiento.idEntidad = Nothing
                '    nAsiento.nombreEntidad = Nothing
                '    nAsiento.tipoEntidad = TIPO_ENTIDAD.PROVEEDOR
                '    nAsiento.fechaProceso = objDocumento.documentocompra.fechaDoc
                '    nAsiento.codigoLibro = "13"
                '    nAsiento.tipo = ASIENTO_CONTABLE.HABILITADO.DISABLED
                '    nAsiento.tipoAsiento = ASIENTO_CONTABLE.PRODUCTOS_EN_TRANSITO
                '    nAsiento.importeMN = objDocumento.documentocompra.importeTotal
                '    nAsiento.importeME = objDocumento.documentocompra.importeUS
                '    nAsiento.glosa = objDocumento.documentocompra.glosa
                '    nAsiento.usuarioActualizacion = objDocumento.usuarioActualizacion
                '    nAsiento.fechaActualizacion = objDocumento.fechaActualizacion
                '    asientoBL.InsertDefault(nAsiento, objDocumento.idDocumento)

                'End If
                '   Dim codAsiento = nAsiento.idAsiento
                Dim codigoLote = 0
                For Each i In objDocumento.documentocompra.documentocompradetalle


                    Select Case objDocumento.documentocompra.destino
                        Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.ENTRADA_EXISTENCIAS
                            If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then
                                codigoLote = i.codigoLote
                            Else
                                codigoLote = loteBL.GrabarLotesOne(i.CustomRecursoCostoLote)
                            End If
                            i.codigoLote = codigoLote

                            Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                            i.secuencia = codSecuencia
                            i.nrolote = codigoLote
                            inventario.InsertAlmacenOEDefault(i, objDocumento)

                            If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then

                            Else
                                nuevoTA = New totalesAlmacen With
                                        {
                                            .idEmpresa = i.IdEmpresa,
                                            .idEstablecimiento = i.IdEstablecimiento,
                                            .codigoLote = codigoLote,
                                            .idAlmacen = i.almacenRef,
                                            .origenRecaudo = i.destino,
                                            .tipoExistencia = i.tipoExistencia,
                                            .idItem = i.idItem,
                                            .descripcion = i.descripcionItem,
                                            .idUnidad = i.unidad1,
                                            .unidadMedida = i.unidad1,
                                            .cantidad = i.monto1,
                                            .importeSoles = i.importe,
                                            .importeDolares = i.importeUS,
                                            .cantidadMaxima = 10000,
                                            .cantidadMinima = 10,
                                            .fechaVcto = i.CustomRecursoCostoLote.fechaVcto,
                                            .status = StatusArticulo.Activo,
                                            .usuarioActualizacion = i.usuarioModificacion,
                                            .fechaActualizacion = i.fechaModificacion}
                                HeliosData.totalesAlmacen.Add(nuevoTA)
                            End If

                            't = New totalesAlmacen
                            't.idEmpresa = i.IdEmpresa
                            't.idEstablecimiento = i.IdEstablecimiento
                            't.tipoExistencia = i.tipoExistencia
                            't.descripcion = i.descripcionItem
                            '' t.descripcion = i.DetalleItem
                            't.idUnidad = i.unidad1
                            't.idAlmacen = i.almacenRef
                            't.origenRecaudo = i.destino
                            't.idItem = i.idItem
                            't.cantidad = i.monto1
                            't.precioUnitarioCompra = 0
                            't.importeSoles = i.importe
                            't.importeDolares = i.importeUS
                            't.usuarioActualizacion = i.usuarioModificacion
                            't.fechaActualizacion = i.fechaModificacion
                            'totalesBL.UpdateStockOtrasEntradas(t)


                        Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.SALIDA_EXISTENCIAS

                            nuevoTA = New totalesAlmacen
                            nuevoTA.idEmpresa = i.IdEmpresa
                            nuevoTA.idEstablecimiento = i.IdEstablecimiento
                            nuevoTA.codigoLote = i.CustomRecursoCostoLote.codigoLote
                            nuevoTA.idAlmacen = i.almacenRef
                            nuevoTA.origenRecaudo = i.destino
                            nuevoTA.idItem = i.idItem
                            nuevoTA.cantidad = i.monto1 * -1

                            Dim Product = totalesBL.ObtenerCanDisponibleProductLote(nuevoTA)

                            If i.monto1 > Product.cantidad Then
                                Throw New Exception("El artículo: " & i.descripcionItem & ", no tiene stock disponible!")
                            End If


                            i.codigoLote = i.CustomRecursoCostoLote.codigoLote

                            Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                            i.secuencia = codSecuencia

                            i.nrolote = i.CustomRecursoCostoLote.codigoLote
                            inventario.InsertAlmacenOSDefault(i, objDocumento)

                            't = New totalesAlmacen
                            't.idEmpresa = i.IdEmpresa
                            't.idEstablecimiento = i.IdEstablecimiento
                            't.tipoExistencia = i.tipoExistencia
                            't.descripcion = i.descripcionItem
                            ''   t.descripcion = i.DetalleItem
                            't.idUnidad = i.unidad1
                            't.idAlmacen = i.almacenRef
                            't.origenRecaudo = i.destino
                            't.idItem = i.idItem
                            't.cantidad = i.monto1 * -1
                            't.precioUnitarioCompra = 0
                            't.importeSoles = (i.precioUnitario * i.monto1) * -1
                            't.importeDolares = (i.precioUnitarioUS * i.monto1) * -1
                            't.usuarioActualizacion = i.usuarioModificacion
                            't.fechaActualizacion = i.fechaModificacion
                            'totalesBL.UpdateTotalesVentas(t)

                            If Not IsNothing(i.tipoCosto) Then
                                'registro de los asientos contables
                                'nMovimiento = New movimiento
                                'nMovimiento.idAsiento = codAsiento
                                'Select Case i.tipoExistencia
                                '    Case "01"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "01", "ITEM", "EXT01.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "03"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "03", "ITEM", "EXT03.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "04"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "04", "ITEM", "EXT04.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "05"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "05", "ITEM", "EXT05.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                'End Select
                                'nMovimiento.descripcion = i.descripcionItem
                                'nMovimiento.tipo = "D"
                                'nMovimiento.monto = i.importe
                                'nMovimiento.montoUSD = i.importeUS
                                'nMovimiento.usuarioActualizacion = i.usuarioModificacion
                                'nMovimiento.fechaActualizacion = i.fechaModificacion
                                'HeliosData.movimiento.Add(nMovimiento)

                                ''----------------- haber----------------------------------------

                                'nMovimiento = New movimiento
                                'nMovimiento.idAsiento = codAsiento
                                'Select Case i.tipoExistencia
                                '    Case "01"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "01", "ITEM", "EXT01.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "03"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "03", "ITEM", "ALM03.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "04"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "04", "ITEM", "ALM04.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "05"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "05", "ITEM", "ALM05.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                'End Select
                                'nMovimiento.descripcion = i.descripcionItem
                                'nMovimiento.tipo = "H"
                                'nMovimiento.monto = i.importe
                                'nMovimiento.montoUSD = i.importeUS
                                'nMovimiento.usuarioActualizacion = i.usuarioModificacion
                                'nMovimiento.fechaActualizacion = i.fechaModificacion
                                'HeliosData.movimiento.Add(nMovimiento)
                                '----------------------------------------------------------------------------------




                                'ESTE ES EL VIGENTE HASTA 4/04/2017 ************************************
                                ' recursoCostoBL.GrabarDetalleRecursosByOne(i, objDocumento.idDocumento)
                            End If
                    End Select
                Next

                '     asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return codDocumento
    End Function

    Public Sub InsertEntradaProduccion(ByVal documentocompraBE As documentocompra, intIdDocumento As Integer)
        Dim docCompra As New documentocompra
        Using ts As New TransactionScope
            docCompra.idDocumento = intIdDocumento
            docCompra.idPadre = documentocompraBE.idPadre
            docCompra.codigoLibro = documentocompraBE.codigoLibro
            docCompra.idEmpresa = documentocompraBE.idEmpresa
            docCompra.idCentroCosto = documentocompraBE.idCentroCosto
            docCompra.fechaDoc = documentocompraBE.fechaDoc
            docCompra.fechaLaboral = documentocompraBE.fechaLaboral
            docCompra.fechaVcto = documentocompraBE.fechaVcto
            docCompra.fechaContable = documentocompraBE.fechaContable
            docCompra.fechaConstancia = documentocompraBE.fechaConstancia
            docCompra.nroConstancia = documentocompraBE.nroConstancia
            docCompra.tipoDoc = documentocompraBE.tipoDoc
            docCompra.serie = documentocompraBE.serie
            docCompra.numeroDoc = documentocompraBE.numeroDoc
            docCompra.idProveedor = documentocompraBE.idProveedor
            docCompra.idPersona = documentocompraBE.idPersona
            docCompra.monedaDoc = documentocompraBE.monedaDoc
            docCompra.tasaIgv = documentocompraBE.tasaIgv
            docCompra.tcDolLoc = documentocompraBE.tcDolLoc
            docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
            docCompra.regimen = documentocompraBE.regimen
            docCompra.tasaRegimen = documentocompraBE.tasaRegimen
            docCompra.nroRegimen = documentocompraBE.nroRegimen
            docCompra.bi01 = documentocompraBE.bi01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.bi03 = documentocompraBE.bi03
            docCompra.bi04 = documentocompraBE.bi04
            docCompra.isc01 = documentocompraBE.isc01
            docCompra.isc02 = documentocompraBE.isc02
            docCompra.isc03 = documentocompraBE.isc03
            docCompra.igv01 = documentocompraBE.igv01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.igv03 = documentocompraBE.igv03
            docCompra.otc01 = documentocompraBE.bi02
            docCompra.otc02 = documentocompraBE.otc02
            docCompra.otc03 = documentocompraBE.otc03
            docCompra.otc04 = documentocompraBE.otc04
            docCompra.bi01us = documentocompraBE.bi01us
            docCompra.bi02us = documentocompraBE.bi02us
            docCompra.bi03us = documentocompraBE.bi03us
            docCompra.bi04us = documentocompraBE.bi04us
            docCompra.isc01us = documentocompraBE.isc01us
            docCompra.isc02us = documentocompraBE.isc01us
            docCompra.isc03us = documentocompraBE.isc03us
            docCompra.igv01us = documentocompraBE.igv01us
            docCompra.igv02us = documentocompraBE.igv02us
            docCompra.igv03us = documentocompraBE.igv03us
            docCompra.otc01us = documentocompraBE.otc01us
            docCompra.otc02us = documentocompraBE.otc02us
            docCompra.otc03us = documentocompraBE.otc03us
            docCompra.otc04us = documentocompraBE.otc04us
            docCompra.importeTotal = documentocompraBE.importeTotal
            docCompra.importeUS = documentocompraBE.importeUS
            docCompra.destino = documentocompraBE.destino
            docCompra.estadoPago = documentocompraBE.estadoPago
            docCompra.glosa = documentocompraBE.glosa
            docCompra.referenciaDestino = documentocompraBE.referenciaDestino
            docCompra.saldoMontoNota = documentocompraBE.saldoMontoNota
            docCompra.saldoMontoNotaUSD = documentocompraBE.saldoMontoNotaUSD
            docCompra.tipoCompra = documentocompraBE.tipoCompra
            docCompra.sustentado = documentocompraBE.sustentado
            docCompra.situacion = documentocompraBE.situacion
            docCompra.estadoEntrega = documentocompraBE.estadoEntrega
            docCompra.aprobado = documentocompraBE.aprobado
            'Select Case documentocompraBE.tipoCompra
            '    Case TIPO_COMPRA.COMPRA_AL_CREDITO, TIPO_COMPRA.OTRAS_ENTRADAS
            '        docCompra.idPadre = documentocompraBE.idPadre
            '    Case TIPO_COMPRA.ORDEN_COMPRA
            '        docCompra.idPadre = documentocompraBE.idPadre
            '    Case TIPO_COMPRA.NOTA_CREDITO, TIPO_COMPRA.NOTA_DEBITO, TIPO_COMPRA.BONIFICACIONES_RECIBIDAS, TIPO_COMPRA.NOTA_DEBITO_DEVOLUCION, "COMP"
            '        docCompra.idPadre = documentocompraBE.idPadre
            'End Select

            docCompra.tieneDetraccion = documentocompraBE.tieneDetraccion
            docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
            docCompra.fechaActualizacion = documentocompraBE.fechaActualizacion

            HeliosData.documentocompra.Add(docCompra)
            HeliosData.SaveChanges()
            ts.Complete()
            '   documentocompraBE.idDocumento = docCompra.idDocumento
        End Using
    End Sub

    Public Function SaveEntradasProduccion(objDocumento As documento, idEntregable As Integer) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim recursoBL As New recursoCostoBL
        Dim asientoBL As New AsientoBL
        Try
            Using ts As New TransactionScope()
                Dim codDoc = InsertarOtrasEntradas_Produccion(objDocumento)

                Select Case objDocumento.documentocompra.destino
                    Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.ENTRADA_EXISTENCIAS
                        If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then
                            Dim listaEntradasDet = objDocumento.documentocompra.documentocompradetalle.ToList
                            Dim ListaArticulos = (From n In listaEntradasDet
                                                  Where n.tipoExistencia <> "GS"
                                                  Select n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct.ToList

                            For Each a In ListaArticulos
                                Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                                 .fecha = New DateTime(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1),
                                                                                                                                 .tipoProducto = a.tipoExistencia,
                                                                                                                                 .idItem = a.idItem, .nrolote = a.codigoLote}, Nothing)
                                totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                            Next
                        End If

                    Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.SALIDA_EXISTENCIAS
                        Dim listaSalidaDet = objDocumento.documentocompra.documentocompradetalle.ToList
                        Dim ListaArticulos = (From n In listaSalidaDet
                                              Where n.tipoExistencia <> "GS"
                                              Select n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct.ToList

                        For Each a In listaSalidaDet
                            Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                             .fecha = New DateTime(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1),
                                                                                                                             .tipoProducto = a.tipoExistencia,
                                                                                                                             .idItem = a.idItem, .nrolote = a.CustomRecursoCostoLote.codigoLote}, Nothing)
                            totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                        Next
                End Select

                'Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                '                      Select n.idItem, n.almacenRef, n.tipoExistencia).Distinct.ToList


                'For Each a In ListaArticulos
                '    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                '                                                                                                       .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
                '                                                                                                                             objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                '                                                                                                       .tipoProducto = a.tipoExistencia,
                '                                                                                                       .idItem = a.idItem}, Nothing)
                '    totalesBL.GetCurarKardexCaberas(listaAcurar)
                'Next
                recursoBL.CambioEstado(idEntregable)
                AsientoBL.SavebyGroupDoc(objDocumento)

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDoc
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function ListaRecursosGastoInventarioEntregables(compraBE As documentocompra) As List(Of documentocompradetalle)
        Dim doccompra As New documentocompradetalle
        Dim compraLista As New List(Of documentocompradetalle)
        Dim list As New List(Of String)

        'list.Add(TIPO_VENTA.OTRAS_SALIDAS)
        list.Add("TEA")


        'Dim consulta = (From n In HeliosData.documentocompra
        '                Join det In HeliosData.documentocompradetalle
        '                Join proy In HeliosData.recursoCosto
        '                On proy.idCosto Equals det.idCosto
        '                On det.idDocumento Equals n.idDocumento
        '                Join cuen In HeliosData.cuentaplanContableEmpresa
        '                On det.idCosto Equals cuen.idCosto
        '                Where det.tipoExistencia <> "GS" _
        '                And n.idEmpresa = compraBE.idEmpresa And n.idCentroCosto = compraBE.idCentroCosto _
        '                And list.Contains(n.tipoCompra) _
        '                And det.tipoCosto = "PG" And det.idCosto = compraBE.idCosto).ToList

        Dim consulta = (From n In HeliosData.documentocompra
                        Join det In HeliosData.documentocompradetalle
                        Join proy In HeliosData.recursoCosto
                        On proy.idCosto Equals det.idCosto
                        On det.idDocumento Equals n.idDocumento
                        Join cuen In HeliosData.cuentaplanContableEmpresa
                         On det.idCosto Equals cuen.idCosto
                        Where det.tipoExistencia <> "GS" _
                        And n.idEmpresa = compraBE.idEmpresa And n.idCentroCosto = compraBE.idCentroCosto _
                        And list.Contains(n.tipoCompra) _
                        And det.tipoCosto = "PG" And det.idCosto = compraBE.idCosto And n.estadoEntrega = "DC"
                        Select
                            idCosto = proy.idCosto,
                            nombreCosto = proy.nombreCosto,
                            idPadreDTCompra = det.idPadreDTCompra,
        TipoDoc = n.tipoDoc,
        Serie = n.serie,
        NumDoc = n.numeroDoc,
        Moneda = n.monedaDoc,
        FechaDoc = n.fechaDoc,
        idDocumento = det.idDocumento,
        secuencia = det.secuencia,
        idItem = det.idItem,
        descripcionItem = det.descripcionItem,
        tipoExistencia = det.tipoExistencia,
        destino = det.destino,
        unidad1 = det.unidad1,
        monto1 = det.monto1,
        precioUnitario = det.precioUnitario,
        precioUnitarioUS = det.precioUnitarioUS,
        montokardex = det.importe,
        montokardexUS = det.importe,
        importe = det.importe,
        importeUS = det.importeUS,
        tipExt = det.tipoExistencia,
        CuentaItem = cuen.cuenta,
        tipoCompra = n.tipoCompra,
        almacenDestino = det.almacenDestino,
        CantUsado = (CType((Aggregate t1 In
                                    (From rec In HeliosData.recursoCostoDetalle
                                     Where
                                     rec.idCosto = det.idCosto And rec.itemRef = det.secuencia
                                     Select New With {
                                         rec.cant
                                     }) Into Sum(t1.cant)), Decimal?)),
                            ImporteUsado = (CType((Aggregate t1 In
                                    (From rec In HeliosData.recursoCostoDetalle
                                     Where
                                     rec.idCosto = det.idCosto And rec.itemRef = det.secuencia
                                     Select New With {
                                         rec.montoMN
                                     }) Into Sum(t1.montoMN)), Decimal?))).ToList

        For Each i In consulta
            doccompra = New documentocompradetalle
            doccompra.idCosto = i.idCosto
            doccompra.NombreProyectoGeneral = i.nombreCosto
            doccompra.idPadreDTCompra = i.idPadreDTCompra
            doccompra.NombreProveedor = "Sin identificar"
            doccompra.TipoDoc = i.TipoDoc
            doccompra.Serie = i.Serie
            doccompra.NumDoc = i.NumDoc
            doccompra.Moneda = i.Moneda
            doccompra.FechaDoc = i.FechaDoc
            doccompra.idDocumento = i.idDocumento
            doccompra.secuencia = i.secuencia
            doccompra.idItem = i.idItem
            doccompra.descripcionItem = i.descripcionItem
            doccompra.tipoExistencia = i.tipExt
            doccompra.destino = i.destino
            doccompra.unidad1 = i.unidad1
            doccompra.monto1 = i.monto1 - i.CantUsado.GetValueOrDefault
            doccompra.precioUnitario = i.precioUnitario
            doccompra.precioUnitarioUS = i.precioUnitarioUS
            doccompra.montokardex = i.importe - i.ImporteUsado.GetValueOrDefault
            doccompra.montokardexUS = i.importe
            doccompra.importe = i.importe
            doccompra.importeUS = i.importeUS
            doccompra.tipoExistencia = i.tipoExistencia
            doccompra.TipoOperacion = "02"
            doccompra.CuentaItem = i.CuentaItem
            doccompra.tipoCompra = i.tipoCompra
            doccompra.almacenDestino = i.almacenDestino
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function ListaRecursosGastoEntregable(compraBE As documentocompra, idEntregable As Integer) As List(Of documentocompradetalle)
        Dim doccompra As New documentocompradetalle
        Dim compraLista As New List(Of documentocompradetalle)

        Dim consulta = (From det In HeliosData.documentocompradetalle
                        Join rec In HeliosData.recursoCosto On CInt(det.idCosto) Equals rec.idCosto
                        Join cuen In HeliosData.cuentaplanContableEmpresa On CInt(det.idCosto) Equals cuen.idCosto
                        Where
                      det.tipoExistencia = "GS" And
                      det.documentocompra.idEmpresa = compraBE.idEmpresa And
                      CStr(det.documentocompra.idCentroCosto) = compraBE.idCentroCosto And
                      (New String() {"CMP", "BOFR", "NTC", "NDB", "CSP", "CRH"}).Contains(det.documentocompra.tipoCompra) _
                      And Not ((New String() {"11", "18"}).Contains(det.idItem.Substring(1 - 1, 2))) _
                      And (New String() {"63", "64", "65", "66", "67", "68"}).Contains(det.idItem.Substring(1 - 1, 2)) _
                      And det.tipoCosto = "PG" _
                      And CLng(det.idCosto) = idEntregable
                        Select idCosto = det.idCosto,
                          det.idPadreDTCompra,
                          det.documentocompra.entidad.nombreCompleto,
                          det.documentocompra.tipoDoc,
                          det.documentocompra.serie,
                          det.documentocompra.numeroDoc,
                          det.documentocompra.monedaDoc,
                          fechaDoc = CType(det.documentocompra.fechaDoc, DateTime?),
                          det.idDocumento,
                          det.secuencia,
                          det.idItem,
                          det.tipoCosto,
                          det.descripcionItem,
                          det.tipoExistencia,
                          det.destino,
                          det.monto1,
                          det.precioUnitario,
                          det.precioUnitarioUS,
                          det.montokardex,
                          det.montokardexUS,
                          det.importe,
                          det.importeUS,
                          cuen.cuenta,
                          rec.nombreCosto).ToList

        For Each i In consulta
            doccompra = New documentocompradetalle
            doccompra.idCosto = i.idCosto.GetValueOrDefault
            doccompra.NombreProyectoGeneral = i.nombreCosto
            doccompra.idPadreDTCompra = i.idPadreDTCompra
            doccompra.NombreProveedor = i.nombreCompleto
            doccompra.TipoDoc = i.tipoDoc
            doccompra.Serie = i.serie
            doccompra.NumDoc = i.numeroDoc
            doccompra.Moneda = i.monedaDoc
            doccompra.FechaDoc = i.fechaDoc
            doccompra.idDocumento = i.idDocumento
            doccompra.secuencia = i.secuencia
            doccompra.idItem = i.idItem
            doccompra.descripcionItem = i.descripcionItem
            doccompra.tipoExistencia = i.tipoExistencia
            doccompra.destino = i.destino
            doccompra.unidad1 = "UND"
            doccompra.monto1 = i.monto1
            doccompra.precioUnitario = i.precioUnitario
            doccompra.precioUnitarioUS = i.precioUnitarioUS
            doccompra.montokardex = i.montokardex
            doccompra.montokardexUS = i.montokardexUS
            doccompra.importe = i.importe
            doccompra.importeUS = i.importeUS
            doccompra.tipoExistencia = i.tipoExistencia
            doccompra.TipoOperacion = "02"
            doccompra.tipoCosto = i.tipoCosto
            doccompra.CuentaItem = i.cuenta
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Function InsertarOtrasEntradas_Consumo(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim guiaBL As New documentoGuiaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim precio As New listadoPreciosBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim nuevoTA As New totalesAlmacen
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento
        Dim cuentaMascara As New cuentaMascara
        Dim cuentaMascaraBL As New cuentaMascaraBL
        Dim codDocumento As Integer = 0
        Dim loteBL As New recursoCostoLoteBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                codDocumento = objDocumento.idDocumento
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                'If objDocumento.documentocompra.tipoOperacion = "10.01" Then
                '    nAsiento = New asiento
                '    nAsiento.idDocumento = objDocumento.idDocumento
                '    nAsiento.idEmpresa = Gempresas.IdEmpresaRuc
                '    nAsiento.idCentroCostos = GEstableciento.IdEstablecimiento
                '    nAsiento.idEntidad = Nothing
                '    nAsiento.nombreEntidad = Nothing
                '    nAsiento.tipoEntidad = TIPO_ENTIDAD.PROVEEDOR
                '    nAsiento.fechaProceso = objDocumento.documentocompra.fechaDoc
                '    nAsiento.codigoLibro = "13"
                '    nAsiento.tipo = ASIENTO_CONTABLE.HABILITADO.DISABLED
                '    nAsiento.tipoAsiento = ASIENTO_CONTABLE.PRODUCTOS_EN_TRANSITO
                '    nAsiento.importeMN = objDocumento.documentocompra.importeTotal
                '    nAsiento.importeME = objDocumento.documentocompra.importeUS
                '    nAsiento.glosa = objDocumento.documentocompra.glosa
                '    nAsiento.usuarioActualizacion = objDocumento.usuarioActualizacion
                '    nAsiento.fechaActualizacion = objDocumento.fechaActualizacion
                '    asientoBL.InsertDefault(nAsiento, objDocumento.idDocumento)

                'End If
                '   Dim codAsiento = nAsiento.idAsiento
                Dim codigoLote = 0
                For Each i In objDocumento.documentocompra.documentocompradetalle


                    Select Case objDocumento.documentocompra.destino
                        Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.ENTRADA_EXISTENCIAS
                            If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then
                                codigoLote = i.codigoLote
                            Else
                                codigoLote = loteBL.GrabarLotesOne(i.CustomRecursoCostoLote)
                            End If
                            i.codigoLote = codigoLote

                            Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)




                            i.secuencia = codSecuencia
                            i.nrolote = codigoLote
                            inventario.InsertAlmacenOEDefault(i, objDocumento)

                            If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then

                            Else
                                nuevoTA = New totalesAlmacen With
                                        {
                                            .idEmpresa = i.IdEmpresa,
                                            .idEstablecimiento = i.IdEstablecimiento,
                                            .codigoLote = codigoLote,
                                            .idAlmacen = i.almacenRef,
                                            .origenRecaudo = i.destino,
                                            .tipoExistencia = i.tipoExistencia,
                                            .idItem = i.idItem,
                                            .descripcion = i.descripcionItem,
                                            .idUnidad = i.unidad1,
                                            .unidadMedida = i.unidad1,
                                            .cantidad = i.monto1,
                                            .importeSoles = i.importe,
                                            .importeDolares = i.importeUS,
                                            .cantidadMaxima = 10000,
                                            .cantidadMinima = 10,
                                            .fechaVcto = i.CustomRecursoCostoLote.fechaVcto,
                                            .status = StatusArticulo.Activo,
                                            .usuarioActualizacion = i.usuarioModificacion,
                                            .fechaActualizacion = i.fechaModificacion}
                                HeliosData.totalesAlmacen.Add(nuevoTA)
                            End If

                            't = New totalesAlmacen
                            't.idEmpresa = i.IdEmpresa
                            't.idEstablecimiento = i.IdEstablecimiento
                            't.tipoExistencia = i.tipoExistencia
                            't.descripcion = i.descripcionItem
                            '' t.descripcion = i.DetalleItem
                            't.idUnidad = i.unidad1
                            't.idAlmacen = i.almacenRef
                            't.origenRecaudo = i.destino
                            't.idItem = i.idItem
                            't.cantidad = i.monto1
                            't.precioUnitarioCompra = 0
                            't.importeSoles = i.importe
                            't.importeDolares = i.importeUS
                            't.usuarioActualizacion = i.usuarioModificacion
                            't.fechaActualizacion = i.fechaModificacion
                            'totalesBL.UpdateStockOtrasEntradas(t)


                        Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.SALIDA_EXISTENCIAS

                            nuevoTA = New totalesAlmacen
                            nuevoTA.idEmpresa = i.IdEmpresa
                            nuevoTA.idEstablecimiento = i.IdEstablecimiento
                            nuevoTA.codigoLote = i.CustomRecursoCostoLote.codigoLote
                            nuevoTA.idAlmacen = i.almacenRef
                            nuevoTA.origenRecaudo = i.destino
                            nuevoTA.idItem = i.idItem
                            nuevoTA.cantidad = i.monto1 * -1

                            Dim Product = totalesBL.ObtenerCanDisponibleProductLote(nuevoTA)

                            If i.monto1 > Product.cantidad Then
                                Throw New Exception("El artículo: " & i.descripcionItem & ", no tiene stock disponible!")
                            End If


                            i.codigoLote = i.CustomRecursoCostoLote.codigoLote

                            Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                            recursoCostoBL.GrabarRecursoSalidaProd(i, objDocumento.idDocumento, codSecuencia, objDocumento.documentocompra.fechaContable)

                            i.secuencia = codSecuencia

                            i.nrolote = i.CustomRecursoCostoLote.codigoLote
                            inventario.InsertAlmacenOSDefault(i, objDocumento)

                            't = New totalesAlmacen
                            't.idEmpresa = i.IdEmpresa
                            't.idEstablecimiento = i.IdEstablecimiento
                            't.tipoExistencia = i.tipoExistencia
                            't.descripcion = i.descripcionItem
                            ''   t.descripcion = i.DetalleItem
                            't.idUnidad = i.unidad1
                            't.idAlmacen = i.almacenRef
                            't.origenRecaudo = i.destino
                            't.idItem = i.idItem
                            't.cantidad = i.monto1 * -1
                            't.precioUnitarioCompra = 0
                            't.importeSoles = (i.precioUnitario * i.monto1) * -1
                            't.importeDolares = (i.precioUnitarioUS * i.monto1) * -1
                            't.usuarioActualizacion = i.usuarioModificacion
                            't.fechaActualizacion = i.fechaModificacion
                            'totalesBL.UpdateTotalesVentas(t)

                            If Not IsNothing(i.tipoCosto) Then
                                'registro de los asientos contables
                                'nMovimiento = New movimiento
                                'nMovimiento.idAsiento = codAsiento
                                'Select Case i.tipoExistencia
                                '    Case "01"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "01", "ITEM", "EXT01.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "03"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "03", "ITEM", "EXT03.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "04"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "04", "ITEM", "EXT04.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "05"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "05", "ITEM", "EXT05.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                'End Select
                                'nMovimiento.descripcion = i.descripcionItem
                                'nMovimiento.tipo = "D"
                                'nMovimiento.monto = i.importe
                                'nMovimiento.montoUSD = i.importeUS
                                'nMovimiento.usuarioActualizacion = i.usuarioModificacion
                                'nMovimiento.fechaActualizacion = i.fechaModificacion
                                'HeliosData.movimiento.Add(nMovimiento)

                                ''----------------- haber----------------------------------------

                                'nMovimiento = New movimiento
                                'nMovimiento.idAsiento = codAsiento
                                'Select Case i.tipoExistencia
                                '    Case "01"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "01", "ITEM", "EXT01.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "03"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "03", "ITEM", "ALM03.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "04"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "04", "ITEM", "ALM04.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "05"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "05", "ITEM", "ALM05.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                'End Select
                                'nMovimiento.descripcion = i.descripcionItem
                                'nMovimiento.tipo = "H"
                                'nMovimiento.monto = i.importe
                                'nMovimiento.montoUSD = i.importeUS
                                'nMovimiento.usuarioActualizacion = i.usuarioModificacion
                                'nMovimiento.fechaActualizacion = i.fechaModificacion
                                'HeliosData.movimiento.Add(nMovimiento)
                                '----------------------------------------------------------------------------------




                                'ESTE ES EL VIGENTE HASTA 4/04/2017 ************************************
                                ' recursoCostoBL.GrabarDetalleRecursosByOne(i, objDocumento.idDocumento)
                            End If
                    End Select
                Next

                '     asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return codDocumento
    End Function

    Public Function SaveOtrasSalidasProduccion(objDocumento As documento) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim asientoBL As New AsientoBL
        Try
            Using ts As New TransactionScope()
                Dim codDoc = InsertarOtrasEntradas_Consumo(objDocumento)


                Select Case objDocumento.documentocompra.destino
                    Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.ENTRADA_EXISTENCIAS
                        If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then
                            Dim listaEntradasDet = objDocumento.documentocompra.documentocompradetalle.ToList
                            Dim ListaArticulos = (From n In listaEntradasDet
                                                  Where n.tipoExistencia <> "GS"
                                                  Select n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct.ToList

                            For Each a In ListaArticulos
                                Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                                 .fecha = New DateTime(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1),
                                                                                                                                 .tipoProducto = a.tipoExistencia,
                                                                                                                                 .idItem = a.idItem, .nrolote = a.codigoLote}, Nothing)
                                totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                            Next
                        End If

                    Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.SALIDA_EXISTENCIAS
                        Dim listaSalidaDet = objDocumento.documentocompra.documentocompradetalle.ToList
                        Dim ListaArticulos = (From n In listaSalidaDet
                                              Where n.tipoExistencia <> "GS"
                                              Select n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct.ToList

                        For Each a In listaSalidaDet
                            Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                             .fecha = New DateTime(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1),
                                                                                                                             .tipoProducto = a.tipoExistencia,
                                                                                                                             .idItem = a.idItem, .nrolote = a.CustomRecursoCostoLote.codigoLote}, Nothing)
                            totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                        Next
                End Select

                'Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                '                      Select n.idItem, n.almacenRef, n.tipoExistencia).Distinct.ToList


                'For Each a In ListaArticulos
                '    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                '                                                                                                       .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
                '                                                                                                                             objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                '                                                                                                       .tipoProducto = a.tipoExistencia,
                '                                                                                                       .idItem = a.idItem}, Nothing)
                '    totalesBL.GetCurarKardexCaberas(listaAcurar)
                'Next
                AsientoBL.SavebyGroupDoc(objDocumento)

                HeliosData.SaveChanges()
                ts.Complete()
                Return codDoc
            End Using
        Catch ex As Exception
            Throw ex
        End Try





        'Dim inventario As New InventarioMovimientoBL
        'Dim totalesBL As New totalesAlmacenBL
        'Dim asientoBL As New AsientoBL
        'Dim recursoCostoBL As New recursoCostoDetalleBL
        'Try
        '    Using ts As New TransactionScope()
        '        Dim codDoc = InsertarOtrasEntradas_SPCXProduccion(objDocumento)

        '        Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
        '                              Select n.idItem, n.almacenRef, n.tipoExistencia).Distinct.ToList



        '        For Each a In ListaArticulos
        '            Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
        '                                                                                                               .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
        '                                                                                                                                     objDocumento.documentocompra.fechaDoc.Value.Month, 1),
        '                                                                                                               .tipoProducto = a.tipoExistencia,
        '                                                                                                               .idItem = a.idItem}, Nothing)
        '            totalesBL.GetCurarKardexCaberas(listaAcurar)
        '        Next


        '        'recursoCostoBL.GrabarRecursoSalidaProd(objRecurso, codDoc)



        '        asientoBL.SavebyGroupDoc(objDocumento)

        '        HeliosData.SaveChanges()
        '        ts.Complete()
        '        Return codDoc
        '    End Using
        'Catch ex As Exception
        '    Throw ex
        'End Try
    End Function


    Function InsertarOtrasEntradas_SPCXProduccion(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim guiaBL As New documentoGuiaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim precio As New listadoPreciosBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim t As New totalesAlmacen
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento
        Dim cuentaMascara As New cuentaMascara
        Dim cuentaMascaraBL As New cuentaMascaraBL
        Dim codDocumento As Integer = 0
        Dim recursoCostoDetalleBL As New recursoCostoDetalleBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                codDocumento = objDocumento.idDocumento
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)


                For Each i In objDocumento.documentocompra.documentocompradetalle
                    Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                    'costeoo
                    recursoCostoBL.GrabarRecursoSalidaProd(i, objDocumento.idDocumento, codSecuencia, objDocumento.documentocompra.fechaContable)



                    i.secuencia = codSecuencia

                    Select Case objDocumento.documentocompra.destino
                        Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.ENTRADA_EXISTENCIAS
                            inventario.InsertAlmacenOEDefault(i, objDocumento)

                            t = New totalesAlmacen
                            t.idEmpresa = i.IdEmpresa
                            t.idEstablecimiento = i.IdEstablecimiento
                            t.tipoExistencia = i.tipoExistencia
                            t.descripcion = i.descripcionItem
                            ' t.descripcion = i.DetalleItem
                            t.idUnidad = i.unidad1
                            t.idAlmacen = i.almacenRef
                            t.origenRecaudo = i.destino
                            t.idItem = i.idItem
                            t.cantidad = i.monto1
                            t.precioUnitarioCompra = 0
                            t.importeSoles = i.importe
                            t.importeDolares = i.importeUS
                            t.usuarioActualizacion = i.usuarioModificacion
                            t.fechaActualizacion = i.fechaModificacion
                            totalesBL.UpdateStockOtrasEntradas(t)


                        Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.SALIDA_EXISTENCIAS
                            inventario.InsertAlmacenOSDefault(i, objDocumento)



                            If Not IsNothing(i.tipoCosto) Then

                            End If
                    End Select


                Next








                '     asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return codDocumento
    End Function


    Public Function EnvioDeProductosTerminados(periodo As String, idEntregable As Integer) As List(Of documentocompradetalle)
        Dim objeto As New documentocompradetalle
        Dim lista As New List(Of documentocompradetalle)


        Dim consulta = (From det In HeliosData.documentocompradetalle
                        Join doc In HeliosData.documentocompra
                                On doc.idDocumento Equals det.idDocumento
                        Where doc.tipoCompra = "OEA" And doc.situacion = "20" And doc.idPadre = idEntregable).ToList

        For Each i In consulta
            objeto = New documentocompradetalle

            objeto.idDocumento = i.doc.idDocumento
            objeto.FechaDoc = i.doc.fechaDoc
            objeto.NumDoc = i.doc.numeroDoc
            objeto.secuencia = i.det.secuencia
            objeto.idItem = i.det.idItem
            objeto.descripcionItem = i.det.descripcionItem
            objeto.monto1 = i.det.monto1
            objeto.precioUnitario = i.det.precioUnitario
            objeto.importe = i.det.importe

            lista.Add(objeto)
        Next


        Return lista
    End Function

    Public Function ListaRecursosCostoInventarioEntregables(compraBE As documentocompra) As List(Of documentocompradetalle)
        Dim doccompra As New documentocompradetalle
        Dim compraLista As New List(Of documentocompradetalle)
        Dim list As New List(Of String)

        list.Add(TIPO_VENTA.OTRAS_SALIDAS)

        Dim listCosteo As New List(Of String)
        listCosteo.Add("PC")
        listCosteo.Add("PG")

        Dim consulta = (From n In HeliosData.documentocompra
                        Join det In HeliosData.documentocompradetalle
                        Join proy In HeliosData.recursoCosto
                        On proy.idCosto Equals det.idCosto
                        On det.idDocumento Equals n.idDocumento
                        Where det.tipoExistencia <> "GS" _
                        And n.idEmpresa = compraBE.idEmpresa And n.idCentroCosto = compraBE.idCentroCosto _
                        And list.Contains(n.tipoCompra) _
                        And det.tipoCosto = "PC" And det.idCosto = compraBE.idCosto).ToList

        For Each i In consulta
            doccompra = New documentocompradetalle
            doccompra.idCosto = i.proy.idCosto
            doccompra.NombreProyectoGeneral = i.proy.nombreCosto
            doccompra.idPadreDTCompra = i.det.idPadreDTCompra
            doccompra.NombreProveedor = "Sin identificar"
            doccompra.TipoDoc = i.n.tipoDoc
            doccompra.Serie = i.n.serie
            doccompra.NumDoc = i.n.numeroDoc
            doccompra.Moneda = i.n.monedaDoc
            doccompra.FechaDoc = i.n.fechaDoc
            doccompra.idDocumento = i.det.idDocumento
            doccompra.secuencia = i.det.secuencia
            doccompra.idItem = i.det.idItem
            doccompra.descripcionItem = i.det.descripcionItem
            doccompra.tipoExistencia = i.det.tipoExistencia
            doccompra.destino = i.det.destino
            doccompra.unidad1 = i.det.unidad1
            doccompra.monto1 = i.det.monto1
            doccompra.precioUnitario = i.det.precioUnitario
            doccompra.precioUnitarioUS = i.det.precioUnitarioUS
            doccompra.montokardex = i.det.importe
            doccompra.montokardexUS = i.det.importe
            doccompra.importe = i.det.importe
            doccompra.importeUS = i.det.importeUS
            doccompra.tipoExistencia = i.det.tipoExistencia
            doccompra.TipoOperacion = "02"
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function ListaRecursosCostoEntregable(compraBE As documentocompra, idEntregable As Integer) As List(Of documentocompradetalle)
        Dim doccompra As New documentocompradetalle
        Dim compraLista As New List(Of documentocompradetalle)

        Dim consulta = (From det In HeliosData.documentocompradetalle
                        Join rec In HeliosData.recursoCosto On CInt(det.idCosto) Equals rec.idCosto
                        Where
                      det.tipoExistencia = "GS" And
                      det.documentocompra.idEmpresa = compraBE.idEmpresa And
                      CStr(det.documentocompra.idCentroCosto) = compraBE.idCentroCosto And
                      (New String() {"CMP", "BOFR", "NTC", "NDB", "CSP", "CRH"}).Contains(det.documentocompra.tipoCompra) _
                      And Not ((New String() {"11", "18"}).Contains(det.idItem.Substring(1 - 1, 2))) _
                      And (New String() {"63", "64", "65", "66", "67", "68"}).Contains(det.idItem.Substring(1 - 1, 2)) _
                      And det.tipoCosto = "PC" _
                      And CLng(det.idCosto) = idEntregable
                        Select idCosto = det.idCosto,
                          det.idPadreDTCompra,
                          det.documentocompra.entidad.nombreCompleto,
                          det.documentocompra.tipoDoc,
                          det.documentocompra.serie,
                          det.documentocompra.numeroDoc,
                          det.documentocompra.monedaDoc,
                          fechaDoc = CType(det.documentocompra.fechaDoc, DateTime?),
                          det.idDocumento,
                          det.secuencia,
                          det.idItem,
                          det.tipoCosto,
                          det.descripcionItem,
                          det.tipoExistencia,
                          det.destino,
                          det.monto1,
                          det.precioUnitario,
                          det.precioUnitarioUS,
                          det.montokardex,
                          det.montokardexUS,
                          det.importe,
                          det.importeUS,
                          rec.nombreCosto).ToList



        For Each i In consulta
            doccompra = New documentocompradetalle
            doccompra.idCosto = i.idCosto.GetValueOrDefault
            doccompra.NombreProyectoGeneral = i.nombreCosto
            doccompra.idPadreDTCompra = i.idPadreDTCompra
            doccompra.NombreProveedor = i.nombreCompleto
            doccompra.TipoDoc = i.tipoDoc
            doccompra.Serie = i.serie
            doccompra.NumDoc = i.numeroDoc
            doccompra.Moneda = i.monedaDoc
            doccompra.FechaDoc = i.fechaDoc
            doccompra.idDocumento = i.idDocumento
            doccompra.secuencia = i.secuencia
            doccompra.idItem = i.idItem
            doccompra.descripcionItem = i.descripcionItem
            doccompra.tipoExistencia = i.tipoExistencia
            doccompra.destino = i.destino
            doccompra.unidad1 = "UND"
            doccompra.monto1 = i.monto1
            doccompra.precioUnitario = i.precioUnitario
            doccompra.precioUnitarioUS = i.precioUnitarioUS
            doccompra.montokardex = i.montokardex
            doccompra.montokardexUS = i.montokardexUS
            doccompra.importe = i.importe
            doccompra.importeUS = i.importeUS
            doccompra.tipoExistencia = i.tipoExistencia
            doccompra.TipoOperacion = "02"
            doccompra.tipoCosto = i.tipoCosto
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function GetConsultaCuentasPorpagarFiltro(be As documentocompra) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim lista As New List(Of documentocompra)
        'c.fechaContable = be.fechaContable _
        Dim con = (From c In HeliosData.documentocompra
                   Where
                  (New String() {"CVR", "CMP", "CSP", "CRH", "APT"}).Contains(c.tipoCompra) And
                   c.idEmpresa = be.idEmpresa And c.idCentroCosto = be.idCentroCosto _
                       And c.fechaDoc.Value.Year >= be.fechaDoc.Value.Year _
                       And c.fechaDoc.Value.Month >= be.fechaDoc.Value.Month _
                       And c.fechaDoc.Value.Year <= be.fechaLaboral.Value.Year _
                       And c.fechaDoc.Value.Month <= be.fechaLaboral.Value.Month _
                       And c.monedaDoc = be.monedaDoc And c.estadoPago = "PN"
                   Select
                  c.idDocumento,
                  c.tipoCompra,
                  c.fechaContable,
                  c.fechaDoc,
                  c.serie,
                  c.numeroDoc,
                  c.tipoDoc,
                  c.monedaDoc,
                  c.importeTotal,
                  c.tcDolLoc,
                  c.importeUS,
                  c.estadoPago,
                  PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra <> "EXD"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       Exedentes = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "EXD"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentocompra
                                                 Where
                                                 (New String() {"08", "88"}).Contains(Documentocompra.tipoDoc) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.importeTotal
                                                 }) Into Sum(t1.importeTotal)), Decimal?)),
                             Conteo = ((Aggregate t1 In
                                        (From cro In HeliosData.Cronograma
                                         Where
                                         cro.idDocumentoRef = c.idDocumento And
                                         cro.estado = "PN"
                                         Select New With {
                                                cro
                                         }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoCompra
            doccompra.fechaContable = i.fechaContable
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDoc
            doccompra.monedaDoc = i.monedaDoc
            doccompra.importeTotal = i.importeTotal
            doccompra.tcDolLoc = i.tcDolLoc
            doccompra.importeUS = i.importeUS
            doccompra.estadoPago = i.estadoPago
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Sub EliminarAsigancionDeAsientoInventario(be As documentocompra)
        Dim AsientoBL As New AsientoBL
        Using ts As New TransactionScope
            Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = be.idDocumento).FirstOrDefault
            compra.aprobado = "N"
            AsientoBL.DeletePorDocumento(compra.idDocumento)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Public Function GetProveedoresXpagar(anio As Integer, empresa As String) As List(Of usp_GetProveedoresXpagar_Result)
        Return HeliosData.usp_GetProveedoresXpagar(anio, empresa).ToList
    End Function

    Public Function GetClientesXcobrar(anio As Integer, empresa As String) As List(Of usp_GetClientesXcobrar_Result)
        Return HeliosData.usp_GetClientesXcobrar(anio, empresa).ToList
    End Function

    Public Function GetPagosPendienteXproveedor(idEntidad As Integer, anio As Integer) As List(Of usp_GetCuentasXpagarXproveedorAnual_Result)
        Return HeliosData.usp_GetCuentasXpagarXproveedorAnual(idEntidad, anio).ToList
    End Function

    Public Function GetCobrosPendienteXcliente(idEntidad As Integer, anio As Integer) As List(Of usp_GetCuentasXcobrarXclienteAnual_Result)
        Return HeliosData.usp_GetCuentasXcobrarXclienteAnual(idEntidad, anio).ToList
    End Function

    Public Function TieneProveedoresApertura(be As documentocompra) As Boolean
        Dim con = HeliosData.documentocompra.Where(Function(o) o.tipoCompra = "APT").Count
        TieneProveedoresApertura = False
        If con > 0 Then
            TieneProveedoresApertura = True
        End If
    End Function

    Public Function GetExistenComprasSuperiores(be As documentocompra) As Integer
        Dim ExistenComprasSuperiores = HeliosData.documentocompra.Where(Function(o) TruncateTime(o.fechaDoc) >= be.fechaDoc And
                                                                            o.idEmpresa = be.idEmpresa).Count

        GetExistenComprasSuperiores = 0
        If ExistenComprasSuperiores > 0 Then
            GetExistenComprasSuperiores = ExistenComprasSuperiores
        End If
    End Function

    Function InsertReversion(objDocumento As documento)
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim CAN_BOF As Decimal = 0
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0

        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0
        Dim cajaBL As New documentoCajaDetalleBL
        Dim t As New totalesAlmacen
        Dim nMovimiento As New movimiento
        Dim nAsiento As New asiento
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Dim codNota = objDocumento.idDocumento
                Dim compra As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = objDocumento.documentocompra.idPadre).FirstOrDefault
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                For Each i In objDocumento.documentocompra.documentocompradetalle

                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                    'VALIDANDO ITEMS INGRESADOS COMO NOTA DE CREDITO
                    'cajaBL.ActualizarItemsPagosCompra(i, objDocumento.documentocompra.idPadre)
                    '--------------------------------------------------------

                    Select Case i.TipoOperacion

                        Case "9914", "9916", "9926" 'DISMI IMPORTE, DEV EXIST

                            Select Case i.tipoExistencia
                                Case "GS"


                                Case Else
                                    inventario.InsertNotaCredito(i, objDocumento)


                                    't = New totalesAlmacen
                                    't.idEmpresa = i.IdEmpresa
                                    't.idEstablecimiento = i.IdEstablecimiento
                                    't.idAlmacen = i.almacenRef
                                    't.origenRecaudo = i.destino
                                    't.idItem = i.idItem
                                    't.cantidad = i.monto1
                                    't.precioUnitarioCompra = i.precioUnitario
                                    't.importeSoles = i.montokardex
                                    't.importeDolares = i.montokardexUS
                                    'totalesBL.UpdateSingle2(t)
                            End Select


                        Case "9925"

                    End Select

                Next

                If Not IsNothing(objDocumento.documentoGuia) Then
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                    End If
                End If

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        objDocumento.idDocumento = codNota
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If
                'Cobrando Saldo de la venta cuando es una venta al credito
                '    If objDocumento.documentoventaAbarrotes.ImporteDevMN > 0 Then
                'If objDocumento.documentoventaAbarrotes.SaldoVentaMN > 0 Then
                'If Not IsNothing(nDocumentoSaldoVenta.documentoCaja) Then
                '    If Not IsNothing(nDocumentoSaldoVenta.documentoCaja.idEmpresa) Then
                '        SaveCaja(nDocumentoSaldoVenta, objDocumento.documentocompra.idPadre)
                '    End If
                'End If

                '-----------------------------------------------------------------------------------
                'creando documento de excendente por devolucion de dinero
                'If Not IsNothing(objDocumento.documentocompra.EstadoPagoDevolucion) Then
                '    objDocumento.idDocumento = codNota
                '    Dim codGenerado = GrabarDocumentoDevolucion(objDocumento)

                '    Select Case objDocumento.documentocompra.EstadoPagoDevolucion
                '        Case TIPO_VENTA.PAGO.COBRADO
                '            If Not IsNothing(nDocumentoNota.idEmpresa) Then
                '                Dim listaPagos As List(Of documentocompradetalle) = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = codGenerado).ToList
                '                SaveCaja2(nDocumentoNota, codGenerado, listaPagos)
                '            End If
                '        Case TIPO_VENTA.PAGO.PENDIENTE_PAGO

                '    End Select

                'End If


                'Dim ventaDetalle = (From n In HeliosData.documentocompradetalle
                ' Where n.idDocumento = compra.idDocumento).Count

                'If ventaDetalle > 0 Then
                '    compra.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                'Else
                compra.estadoPago = TIPO_COMPRA.COMPRA_ANULADA
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function SaveReversionOtraSalida(objDocumento As documento,
                                          nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer

        Dim totalesBL As New totalesAlmacenBL
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim idDoc As Integer = 0
        Try
            Using ts As New TransactionScope()
                idDoc = InsertReversion(objDocumento)

                Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.almacenRef, n.tipoExistencia).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                           .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
                                                                                                                                                 objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                                                                                                                           .tipoProducto = a.tipoExistencia,
                                                                                                                           .idItem = a.idItem}, Nothing)
                    totalesBL.GetCurarKardexCaberas(listaAcurar)
                Next

                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return idDoc
    End Function

    Function InsertReversionOtrasEntradas(objDocumento As documento)
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim CAN_BOF As Decimal = 0
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0

        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0
        Dim cajaBL As New documentoCajaDetalleBL
        Dim t As New totalesAlmacen
        Dim nMovimiento As New movimiento
        Dim nAsiento As New asiento
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Dim codNota = objDocumento.idDocumento
                Dim compra As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = objDocumento.documentocompra.idPadre).FirstOrDefault
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                For Each i In objDocumento.documentocompra.documentocompradetalle

                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                    'VALIDANDO ITEMS INGRESADOS COMO NOTA DE CREDITO
                    'cajaBL.ActualizarItemsPagosCompra(i, objDocumento.documentocompra.idPadre)
                    '--------------------------------------------------------

                    Select Case i.TipoOperacion

                        Case "9914", "9916", "9926" 'DISMI IMPORTE, DEV EXIST

                            Select Case i.tipoExistencia
                                Case "GS"


                                Case Else
                                    inventario.InsertNotaCredito(i, objDocumento)


                                    't = New totalesAlmacen
                                    't.idEmpresa = i.IdEmpresa
                                    't.idEstablecimiento = i.IdEstablecimiento
                                    't.idAlmacen = i.almacenRef
                                    't.origenRecaudo = i.destino
                                    't.idItem = i.idItem
                                    't.cantidad = i.monto1 * -1
                                    't.precioUnitarioCompra = i.precioUnitario * -1
                                    't.importeSoles = i.montokardex * -1
                                    't.importeDolares = i.montokardexUS * -1
                                    'totalesBL.UpdateSingle2(t)
                            End Select


                        Case "9925"

                    End Select

                Next

                If Not IsNothing(objDocumento.documentoGuia) Then
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                    End If
                End If

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        objDocumento.idDocumento = codNota
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If
                compra.estadoPago = TIPO_COMPRA.COMPRA_ANULADA
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function SaveReversionOtraEntrada(objDocumento As documento,
                                          nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer

        Dim codDoc As Integer = 0
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Try
            Using ts As New TransactionScope()
                codDoc = InsertReversionOtrasEntradas(objDocumento)


                Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.almacenRef, n.tipoExistencia).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                           .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
                                                                                                                                                 objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                                                                                                                           .tipoProducto = a.tipoExistencia,
                                                                                                                           .idItem = a.idItem}, Nothing)
                    totalesBL.GetCurarKardexCaberas(listaAcurar)
                Next

                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return codDoc
    End Function

    Public Sub GetChangeState(be As documentocompra)
        Using ts As New TransactionScope
            Dim obj = HeliosData.documentocompra.Where(Function(o) o.idDocumento = be.idDocumento).FirstOrDefault

            If Not IsNothing(obj) Then
                obj.situacion = be.situacion
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function GenerarTXTcompras(intIdEstablecimiento As Integer, strPeriodo As String, Optional UsuarioCaja As String = Nothing) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)

        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra
        Dim DetNotaCre As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaTipoCompra.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_PAGADA)

        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        'If IsNothing(UsuarioCaja) 
        '            Order By compra.fechaDoc
        'por ejemplo junio-2017
        'compras normales sin detraccion
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                 On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                 On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable = strPeriodo _
                 And compra.idCentroCosto = intIdEstablecimiento _
                 And listaTipoCompra.Contains(compra.tipoCompra) _
                 And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList


        strPeriodo = strPeriodo.Replace("/", "")
        Dim consulta2 = (From doc In HeliosData.documento
                         Join compra In HeliosData.documentocompra
               On doc.idDocumento Equals compra.idDocumento
                         Join entidad In HeliosData.entidad
               On compra.idProveedor Equals entidad.idEntidad
                         Where compra.periodoTributo = strPeriodo _
               And compra.idCentroCosto = intIdEstablecimiento _
               And listaTipoCompra.Contains(compra.tipoCompra) _
               And compra.tieneDetraccion = "S" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

        Dim con3 = consulta.Concat(consulta2).OrderBy(Function(o) o.compra.fechaDoc).ToList


        For Each obj In con3

            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.compra.fechaContable
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.fechaVcto = obj.compra.fechaVcto
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            Select Case obj.compra.tipoDoc
                Case "07", "87"
                    objRecurso.igv01 = obj.compra.igv01 * -1
                    objRecurso.bi01 = obj.compra.bi01 * -1
                    objRecurso.bi02 = obj.compra.bi02 * -1
                    objRecurso.importeTotal = obj.compra.importeTotal * -1
                    objRecurso.importeUS = obj.compra.importeUS * -1
                Case Else
                    objRecurso.igv01 = obj.compra.igv01
                    objRecurso.bi01 = obj.compra.bi01
                    objRecurso.bi02 = obj.compra.bi02
                    objRecurso.importeTotal = obj.compra.importeTotal
                    objRecurso.importeUS = obj.compra.importeUS
            End Select

            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            objRecurso.aprobado = obj.compra.aprobado
            objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
            objRecurso.fechaConstancia = obj.compra.fechaConstancia
            objRecurso.nroConstancia = obj.compra.nroConstancia



            If obj.compra.tipoDoc = "07" Or obj.compra.tipoDoc = "08" Or obj.compra.tipoDoc = "87" Or obj.compra.tipoDoc = "88" Or obj.compra.tipoDoc = "97" Or obj.compra.tipoDoc = "98" Then


                DetNotaCre = New documentocompra
                DetNotaCre = NotaCreditoDet(obj.compra.idPadre)


                objRecurso.SerieNota = DetNotaCre.serie
                objRecurso.NumeroNota = DetNotaCre.numeroDoc
                objRecurso.TipoDocNota = DetNotaCre.tipoDoc
                objRecurso.FechaNota = DetNotaCre.fechaDoc


            End If

            Lista.Add(objRecurso)
        Next





        Return Lista
    End Function

    'Public Function GenerarTXTcompras(intIdEstablecimiento As Integer, strPeriodo As String, Optional UsuarioCaja As String = Nothing) As List(Of documentocompra)
    '    Dim Lista As New List(Of documentocompra)

    '    Dim listaTipoCompra As New List(Of String)
    '    Dim objRecurso As New documentocompra
    '    Dim DetNotaCre As New documentocompra

    '    listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
    '    listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
    '    listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
    '    listaTipoCompra.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
    '    listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
    '    listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
    '    listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
    '    listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
    '    listaTipoCompra.Add(TIPO_COMPRA.COMPRA_PAGADA)


    '    Dim consulta = (From doc In HeliosData.documento _
    '             Join compra In HeliosData.documentocompra _
    '             On doc.idDocumento Equals compra.idDocumento _
    '             Join entidad In HeliosData.entidad _
    '             On compra.idProveedor Equals entidad.idEntidad _
    '             Where compra.fechaContable = strPeriodo _
    '             And compra.idCentroCosto = intIdEstablecimiento _
    '             And listaTipoCompra.Contains(compra.tipoCompra) _
    '             And compra.tieneDetraccion = "N").ToList


    '    strPeriodo = strPeriodo.Replace("/", "")
    '    Dim consulta2 = (From doc In HeliosData.documento _
    '           Join compra In HeliosData.documentocompra _
    '           On doc.idDocumento Equals compra.idDocumento _
    '           Join entidad In HeliosData.entidad _
    '           On compra.idProveedor Equals entidad.idEntidad _
    '           Where compra.periodoTributo = strPeriodo _
    '           And compra.idCentroCosto = intIdEstablecimiento _
    '           And listaTipoCompra.Contains(compra.tipoCompra) _
    '           And compra.tieneDetraccion = "S").ToList

    '    Dim con3 = consulta.Concat(consulta2).OrderBy(Function(o) o.compra.fechaDoc).ToList






    '    For Each obj In con3

    '        objRecurso = New documentocompra
    '        objRecurso.fechaContable = obj.compra.fechaContable
    '        objRecurso.periodoTributo = obj.compra.periodoTributo
    '        objRecurso.idDocumento = obj.compra.idDocumento
    '        objRecurso.tipoCompra = obj.compra.tipoCompra
    '        objRecurso.tipoOperacion = obj.doc.tipoOperacion
    '        objRecurso.fechaDoc = obj.compra.fechaDoc
    '        objRecurso.fechaVcto = obj.compra.fechaVcto
    '        objRecurso.tipoDoc = obj.compra.tipoDoc
    '        objRecurso.serie = obj.compra.serie
    '        objRecurso.numeroDoc = obj.compra.numeroDoc
    '        objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
    '        objRecurso.NroDocEntidad = obj.entidad.nrodoc
    '        objRecurso.NombreEntidad = obj.entidad.nombreCompleto
    '        objRecurso.TipoPersona = obj.entidad.tipoPersona

    '        objRecurso.importeTotal = obj.compra.importeTotal
    '        objRecurso.tcDolLoc = obj.compra.tcDolLoc
    '        objRecurso.importeUS = obj.compra.importeUS
    '        objRecurso.monedaDoc = obj.compra.monedaDoc
    '        objRecurso.estadoPago = obj.compra.estadoPago
    '        objRecurso.idPadre = obj.compra.idPadre
    '        objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
    '        objRecurso.situacion = obj.compra.situacion
    '        objRecurso.aprobado = obj.compra.aprobado
    '        objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
    '        objRecurso.igv01 = obj.compra.igv01
    '        objRecurso.bi01 = obj.compra.bi01
    '        objRecurso.bi02 = obj.compra.bi02
    '        objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
    '        objRecurso.fechaConstancia = obj.compra.fechaConstancia
    '        objRecurso.nroConstancia = obj.compra.nroConstancia



    '        If obj.compra.tipoDoc = "07" Or obj.compra.tipoDoc = "08" Or obj.compra.tipoDoc = "87" Or obj.compra.tipoDoc = "88" Or obj.compra.tipoDoc = "97" Or obj.compra.tipoDoc = "98" Then


    '            DetNotaCre = New documentocompra
    '            DetNotaCre = NotaCreditoDet(obj.compra.idPadre)


    '            objRecurso.SerieNota = DetNotaCre.serie
    '            objRecurso.NumeroNota = DetNotaCre.numeroDoc
    '            objRecurso.TipoDocNota = DetNotaCre.tipoDoc
    '            objRecurso.FechaNota = DetNotaCre.fechaDoc


    '        End If

    '        Lista.Add(objRecurso)
    '    Next





    '    Return Lista
    'End Function

    Public Function NotaCreditoDet(idDoc As Integer) As documentocompra

        Dim Consulta = (From doc In HeliosData.documentocompra
                        Where doc.idDocumento = idDoc).FirstOrDefault

        Return Consulta

    End Function

    Public Function GetConsultaCuentasPorpagarAnt(be As documentocompra) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim lista As New List(Of documentocompra)

        Dim con = (From c In HeliosData.documentocompra
                   Where
                  (New String() {"CVR"}).Contains(c.tipoCompra) And
                   c.idEmpresa = be.idEmpresa And c.idCentroCosto = be.idCentroCosto _
                       And c.idProveedor = be.idProveedor And c.fechaContable = be.fechaContable _
                       And c.monedaDoc = be.monedaDoc
                   Select
                  c.idDocumento,
                  c.tipoCompra,
                  c.fechaContable,
                  c.fechaDoc,
                  c.serie,
                  c.numeroDoc,
                  c.tipoDoc,
                  c.monedaDoc,
                  c.importeTotal,
                  c.tcDolLoc,
                  c.importeUS,
                  c.estadoPago,
                  PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentocompra
                                                 Where
                                                 (New String() {"08", "88"}).Contains(Documentocompra.tipoDoc) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.importeTotal
                                                 }) Into Sum(t1.importeTotal)), Decimal?)),
                             Conteo = ((Aggregate t1 In
                                        (From cro In HeliosData.Cronograma
                                         Where
                                         cro.idDocumentoRef = c.idDocumento And
                                         cro.estado = "PN"
                                         Select New With {
                                                cro
                                         }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoCompra
            doccompra.fechaContable = i.fechaContable
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDoc
            doccompra.monedaDoc = i.monedaDoc
            doccompra.importeTotal = i.importeTotal
            doccompra.tcDolLoc = i.tcDolLoc
            doccompra.importeUS = i.importeUS
            doccompra.estadoPago = i.estadoPago
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Function UbicarComprasXCompensar(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, strPeriodo As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)


        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)


        Dim con = (From c In HeliosData.documentocompra
                   Join ent In HeliosData.entidad
                On c.idProveedor Equals ent.idEntidad
                   Join tbl In HeliosData.tabladetalle
                On c.tipoDoc Equals tbl.codigoDetalle
                   Where
                 (New String() {"CMP", "CSP", "CRH", "CVO", "CVR"}).Contains(c.tipoCompra) And
                  c.idEmpresa = strEmpresa And c.idCentroCosto = intIdEstablecimiento _
                And ent.nrodoc = strRuc And ent.tipoEntidad = "PR" _
                And list.Contains(c.tipoCompra) And tbl.idtabla = 10 And
                c.estadoPago = "PN" And
                c.fechaContable = strPeriodo
                   Select
                 tbl.descripcion,
                 c.idDocumento,
                 c.tipoCompra,
                 c.fechaContable,
                 c.fechaDoc,
                 c.serie,
                 c.numeroDoc,
                 c.tipoDoc,
                 c.monedaDoc,
                 c.importeTotal,
                 c.tcDolLoc,
                 c.importeUS,
                 c.estadoPago,
                 PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra <> "EXD"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       Exedentes = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "EXD"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentocompra
                                                 Where
                                                 (New String() {"08", "88"}).Contains(Documentocompra.tipoDoc) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.importeTotal
                                                 }) Into Sum(t1.importeTotal)), Decimal?)),
                Conteo = ((Aggregate t1 In
                        (From cro In HeliosData.Cronograma
                         Where
                        cro.idDocumentoRef = c.idDocumento And
                        cro.estado = "PN"
                         Select New With {
                         cro
                      }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoCompra
            doccompra.fechaContable = i.fechaContable
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDoc
            doccompra.monedaDoc = i.monedaDoc
            doccompra.nombreEstablecimiento = i.descripcion
            doccompra.importeTotal = i.importeTotal
            doccompra.importeUS = i.importeUS
            doccompra.estadoPago = i.estadoPago
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            doccompra.conteoCuotas = i.Conteo
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function SaveCompensacion(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim cajaBL As New documentoCajaDetalleBL
        Dim nMovimiento As New movimiento
        Dim nAsiento As New asiento

        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                'Dim codCompra = objDocumento.idDocumento
                Dim codCompra = objDocumento.documentocompra.idPadre
                Dim compra As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = objDocumento.documentocompra.idPadre).FirstOrDefault
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                For Each i In objDocumento.documentocompra.documentocompradetalle

                    compraDetalleBL.InsertSingle2(i, objDocumento.idDocumento)
                    cajaBL.ActualizarItemsPagosCompra(i, objDocumento.documentocompra.idPadre)

                Next

                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        'objDocumento.idDocumento = codNota
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If

                Dim ventaDetalle = (From n In HeliosData.documentocompradetalle
                                    Where n.idDocumento = codCompra AndAlso n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO).Count

                If ventaDetalle > 0 Then
                    compra.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                Else
                    compra.estadoPago = TIPO_COMPRA.PAGO.PAGADO
                End If

                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function CompensacionDocumentos(objDocumento As documento, objDocComp As documento) As Integer
        Dim compensacionBL As New CompensacionBL

        Try
            Dim idDocumentoOrigen As Integer
            Dim idDocumentoDestino As Integer

            idDocumentoOrigen = Me.SaveCompensacion(objDocumento)
            idDocumentoDestino = Me.SaveCompensacion(objDocComp)
            compensacionBL.SaveTablaCompensacion(idDocumentoOrigen, idDocumentoDestino, "07", "07")

            Return 1
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetArticulosCompradosByPeriodo(be As documentocompra) As List(Of documentocompradetalle)
        Dim obj As New documentocompradetalle
        Dim lista As New List(Of documentocompradetalle)

        Dim listaTipoCompra As New List(Of String)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaTipoCompra.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        Dim con = (From det In HeliosData.documentocompradetalle
                   Join doc In HeliosData.documentocompra On doc.idDocumento Equals det.idDocumento
                   Group Join alm In HeliosData.almacen On alm.idAlmacen Equals det.almacenRef
                    Into ords = Group From c In ords.DefaultIfEmpty
                   Where doc.fechaContable = be.fechaContable And doc.idCentroCosto = be.idCentroCosto _
                    And listaTipoCompra.Contains(doc.tipoCompra)).ToList

        For Each i In con
            obj = New documentocompradetalle
            obj.FechaDoc = i.doc.fechaDoc
            obj.idItem = i.det.idItem
            obj.descripcionItem = i.det.descripcionItem
            obj.unidad1 = i.det.unidad1
            obj.NomAlmacen = i.c.descripcionAlmacen
            obj.monto1 = i.det.monto1
            obj.precioUnitario = i.det.precioUnitario
            obj.importe = i.det.importe
            lista.Add(obj)
        Next
        Return lista
    End Function

    Public Sub CambiarPeriodoCompra(be As documentocompra)
        Using ts As New TransactionScope
            Dim obj = HeliosData.documentocompra.Where(Function(o) o.idDocumento = be.idDocumento).FirstOrDefault
            obj.fechaContable = be.fechaContable

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function SaveCompraNotaDevolucionGasto(objDocumento As documento,
                                          nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim CAN_BOF As Decimal = 0
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0

        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0
        Dim cajaBL As New documentoCajaDetalleBL
        Dim t As New totalesAlmacen
        Dim nMovimiento As New movimiento
        Dim nAsiento As New asiento
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Dim codNota = objDocumento.idDocumento
                Dim compra As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = objDocumento.documentocompra.idPadre).FirstOrDefault
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                For Each i In objDocumento.documentocompra.documentocompradetalle

                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                    'VALIDANDO ITEMS INGRESADOS COMO NOTA DE CREDITO
                    cajaBL.ActualizarItemsPagosCompra(i, objDocumento.documentocompra.idPadre)
                    '--------------------------------------------------------

                    'Select Case i.TipoOperacion
                    '    Case "9913" 'DISMI CA
                    '        Select Case i.tipoExistencia
                    '            Case "GS"

                    '                nAsiento = New asiento
                    '                nAsiento.idDocumento = objDocumento.idDocumento
                    '                nAsiento.idEmpresa = Gempresas.IdEmpresaRuc
                    '                nAsiento.idCentroCostos = GEstableciento.IdEstablecimiento
                    '                nAsiento.idDocumentoRef = objDocumento.idDocumento
                    '                nAsiento.fechaProceso = (objDocumento.fechaProceso)
                    '                nAsiento.codigoLibro = "8"
                    '                nAsiento.tipo = "D"
                    '                nAsiento.tipoAsiento = "ACCL"
                    '                nAsiento.importeMN = i.montokardex
                    '                nAsiento.importeME = i.montokardexUS
                    '                nAsiento.glosa = "Asiento de costo"
                    '                nAsiento.usuarioActualizacion = objDocumento.usuarioActualizacion
                    '                nAsiento.fechaActualizacion = objDocumento.fechaActualizacion


                    '                nMovimiento = New movimiento
                    '                nMovimiento.cuenta = "791"
                    '                nMovimiento.descripcion = "CARGAS IMPUTABLES A CUENTAS DE COSTOS Y GASTOS"
                    '                nMovimiento.tipo = "D"
                    '                nMovimiento.monto = i.montokardex
                    '                nMovimiento.montoUSD = i.montokardexUS
                    '                nMovimiento.usuarioActualizacion = i.usuarioModificacion
                    '                nMovimiento.fechaActualizacion = i.fechaModificacion
                    '                nAsiento.movimiento.Add(nMovimiento)

                    '                nMovimiento = New movimiento
                    '                nMovimiento.cuenta = "91"
                    '                nMovimiento.descripcion = "COSTOS POR DISTRIBUIR."
                    '                nMovimiento.tipo = "H"
                    '                nMovimiento.monto = i.montokardex
                    '                nMovimiento.montoUSD = i.montokardexUS
                    '                nMovimiento.usuarioActualizacion = i.usuarioModificacion
                    '                nMovimiento.fechaActualizacion = i.fechaModificacion
                    '                nAsiento.movimiento.Add(nMovimiento)

                    '                asientoBL.Insert(nAsiento, objDocumento.idDocumento)
                    '            Case Else
                    '                inventario.InsertNotaCredito(i, objDocumento)

                    '                t = New totalesAlmacen
                    '                t.idEmpresa = i.IdEmpresa
                    '                t.idEstablecimiento = i.IdEstablecimiento
                    '                t.idAlmacen = i.almacenRef
                    '                t.origenRecaudo = i.destino
                    '                t.idItem = i.idItem
                    '                t.cantidad = i.monto1 * -1
                    '                t.precioUnitarioCompra = i.precioUnitario * -1
                    '                t.importeSoles = i.montokardex * -1
                    '                t.importeDolares = i.montokardexUS * -1


                    '                totalesBL.UpdateSingle2(t)
                    '        End Select
                    '    Case "9914", "9916" 'DISMI IMPORTE, DEV EXIST

                    '        Select Case i.tipoExistencia
                    '            Case "GS"

                    '                nAsiento = New asiento
                    '                nAsiento.idDocumento = objDocumento.idDocumento
                    '                nAsiento.idEmpresa = Gempresas.IdEmpresaRuc
                    '                nAsiento.idCentroCostos = GEstableciento.IdEstablecimiento
                    '                nAsiento.idDocumentoRef = objDocumento.idDocumento
                    '                nAsiento.fechaProceso = (objDocumento.fechaProceso)
                    '                nAsiento.codigoLibro = "8"
                    '                nAsiento.tipo = "D"
                    '                nAsiento.tipoAsiento = "ACCL"
                    '                nAsiento.importeMN = i.montokardex
                    '                nAsiento.importeME = i.montokardexUS
                    '                nAsiento.glosa = "Asiento de costo"
                    '                nAsiento.usuarioActualizacion = objDocumento.usuarioActualizacion
                    '                nAsiento.fechaActualizacion = objDocumento.fechaActualizacion


                    '                nMovimiento = New movimiento
                    '                nMovimiento.cuenta = "791"
                    '                nMovimiento.descripcion = "CARGAS IMPUTABLES A CUENTAS DE COSTOS Y GASTOS"
                    '                nMovimiento.tipo = "D"
                    '                nMovimiento.monto = i.montokardex
                    '                nMovimiento.montoUSD = i.montokardexUS
                    '                nMovimiento.usuarioActualizacion = i.usuarioModificacion
                    '                nMovimiento.fechaActualizacion = i.fechaModificacion
                    '                nAsiento.movimiento.Add(nMovimiento)

                    '                nMovimiento = New movimiento
                    '                nMovimiento.cuenta = "91"
                    '                nMovimiento.descripcion = "COSTOS POR DISTRIBUIR."
                    '                nMovimiento.tipo = "H"
                    '                nMovimiento.monto = i.montokardex
                    '                nMovimiento.montoUSD = i.montokardexUS
                    '                nMovimiento.usuarioActualizacion = i.usuarioModificacion
                    '                nMovimiento.fechaActualizacion = i.fechaModificacion
                    '                nAsiento.movimiento.Add(nMovimiento)
                    '                asientoBL.Insert(nAsiento, objDocumento.idDocumento)
                    '            Case Else
                    '                inventario.InsertNotaCredito(i, objDocumento)


                    '                t = New totalesAlmacen
                    '                t.idEmpresa = i.IdEmpresa
                    '                t.idEstablecimiento = i.IdEstablecimiento
                    '                t.idAlmacen = i.almacenRef
                    '                t.origenRecaudo = i.destino
                    '                t.idItem = i.idItem
                    '                t.cantidad = i.monto1 * -1
                    '                t.precioUnitarioCompra = i.precioUnitario * -1
                    '                t.importeSoles = i.montokardex * -1
                    '                t.importeDolares = i.montokardexUS * -1
                    '                totalesBL.UpdateSingle2(t)
                    '        End Select
                    '        'Case "9917" 'beneficios. bonificaciones
                    '        '    inventario.InsertNotaCredito(i, objDocumento)


                    '    Case "9925"

                    'End Select

                Next

                'If Not IsNothing(objDocumento.documentoGuia) Then
                '    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                '        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                '    End If
                'End If

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        objDocumento.idDocumento = codNota
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If
                'Cobrando Saldo de la venta cuando es una venta al credito
                '    If objDocumento.documentoventaAbarrotes.ImporteDevMN > 0 Then
                'If objDocumento.documentoventaAbarrotes.SaldoVentaMN > 0 Then
                'If Not IsNothing(nDocumentoSaldoVenta.documentoCaja) Then
                '    If Not IsNothing(nDocumentoSaldoVenta.documentoCaja.idEmpresa) Then
                '        SaveCaja(nDocumentoSaldoVenta, objDocumento.documentocompra.idPadre)
                '    End If
                'End If

                '-----------------------------------------------------------------------------------
                'creando documento de excendente por devolucion de dinero
                'If Not IsNothing(objDocumento.documentocompra.EstadoPagoDevolucion) Then
                '    objDocumento.idDocumento = codNota
                '    Dim codGenerado = GrabarDocumentoDevolucion(objDocumento)

                '    Select Case objDocumento.documentocompra.EstadoPagoDevolucion
                '        Case TIPO_VENTA.PAGO.COBRADO
                '            If Not IsNothing(nDocumentoNota.idEmpresa) Then
                '                Dim listaPagos As List(Of documentocompradetalle) = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = codGenerado).ToList
                '                SaveCaja2(nDocumentoNota, codGenerado, listaPagos)
                '            End If
                '        Case TIPO_VENTA.PAGO.PENDIENTE_PAGO

                '    End Select

                'End If


                Dim ventaDetalle = (From n In HeliosData.documentocompradetalle
                                    Where n.idDocumento = compra.idDocumento _
                                    AndAlso n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
                                    AndAlso n.bonificacion <> "S").Count

                If ventaDetalle > 0 Then
                    compra.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                Else
                    compra.estadoPago = TIPO_COMPRA.PAGO.PAGADO
                End If


                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function ListadoComprobateNotasXidPadre(iNtPadre As Integer) As List(Of documentocompra)
        Dim lista As New List(Of documentocompra)
        Dim a As New documentocompra

        Dim cc = (From c In HeliosData.documentocompra
                  Where c.idPadre = iNtPadre).ToList


        For Each i In cc
            a = New documentocompra
            a.idDocumento = i.idDocumento
            a.fechaDoc = i.fechaDoc
            a.tipoDoc = i.tipoDoc
            a.numeroDoc = i.numeroDoc
            a.tipoCompra = i.tipoCompra
            'a.numeroOperacion = i.NumeroOper
            a.monedaDoc = i.monedaDoc
            a.tipocambio = i.tipocambio
            a.codigoLibro = i.codigoLibro
            a.importeTotal = i.importeTotal
            a.importeUS = i.importeUS
            lista.Add(a)
        Next

        Return lista
    End Function


    Sub UpdateRecursoToPendiente(Be As recursoCosto)
        Using ts As New TransactionScope
            Dim obj = HeliosData.recursoCosto.Where(Function(o) o.idCosto = Be.idCosto).First
            obj.status = StatusProductosTerminados.Pendiente
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Sub InventarioAL(i As documentocompradetalle)
        Using ts As New TransactionScope
            Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idAlmacen = i.almacenRef And o.idItem = i.idItem).FirstOrDefault

            If Not IsNothing(obj) Then
                obj.cantidad = obj.cantidad - i.monto1
                obj.importeSoles = obj.importeSoles - i.importe
                obj.importeDolares = obj.importeDolares - i.importeUS
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub GetEliminarCierreParcialTotal(be As recursoCosto)
        Dim documentoBL As New documentoBL
        Dim costoBL As New recursoCostoBL
        Dim invBL As New InventarioMovimientoBL
        Using ts As New TransactionScope

            Dim entregasParciales = HeliosData.recursoCosto.Where(Function(o) o.idpadre = be.idCosto And o.subtipo = TipoCosto.ProductoProducido).ToList

            'eliminando entregas parciales
            For Each i In entregasParciales
                'entregas en planta
                'Dim documento = HeliosData.documento.Where(Function(o) o.idProyecto = i.idCosto).FirstOrDefault
                'documentoBL.DeleteSingle(New documento With {.idDocumento = documento.idDocumento})
                'costoBL.EliminarCosto(New recursoCosto With {.idCosto = i.idCosto})
                UpdateRecursoToPendiente(i)

                'eliminando inventario existente
                Dim compraDet = HeliosData.documentocompradetalle.Where(Function(o) o.idCosto = i.idCosto).ToList
                Dim codDocuento = compraDet(0).idDocumento
                For Each c In compraDet
                    InventarioAL(c)
                    invBL.DeleteInventarioPorDocumento(c.idDocumento)
                    documentoBL.DeleteSingle2(New documento With {.idDocumento = c.idDocumento})
                Next

            Next

            'eliminado documento y asiento de la orden de produccion finalizada
            Dim objOrden = HeliosData.recursoCosto.Where(Function(o) o.idCosto = be.idCosto).FirstOrDefault
            objOrden.status = StatusProductosTerminados.Pendiente

            Dim docOrden = HeliosData.documento.Where(Function(o) o.idProyecto = objOrden.idCosto).First
            documentoBL.DeleteSingle(docOrden)

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub


    Public Sub GetEliminarCierreTotal(be As recursoCosto)
        Dim almacenBL As New totalesAlmacenBL
        Dim invBL As New InventarioMovimientoBL
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                Dim compraDet = HeliosData.documentocompradetalle.Where(Function(o) o.idCosto = be.idCosto).ToList
                Dim codDocumento = compraDet(0).idDocumento
                For Each i In compraDet

                    Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idAlmacen = i.almacenRef And o.idItem = i.idItem).FirstOrDefault

                    If Not IsNothing(obj) Then
                        obj.cantidad = obj.cantidad - i.monto1
                        obj.importeSoles = obj.importeSoles - i.importe
                        obj.importeDolares = obj.importeDolares - i.importeUS
                    End If

                Next
                invBL.DeleteInventarioPorDocumento(codDocumento)

                Dim costo = HeliosData.recursoCosto.Where(Function(o) o.idCosto = be.idCosto).FirstOrDefault
                If Not IsNothing(costo) Then
                    costo.status = CInt(StatusProductosTerminados.Pendiente)
                End If
                documentoBL.DeleteSingle(New documento With {.idDocumento = codDocumento})
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function UbicarTodosPagosPendienteMNME(strEmpresa As String, intIdEstablecimiento As Integer) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim cronogramabl As New CronogramaBL
        Dim cronograma As New Cronograma
        Dim list As New List(Of String)


        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add("APT")

        Dim consulta2 = (From n In HeliosData.documentocompra
                         Join ent In HeliosData.entidad
                         On n.idProveedor Equals ent.idEntidad
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                       On n.idDocumento Equals cajadet.documentoAfectado
                       Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento And n.fechaDoc.Value.Year = AnioGeneral _
                       And n.estadoPago = "PN" And list.Contains(n.tipoCompra)
                         Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, n.fechaVcto,
                       n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc, n.idProveedor, ent.nombreCompleto,
                       n.importeUS, n.estadoPago Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .nombreCompleto = nombreCompleto,
                                      .fechaDoc = fechaDoc,
                                      .fechaVcto = fechaVcto,
                                      .idprov = idProveedor,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .SumaTransMN = g.Sum(Function(o) (o.montoSoles)),
                                      .SumaPagoMN = g.Sum(Function(o) (o.montoSoles)),
                                       .SumaTransME = g.Sum(Function(o) (o.montoUsd)),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoVenta
            doccompra.fechaContable = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.idProveedor = i.idprov
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDocumento
            doccompra.monedaDoc = i.moneda
            doccompra.importeTotal = i.ImporteNacional
            doccompra.tcDolLoc = i.tipoCambio
            doccompra.importeUS = i.ImporteExtranjero
            doccompra.estadoPago = i.estadoCobro
            doccompra.fechaVcto = i.fechaVcto
            doccompra.nombreProveedor = i.nombreCompleto

            cronograma = cronogramabl.ObtenerMontoProgramado(i.idDocumento)
            doccompra.montocrono = cronograma.montoAutorizadoMN
            doccompra.montocronome = cronograma.montoAutorizadoME


            objitemsaldoant = docanti.ObtenerPagosAnticipoPorDocumento(i.idDocumento)

            Select Case i.moneda
                Case 1
                    doccompra.PagoSumaMN = CDec((i.SumaTransMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")
                    doccompra.PagoSumaME = i.SumaTransME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
                Case 2
                    doccompra.PagoSumaMN = CDec((i.SumaTransMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")
                    doccompra.PagoSumaME = i.SumaTransME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
            End Select

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function ConteoDeNoNegociados() As Integer
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim cronogramabl As New CronogramaBL
        Dim cronograma As New Cronograma
        Dim list As New List(Of String)
        Dim conteo As Integer = 0

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle
        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        list.Add("APT")

        Dim consulta2 = (From n In HeliosData.documentocompra
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                       On n.idDocumento Equals cajadet.documentoAfectado
                       Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = Gempresas.IdEmpresaRuc And n.idCentroCosto = GEstableciento.IdEstablecimiento And n.fechaDoc.Value.Year = AnioGeneral _
                       And n.estadoPago = "PN" And list.Contains(n.tipoCompra)
                         Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, n.fechaVcto,
                       n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                       n.importeUS, n.estadoPago Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .fechaVcto = fechaVcto,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .SumaTransMN = g.Sum(Function(o) (o.montoSoles)),
                                      .SumaPagoMN = g.Sum(Function(o) (o.montoSoles)),
                                       .SumaTransME = g.Sum(Function(o) (o.montoUsd)),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoVenta
            doccompra.fechaContable = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDocumento
            doccompra.monedaDoc = i.moneda
            doccompra.importeTotal = i.ImporteNacional
            doccompra.tcDolLoc = i.tipoCambio
            doccompra.importeUS = i.ImporteExtranjero
            doccompra.estadoPago = i.estadoCobro
            doccompra.fechaVcto = i.fechaVcto

            cronograma = cronogramabl.ObtenerMontoProgramado(i.idDocumento)
            doccompra.montocrono = cronograma.montoAutorizadoMN
            doccompra.montocronome = cronograma.montoAutorizadoME


            objitemsaldoant = docanti.ObtenerPagosAnticipoPorDocumento(i.idDocumento)

            Select Case i.moneda
                Case 1
                    doccompra.PagoSumaMN = CDec((i.SumaTransMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")
                    doccompra.PagoSumaME = i.SumaTransME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD

                    If doccompra.importeTotal - doccompra.PagoSumaMN - doccompra.montocrono > 0 Then
                        conteo += 1
                    End If
                Case 2
                    doccompra.PagoSumaMN = CDec((i.SumaTransMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")
                    doccompra.PagoSumaME = i.SumaTransME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
                    If doccompra.importeUS - doccompra.PagoSumaME - doccompra.montocronome > 0 Then
                        conteo += 1
                    End If
            End Select

            'compraLista.Add(doccompra)
        Next
        Return conteo
    End Function

    Public Function GetSumaComprasDelDia(be As documentocompra) As documentocompra
        Dim obj As New documentocompra
        Dim list As New List(Of String)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        Dim suma = Aggregate n In HeliosData.documentocompra
                   Where list.Contains(n.tipoCompra) _
                   And n.idEmpresa = Gempresas.IdEmpresaRuc _
                   And n.idCentroCosto = GEstableciento.IdEstablecimiento _
                   And n.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                   And n.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                   And n.fechaDoc.Value.Day = be.fechaDoc.Value.Day
                   Into sumaMN = Sum(n.importeTotal),
                   sumaME = Sum(n.importeUS)


        Dim sumaNC = Aggregate n In HeliosData.documentocompra
                 Where n.tipoCompra = "NTC" _
                 And n.idEmpresa = Gempresas.IdEmpresaRuc _
                 And n.idCentroCosto = GEstableciento.IdEstablecimiento _
                 And n.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                 And n.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                 And n.fechaDoc.Value.Day = be.fechaDoc.Value.Day
                 Into sumaMN = Sum(n.importeTotal),
                 sumaME = Sum(n.importeUS)

        Dim sumaND = Aggregate n In HeliosData.documentocompra
                 Where n.tipoCompra = "NDB" _
                 And n.idEmpresa = Gempresas.IdEmpresaRuc _
                 And n.idCentroCosto = GEstableciento.IdEstablecimiento _
                 And n.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                 And n.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                 And n.fechaDoc.Value.Day = be.fechaDoc.Value.Day
                 Into sumaMN = Sum(n.importeTotal),
                 sumaME = Sum(n.importeUS)

        obj = New documentocompra
        obj.importeTotal = suma.sumaMN.GetValueOrDefault + sumaND.sumaMN.GetValueOrDefault - sumaNC.sumaMN.GetValueOrDefault
        obj.importeUS = suma.sumaME.GetValueOrDefault + sumaND.sumaME.GetValueOrDefault - sumaNC.sumaME.GetValueOrDefault

        Return obj

    End Function

    Public Function GetSumaComprasDelDiaAllEmpresa(be As documentocompra) As documentocompra
        Dim obj As New documentocompra
        Dim list As New List(Of String)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        Dim suma = Aggregate n In HeliosData.documentocompra
                   Where list.Contains(n.tipoCompra) _
                   And n.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                   And n.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                   And n.fechaDoc.Value.Day = be.fechaDoc.Value.Day
                   Into sumaMN = Sum(n.importeTotal),
                   sumaME = Sum(n.importeUS)


        Dim sumaNC = Aggregate n In HeliosData.documentocompra
                 Where n.tipoCompra = "NTC" _
                 And n.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                 And n.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                 And n.fechaDoc.Value.Day = be.fechaDoc.Value.Day
                 Into sumaMN = Sum(n.importeTotal),
                 sumaME = Sum(n.importeUS)

        Dim sumaND = Aggregate n In HeliosData.documentocompra
                 Where n.tipoCompra = "NDB" _
                 And n.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                 And n.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                 And n.fechaDoc.Value.Day = be.fechaDoc.Value.Day
                 Into sumaMN = Sum(n.importeTotal),
                 sumaME = Sum(n.importeUS)

        obj = New documentocompra
        obj.importeTotal = suma.sumaMN.GetValueOrDefault + sumaND.sumaMN.GetValueOrDefault - sumaNC.sumaMN.GetValueOrDefault
        obj.importeUS = suma.sumaME.GetValueOrDefault + sumaND.sumaME.GetValueOrDefault - sumaNC.sumaME.GetValueOrDefault

        Return obj

    End Function

    Public Function DeudasGenerales() As List(Of documentocompra)

        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)
        Dim listcrono As New List(Of String)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add("APT")

        listcrono.Add("PN")
        listcrono.Add("AP")
        listcrono.Add("OB")


        Dim consulta = (From mov In HeliosData.documentocompra
                        Join tip In HeliosData.entidad
                        On mov.idProveedor Equals tip.idEntidad
                        Where mov.idEmpresa = Gempresas.IdEmpresaRuc
                        Select
                        mov.idProveedor, tip.nombreCompleto,
                        PagoDeuda = (CType((Aggregate t1 In
                        (From m In HeliosData.documentoCajaDetalle
                         Join a In HeliosData.documentocompra On New With {.IdDocumento = CInt(m.documentoAfectado)} Equals New With {.IdDocumento = a.idDocumento}
                         Where
                        a.monedaDoc = "1" And a.fechaDoc.Value.Year = AnioGeneral And a.idEmpresa = Gempresas.IdEmpresaRuc And
                        a.idProveedor = mov.idProveedor And list.Contains(a.tipoCompra)
                         Select New With {
                        m.montoSoles
                        }) Into Sum(t1.montoSoles)), Decimal?)),
                        Deuda = (CType((Aggregate t1 In
                        (From w In HeliosData.documentocompra
                         Where
                        w.monedaDoc = "1" And w.fechaDoc.Value.Year = AnioGeneral And w.idEmpresa = Gempresas.IdEmpresaRuc And
                        w.idProveedor = mov.idProveedor And list.Contains(w.tipoCompra)
                         Select New With {
                        w.importeTotal
                        }) Into Sum(t1.importeTotal)), Decimal?)),
                        MontoProgramado = (CType((Aggregate t1 In
                       (From m In HeliosData.Cronograma
                        Join a In HeliosData.documentocompra On New With {.IdDocumento = CInt(m.idDocumentoRef)} Equals New With {.IdDocumento = a.idDocumento}
                        Where
                       m.moneda = "1" And a.fechaDoc.Value.Year = AnioGeneral And a.idEmpresa = Gempresas.IdEmpresaRuc And
                       a.idProveedor = mov.idProveedor And list.Contains(a.tipoCompra) And
                     listcrono.Contains(m.estado)
                        Select New With {
                       m.montoAutorizadoMN
                      }) Into Sum(t1.montoAutorizadoMN)), Decimal?)),
                      PagoDeudaME = (CType((Aggregate t1 In
                      (From m In HeliosData.documentoCajaDetalle
                       Join a In HeliosData.documentocompra On New With {.IdDocumento = CInt(m.documentoAfectado)} Equals New With {.IdDocumento = a.idDocumento}
                       Where
                      a.monedaDoc = "2" And a.fechaDoc.Value.Year = AnioGeneral And a.idEmpresa = Gempresas.IdEmpresaRuc And
                      a.idProveedor = mov.idProveedor And list.Contains(a.tipoCompra)
                       Select New With {
                      m.montoUsd
                      }) Into Sum(t1.montoUsd)), Decimal?)),
                      DeudaME = (CType((Aggregate t1 In
                      (From w In HeliosData.documentocompra
                       Where
                     w.monedaDoc = "2" And w.fechaDoc.Value.Year = AnioGeneral And w.idEmpresa = Gempresas.IdEmpresaRuc And
                     w.idProveedor = mov.idProveedor And list.Contains(w.tipoCompra)
                       Select New With {
                     w.importeUS
                     }) Into Sum(t1.importeUS)), Decimal?)),
                     MontoProgramadoME = (CType((Aggregate t1 In
                     (From m In HeliosData.Cronograma
                      Join a In HeliosData.documentocompra On New With {.IdDocumento = CInt(m.idDocumentoRef)} Equals New With {.IdDocumento = a.idDocumento}
                      Where
                     m.moneda = "2" And a.fechaDoc.Value.Year = AnioGeneral And a.idEmpresa = Gempresas.IdEmpresaRuc And
                    a.idProveedor = mov.idProveedor And list.Contains(a.tipoCompra) And
                    listcrono.Contains(m.estado)
                      Select New With {
                     m.montoAutorizadoME
                     }) Into Sum(t1.montoAutorizadoME)), Decimal?))).Distinct().ToList


        For Each i In consulta
            doccompra = New documentocompra
            doccompra.idProveedor = i.idProveedor
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.importeTotal = i.Deuda.GetValueOrDefault
            doccompra.importeUS = i.DeudaME.GetValueOrDefault
            doccompra.ImportePagoMN = i.PagoDeuda.GetValueOrDefault
            doccompra.ImportePagoME = i.PagoDeudaME.GetValueOrDefault
            doccompra.montocrono = i.MontoProgramado.GetValueOrDefault
            doccompra.montocronome = i.MontoProgramadoME.GetValueOrDefault

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function UbicarCuentasXPagarComerciales() As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add("APT")

        Dim consulta2 = (From n In HeliosData.documentocompra
                         Join enti In HeliosData.entidad
                        On n.idProveedor Equals enti.idEntidad
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                       On n.idDocumento Equals cajadet.documentoAfectado
                       Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = Gempresas.IdEmpresaRuc And n.estadoPago = "PN" And n.idCentroCosto = GEstableciento.IdEstablecimiento _
                      And list.Contains(n.tipoCompra)
                         Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, enti.nombreCompleto, enti.tipoDoc, enti.nrodoc,
                       n.serie, n.numeroDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                       n.importeUS, n.estadoPago Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .fechaDoc = fechaDoc,
                                      .serie = serie,
                                      .numeroDoc = nrodoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .nombreproveedor = nombreCompleto,
                                      .ImporteNacional = importeTotal,
                                      .ImporteExtranjero = importeUS,
                                      .SumaTransMN = g.Sum(Function(o) (o.montoSolesTransacc)),
                                      .SumaPagoMN = g.Sum(Function(o) (o.montoSoles)),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentocompra
            doccompra.fechaDoc = i.fechaDoc
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDocumento
            doccompra.nombreProveedor = i.nombreproveedor
            objitemsaldoant = docanti.ObtenerPagosAnticipoPorDocumento(i.idDocumento)
            doccompra.importeTotal = ((i.ImporteNacional) - (CDec((i.SumaTransMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")))
            doccompra.importeUS = ((i.ImporteExtranjero) - (i.SumaPagoME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD))
            doccompra.PagoSumaMN = CDec((i.SumaTransMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function ListaServiciosOtrosAnticipado() As List(Of documentocompradetalle)
        Dim doccompra As New documentocompradetalle
        Dim compraLista As New List(Of documentocompradetalle)


        Dim consulta = (From n In HeliosData.documentocompra
                        Join ent In HeliosData.entidad
                        On ent.idEntidad Equals n.idProveedor
                        Join det In HeliosData.documentocompradetalle
                        On det.idDocumento Equals n.idDocumento
                        Where n.idEmpresa = Gempresas.IdEmpresaRuc And n.idCentroCosto = GEstableciento.IdEstablecimiento _
                        And n.tipoCompra = "CMA").ToList

        For Each i In consulta
            doccompra = New documentocompradetalle

            doccompra.FechaDoc = i.n.fechaDoc
            doccompra.NombreProveedor = i.ent.nombreCompleto
            doccompra.descripcionItem = i.det.descripcionItem
            doccompra.Moneda = i.n.monedaDoc
            doccompra.importe = i.det.importe
            doccompra.importeUS = i.det.importeUS

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function



    Public Function UbicarPagosIntegral(strEmpresa As String, intIdEstablecimiento As Integer, strMoneda As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle


        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        list.Add("APT")

        Dim con = (From compra In HeliosData.documentocompra
                   Group Join persona In HeliosData.entidad On
                  persona.idEntidad Equals compra.idProveedor Into persona_join = Group
                   From persona In persona_join.DefaultIfEmpty()
                   Group Join pago In HeliosData.documentoCajaDetalle
                  On compra.idDocumento Equals pago.documentoAfectado Into pago_join = Group
                   From pago In pago_join.DefaultIfEmpty()
                   Where compra.idEmpresa = Gempresas.IdEmpresaRuc And compra.idCentroCosto = GEstableciento.IdEstablecimiento And compra.estadoPago = "PN" _
                  And compra.monedaDoc = strMoneda
                   Group New With {persona, compra, pago} By
                  persona.idEntidad,
                  persona.nombreCompleto
                  Into g = Group
                   Select
                  IdEntidad = CType(idEntidad, Int32?),
                  NombreCompleto = nombreCompleto,
                  Deuda = CType(g.Sum(Function(p) p.compra.importeTotal), Decimal?),
                  Acuenta = CType(g.Sum(Function(p) p.pago.montoSoles), Decimal?),
                  deudaME = CType(g.Sum(Function(p) p.compra.importeUS), Decimal?),
                  AcuentaME = CType(g.Sum(Function(p) p.pago.montoUsd), Decimal?)).ToList

        For Each i In con
            doccompra = New documentocompra
            doccompra.idProveedor = i.IdEntidad
            doccompra.NombreEntidad = i.NombreCompleto
            If IsNothing(i.Acuenta) Then
                doccompra.importeTotal = i.Deuda - CDec(0.0)
            Else
                doccompra.importeTotal = i.Deuda - i.Acuenta
            End If

            If IsNothing(i.AcuentaME) Then
                doccompra.importeUS = i.deudaME - CDec(0.0)
            Else
                doccompra.importeUS = i.deudaME - i.AcuentaME
            End If

            doccompra.monedaDoc = strMoneda

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function UbicarPagosPorProveedorPendienteMNME(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim cronogramabl As New CronogramaBL
        Dim cronograma As New Cronograma
        Dim list As New List(Of String)


        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add("APT")

        Dim consulta2 = (From n In HeliosData.documentocompra
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                       On n.idDocumento Equals cajadet.documentoAfectado
                       Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento And n.fechaDoc.Value.Year = AnioGeneral _
                       And n.idProveedor = strRuc And n.estadoPago = "PN" And list.Contains(n.tipoCompra)
                         Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, n.fechaVcto,
                       n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                       n.importeUS, n.estadoPago Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .fechaVcto = fechaVcto,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .SumaTransMN = g.Sum(Function(o) (o.montoSoles)),
                                      .SumaPagoMN = g.Sum(Function(o) (o.montoSoles)),
                                       .SumaTransME = g.Sum(Function(o) (o.montoUsd)),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoVenta
            doccompra.fechaContable = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDocumento
            doccompra.monedaDoc = i.moneda
            doccompra.importeTotal = i.ImporteNacional
            doccompra.tcDolLoc = i.tipoCambio
            doccompra.importeUS = i.ImporteExtranjero
            doccompra.estadoPago = i.estadoCobro
            doccompra.fechaVcto = i.fechaVcto

            cronograma = cronogramabl.ObtenerMontoProgramado(i.idDocumento)
            doccompra.montocrono = cronograma.montoAutorizadoMN
            doccompra.montocronome = cronograma.montoAutorizadoME


            objitemsaldoant = docanti.ObtenerPagosAnticipoPorDocumento(i.idDocumento)

            Select Case i.moneda
                Case 1
                    doccompra.PagoSumaMN = CDec((i.SumaTransMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")
                    doccompra.PagoSumaME = i.SumaTransME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
                Case 2
                    doccompra.PagoSumaMN = CDec((i.SumaTransMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")
                    doccompra.PagoSumaME = i.SumaTransME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
            End Select

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function UbicarPagosPorProveedorPendiente(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, strMoneda As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim cronogramabl As New CronogramaBL
        Dim cronograma As New Cronograma
        Dim list As New List(Of String)


        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add("APT")

        Dim consulta2 = (From n In HeliosData.documentocompra
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                       On n.idDocumento Equals cajadet.documentoAfectado
                       Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                       And n.idProveedor = strRuc And n.estadoPago = "PN" And list.Contains(n.tipoCompra) _
                       And n.monedaDoc = strMoneda
                         Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, n.fechaVcto,
                       n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                       n.importeUS, n.estadoPago Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .fechaVcto = fechaVcto,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .SumaTransMN = g.Sum(Function(o) (o.montoSolesTransacc)),
                                      .SumaPagoMN = g.Sum(Function(o) (o.montoSoles)),
                                       .SumaTransME = g.Sum(Function(o) (o.montoUsdTransacc)),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoVenta
            doccompra.fechaContable = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDocumento
            doccompra.monedaDoc = i.moneda
            doccompra.importeTotal = i.ImporteNacional
            doccompra.tcDolLoc = i.tipoCambio
            doccompra.importeUS = i.ImporteExtranjero
            doccompra.estadoPago = i.estadoCobro
            doccompra.fechaVcto = i.fechaVcto

            cronograma = cronogramabl.ObtenerMontoProgramado(i.idDocumento)
            doccompra.montocrono = cronograma.montoAutorizadoMN
            doccompra.montocronome = cronograma.montoAutorizadoME


            objitemsaldoant = docanti.ObtenerPagosAnticipoPorDocumento(i.idDocumento)

            Select Case i.moneda
                Case 1
                    doccompra.PagoSumaMN = CDec((i.SumaTransMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")
                    doccompra.PagoSumaME = i.SumaTransME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
                Case 2
                    doccompra.PagoSumaMN = CDec((i.SumaTransMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")
                    doccompra.PagoSumaME = i.SumaTransME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
            End Select

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function UbicarPagosTodo(strEmpresa As String, intIdEstablecimiento As Integer, strMoneda As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle


        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        list.Add("APT")

        Dim con = (From compra In HeliosData.documentocompra
                   Group Join persona In HeliosData.entidad On
                  persona.idEntidad Equals compra.idProveedor Into persona_join = Group
                   From persona In persona_join.DefaultIfEmpty()
                   Group Join pago In HeliosData.documentoCajaDetalle
                  On compra.idDocumento Equals pago.documentoAfectado Into pago_join = Group
                   From pago In pago_join.DefaultIfEmpty()
                   Where compra.idEmpresa = Gempresas.IdEmpresaRuc And compra.idCentroCosto = GEstableciento.IdEstablecimiento And compra.estadoPago = "PN" _
                  And compra.monedaDoc = strMoneda
                   Group New With {persona, compra, pago} By
                  persona.idEntidad,
                  persona.nombreCompleto
                  Into g = Group
                   Select
                  IdEntidad = CType(idEntidad, Int32?),
                  NombreCompleto = nombreCompleto,
                  Deuda = CType(g.Sum(Function(p) p.compra.importeTotal), Decimal?),
                  Acuenta = CType(g.Sum(Function(p) p.pago.montoSoles), Decimal?),
                  deudaME = CType(g.Sum(Function(p) p.compra.importeUS), Decimal?),
                  AcuentaME = CType(g.Sum(Function(p) p.pago.montoUsd), Decimal?)).ToList

        For Each i In con
            doccompra = New documentocompra
            doccompra.idProveedor = i.IdEntidad
            doccompra.NombreEntidad = i.NombreCompleto
            If IsNothing(i.Acuenta) Then
                doccompra.importeTotal = i.Deuda - CDec(0.0)
            Else
                doccompra.importeTotal = i.Deuda - i.Acuenta
            End If

            If IsNothing(i.AcuentaME) Then
                doccompra.importeUS = i.deudaME - CDec(0.0)
            Else
                doccompra.importeUS = i.deudaME - i.AcuentaME
            End If

            doccompra.monedaDoc = strMoneda

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function



    Public Function UbicarPagosProveedorXperiodo(strEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, strMoneda As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add("APT")

        Dim con = (From compra In HeliosData.documentocompra
                   Group Join persona In HeliosData.entidad On
                  persona.idEntidad Equals compra.idProveedor Into persona_join = Group
                   From persona In persona_join.DefaultIfEmpty()
                   Group Join pago In HeliosData.documentoCajaDetalle
                  On compra.idDocumento Equals pago.documentoAfectado Into pago_join = Group
                   From pago In pago_join.DefaultIfEmpty()
                   Where compra.idEmpresa = Gempresas.IdEmpresaRuc And compra.idCentroCosto = GEstableciento.IdEstablecimiento And compra.estadoPago = "PN" _
                  And compra.fechaContable = strPeriodo And compra.monedaDoc = strMoneda
                   Group New With {persona, compra, pago} By
                  persona.idEntidad,
                  persona.nombreCompleto
                  Into g = Group
                   Select
                  IdEntidad = CType(idEntidad, Int32?),
                  NombreCompleto = nombreCompleto,
                  Deuda = CType(g.Sum(Function(p) p.compra.importeTotal), Decimal?),
                  Acuenta = CType(g.Sum(Function(p) p.pago.montoSoles), Decimal?),
                  deudaME = CType(g.Sum(Function(p) p.compra.importeUS), Decimal?),
                  AcuentaME = CType(g.Sum(Function(p) p.pago.montoUsd), Decimal?)).ToList

        For Each i In con
            doccompra = New documentocompra
            doccompra.idProveedor = i.IdEntidad
            doccompra.NombreEntidad = i.NombreCompleto
            If IsNothing(i.Acuenta) Then
                doccompra.importeTotal = i.Deuda - CDec(0.0)
            Else
                doccompra.importeTotal = i.Deuda - i.Acuenta
            End If

            If IsNothing(i.AcuentaME) Then
                doccompra.importeUS = i.deudaME - CDec(0.0)
            Else
                doccompra.importeUS = i.deudaME - i.AcuentaME
            End If

            doccompra.monedaDoc = strMoneda

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function UbicarPagosProveedorTodo(strEmpresa As String, intIdEstablecimiento As Integer, strMoneda As String, idprov As Integer, strPeriodo As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle


        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        list.Add("APT")

        Dim con = (From compra In HeliosData.documentocompra
                   Group Join persona In HeliosData.entidad On
                  persona.idEntidad Equals compra.idProveedor Into persona_join = Group
                   From persona In persona_join.DefaultIfEmpty()
                   Group Join pago In HeliosData.documentoCajaDetalle
                  On compra.idDocumento Equals pago.documentoAfectado Into pago_join = Group
                   From pago In pago_join.DefaultIfEmpty()
                   Where compra.idEmpresa = Gempresas.IdEmpresaRuc And compra.idCentroCosto = GEstableciento.IdEstablecimiento And compra.estadoPago = "PN" _
                  And compra.monedaDoc = strMoneda And compra.idProveedor = idprov And compra.fechaContable = strPeriodo
                   Group New With {persona, compra, pago} By
                  persona.idEntidad,
                  persona.nombreCompleto
                  Into g = Group
                   Select
                  IdEntidad = CType(idEntidad, Int32?),
                  NombreCompleto = nombreCompleto,
                  Deuda = CType(g.Sum(Function(p) p.compra.importeTotal), Decimal?),
                  Acuenta = CType(g.Sum(Function(p) p.pago.montoSoles), Decimal?),
                  deudaME = CType(g.Sum(Function(p) p.compra.importeUS), Decimal?),
                  AcuentaME = CType(g.Sum(Function(p) p.pago.montoUsd), Decimal?)).ToList

        For Each i In con
            doccompra = New documentocompra
            doccompra.idProveedor = i.IdEntidad
            doccompra.NombreEntidad = i.NombreCompleto
            If IsNothing(i.Acuenta) Then
                doccompra.importeTotal = i.Deuda - CDec(0.0)
            Else
                doccompra.importeTotal = i.Deuda - i.Acuenta
            End If

            If IsNothing(i.AcuentaME) Then
                doccompra.importeUS = i.deudaME - CDec(0.0)
            Else
                doccompra.importeUS = i.deudaME - i.AcuentaME
            End If

            doccompra.monedaDoc = strMoneda

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function



    Public Function UbicarPagosProveedor(strEmpresa As String, intIdEstablecimiento As Integer, strMoneda As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add("APT")

        Dim con = (From compra In HeliosData.documentocompra
                   Group Join persona In HeliosData.entidad On
                  persona.idEntidad Equals compra.idProveedor Into persona_join = Group
                   From persona In persona_join.DefaultIfEmpty()
                   Group Join pago In HeliosData.documentoCajaDetalle
                  On compra.idDocumento Equals pago.documentoAfectado Into pago_join = Group
                   From pago In pago_join.DefaultIfEmpty()
                   Where compra.idEmpresa = Gempresas.IdEmpresaRuc And compra.idCentroCosto = GEstableciento.IdEstablecimiento And compra.estadoPago = "PN" _
                  And compra.monedaDoc = strMoneda
                   Group New With {persona, compra, pago} By
                  persona.idEntidad,
                  persona.nombreCompleto
                  Into g = Group
                   Select
                  IdEntidad = CType(idEntidad, Int32?),
                  NombreCompleto = nombreCompleto,
                  Deuda = CType(g.Sum(Function(p) p.compra.importeTotal), Decimal?),
                  Acuenta = CType(g.Sum(Function(p) p.pago.montoSoles), Decimal?),
                  deudaME = CType(g.Sum(Function(p) p.compra.importeUS), Decimal?),
                  AcuentaME = CType(g.Sum(Function(p) p.pago.montoUsd), Decimal?)).ToList

        For Each i In con
            doccompra = New documentocompra
            doccompra.idProveedor = i.IdEntidad
            doccompra.NombreEntidad = i.NombreCompleto
            If IsNothing(i.Acuenta) Then
                doccompra.importeTotal = i.Deuda - CDec(0.0)
            Else
                doccompra.importeTotal = i.Deuda - i.Acuenta
            End If

            If IsNothing(i.AcuentaME) Then
                doccompra.importeUS = i.deudaME - CDec(0.0)
            Else
                doccompra.importeUS = i.deudaME - i.AcuentaME
            End If

            doccompra.monedaDoc = strMoneda

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function



    Public Function GetAlertaMovimientosAlmacen() As List(Of documentocompra)
        Dim obj As New documentocompra
        Dim lista As New List(Of documentocompra)

        Dim consulta = (From Documentocompra In HeliosData.documentocompra
                        Where
                       (New String() {"OEA", "OSA", "TEA"}).Contains(Documentocompra.tipoCompra) And
                       Documentocompra.idEmpresa = Gempresas.IdEmpresaRuc
                        Group Documentocompra By Documentocompra.tipoCompra Into g = Group
                        Select
                       tipoCompra,
                       Column1 = CType(g.Count(), Int64?)).ToList


        For Each i In consulta
            obj = New documentocompra
            obj.tipoCompra = i.tipoCompra
            obj.importeTotal = i.Column1
            lista.Add(obj)
        Next
        Return lista
    End Function

    Public Function UbicarCompraPorProveedorXperiodoAnt(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, strPeriodo As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)
        Dim listaTipoSituacion As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        Dim consulta2 = (From n In HeliosData.documentocompra
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                       On n.idDocumento Equals cajadet.documentoAfectado
                       Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                       And n.idProveedor = strRuc And n.fechaContable = strPeriodo And list.Contains(n.tipoCompra)
                         Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc,
                       n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                       n.importeUS, n.estadoPago Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoVenta
            doccompra.fechaContable = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDocumento
            doccompra.monedaDoc = i.moneda
            doccompra.importeTotal = i.ImporteNacional
            doccompra.tcDolLoc = i.tipoCambio
            doccompra.importeUS = i.ImporteExtranjero
            doccompra.estadoPago = i.estadoCobro

            objitemsaldoant = docanti.ObtenerPagosAnticipoPorDocumento(i.idDocumento)

            doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault + objitemsaldoant.MontoPagadoSoles
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function GetComprasDeApertura(be As documentocompra) As List(Of documentocompra)
        Dim compraBE As New documentocompra
        Dim Lista As New List(Of documentocompra)

        Dim consulta = (From n In HeliosData.documentocompra
                        Join ent In HeliosData.entidad
                        On ent.idEntidad Equals n.idProveedor
                        Where n.idEmpresa = be.idEmpresa _
                       And n.tipoCompra = "APT").ToList

        For Each i In consulta
            compraBE = New documentocompra
            compraBE.idDocumento = i.n.idDocumento
            compraBE.fechaDoc = i.n.fechaDoc
            compraBE.tipoDoc = i.n.tipoDoc
            compraBE.serie = i.n.serie
            compraBE.numeroDoc = i.n.numeroDoc
            compraBE.monedaDoc = i.n.monedaDoc
            compraBE.tcDolLoc = i.n.tcDolLoc
            compraBE.nombreProveedor = i.ent.nombreCompleto
            compraBE.importeTotal = i.n.importeTotal
            compraBE.importeUS = i.n.importeUS
            Lista.Add(compraBE)
        Next

        Return Lista
    End Function

    Public Function GetCuentasPorPagarInicio(be As documentocompra) As documentocompra
        Dim obj As New documentocompra

        Dim suma = Aggregate n In HeliosData.documentocompra
                   Where n.idEmpresa = be.idEmpresa _
                   And n.tipoCompra = "APT"
                   Into SumaMN = Sum(n.importeTotal),
                   SumaME = Sum(n.importeUS)


        obj = New documentocompra
        obj.importeTotal = suma.SumaMN.GetValueOrDefault
        obj.importeUS = suma.SumaME.GetValueOrDefault

        Return obj
    End Function

    Public Sub UpdateDataDetraccion(be As documentocompra)
        Try
            Dim compra = (From n In HeliosData.documentocompra
                          Where n.idDocumento = be.idDocumento).FirstOrDefault

            Using ts As New TransactionScope
                If Not IsNothing(compra) Then
                    compra.periodoTributo = be.periodoTributo
                    compra.fechaConstancia = be.fechaConstancia
                    compra.nroConstancia = be.nroConstancia
                End If
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function GetConteoDetracciones(be As documentocompra) As Integer

        Dim obj As New documentocompra
        Dim Lista As New List(Of documentocompra)

        Dim consulta = (From n In HeliosData.documentocompra
                        Where n.idEmpresa = be.idEmpresa And
                       n.idCentroCosto = be.idCentroCosto _
                       And n.tieneDetraccion = be.tieneDetraccion).Count

        Return consulta
    End Function

    Public Function GetListadoDetracciones(be As documentocompra) As List(Of documentocompra)

        Dim obj As New documentocompra
        Dim Lista As New List(Of documentocompra)

        Dim consulta = (From n In HeliosData.documentocompra
                        Where n.idEmpresa = be.idEmpresa And
                       n.idCentroCosto = be.idCentroCosto _
                       And n.tieneDetraccion = be.tieneDetraccion _
                       And n.fechaContable = be.fechaContable
                        Join ent In HeliosData.entidad
                       On ent.idEntidad Equals n.idProveedor).ToList

        For Each i In consulta
            obj = New documentocompra
            obj.idDocumento = i.n.idDocumento
            obj.fechaDoc = i.n.fechaDoc
            obj.tipoDoc = i.n.tipoDoc
            obj.serie = i.n.serie
            obj.numeroDoc = i.n.numeroDoc
            obj.idProveedor = i.n.idProveedor
            obj.nombreProveedor = i.ent.nombreCompleto
            obj.importeTotal = i.n.importeTotal
            obj.importeUS = i.n.importeUS
            obj.tieneDetraccion = i.n.tieneDetraccion
            obj.fechaConstancia = i.n.fechaConstancia.GetValueOrDefault
            obj.nroConstancia = i.n.nroConstancia
            obj.periodoTributo = i.n.periodoTributo
            obj.fechaContable = i.n.fechaContable
            Lista.Add(obj)
        Next

        Return Lista
    End Function


    Public Sub GetDetraccionChangeStateByDocumento(be As documentocompra)

        Dim consulta = (From n In HeliosData.documentocompra
                        Where n.idDocumento = be.idDocumento).FirstOrDefault

        Using ts As New TransactionScope
            consulta.tieneDetraccion = be.tieneDetraccion

            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub


    Public Function GetInventariosSinAsiento(be As documentocompra) As List(Of documentocompra)
        Dim lista As New List(Of documentocompra)
        Dim listaTipoComra As New List(Of String)
        Dim obj As New documentocompra

        listaTipoComra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaTipoComra.Add(TIPO_VENTA.OTRAS_SALIDAS)
        listaTipoComra.Add(TIPO_COMPRA.MOVIMIENTO_ALMACEN.TRANSFERENCIA_ALMACENES)

        Dim consulta = (From n In HeliosData.documentocompra
                        Where listaTipoComra.Contains(n.tipoCompra) _
                       And n.idEmpresa = be.idEmpresa _
                       And n.idCentroCosto = be.idCentroCosto _
                       And n.fechaContable = be.fechaContable _
                       And n.aprobado = be.aprobado).ToList


        For Each i In consulta
            obj = New documentocompra
            obj.tipoOperacion = i.situacion
            obj.tipoCompra = i.tipoCompra
            obj.idDocumento = i.idDocumento
            obj.fechaDoc = i.fechaDoc
            obj.tipoDoc = i.tipoDoc
            obj.serie = i.serie
            obj.numeroDoc = i.numeroDoc
            obj.tcDolLoc = i.tcDolLoc
            obj.monedaDoc = i.monedaDoc
            obj.importeTotal = i.importeTotal
            obj.importeUS = i.importeUS
            obj.glosa = i.glosa
            lista.Add(obj)
        Next
        Return lista
    End Function

    'Public Function GetCompraServicios(be As documentocompra) As List(Of documentocompra)
    '    Dim lista As New List(Of documentocompra)
    '    Dim listaTipoComra As New List(Of String)
    '    Dim obj As New documentocompra
    '    listaTipoComra.Add(TIPO_COMPRA.COMPRA)

    '    Dim consulta = (From n In HeliosData.documentocompra _
    '                     Join ent In HeliosData.entidad _
    '                     On ent.idEntidad Equals n.idProveedor _
    '                     Join det In HeliosData.documentocompradetalle _
    '                     On det.idDocumento Equals n.idDocumento _
    '                     Where det.tipoExistencia = "GS" _
    '                     And n.idEmpresa = be.idEmpresa And n.idCentroCosto = be.idCentroCosto _
    '                     And n.fechaContable = be.fechaContable And listaTipoComra.Contains(n.tipoCompra) _
    '                     And det.tipoCosto Is Nothing).ToList


    '    For Each i In consulta
    '        obj = New documentocompra
    '        obj.tipoOperacion = "02"
    '        obj.tipoCompra = TIPO_COMPRA.COMPRA
    '        obj.idDocumento = i.n.idDocumento
    '        obj.fechaDoc = i.n.fechaDoc
    '        obj.tipoDoc = i.n.tipoDoc
    '        obj.serie = i.n.serie
    '        obj.numeroDoc = i.n.numeroDoc
    '        obj.tcDolLoc = i.n.tcDolLoc
    '        obj.monedaDoc = i.n.monedaDoc
    '        obj.importeTotal = i.n.importeTotal
    '        obj.importeUS = i.n.importeUS
    '        obj.glosa = i.n.glosa
    '        lista.Add(obj)
    '    Next
    '    Return lista
    'End Function

    Public Function GetFinanzasSinAsiento(be As documentoCaja) As List(Of documentoCaja)
        Dim lista As New List(Of documentoCaja)
        Dim listaTipoComra As New List(Of String)
        Dim obj As New documentoCaja

        listaTipoComra.Add(MovimientoCaja.Otras_Entradas)
        listaTipoComra.Add(MovimientoCaja.Otras_Saliadas)
        'listaTipoComra.Add("OEC")
        '  listaTipoComra.Add(TIPO_COMPRA.MOVIMIENTO_ALMACEN.TRANSFERENCIA_ALMACENES)

        Dim consulta = (From n In HeliosData.documentoCaja
                        Join ent In HeliosData.estadosFinancieros
                        On ent.idestado Equals n.entidadFinanciera
                        Where listaTipoComra.Contains(n.movimientoCaja) _
                       And n.idEmpresa = be.idEmpresa _
                       And n.idEstablecimiento = be.idEstablecimiento _
                       And n.periodo = be.periodo _
                       And n.estado = be.estado).ToList


        For Each i In consulta
            obj = New documentoCaja
            obj.movimientoCaja = i.n.movimientoCaja
            obj.NombreEntidad = i.ent.descripcion
            obj.entidadFinanciera = i.ent.cuenta
            obj.tipoMovimiento = i.n.tipoMovimiento
            obj.codigoLibro = i.n.codigoLibro
            obj.tipoOperacion = i.n.tipoOperacion
            obj.idDocumento = i.n.idDocumento
            obj.fechaProceso = i.n.fechaProceso
            obj.tipoDocPago = i.n.tipoDocPago
            obj.numeroDoc = i.n.numeroDoc
            obj.tipoCambio = i.n.tipoCambio
            obj.moneda = i.n.moneda
            obj.montoSoles = i.n.montoSoles
            obj.montoUsd = i.n.montoUsd
            obj.glosa = i.n.glosa
            lista.Add(obj)
        Next
        Return lista
    End Function

    Public Function GetNumFinanzasSinAsiento(be As documentoCaja) As Integer
        Dim lista As New List(Of documentoCaja)
        Dim listaTipoComra As New List(Of String)
        Dim obj As New documentoCaja

        listaTipoComra.Add(MovimientoCaja.Otras_Entradas)
        listaTipoComra.Add(MovimientoCaja.Otras_Saliadas)
        '  listaTipoComra.Add(TIPO_COMPRA.MOVIMIENTO_ALMACEN.TRANSFERENCIA_ALMACENES)

        Dim consulta = (From n In HeliosData.documentoCaja
                        Where listaTipoComra.Contains(n.movimientoCaja) _
                       And n.idEmpresa = be.idEmpresa _
                       And n.idEstablecimiento = be.idEstablecimiento _
                       And n.periodo = be.periodo _
                       And n.estado = be.estado).Count



        Return consulta
    End Function

    Public Function GetNumAlertasInventariosSinAsiento(be As documentocompra) As Integer
        Dim lista As New List(Of documentocompra)
        Dim listaTipoComra As New List(Of String)
        Dim obj As New documentocompra

        listaTipoComra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaTipoComra.Add(TIPO_VENTA.OTRAS_SALIDAS)
        listaTipoComra.Add(TIPO_COMPRA.MOVIMIENTO_ALMACEN.TRANSFERENCIA_ALMACENES)

        Dim consulta = (From n In HeliosData.documentocompra
                        Where listaTipoComra.Contains(n.tipoCompra) _
                       And n.idEmpresa = be.idEmpresa _
                       And n.idCentroCosto = be.idCentroCosto _
                       And n.fechaContable = be.fechaContable _
                       And n.aprobado = be.aprobado).Count



        Return consulta
    End Function

    Public Function GetSumaNotasXperiodo(be As documentocompra) As List(Of documentocompra)

        Dim Lista As New List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim consulta = (From Documentocompra In HeliosData.documentocompra
                        Where Documentocompra.idEmpresa = be.idEmpresa _
                        And Documentocompra.idCentroCosto = be.idCentroCosto _
                        And Documentocompra.fechaContable = be.fechaContable _
                        And listaTipoCompra.Contains(Documentocompra.tipoCompra)
                        Group Documentocompra By Documentocompra.tipoCompra Into g = Group
                        Select
                       tipoCompra,
                       numCompras = CType(g.Count(Function(p) p.tipoDoc <> Nothing), Int64?),
                       totalMN = CType(g.Sum(Function(p) p.importeTotal), Decimal?),
                       TotalME = CType(g.Sum(Function(p) p.importeUS), Decimal?)).ToList


        For Each i In consulta
            objRecurso = New documentocompra
            objRecurso.tipoCompra = i.tipoCompra
            objRecurso.CountCompras = i.numCompras
            objRecurso.importeTotal = i.totalMN
            objRecurso.importeUS = i.TotalME
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetTatalResumenComprasXtipo(be As documentocompra) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra
        Dim returnNumReg As Integer = 0

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        Dim consulta = (From Documentocompra In HeliosData.documentocompra
                        Where Documentocompra.idEmpresa = be.idEmpresa _
                        And Documentocompra.idCentroCosto = be.idCentroCosto _
                        And Documentocompra.fechaContable = be.fechaContable _
                        And listaTipoCompra.Contains(Documentocompra.tipoCompra)
                        Group Documentocompra By Documentocompra.tipoCompra Into g = Group
                        Select
                       tipoCompra,
                       numCompras = CType(g.Count(Function(p) p.tipoDoc <> Nothing), Int64?),
                       totalMN = CType(g.Sum(Function(p) p.importeTotal), Decimal?),
                       TotalME = CType(g.Sum(Function(p) p.importeUS), Decimal?)).ToList


        For Each i In consulta
            objRecurso = New documentocompra
            objRecurso.tipoCompra = i.tipoCompra
            objRecurso.CountCompras = i.numCompras
            objRecurso.importeTotal = i.totalMN
            objRecurso.importeUS = i.TotalME
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetNumComprasXparameter(be As documentocompra, caso As String) As Integer
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra
        Dim returnNumReg As Integer = 0

        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        'listaTipoCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        'listaTipoCompra.Add(TIPO_COMPRA.APORTE_EXISTENCIAS)
        'listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        'listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        Select Case caso
            Case "PERIODO"
                returnNumReg = (From c In HeliosData.documentocompra
                                Where c.fechaContable = (be.fechaContable) _
                      And c.idCentroCosto = be.idCentroCosto _
                      And listaTipoCompra.Contains(c.tipoCompra)).Count

            Case "DIA"

                returnNumReg = (From c In HeliosData.documentocompra
                                Where c.fechaDoc.Value.Day = be.fechaDoc.Value.Day _
                       And c.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                       And c.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                       And c.idCentroCosto = be.idCentroCosto _
                       And listaTipoCompra.Contains(c.tipoCompra)).Count
        End Select




        Return returnNumReg
    End Function


    Public Function ListadoComprobantesPorORP(compraBE As documentocompra) As List(Of documentocompra)

        Dim lista As New List(Of documentocompra)
        Dim obj As New documentocompra

        Dim consulta = (From n In HeliosData.documentocompra
                        Where n.idEmpresa = compraBE.idEmpresa _
                       And n.idCentroCosto = compraBE.idCentroCosto _
                       And n.idPadre = compraBE.idPadre).ToList

        For Each i In consulta
            obj = New documentocompra
            obj.idDocumento = i.idDocumento
            obj.tipoCompra = i.tipoCompra
            obj.fechaDoc = i.fechaDoc
            obj.tipoDoc = i.tipoDoc
            obj.serie = i.serie
            obj.numeroDoc = i.numeroDoc
            obj.idProveedor = i.idProveedor
            obj.importeTotal = i.importeTotal
            obj.importeUS = i.importeUS
            lista.Add(obj)
        Next

        Return lista
    End Function

    Public Sub CerrarTipoCambioDolaresPeriodo(lista As List(Of documentocompra))
        Dim compra As New documentocompra
        Using ts As New TransactionScope
            For Each i In lista
                compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = i.idDocumento).FirstOrDefault
                If Not IsNothing(compra) Then
                    compra.tipocambio = i.tipocambio
                End If
                HeliosData.SaveChanges()
                ts.Complete()
            Next
        End Using
    End Sub

    Public Function ListaRecursosCosto(compraBE As documentocompra) As List(Of documentocompradetalle)
        Dim doccompra As New documentocompradetalle
        Dim compraLista As New List(Of documentocompradetalle)
        Dim list As New List(Of String)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        list.Add(TIPO_COMPRA.NOTA_CREDITO)
        list.Add(TIPO_COMPRA.NOTA_DEBITO)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'list.Add(TIPO_VENTA.OTRAS_SALIDAS)
        Dim cuentasNO() As String = {"11", "18"}
        Dim consulta = (From n In HeliosData.documentocompra
                        Join ent In HeliosData.entidad
                        On ent.idEntidad Equals n.idProveedor
                        Join det In HeliosData.documentocompradetalle
                        On det.idDocumento Equals n.idDocumento
                        Group Join pet In HeliosData.recursoCosto On det.idCosto Equals pet.idCosto
                        Into PetList = Group
                        From pet In PetList.DefaultIfEmpty()
                        Where det.tipoExistencia = "GS" _
                        And n.idEmpresa = compraBE.idEmpresa And n.idCentroCosto = compraBE.idCentroCosto _
                        And n.fechaContable = compraBE.fechaContable And list.Contains(n.tipoCompra) _
                        And Not cuentasNO.Contains(det.idItem) _
                        And det.idItem >= "62" And det.idItem <= "68" _
                        And det.tipoCosto Is Nothing Or det.tipoCosto = "PY"
                        Select det.idCosto, det.idPadreDTCompra, ent.nombreCompleto,
                        n.tipoDoc, n.serie, n.numeroDoc, n.monedaDoc, n.fechaDoc, det.idDocumento,
                        det.secuencia, det.idItem, det.descripcionItem, det.tipoExistencia, det.destino,
                        det.monto1, det.precioUnitario, det.precioUnitarioUS, det.montokardex, det.montokardexUS,
                        det.importe, det.importeUS,
                               Nameproyecto =
                                 If(pet Is Nothing, String.Empty, pet.nombreCosto)).ToList

        For Each i In consulta
            doccompra = New documentocompradetalle
            doccompra.idCosto = i.idCosto.GetValueOrDefault
            doccompra.NombreProyectoGeneral = i.Nameproyecto
            doccompra.idPadreDTCompra = i.idPadreDTCompra
            doccompra.NombreProveedor = i.nombreCompleto
            doccompra.TipoDoc = i.tipoDoc
            doccompra.Serie = i.serie
            doccompra.NumDoc = i.numeroDoc
            doccompra.Moneda = i.monedaDoc
            doccompra.FechaDoc = i.fechaDoc
            doccompra.idDocumento = i.idDocumento
            doccompra.secuencia = i.secuencia
            doccompra.idItem = i.idItem
            doccompra.descripcionItem = i.descripcionItem
            doccompra.tipoExistencia = i.tipoExistencia
            doccompra.destino = i.destino
            doccompra.unidad1 = "UND"
            doccompra.monto1 = i.monto1
            doccompra.precioUnitario = i.precioUnitario
            doccompra.precioUnitarioUS = i.precioUnitarioUS
            doccompra.montokardex = i.montokardex
            doccompra.montokardexUS = i.montokardexUS
            doccompra.importe = i.importe
            doccompra.importeUS = i.importeUS
            doccompra.tipoExistencia = i.tipoExistencia
            doccompra.TipoOperacion = "02"
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function ListaRecursosCostoInventario(compraBE As documentocompra) As List(Of documentocompradetalle)
        Dim doccompra As New documentocompradetalle
        Dim compraLista As New List(Of documentocompradetalle)
        Dim list As New List(Of String)

        'list.Add(TIPO_COMPRA.ot)
        'list.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        'list.Add(TIPO_COMPRA.NOTA_CREDITO)
        'list.Add(TIPO_COMPRA.NOTA_DEBITO)
        'list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        'list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        list.Add(TIPO_VENTA.OTRAS_SALIDAS)

        Dim consulta = (From n In HeliosData.documentocompra
                        Join det In HeliosData.documentocompradetalle
                        Join proy In HeliosData.recursoCosto
                        On proy.idCosto Equals det.idCosto
                        On det.idDocumento Equals n.idDocumento
                        Where det.tipoExistencia <> "GS" _
                        And n.idEmpresa = compraBE.idEmpresa And n.idCentroCosto = compraBE.idCentroCosto _
                        And list.Contains(n.tipoCompra) _
                        And det.tipoCosto = "PY").ToList

        For Each i In consulta
            doccompra = New documentocompradetalle
            doccompra.idCosto = i.proy.idCosto
            doccompra.NombreProyectoGeneral = i.proy.nombreCosto
            doccompra.idPadreDTCompra = i.det.idPadreDTCompra
            doccompra.NombreProveedor = "Sin identificar"
            doccompra.TipoDoc = i.n.tipoDoc
            doccompra.Serie = i.n.serie
            doccompra.NumDoc = i.n.numeroDoc
            doccompra.Moneda = i.n.monedaDoc
            doccompra.FechaDoc = i.n.fechaDoc
            doccompra.idDocumento = i.det.idDocumento
            doccompra.secuencia = i.det.secuencia
            doccompra.idItem = i.det.idItem
            doccompra.descripcionItem = i.det.descripcionItem
            doccompra.tipoExistencia = i.det.tipoExistencia
            doccompra.destino = i.det.destino
            doccompra.unidad1 = i.det.unidad1
            doccompra.monto1 = i.det.monto1
            doccompra.precioUnitario = i.det.precioUnitario
            doccompra.precioUnitarioUS = i.det.precioUnitarioUS
            doccompra.montokardex = i.det.importe
            doccompra.montokardexUS = i.det.importe
            doccompra.importe = i.det.importe
            doccompra.importeUS = i.det.importeUS
            doccompra.tipoExistencia = i.det.tipoExistencia
            doccompra.TipoOperacion = "02"
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function CerrarComprasMonedaExtranjera(compraBE As documentocompra) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)
        Dim listaTipoSituacion As New List(Of String)

        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)
        list.Add(TIPO_COMPRA.COMPRA)

        Dim consulta = (From n In HeliosData.documentocompra
                        Join ent In HeliosData.entidad
                        On ent.idEntidad Equals n.idProveedor
                        Group Join cajadet In HeliosData.documentoCajaDetalle
                     On n.idDocumento Equals cajadet.documentoAfectado
                     Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where n.idEmpresa = compraBE.idEmpresa And n.idCentroCosto = compraBE.idCentroCosto _
                     And n.fechaContable = compraBE.fechaContable And list.Contains(n.tipoCompra) _
                     And n.monedaDoc = 2
                        Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc,
                     n.serie, n.numeroDoc, ent.idEntidad, ent.nombreCompleto, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                     n.importeUS, n.estadoPago Into g = Group
                        Select New With {
                                    .idDocumento = idDocumento,
                                    .tipoCompra = tipoCompra,
                                    .fechaPeriodo = fechaContable,
                                    .fechaDoc = fechaDoc,
                                    .serie = serie,
                                    .numeroDoc = numeroDoc,
                                    .tipoDocumento = tipoDoc,
                                    .identidad = idEntidad,
                                    .nomProveedor = nombreCompleto,
                                    .moneda = monedaDoc,
                                    .ImporteNacional = importeTotal,
                                    .tipoCambio = tcDolLoc,
                                    .ImporteExtranjero = importeUS,
                                    .estadoCobro = estadoPago,
                                    .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                    .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList

        For Each i In consulta
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoCompra
            doccompra.fechaContable = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDocumento
            doccompra.monedaDoc = i.moneda
            doccompra.idProveedor = i.identidad
            doccompra.nombreProveedor = i.nomProveedor
            doccompra.importeTotal = i.ImporteNacional
            doccompra.tcDolLoc = i.tipoCambio
            doccompra.importeUS = i.ImporteExtranjero
            doccompra.estadoPago = i.estadoCobro
            doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function UpdateRegistroHonorarios(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim precioV As New listadoPreciosBL
        Dim cajaBL As New documentoCajaBL

        Try
            Using ts As New TransactionScope()

                DocumentoBL.Update(objDocumento)
                Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    compraDetalleBL.Update(i, objDocumento.idDocumento)
                Next
                asientoBL.DeletePorDocumento(objDocumento.idDocumento)
                asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento

            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Sub ListaComprasAutoriza(objListaCompras As List(Of documentocompra))
        Try
            Using ts As New TransactionScope
                For Each i As documentocompra In objListaCompras
                    ActualizaEstado(i)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub ActualizaEstado(i As documentocompra)
        Using ts As New TransactionScope
            Dim obj = (From n In HeliosData.documentocompra
                       Where n.idDocumento = i.idDocumento).FirstOrDefault

            obj.aprobado = i.aprobado

            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Public Function ListarComprasxDia(idEstabl As Integer, Optional Dia As DateTime = Nothing) As List(Of documentocompra)
        Dim lista As New List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        Dim listaTipoSituacion As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO_CON_RECEPCION)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                 On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                 On compra.idProveedor Equals entidad.idEntidad
                        Join comprobante In HeliosData.tabladetalle
                 On comprobante.codigoDetalle Equals compra.tipoDoc
                        Where compra.fechaDoc.Value.Day = Dia.Day And
                  compra.fechaDoc.Value.Month = Dia.Month And
                  compra.fechaDoc.Value.Year = Dia.Year _
                 And compra.idCentroCosto = idEstabl _
                 And listaTipoCompra.Contains(compra.tipoCompra) _
                 And comprobante.idtabla = 10
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.compra.fechaContable
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.comprobante.descripcion
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            lista.Add(objRecurso)
        Next
        Return lista
    End Function


    Public Function GetListarComprasPorDia_CONT_CREDITO(intIdEstablecimiento As Integer, Optional UsuarioCaja As String = Nothing) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO_CON_RECEPCION)

        If IsNothing(UsuarioCaja) Then
            Dim consulta = (From doc In HeliosData.documento
                            Join compra In HeliosData.documentocompra
                     On doc.idDocumento Equals compra.idDocumento
                            Join entidad In HeliosData.entidad
                     On compra.idProveedor Equals entidad.idEntidad
                            Where compra.fechaDoc.Value.Day = DateTime.Now.Day And
                      compra.fechaDoc.Value.Month = DateTime.Now.Month And
                      compra.fechaDoc.Value.Year = DateTime.Now.Year _
                     And compra.idCentroCosto = intIdEstablecimiento _
                     And listaTipoCompra.Contains(compra.tipoCompra) _
                      And listaTipoSituacion.Contains(compra.situacion)
                            Order By compra.fechaDoc Ascending).ToList

            For Each obj In consulta
                objRecurso = New documentocompra
                objRecurso.fechaContable = obj.compra.fechaContable
                objRecurso.periodoTributo = obj.compra.periodoTributo
                objRecurso.idDocumento = obj.compra.idDocumento
                objRecurso.tipoCompra = obj.compra.tipoCompra
                objRecurso.tipoOperacion = obj.doc.tipoOperacion
                objRecurso.fechaDoc = obj.compra.fechaDoc
                objRecurso.tipoDoc = obj.compra.tipoDoc
                objRecurso.serie = obj.compra.serie
                objRecurso.numeroDoc = obj.compra.numeroDoc
                objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                objRecurso.NroDocEntidad = obj.entidad.nrodoc
                objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                objRecurso.TipoPersona = obj.entidad.tipoPersona
                objRecurso.importeTotal = obj.compra.importeTotal
                objRecurso.tcDolLoc = obj.compra.tcDolLoc
                objRecurso.importeUS = obj.compra.importeUS
                objRecurso.monedaDoc = obj.compra.monedaDoc
                objRecurso.estadoPago = obj.compra.estadoPago
                objRecurso.idPadre = obj.compra.idPadre
                objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                objRecurso.situacion = obj.compra.situacion
                Lista.Add(objRecurso)
            Next
        Else


            Dim consulta = (From doc In HeliosData.documento
                            Join compra In HeliosData.documentocompra
                     On doc.idDocumento Equals compra.idDocumento
                            Join entidad In HeliosData.entidad
                     On compra.idProveedor Equals entidad.idEntidad
                            Where compra.fechaDoc.Value.Day = DateTime.Now.Day And
                      compra.fechaDoc.Value.Month = DateTime.Now.Month And
                      compra.fechaDoc.Value.Year = DateTime.Now.Year _
                     And compra.idCentroCosto = intIdEstablecimiento And compra.usuarioActualizacion = UsuarioCaja _
                     And listaTipoCompra.Contains(compra.tipoCompra) _
                      And listaTipoSituacion.Contains(compra.situacion)
                            Order By compra.fechaDoc Ascending).ToList

            For Each obj In consulta
                objRecurso = New documentocompra
                objRecurso.fechaContable = obj.compra.fechaContable
                objRecurso.periodoTributo = obj.compra.periodoTributo
                objRecurso.idDocumento = obj.compra.idDocumento
                objRecurso.tipoCompra = obj.compra.tipoCompra
                objRecurso.tipoOperacion = obj.doc.tipoOperacion
                objRecurso.fechaDoc = obj.compra.fechaDoc
                objRecurso.tipoDoc = obj.compra.tipoDoc
                objRecurso.serie = obj.compra.serie
                objRecurso.numeroDoc = obj.compra.numeroDoc
                objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                objRecurso.NroDocEntidad = obj.entidad.nrodoc
                objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                objRecurso.TipoPersona = obj.entidad.tipoPersona
                objRecurso.importeTotal = obj.compra.importeTotal
                objRecurso.tcDolLoc = obj.compra.tcDolLoc
                objRecurso.importeUS = obj.compra.importeUS
                objRecurso.monedaDoc = obj.compra.monedaDoc
                objRecurso.estadoPago = obj.compra.estadoPago
                objRecurso.idPadre = obj.compra.idPadre
                objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                objRecurso.situacion = obj.compra.situacion
                Lista.Add(objRecurso)
            Next
        End If



        Return Lista
    End Function






    Public Function ListarCompras(idEstabl As Integer, periodo As String) As List(Of documentocompra)
        Dim lista As New List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        Dim listaTipoSituacion As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO_CON_RECEPCION)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)

        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)


        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                      On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable = periodo _
                      And compra.idCentroCosto = idEstabl _
                      And listaTipoCompra.Contains(compra.tipoCompra) _
                       And listaTipoSituacion.Contains(compra.situacion)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.compra.fechaContable
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            lista.Add(objRecurso)
        Next
        Return lista
    End Function

#Region "SOLICITUDES"

#Region "ORDENES"



    Public Function GetListarOrdenServicio(intIdEmpresa As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra
        Dim listaSol As New List(Of String)
        listaSol.Add(TIPO_COMPRA.ORDEN_SERVICIO)
        listaSol.Add(TIPO_COMPRA.ORDEN_SERVICIO_APROBADO)

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                      On compra.idProveedor Equals entidad.idEntidad
                        Where compra.idEmpresa = intIdEmpresa And
                      compra.fechaContable = PeriodoGeneral _
                      And listaSol.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarOrdenCompra(intIdEmpresa As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra
        Dim listaSol As New List(Of String)
        listaSol.Add(TIPO_COMPRA.ORDEN_COMPRA)
        listaSol.Add(TIPO_COMPRA.ORDEN_APROBADO)

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                      On compra.idProveedor Equals entidad.idEntidad
                        Where compra.idEmpresa = intIdEmpresa And
                      compra.fechaContable = PeriodoGeneral _
                      And listaSol.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoCompra = obj.compra.tipoCompra


            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetListarOrdenCompraPorDia(intIdEmpresa As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra
        Dim listaSol As New List(Of String)
        listaSol.Add(TIPO_COMPRA.ORDEN_COMPRA)
        listaSol.Add(TIPO_COMPRA.ORDEN_APROBADO)

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                      On compra.idProveedor Equals entidad.idEntidad
                        Where compra.idEmpresa = intIdEmpresa _
                      And compra.fechaDoc.Value.Day = CDate(DateTime.Now).Day _
                    And compra.fechaDoc.Value.Month = CDate(DateTime.Now).Month _
                        And compra.fechaDoc.Value.Year = CDate(DateTime.Now).Year _
                      And listaSol.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoCompra = obj.compra.tipoCompra


            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarOrdenServicioPorDia(intIdEmpresa As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra
        Dim listaSol As New List(Of String)
        listaSol.Add(TIPO_COMPRA.ORDEN_SERVICIO)
        listaSol.Add(TIPO_COMPRA.ORDEN_SERVICIO_APROBADO)

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                      On compra.idProveedor Equals entidad.idEntidad
                        Where compra.idEmpresa = intIdEmpresa _
                      And compra.fechaDoc.Value.Day = CDate(DateTime.Now).Day _
                    And compra.fechaDoc.Value.Month = CDate(DateTime.Now).Month _
                        And compra.fechaDoc.Value.Year = CDate(DateTime.Now).Year _
                      And listaSol.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

#End Region

    Public Sub UpdateSoli(ByVal documentoBE As documentocompra)

        Using ts As New TransactionScope
            Dim doc As documentocompra = HeliosData.documentocompra.Where(Function(o) _
                                            o.idDocumento = documentoBE.idDocumento).First()

            If documentoBE.idPersona > 0 Then
                doc.idPersona = documentoBE.idPersona
            End If
            doc.fechaDoc = documentoBE.fechaDoc
            doc.tipoDoc = documentoBE.tipoDoc
            doc.importeTotal = documentoBE.importeTotal
            doc.importeUS = documentoBE.importeUS
            doc.monedaDoc = documentoBE.monedaDoc

            'HeliosData.ObjectStateManager.GetObjectStateEntry(doc).State.ToString()
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Public Function SaveCompraSolicitud(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim compraOtros As New documentoOtrosDatosBL
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Me.InsertSolicitudCompra(objDocumento.documentocompra, objDocumento.idDocumento)
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    Next

                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GrabarOrdenes(objDocumento As documento, objOtroDoc As documentoOtrosDatos) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim compraOtros As New documentoOtrosDatosBL
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Me.InsertProgramado(objDocumento.documentocompra, objDocumento.idDocumento)
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    Next
                    compraOtros.Insert(objOtroDoc, objDocumento.idDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetListarSolicitudesDia(intIdEmpresa As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra
        Dim listaSol As New List(Of String)
        listaSol.Add(TIPO_COMPRA.SOLICITUD_ESPERA)
        listaSol.Add(TIPO_COMPRA.SOLICITUD_ACEPTADA)

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join pers In HeliosData.Persona
                       On compra.idProveedor Equals pers.idPersona
                        Where compra.idEmpresa = intIdEmpresa _
                       And compra.fechaDoc.Value.Day = CDate(DateTime.Now).Day _
                    And compra.fechaDoc.Value.Month = CDate(DateTime.Now).Month _
                        And compra.fechaDoc.Value.Year = CDate(DateTime.Now).Year _
                       And listaSol.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList
        'Next
        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.NombreEntidad = obj.pers.nombreCompleto
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            Lista.Add(objRecurso)
        Next
        Return Lista
    End Function

    Public Function GetListarSolicitudes(intIdEmpresa As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra
        Dim listaSol As New List(Of String)
        listaSol.Add(TIPO_COMPRA.SOLICITUD_ESPERA)
        listaSol.Add(TIPO_COMPRA.SOLICITUD_ACEPTADA)

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join pers In HeliosData.Persona
                       On compra.idPersona Equals pers.idPersona
                        Where compra.idEmpresa = intIdEmpresa And
                       compra.fechaContable = PeriodoGeneral _
                       And listaSol.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList
        'Next
        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.NombreEntidad = obj.pers.nombreCompleto
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            Lista.Add(objRecurso)
        Next
        Return Lista
    End Function
#End Region

    Public Function TieneNotasCD(intIdDocumentoCompra As Integer) As Boolean
        Dim listaNotas As New List(Of String)
        listaNotas.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaNotas.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim conteo = (From n In HeliosData.documentocompra
                      Where listaNotas.Contains(n.tipoCompra) And n.idPadre = intIdDocumentoCompra).Count

        If conteo > 1 Then
            Return True
        Else
            Return False
        End If

    End Function

    Public Function UbicarCompraPorProveedor(strEmpresa As String, intIdEstablecimiento As Integer, intIdProveedor As Integer) As List(Of documentocompra)
        Dim nDocumentoCompra As New documentocompra
        Dim ListaCompra As New List(Of documentocompra)

        Dim consulta = (From n In HeliosData.documentocompra
                        Join tbl In HeliosData.tabladetalle
                        On n.tipoDoc Equals tbl.codigoDetalle
                        Where n.idProveedor = intIdProveedor And tbl.idtabla = 10 _
                And n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento Select New With
                                                                                               {
                                                                                                   .Serie = n.serie,
                                                                                                   .Tipodoc = tbl.descripcion}).Distinct

        For Each i In consulta
            nDocumentoCompra = New documentocompra
            nDocumentoCompra.serie = i.Serie
            nDocumentoCompra.tipoDoc = i.Tipodoc & ", " & i.Serie
            ListaCompra.Add(nDocumentoCompra)
        Next
        Return ListaCompra
    End Function

    Public Function UbicarCompraPorProveedorSerie(strEmpresa As String, intIdEstablecimiento As Integer, intIdProveedor As Integer, strSerie As String) As List(Of documentocompra)
        Return (From n In HeliosData.documentocompra
                Where n.idProveedor = intIdProveedor And
                n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                And n.serie = strSerie Select n).ToList
    End Function

    Public Function UbicarCompraPorSerieNro(strEmpresa As String, intIdEstablecimiento As Integer, strSerie As String, strNumero As String, strRuc As String)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)
        list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)
        list.Add(TIPO_COMPRA.COMPRA_AL_CREDITO)
        list.Add(TIPO_COMPRA.COMPRA_AL_CREDITO_CON_RECEPCION)
        Dim consulta = (From n In HeliosData.documentocompra
                        Join ent In HeliosData.entidad
                On n.idProveedor Equals ent.idEntidad
                        Join tbl In HeliosData.tabladetalle
                On n.tipoDoc Equals tbl.codigoDetalle
                        Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                And n.serie = strSerie And
                n.numeroDoc = strNumero And ent.nrodoc = strRuc And ent.tipoEntidad = "PR" _
                And list.Contains(n.tipoCompra) And tbl.idtabla = 10).ToList

        For Each i In consulta
            doccompra = New documentocompra
            doccompra.idDocumento = i.n.idDocumento
            doccompra.fechaDoc = i.n.fechaDoc
            doccompra.serie = i.n.serie
            doccompra.numeroDoc = String.Concat(i.tbl.descripcion.Substring(0, 3), ":", i.n.serie, "-", i.n.numeroDoc)
            doccompra.tipoDoc = i.n.tipoDoc
            doccompra.nombreEstablecimiento = i.tbl.descripcion
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function UbicarCompraPorProveedorXperiodo(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, strPeriodo As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)


        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        'Dim consulta = (From n In HeliosData.documentocompra _
        '        Join ent In HeliosData.entidad _
        '        On n.idProveedor Equals ent.idEntidad _
        '        Join tbl In HeliosData.tabladetalle _
        '        On n.tipoDoc Equals tbl.codigoDetalle _
        '        Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
        '        And ent.nrodoc = strRuc And ent.tipoEntidad = "PR" _
        '        And list.Contains(n.tipoCompra) And tbl.idtabla = 10 And _
        '        listaTipoSituacion.Contains(n.situacion) And _
        '        n.fechaContable = strPeriodo Order By n.fechaDoc).ToList


        Dim con = (From c In HeliosData.documentocompra
                   Join ent In HeliosData.entidad
                On c.idProveedor Equals ent.idEntidad
                   Join tbl In HeliosData.tabladetalle
                On c.tipoDoc Equals tbl.codigoDetalle
                   Where
                 (New String() {"CMP", "CSP", "CRH", "CVO", "CVR"}).Contains(c.tipoCompra) And
                  c.idEmpresa = strEmpresa And c.idCentroCosto = intIdEstablecimiento _
                And ent.nrodoc = strRuc And ent.tipoEntidad = "PR" _
                And list.Contains(c.tipoCompra) And tbl.idtabla = 10 And
                c.fechaContable = strPeriodo
                   Select
                 tbl.descripcion,
                 c.idDocumento,
                 c.tipoCompra,
                 c.fechaContable,
                 c.fechaDoc,
                 c.serie,
                 c.numeroDoc,
                 c.tipoDoc,
                 c.monedaDoc,
                 c.importeTotal,
                 c.tcDolLoc,
                 c.importeUS,
                 c.estadoPago,
                Conteo = ((Aggregate t1 In
                        (From cro In HeliosData.Cronograma
                         Where
                        cro.idDocumentoRef = c.idDocumento And
                        cro.estado = "PN"
                         Select New With {
                         cro
                      }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoCompra
            doccompra.fechaContable = i.fechaContable
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDoc
            doccompra.monedaDoc = i.monedaDoc
            doccompra.nombreEstablecimiento = i.descripcion
            doccompra.importeTotal = i.importeTotal
            doccompra.importeUS = i.importeUS
            doccompra.conteoCuotas = i.Conteo
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function
    'Public Function UbicarCompraPorProveedorXperiodo(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, strPeriodo As String) As List(Of documentocompra)
    '    Dim doccompra As New documentocompra
    '    Dim compraLista As New List(Of documentocompra)
    '    Dim list As New List(Of String)
    '    Dim listaTipoSituacion As New List(Of String)
    '    'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
    '    'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)
    '    listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
    '    listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
    '    listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)



    '    list.Add(TIPO_COMPRA.COMPRA)
    '    list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
    '    list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
    '    'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
    '    list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
    '    list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

    '    Dim consulta = (From n In HeliosData.documentocompra
    '                    Join ent In HeliosData.entidad
    '            On n.idProveedor Equals ent.idEntidad
    '                    Join tbl In HeliosData.tabladetalle
    '            On n.tipoDoc Equals tbl.codigoDetalle
    '                    Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
    '            And ent.nrodoc = strRuc And ent.tipoEntidad = "PR" _
    '            And list.Contains(n.tipoCompra) And tbl.idtabla = 10 And
    '            listaTipoSituacion.Contains(n.situacion) And
    '            n.fechaContable = strPeriodo Order By n.fechaDoc).ToList

    '    For Each i In consulta
    '        doccompra = New documentocompra
    '        doccompra.idDocumento = i.n.idDocumento
    '        doccompra.tipoCompra = i.n.tipoCompra
    '        doccompra.fechaContable = i.n.fechaContable
    '        doccompra.fechaDoc = i.n.fechaDoc
    '        doccompra.serie = i.n.serie
    '        doccompra.numeroDoc = i.n.numeroDoc
    '        doccompra.tipoDoc = i.n.tipoDoc
    '        doccompra.monedaDoc = i.n.monedaDoc
    '        doccompra.nombreEstablecimiento = i.tbl.descripcion
    '        doccompra.importeTotal = i.n.importeTotal
    '        doccompra.importeUS = i.n.importeUS
    '        compraLista.Add(doccompra)
    '    Next
    '    Return compraLista
    'End Function

    Public Function GetConsultaCuentasPorpagar(be As documentocompra) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim lista As New List(Of documentocompra)
        'c.fechaContable = be.fechaContable _
        Dim con = (From c In HeliosData.documentocompra
                   Join prov In HeliosData.entidad
                           On prov.idEntidad Equals c.idProveedor
                   Where
                  (New String() {"CVR", "CMP", "CSP", "CRH", "APT"}).Contains(c.tipoCompra) And
                   c.idEmpresa = be.idEmpresa And c.idCentroCosto = be.idCentroCosto _
                       And c.idProveedor = be.idProveedor _
                       And c.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                       And c.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                       And c.monedaDoc = be.monedaDoc _
                       And c.estadoPago <> "ANU"
                   Select
                  c.idDocumento,
                       c.idProveedor,
                       prov.nombreCompleto,
                       prov.nrodoc,
                  c.tipoCompra,
                  c.fechaContable,
                  c.fechaDoc,
                  c.serie,
                  c.numeroDoc,
                  c.tipoDoc,
                  c.monedaDoc,
                  c.importeTotal,
                  c.tcDolLoc,
                  c.importeUS,
                  c.estadoPago,
                  PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra <> "EXD"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       Exedentes = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "EXD"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentocompra
                                                 Where
                                                 (New String() {"08", "88", "40"}).Contains(Documentocompra.tipoDoc) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.importeTotal
                                                 }) Into Sum(t1.importeTotal)), Decimal?)),
                             Conteo = ((Aggregate t1 In
                                        (From cro In HeliosData.Cronograma
                                         Where
                                         cro.idDocumentoRef = c.idDocumento And
                                         cro.estado = "PN"
                                         Select New With {
                                                cro
                                         }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoCompra
            doccompra.fechaContable = i.fechaContable
            doccompra.fechaDoc = i.fechaDoc
            doccompra.idProveedor = i.idProveedor
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDoc
            doccompra.monedaDoc = i.monedaDoc
            doccompra.importeTotal = i.importeTotal
            doccompra.tcDolLoc = i.tcDolLoc
            doccompra.importeUS = i.importeUS
            doccompra.estadoPago = i.estadoPago
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Function GetConsultaCuentasPorpagarTodosProveedores(be As documentocompra) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim lista As New List(Of documentocompra)
        'c.fechaContable = be.fechaContable _
        Dim con = (From c In HeliosData.documentocompra
                   Join prov In HeliosData.entidad
                       On prov.idEntidad Equals c.idProveedor
                   Where
                  (New String() {"CVR", "CMP", "CSP", "CRH", "APT"}).Contains(c.tipoCompra) And
                   c.idEmpresa = be.idEmpresa And c.idCentroCosto = be.idCentroCosto _
                       And c.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                       And c.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                       And c.monedaDoc = be.monedaDoc _
                       And c.estadoPago <> "ANU" _
                       And c.estadoPago = be.estadoPago 'TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                   Select
                       c.idDocumento,
                       c.idProveedor,
                       prov.nombreCompleto,
                       prov.nrodoc,
                       c.tipoCompra,
                       c.fechaContable,
                       c.fechaDoc,
                       c.serie,
                       c.numeroDoc,
                       c.tipoDoc,
                       c.monedaDoc,
                       c.importeTotal,
                       c.tcDolLoc,
                       c.importeUS,
                       c.estadoPago,
                  PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra <> "EXD"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       Exedentes = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "EXD"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentocompra
                                                 Where
                                                 (New String() {"08", "88", "40"}).Contains(Documentocompra.tipoDoc) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.importeTotal
                                                 }) Into Sum(t1.importeTotal)), Decimal?)),
                       CompensacionAntRec = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentoAnticipoConciliacionCompra
                                                 Where
                                                 Documentocompra.idDocumentoPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.importe
                                                 }) Into Sum(t1.importe)), Decimal?))).ToList
        'Conteo = ((Aggregate t1 In
        '           (From cro In HeliosData.Cronograma
        '            Where
        '            cro.idDocumentoRef = c.idDocumento And
        '            cro.estado = "PN"
        '            Select New With {
        '                   cro
        '            }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.idProveedor = i.idProveedor
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.tipoCompra = i.tipoCompra
            doccompra.fechaContable = i.fechaContable
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDoc
            doccompra.monedaDoc = i.monedaDoc
            doccompra.importeTotal = i.importeTotal
            doccompra.tcDolLoc = i.tcDolLoc
            doccompra.importeUS = i.importeUS
            doccompra.estadoPago = i.estadoPago
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault + i.CompensacionAntRec.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            doccompra.conteoCuotas = 0 'i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Function GetCuentasPorpagarProveedorPendientes(be As documentocompra) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim lista As New List(Of documentocompra)
        'c.fechaContable = be.fechaContable _
        Dim con = (From c In HeliosData.documentocompra
                   Join prov In HeliosData.entidad
                       On prov.idEntidad Equals c.idProveedor
                   Where
                  (New String() {"CVR", "CMP", "CSP", "CRH", "APT"}).Contains(c.tipoCompra) And
                   c.idEmpresa = be.idEmpresa And
                       c.idCentroCosto = be.idCentroCosto _
                       And c.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                       And c.monedaDoc = be.monedaDoc _
                       And c.idProveedor = be.idProveedor _
                       And c.estadoPago <> "ANU" _
                       And c.estadoPago = be.estadoPago 'TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                   Select
                       c.idDocumento,
                       c.idProveedor,
                       prov.nombreCompleto,
                       prov.nrodoc,
                       c.tipoCompra,
                       c.fechaContable,
                       c.fechaDoc,
                       c.serie,
                       c.numeroDoc,
                       c.tipoDoc,
                       c.monedaDoc,
                       c.importeTotal,
                       c.tcDolLoc,
                       c.importeUS,
                       c.estadoPago,
                  PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                PagoNotaCredito = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra <> "EXD"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       Exedentes = (CType((Aggregate t1 In
                                          (From Documentocompra In HeliosData.documentocompra
                                           Where
                                           (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                           Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "EXD"
                                           Select New With {
                                               Documentocompra.importeTotal
                                           }) Into Sum(t1.importeTotal)), Decimal?)),
                       PagoNotaDebito = (CType((Aggregate t1 In
                                                (From Documentocompra In HeliosData.documentocompra
                                                 Where
                                                 (New String() {"08", "88", "40"}).Contains(Documentocompra.tipoDoc) And
                                                 Documentocompra.idPadre = c.idDocumento
                                                 Select New With {
                                                     Documentocompra.importeTotal
                                                 }) Into Sum(t1.importeTotal)), Decimal?)),
                             Conteo = ((Aggregate t1 In
                                        (From cro In HeliosData.Cronograma
                                         Where
                                         cro.idDocumentoRef = c.idDocumento And
                                         cro.estado = "PN"
                                         Select New With {
                                                cro
                                         }) Into Count()))).ToList


        For Each i In con
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.idProveedor = i.idProveedor
            doccompra.NombreEntidad = i.nombreCompleto
            doccompra.NroDocEntidad = i.nrodoc
            doccompra.tipoCompra = i.tipoCompra
            doccompra.fechaContable = i.fechaContable
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDoc
            doccompra.monedaDoc = i.monedaDoc
            doccompra.importeTotal = i.importeTotal
            doccompra.tcDolLoc = i.tcDolLoc
            doccompra.importeUS = i.importeUS
            doccompra.estadoPago = i.estadoPago
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    'Public Function GetCuentasPorpagarAnualPersona(be As documentocompra) As List(Of documentocompra)
    '    Dim doccompra As New documentocompra
    '    Dim lista As New List(Of documentocompra)
    '    'c.fechaContable = be.fechaContable _
    '    Dim con = (From c In HeliosData.documentocompra
    '               Join prov In HeliosData.entidad
    '                   On prov.idEntidad Equals c.idProveedor
    '               Where
    '              (New String() {"CVR", "CMP", "CSP", "CRH", "APT"}).Contains(c.tipoCompra) And
    '               c.idEmpresa = be.idEmpresa And c.idCentroCosto = be.idCentroCosto _
    '                   And c.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
    '                   And c.monedaDoc = be.monedaDoc _
    '                   And c.estadoPago <> "ANU" _
    '                   And c.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
    '               Select
    '                   prov.idEntidad,
    '                   prov.nombreCompleto,
    '                   prov.nrodoc,
    '                   c.tipoCompra,
    '                   c.monedaDoc,
    '                   c.importeTotal,
    '              PagosMN = (CType((Aggregate t1 In
    '                                (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
    '                                 Where
    '                                 DocumentoCajaDetalle.documentoAfectado = c.idDocumento
    '                                 Select New With {
    '                                     DocumentoCajaDetalle.montoSoles
    '                                 }) Into Sum(t1.montoSoles)), Decimal?)),
    '             PagosME = (CType((Aggregate t1 In
    '                               (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
    '                                Where
    '                                DocumentoCajaDetalle.documentoAfectado = c.idDocumento
    '                                Select New With {
    '                                    DocumentoCajaDetalle.montoUsd
    '                                }) Into Sum(t1.montoUsd)), Decimal?)),
    '            PagoNotaCredito = (CType((Aggregate t1 In
    '                                      (From Documentocompra In HeliosData.documentocompra
    '                                       Where
    '                                       (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
    '                                       Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra <> "EXD"
    '                                       Select New With {
    '                                           Documentocompra.importeTotal
    '                                       }) Into Sum(t1.importeTotal)), Decimal?)),
    '                   Exedentes = (CType((Aggregate t1 In
    '                                      (From Documentocompra In HeliosData.documentocompra
    '                                       Where
    '                                       (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
    '                                       Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "EXD"
    '                                       Select New With {
    '                                           Documentocompra.importeTotal
    '                                       }) Into Sum(t1.importeTotal)), Decimal?)),
    '                   PagoNotaDebito = (CType((Aggregate t1 In
    '                                            (From Documentocompra In HeliosData.documentocompra
    '                                             Where
    '                                             (New String() {"08", "88", "40"}).Contains(Documentocompra.tipoDoc) And
    '                                             Documentocompra.idPadre = c.idDocumento
    '                                             Select New With {
    '                                                 Documentocompra.importeTotal
    '                                             }) Into Sum(t1.importeTotal)), Decimal?)),
    '                         Conteo = ((Aggregate t1 In
    '                                    (From cro In HeliosData.Cronograma
    '                                     Where
    '                                     cro.idDocumentoRef = c.idDocumento And
    '                                     cro.estado = "PN"
    '                                     Select New With {
    '                                            cro
    '                                     }) Into Count()))).ToList


    '    For Each i In con
    '        doccompra = New documentocompra
    '        doccompra.idDocumento = i.idDocumento
    '        doccompra.idProveedor = i.idProveedor
    '        doccompra.NombreEntidad = i.nombreCompleto
    '        doccompra.NroDocEntidad = i.nrodoc
    '        doccompra.tipoCompra = i.tipoCompra
    '        doccompra.fechaContable = i.fechaContable
    '        doccompra.fechaDoc = i.fechaDoc
    '        doccompra.serie = i.serie
    '        doccompra.numeroDoc = i.numeroDoc
    '        doccompra.tipoDoc = i.tipoDoc
    '        doccompra.monedaDoc = i.monedaDoc
    '        doccompra.importeTotal = i.importeTotal
    '        doccompra.tcDolLoc = i.tcDolLoc
    '        doccompra.importeUS = i.importeUS
    '        doccompra.estadoPago = i.estadoPago
    '        doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
    '        doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
    '        doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
    '        doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
    '        doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
    '        doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
    '        doccompra.conteoCuotas = i.Conteo
    '        lista.Add(doccompra)
    '    Next


    '    Return lista
    'End Function

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="be">IdDocumento|Estado Pago</param>
    ''' <returns></returns>
    Public Function GetPagosByDocumento(be As documentocompra) As List(Of documentocompradetalle)
        Dim doccompra As New documentocompradetalle
        Dim lista As New List(Of documentocompradetalle)

        Dim listaNC As New List(Of String)
        listaNC.Add("07")
        listaNC.Add("87")

        'c.fechaContable = be.fechaContable _
        Dim con = (From c In HeliosData.documentocompradetalle
                   Join prod In HeliosData.detalleitems
                       On prod.codigodetalle Equals c.idItem
                   Where
                       c.idDocumento = be.idDocumento _
                       And c.estadoPago <> "ANU" _
                       And c.estadoPago = be.estadoPago
                   Select
                       c.secuencia,
                       c.idDocumento,
                       prod.codigodetalle,
                       prod.descripcionItem,
                       prod.unidad1,
                       c.importe,
                       c.importeUS,
                       c.ItemEntregadototal,
                       c.estadoPago,
                  PagosMN = (CType((Aggregate t1 In
                                    (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                     Where
                                     DocumentoCajaDetalle.documentoAfectado = c.idDocumento And
                                         DocumentoCajaDetalle.documentoAfectadodetalle = c.secuencia
                                     Select New With {
                                         DocumentoCajaDetalle.montoSoles
                                     }) Into Sum(t1.montoSoles)), Decimal?)),
                 PagosME = (CType((Aggregate t1 In
                                   (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                    Where
                                    DocumentoCajaDetalle.documentoAfectado = c.idDocumento And
                                         DocumentoCajaDetalle.documentoAfectadodetalle = c.secuencia
                                    Select New With {
                                        DocumentoCajaDetalle.montoUsd
                                    }) Into Sum(t1.montoUsd)), Decimal?)),
                       NotaCreMN = (CType((Aggregate t1 In
                                    (From DocumentoDet In HeliosData.documentocompradetalle
                                     Join Documento In HeliosData.documentocompra
                                     On DocumentoDet.idDocumento Equals Documento.idDocumento
                                     Where
                                     Documento.idPadre = c.idDocumento And
                                     DocumentoDet.idPadreDTCompra = c.secuencia _
                                         And Not Documento.tipoCompra = "EXD" _
                                         And listaNC.Contains(Documento.tipoDoc)
                                     Select New With {
                                         DocumentoDet.importe
                                     }) Into Sum(t1.importe)), Decimal?)),
                NotaCreME = (CType((Aggregate t1 In
                                    (From DocumentoDet In HeliosData.documentocompradetalle
                                     Join Documento In HeliosData.documentocompra
                                     On DocumentoDet.idDocumento Equals Documento.idDocumento
                                     Where
                                     Documento.idPadre = c.idDocumento And
                                     DocumentoDet.idPadreDTCompra = c.secuencia _
                                         And Not Documento.tipoCompra = "EXD" _
                                         And listaNC.Contains(Documento.tipoDoc)
                                     Select New With {
                                         DocumentoDet.importeUS
                                     }) Into Sum(t1.importeUS)), Decimal?))).ToList


        For Each i In con
            doccompra = New documentocompradetalle
            doccompra.idDocumento = i.idDocumento
            doccompra.secuencia = i.secuencia
            doccompra.idItem = i.codigodetalle
            doccompra.descripcionItem = i.descripcionItem
            doccompra.unidad1 = i.unidad1
            doccompra.importe = i.importe - i.PagosMN.GetValueOrDefault - i.NotaCreMN.GetValueOrDefault
            doccompra.importeUS = i.importeUS - i.PagosME.GetValueOrDefault - i.NotaCreME.GetValueOrDefault
            doccompra.estadoPago = i.estadoPago
            doccompra.ItemEntregadototal = i.ItemEntregadototal
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            'doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
            'doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            'doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            'doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            'doccompra.conteoCuotas = i.Conteo
            lista.Add(doccompra)
        Next


        Return lista
    End Function

    Public Function GetComprasPorPagarOpcion(be As documentocompra, opcion As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim lista As New List(Of documentocompra)
        'c.fechaContable = be.fechaContable _
        Select Case opcion
            Case "0-30"

                'Consulta de 1 a 30 dias
                Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))

                Dim con = (From c In HeliosData.documentocompra
                           Join prov In HeliosData.entidad
                               On prov.idEntidad Equals c.idProveedor
                           Where
                               (New String() {"CVR", "CMP", "CSP", "CRH", "APT"}).Contains(c.tipoCompra) And
                               c.fechaDoc >= s And
                               c.fechaDoc <= addDay And
                               c.idEmpresa = be.idEmpresa And c.idCentroCosto = be.idCentroCosto _
                               And c.monedaDoc = be.monedaDoc _
                               And c.estadoPago <> "ANU" And
                               c.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                           Select
                               c.idDocumento,
                               c.idProveedor,
                               prov.nombreCompleto,
                               prov.nrodoc,
                               c.tipoCompra,
                               c.fechaContable,
                               c.fechaDoc,
                               c.serie,
                               c.numeroDoc,
                               c.tipoDoc,
                               c.monedaDoc,
                               c.importeTotal,
                               c.tcDolLoc,
                               c.importeUS,
                               c.estadoPago,
                          PagosMN = (CType((Aggregate t1 In
                                            (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                             Where
                                             DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                             Select New With {
                                                 DocumentoCajaDetalle.montoSoles
                                             }) Into Sum(t1.montoSoles)), Decimal?)),
                         PagosME = (CType((Aggregate t1 In
                                           (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                            Where
                                            DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                            Select New With {
                                                DocumentoCajaDetalle.montoUsd
                                            }) Into Sum(t1.montoUsd)), Decimal?)),
                        PagoNotaCredito = (CType((Aggregate t1 In
                                                  (From Documentocompra In HeliosData.documentocompra
                                                   Where
                                                   (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                                   Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra <> "EXD"
                                                   Select New With {
                                                       Documentocompra.importeTotal
                                                   }) Into Sum(t1.importeTotal)), Decimal?)),
                               Exedentes = (CType((Aggregate t1 In
                                                  (From Documentocompra In HeliosData.documentocompra
                                                   Where
                                                   (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                                   Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "EXD"
                                                   Select New With {
                                                       Documentocompra.importeTotal
                                                   }) Into Sum(t1.importeTotal)), Decimal?)),
                               PagoNotaDebito = (CType((Aggregate t1 In
                                                        (From Documentocompra In HeliosData.documentocompra
                                                         Where
                                                         (New String() {"08", "88", "40"}).Contains(Documentocompra.tipoDoc) And
                                                         Documentocompra.idPadre = c.idDocumento
                                                         Select New With {
                                                             Documentocompra.importeTotal
                                                         }) Into Sum(t1.importeTotal)), Decimal?)),
                                     Conteo = ((Aggregate t1 In
                                                (From cro In HeliosData.Cronograma
                                                 Where
                                                 cro.idDocumentoRef = c.idDocumento And
                                                 cro.estado = "PN"
                                                 Select New With {
                                                        cro
                                                 }) Into Count()))).ToList

                For Each i In con
                    doccompra = New documentocompra
                    doccompra.idDocumento = i.idDocumento
                    doccompra.idProveedor = i.idProveedor
                    doccompra.NombreEntidad = i.nombreCompleto
                    doccompra.NroDocEntidad = i.nrodoc
                    doccompra.tipoCompra = i.tipoCompra
                    doccompra.fechaContable = i.fechaContable
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.serie = i.serie
                    doccompra.numeroDoc = i.numeroDoc
                    doccompra.tipoDoc = i.tipoDoc
                    doccompra.monedaDoc = i.monedaDoc
                    doccompra.importeTotal = i.importeTotal
                    doccompra.tcDolLoc = i.tcDolLoc
                    doccompra.importeUS = i.importeUS
                    doccompra.estadoPago = i.estadoPago
                    doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
                    doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
                    doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
                    doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
                    doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
                    doccompra.conteoCuotas = i.Conteo
                    lista.Add(doccompra)
                Next
            Case "31-60"

                'Consulta de 31 a 60 dias
                Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))

                Dim s1 As DateTime = s.AddDays(CInt(1)) '31
                Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

                Dim con = (From c In HeliosData.documentocompra
                           Join prov In HeliosData.entidad
                               On prov.idEntidad Equals c.idProveedor
                           Where
                               (New String() {"CVR", "CMP", "CSP", "CRH", "APT"}).Contains(c.tipoCompra) And
                               c.fechaDoc >= s1 And
                               c.fechaDoc <= addDay30 And
                               c.idEmpresa = be.idEmpresa And c.idCentroCosto = be.idCentroCosto _
                               And c.monedaDoc = be.monedaDoc _
                               And c.estadoPago <> "ANU" And
                               c.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                           Select
                               c.idDocumento,
                               c.idProveedor,
                               prov.nombreCompleto,
                               prov.nrodoc,
                               c.tipoCompra,
                               c.fechaContable,
                               c.fechaDoc,
                               c.serie,
                               c.numeroDoc,
                               c.tipoDoc,
                               c.monedaDoc,
                               c.importeTotal,
                               c.tcDolLoc,
                               c.importeUS,
                               c.estadoPago,
                          PagosMN = (CType((Aggregate t1 In
                                            (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                             Where
                                             DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                             Select New With {
                                                 DocumentoCajaDetalle.montoSoles
                                             }) Into Sum(t1.montoSoles)), Decimal?)),
                         PagosME = (CType((Aggregate t1 In
                                           (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                            Where
                                            DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                            Select New With {
                                                DocumentoCajaDetalle.montoUsd
                                            }) Into Sum(t1.montoUsd)), Decimal?)),
                        PagoNotaCredito = (CType((Aggregate t1 In
                                                  (From Documentocompra In HeliosData.documentocompra
                                                   Where
                                                   (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                                   Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra <> "EXD"
                                                   Select New With {
                                                       Documentocompra.importeTotal
                                                   }) Into Sum(t1.importeTotal)), Decimal?)),
                               Exedentes = (CType((Aggregate t1 In
                                                  (From Documentocompra In HeliosData.documentocompra
                                                   Where
                                                   (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                                   Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "EXD"
                                                   Select New With {
                                                       Documentocompra.importeTotal
                                                   }) Into Sum(t1.importeTotal)), Decimal?)),
                               PagoNotaDebito = (CType((Aggregate t1 In
                                                        (From Documentocompra In HeliosData.documentocompra
                                                         Where
                                                         (New String() {"08", "88", "40"}).Contains(Documentocompra.tipoDoc) And
                                                         Documentocompra.idPadre = c.idDocumento
                                                         Select New With {
                                                             Documentocompra.importeTotal
                                                         }) Into Sum(t1.importeTotal)), Decimal?)),
                                     Conteo = ((Aggregate t1 In
                                                (From cro In HeliosData.Cronograma
                                                 Where
                                                 cro.idDocumentoRef = c.idDocumento And
                                                 cro.estado = "PN"
                                                 Select New With {
                                                        cro
                                                 }) Into Count()))).ToList

                For Each i In con
                    doccompra = New documentocompra
                    doccompra.idDocumento = i.idDocumento
                    doccompra.idProveedor = i.idProveedor
                    doccompra.NombreEntidad = i.nombreCompleto
                    doccompra.NroDocEntidad = i.nrodoc
                    doccompra.tipoCompra = i.tipoCompra
                    doccompra.fechaContable = i.fechaContable
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.serie = i.serie
                    doccompra.numeroDoc = i.numeroDoc
                    doccompra.tipoDoc = i.tipoDoc
                    doccompra.monedaDoc = i.monedaDoc
                    doccompra.importeTotal = i.importeTotal
                    doccompra.tcDolLoc = i.tcDolLoc
                    doccompra.importeUS = i.importeUS
                    doccompra.estadoPago = i.estadoPago
                    doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
                    doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
                    doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
                    doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
                    doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
                    doccompra.conteoCuotas = i.Conteo
                    lista.Add(doccompra)
                Next

            Case "61+mas"
                'Consulta de 61 a  mas dias
                Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))

                Dim s1 As DateTime = s.AddDays(CInt(1)) '31
                Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

                Dim s2 As DateTime = addDay30.AddDays(CInt(1)) '61
                Dim addDay90 As DateTime = addDay30.AddDays(CInt(30)) '90
                Dim addDay90Max As DateTime = New Date(be.fechaDoc.Value.Year, 12, 31)

                Dim con = (From c In HeliosData.documentocompra
                           Join prov In HeliosData.entidad
                               On prov.idEntidad Equals c.idProveedor
                           Where
                               (New String() {"CVR", "CMP", "CSP", "CRH", "APT"}).Contains(c.tipoCompra) And
                               c.fechaDoc >= s2 And
                               c.fechaDoc <= addDay90Max And
                               c.idEmpresa = be.idEmpresa And c.idCentroCosto = be.idCentroCosto _
                               And c.monedaDoc = be.monedaDoc _
                               And c.estadoPago <> "ANU" And
                               c.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                           Select
                               c.idDocumento,
                               c.idProveedor,
                               prov.nombreCompleto,
                               prov.nrodoc,
                               c.tipoCompra,
                               c.fechaContable,
                               c.fechaDoc,
                               c.serie,
                               c.numeroDoc,
                               c.tipoDoc,
                               c.monedaDoc,
                               c.importeTotal,
                               c.tcDolLoc,
                               c.importeUS,
                               c.estadoPago,
                          PagosMN = (CType((Aggregate t1 In
                                            (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                             Where
                                             DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                             Select New With {
                                                 DocumentoCajaDetalle.montoSoles
                                             }) Into Sum(t1.montoSoles)), Decimal?)),
                         PagosME = (CType((Aggregate t1 In
                                           (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                            Where
                                            DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                            Select New With {
                                                DocumentoCajaDetalle.montoUsd
                                            }) Into Sum(t1.montoUsd)), Decimal?)),
                        PagoNotaCredito = (CType((Aggregate t1 In
                                                  (From Documentocompra In HeliosData.documentocompra
                                                   Where
                                                   (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                                   Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra <> "EXD"
                                                   Select New With {
                                                       Documentocompra.importeTotal
                                                   }) Into Sum(t1.importeTotal)), Decimal?)),
                               Exedentes = (CType((Aggregate t1 In
                                                  (From Documentocompra In HeliosData.documentocompra
                                                   Where
                                                   (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                                   Documentocompra.idPadre = c.idDocumento And Documentocompra.tipoCompra = "EXD"
                                                   Select New With {
                                                       Documentocompra.importeTotal
                                                   }) Into Sum(t1.importeTotal)), Decimal?)),
                               PagoNotaDebito = (CType((Aggregate t1 In
                                                        (From Documentocompra In HeliosData.documentocompra
                                                         Where
                                                         (New String() {"08", "88", "40"}).Contains(Documentocompra.tipoDoc) And
                                                         Documentocompra.idPadre = c.idDocumento
                                                         Select New With {
                                                             Documentocompra.importeTotal
                                                         }) Into Sum(t1.importeTotal)), Decimal?)),
                                     Conteo = ((Aggregate t1 In
                                                (From cro In HeliosData.Cronograma
                                                 Where
                                                 cro.idDocumentoRef = c.idDocumento And
                                                 cro.estado = "PN"
                                                 Select New With {
                                                        cro
                                                 }) Into Count()))).ToList

                For Each i In con
                    doccompra = New documentocompra
                    doccompra.idDocumento = i.idDocumento
                    doccompra.idProveedor = i.idProveedor
                    doccompra.NombreEntidad = i.nombreCompleto
                    doccompra.NroDocEntidad = i.nrodoc
                    doccompra.tipoCompra = i.tipoCompra
                    doccompra.fechaContable = i.fechaContable
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.serie = i.serie
                    doccompra.numeroDoc = i.numeroDoc
                    doccompra.tipoDoc = i.tipoDoc
                    doccompra.monedaDoc = i.monedaDoc
                    doccompra.importeTotal = i.importeTotal
                    doccompra.tcDolLoc = i.tcDolLoc
                    doccompra.importeUS = i.importeUS
                    doccompra.estadoPago = i.estadoPago
                    doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
                    doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
                    doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
                    doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
                    doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
                    doccompra.conteoCuotas = i.Conteo
                    lista.Add(doccompra)
                Next
        End Select
        Return lista
    End Function

    Public Function GetAcumuladoCuentasPagarByAnio(be As documentocompra) As documentocompra
        Dim doccompra As New documentocompra

        Dim ObligacionsPorpagar = Aggregate c In HeliosData.documentocompra
                     Where
                     (New String() {"CVR", "CMP", "CSP", "CRH", "APT"}).Contains(c.tipoCompra) And
                     c.fechaDoc.Value.Year = be.fechaDoc.Value.Year And
                     c.idEmpresa = be.idEmpresa And
                     c.idCentroCosto = be.idCentroCosto And
                     c.monedaDoc = be.monedaDoc And
                     c.estadoPago <> "ANU" Into
                    SumaTotalPagos = Sum(CType(c.importeTotal, Decimal?))

        Dim abonados = Aggregate cajadet In HeliosData.documentoCajaDetalle
                          Join caja In HeliosData.documentoCaja
                              On caja.idDocumento Equals cajadet.idDocumento
                          Where caja.fechaProceso.Value.Year = be.fechaDoc.Value.Year And
                              caja.idEmpresa = be.idEmpresa And
                              caja.idEstablecimiento = be.idCentroCosto And
                              caja.tipoMovimiento = "PG" And
                              caja.movimientoCaja <> "CIE" And
                              caja.moneda = be.monedaDoc Into
                    SumaTotalAbonados = Sum(CType(cajadet.montoSoles, Decimal?))

        Dim pagosAbonados = 0
        If abonados IsNot Nothing Then
            pagosAbonados = abonados.GetValueOrDefault
        Else
            pagosAbonados = 0
        End If
        doccompra = New documentocompra
        doccompra.importeTotal = ObligacionsPorpagar.GetValueOrDefault ' i.GetValueOrDefault
        doccompra.PagoSumaMN = pagosAbonados
        'doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
        'doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
        'doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault - i.Exedentes.GetValueOrDefault
        'doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
        'doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
        'doccompra.PagoNotaDebitoME = 0 'i.PagoNotaDebitoME.GetValueOrDefault
        'doccompra.conteoCuotas = i.Conteo

        Return doccompra
    End Function


    'Public Function GetConsultaCuentasPorpagar(be As documentocompra) As List(Of documentocompra)
    '    Dim doccompra As New documentocompra
    '    Dim lista As New List(Of documentocompra)

    '    Dim con = (From c In HeliosData.documentocompra _
    '              Where _
    '              (New String() {"CMP", "CSP", "CRH", "APT"}).Contains(c.tipoCompra) And _
    '               c.idEmpresa = be.idEmpresa And c.idCentroCosto = be.idCentroCosto _
    '                   And c.idProveedor = be.idProveedor And c.fechaContable = be.fechaContable _
    '                   And c.monedaDoc = be.monedaDoc _
    '              Select _
    '              c.idDocumento, _
    '              c.tipoCompra, _
    '              c.fechaContable, _
    '              c.fechaDoc, _
    '              c.serie, _
    '              c.numeroDoc, _
    '              c.tipoDoc, _
    '              c.monedaDoc, _
    '              c.importeTotal, _
    '              c.tcDolLoc, _
    '              c.importeUS, _
    '              c.estadoPago, _
    '              PagosMN = (CType((Aggregate t1 In _
    '                                (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle _
    '                                 Where _
    '                                 DocumentoCajaDetalle.documentoAfectado = c.idDocumento _
    '                                 Select New With { _
    '                                     DocumentoCajaDetalle.montoSoles _
    '                                 }) Into Sum(t1.montoSoles)), Decimal?)), _
    '             PagosME = (CType((Aggregate t1 In _
    '                               (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle _
    '                                Where _
    '                                DocumentoCajaDetalle.documentoAfectado = c.idDocumento _
    '                                Select New With { _
    '                                    DocumentoCajaDetalle.montoUsd _
    '                                }) Into Sum(t1.montoUsd)), Decimal?)), _
    '            PagoNotaCredito = (CType((Aggregate t1 In _
    '                                      (From Documentocompra In HeliosData.documentocompra _
    '                                       Where _
    '                                       (New String() {"07", "87"}).Contains(Documentocompra.tipoDoc) And _
    '                                       Documentocompra.idPadre = c.idDocumento _
    '                                       Select New With { _
    '                                           Documentocompra.importeTotal _
    '                                       }) Into Sum(t1.importeTotal)), Decimal?)), _
    '                   PagoNotaDebito = (CType((Aggregate t1 In _
    '                                            (From Documentocompra In HeliosData.documentocompra _
    '                                             Where _
    '                                             (New String() {"08", "88"}).Contains(Documentocompra.tipoDoc) And _
    '                                             Documentocompra.idPadre = c.idDocumento _
    '                                             Select New With { _
    '                                                 Documentocompra.importeTotal _
    '                                             }) Into Sum(t1.importeTotal)), Decimal?)), _
    '                         Conteo = ((Aggregate t1 In
    '                                    (From cro In HeliosData.Cronograma _
    '                                     Where
    '                                     cro.idDocumentoRef = c.idDocumento And
    '                                     cro.estado = "PN"
    '                                     Select New With {
    '                                            cro
    '                                     }) Into Count()))).ToList


    '    For Each i In con
    '        doccompra = New documentocompra
    '        doccompra.idDocumento = i.idDocumento
    '        doccompra.tipoCompra = i.tipoCompra
    '        doccompra.fechaContable = i.fechaContable
    '        doccompra.fechaDoc = i.fechaDoc
    '        doccompra.serie = i.serie
    '        doccompra.numeroDoc = i.numeroDoc
    '        doccompra.tipoDoc = i.tipoDoc
    '        doccompra.monedaDoc = i.monedaDoc
    '        doccompra.importeTotal = i.importeTotal
    '        doccompra.tcDolLoc = i.tcDolLoc
    '        doccompra.importeUS = i.importeUS
    '        doccompra.estadoPago = i.estadoPago
    '        doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
    '        doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
    '        doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault
    '        doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
    '        doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
    '        doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
    '        doccompra.conteoCuotas = i.Conteo
    '        lista.Add(doccompra)
    '    Next


    '    Return lista
    'End Function

    Public Function UbicarCompraPorProveedorXperiodo2(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, strPeriodo As String, strMoneda As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add("APT")

        Dim consulta2 = (From n In HeliosData.documentocompra
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                       On n.idDocumento Equals cajadet.documentoAfectado
                       Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                       And n.idProveedor = strRuc And n.fechaContable = strPeriodo And list.Contains(n.tipoCompra) _
                       And n.monedaDoc = strMoneda
                         Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc,
                       n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                       n.importeUS, n.estadoPago Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .SumaTransMN = g.Sum(Function(o) (o.montoSolesTransacc)),
                                      .SumaPagoMN = g.Sum(Function(o) (o.montoSoles)),
                                       .SumaTransME = g.Sum(Function(o) (o.montoUsdTransacc)),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoVenta
            doccompra.fechaContable = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDocumento
            doccompra.monedaDoc = i.moneda
            doccompra.importeTotal = i.ImporteNacional
            doccompra.tcDolLoc = i.tipoCambio
            doccompra.importeUS = i.ImporteExtranjero
            doccompra.estadoPago = i.estadoCobro

            objitemsaldoant = docanti.ObtenerPagosAnticipoPorDocumento(i.idDocumento)

            Select Case i.moneda
                Case 1
                    doccompra.PagoSumaMN = CDec((i.SumaPagoMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")
                    doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
                Case 2
                    doccompra.PagoSumaMN = CDec((i.SumaPagoMN.GetValueOrDefault) + objitemsaldoant.MontoPagadoSoles).ToString("N2")
                    doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
            End Select

            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function GetResumenAnualCuentasPagar(be As documentocompra) As List(Of documentocompra)

        GetResumenAnualCuentasPagar = New List(Of documentocompra)

        'Consulta de 1 a 30 dias
        Dim s As New DateTime(be.fechaDoc.Value.Year, 1, 1)
        Dim addDay As DateTime = s.AddDays(CInt(30))

        '--------------------------- de 1 a 30 dias -------------------------------------------------------
        Dim consulta30 = (From n In HeliosData.documentocompra
                          Where
                             n.idEmpresa = be.idEmpresa And n.idCentroCosto = be.idCentroCosto And
                             n.tipoCompra = be.tipoCompra And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO And
                             n.tipoCompra = TIPO_COMPRA.COMPRA And
                             n.fechaDoc >= s _
                         And n.fechaDoc <= addDay).Count

        GetResumenAnualCuentasPagar.Add(New documentocompra With
                                  {
                                  .referenciaDestino = "0-30",
                                  .conteoCuotas = consulta30
                                  })

        '--------------------------- de 31 - 60 dias ---------------------------------------------------------
        Dim s1 As DateTime = s.AddDays(CInt(1)) '31
        Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

        Dim consulta31a60 = (From n In HeliosData.documentocompra
                             Where
                             n.idEmpresa = be.idEmpresa And n.idCentroCosto = be.idCentroCosto And
                             n.tipoCompra = be.tipoCompra And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO And
                                 n.tipoCompra = TIPO_COMPRA.COMPRA And
                             n.fechaDoc >= s1 _
                         And n.fechaDoc <= addDay30).Count

        GetResumenAnualCuentasPagar.Add(New documentocompra With
                                  {
                                  .referenciaDestino = "31-60",
                                  .conteoCuotas = consulta31a60
                                  })

        '--------------------------- de 61 - 90 dias ---------------------------------------------------------
        Dim s2 As DateTime = addDay30.AddDays(CInt(1)) '61
        Dim addDay90 As DateTime = addDay30.AddDays(CInt(30)) '90
        Dim addDay90Max As DateTime = New Date(be.fechaDoc.Value.Year, 12, 31)
        Dim consulta61a90 = (From n In HeliosData.documentocompra
                             Where
                             n.idEmpresa = be.idEmpresa And n.idCentroCosto = be.idCentroCosto And
                             n.tipoCompra = be.tipoCompra And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO And
                                 n.tipoCompra = TIPO_COMPRA.COMPRA And
                             n.fechaDoc >= s2 _
                         And n.fechaDoc <= addDay90Max).Count

        GetResumenAnualCuentasPagar.Add(New documentocompra With
                                  {
                                  .referenciaDestino = "61-mas",
                                  .conteoCuotas = consulta61a90
                                  })

        '--------------------------------- de 90 +dias--------------------------------------------------------
        'Dim s3 As DateTime = addDay90 '90
        'Dim addDay90Max As DateTime = New Date(be.fechaDoc.Value.Year, 12, 31) '90

        'Dim consulta90amas = (From n In HeliosData.documentocompra
        '                      Where
        '                     n.idEmpresa = be.idEmpresa And n.idCentroCosto = be.idCentroCosto And
        '                     n.tipoCompra = be.tipoCompra And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO And
        '                     n.fechaDoc >= s3 _
        '                 And n.fechaDoc <= addDay90Max).Count

        'GetResumenAnualCuentasPagar.Add(New documentocompra With
        '                          {
        '                          .referenciaDestino = "61-mas",
        '                          .conteoCuotas = consulta61a90
        '                          })
        'Dim consulta2 = (From n In HeliosData.documentocompra
        '                 Group Join cajadet In HeliosData.documentoCajaDetalle
        '                     On n.idDocumento Equals cajadet.documentoAfectado
        '                     Into ords = Group
        '                 From c In ords.DefaultIfEmpty
        '                 Where
        '                     n.idEmpresa = be.idEmpresa And n.idCentroCosto = be.idCentroCosto And
        '                     n.tipoCompra = be.tipoCompra And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO And
        '                     n.fechaDoc >= s _
        '                 And n.fechaDoc <= addDay
        '                 Group c By
        '                     n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, n.fechaVcto,
        '                     n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
        '                     n.importeUS, n.estadoPago Into g = Group
        '                 Select New With {
        '                      .idDocumento = idDocumento,
        '                      .tipoVenta = tipoCompra,
        '                      .fechaPeriodo = fechaContable,
        '                      .fechaDoc = fechaDoc,
        '                      .fechaVcto = fechaVcto,
        '                      .serie = serie,
        '                      .numeroDoc = numeroDoc,
        '                      .tipoDocumento = tipoDoc,
        '                      .moneda = monedaDoc,
        '                      .ImporteNacional = importeTotal,
        '                      .tipoCambio = tcDolLoc,
        '                      .ImporteExtranjero = importeUS,
        '                      .estadoCobro = estadoPago,
        '                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
        '                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).Count


    End Function

    Public Function GetCuentasXpagarPorFechaVencimiento(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, caso As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)
        Dim listaTipoSituacion As New List(Of String)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)
        list.Add(TIPO_COMPRA.COMPRA)

        Select Case caso
            Case "De 1 a 30 Días"
                Dim s As New DateTime(AnioGeneral, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))

                Dim consulta2 = (From n In HeliosData.documentocompra
                                 Group Join cajadet In HeliosData.documentoCajaDetalle
                                 On n.idDocumento Equals cajadet.documentoAfectado
                                 Into ords = Group
                                 From c In ords.DefaultIfEmpty
                                 Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                                 And n.idProveedor = strRuc And list.Contains(n.tipoCompra) _
                                 And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
                                 And n.fechaVcto >= s _
                                 And n.fechaVcto <= addDay
                                 Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, n.fechaVcto,
                                 n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                                 n.importeUS, n.estadoPago Into g = Group
                                 Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .fechaVcto = fechaVcto,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


                For Each i In consulta2
                    doccompra = New documentocompra
                    doccompra.idDocumento = i.idDocumento
                    doccompra.tipoCompra = i.tipoVenta
                    doccompra.fechaContable = i.fechaPeriodo
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.fechaVcto = i.fechaVcto
                    doccompra.serie = i.serie
                    doccompra.numeroDoc = i.numeroDoc
                    doccompra.tipoDoc = i.tipoDocumento
                    doccompra.monedaDoc = i.moneda
                    doccompra.importeTotal = i.ImporteNacional
                    doccompra.tcDolLoc = i.tipoCambio
                    doccompra.importeUS = i.ImporteExtranjero
                    doccompra.estadoPago = i.estadoCobro
                    doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault
                    compraLista.Add(doccompra)
                Next

            Case "De 31 a 60 Días"

                Dim s As New DateTime(AnioGeneral, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))
                Dim s1 As DateTime = s.AddDays(CInt(1)) '31
                Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

                Dim consulta2 = (From n In HeliosData.documentocompra
                                 Group Join cajadet In HeliosData.documentoCajaDetalle
                                 On n.idDocumento Equals cajadet.documentoAfectado
                                 Into ords = Group
                                 From c In ords.DefaultIfEmpty
                                 Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                                 And n.idProveedor = strRuc And list.Contains(n.tipoCompra) _
                                 And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
                                 And n.fechaVcto >= s1 _
                                 And n.fechaVcto <= addDay30
                                 Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, n.fechaVcto,
                                 n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                                 n.importeUS, n.estadoPago Into g = Group
                                 Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .fechaVcto = fechaVcto,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


                For Each i In consulta2
                    doccompra = New documentocompra
                    doccompra.idDocumento = i.idDocumento
                    doccompra.tipoCompra = i.tipoVenta
                    doccompra.fechaContable = i.fechaPeriodo
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.fechaVcto = i.fechaVcto
                    doccompra.serie = i.serie
                    doccompra.numeroDoc = i.numeroDoc
                    doccompra.tipoDoc = i.tipoDocumento
                    doccompra.monedaDoc = i.moneda
                    doccompra.importeTotal = i.ImporteNacional
                    doccompra.tcDolLoc = i.tipoCambio
                    doccompra.importeUS = i.ImporteExtranjero
                    doccompra.estadoPago = i.estadoCobro
                    doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault
                    compraLista.Add(doccompra)
                Next

            Case "De 61 a 90 Días"
                Dim s As New DateTime(AnioGeneral, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))
                Dim s1 As DateTime = s.AddDays(CInt(1)) '31
                Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

                Dim s2 As DateTime = addDay30.AddDays(CInt(1)) '61
                Dim addDay90 As DateTime = addDay30.AddDays(CInt(30)) '90

                Dim consulta2 = (From n In HeliosData.documentocompra
                                 Group Join cajadet In HeliosData.documentoCajaDetalle
                                 On n.idDocumento Equals cajadet.documentoAfectado
                                 Into ords = Group
                                 From c In ords.DefaultIfEmpty
                                 Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                                 And n.idProveedor = strRuc And list.Contains(n.tipoCompra) _
                                 And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
                                 And n.fechaVcto >= s2 _
                                 And n.fechaVcto <= addDay90
                                 Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, n.fechaVcto,
                                 n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                                 n.importeUS, n.estadoPago Into g = Group
                                 Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .fechaVcto = fechaVcto,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


                For Each i In consulta2
                    doccompra = New documentocompra
                    doccompra.idDocumento = i.idDocumento
                    doccompra.tipoCompra = i.tipoVenta
                    doccompra.fechaContable = i.fechaPeriodo
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.fechaVcto = i.fechaVcto
                    doccompra.serie = i.serie
                    doccompra.numeroDoc = i.numeroDoc
                    doccompra.tipoDoc = i.tipoDocumento
                    doccompra.monedaDoc = i.moneda
                    doccompra.importeTotal = i.ImporteNacional
                    doccompra.tcDolLoc = i.tipoCambio
                    doccompra.importeUS = i.ImporteExtranjero
                    doccompra.estadoPago = i.estadoCobro
                    doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault
                    compraLista.Add(doccompra)
                Next
            Case "De 90+ Días"

                Dim s As New DateTime(AnioGeneral, 1, 1)
                Dim addDay As DateTime = s.AddDays(CInt(30))
                Dim s1 As DateTime = s.AddDays(CInt(1)) '31
                Dim addDay30 As DateTime = addDay.AddDays(CInt(30)) '60

                Dim s2 As DateTime = addDay30.AddDays(CInt(1)) '61
                Dim addDay90 As DateTime = addDay30.AddDays(CInt(30)) '90

                Dim s3 As DateTime = addDay90 '90
                Dim addDay90Max As DateTime = New DateTime(AnioGeneral, 12, 31) '90


                Dim consulta2 = (From n In HeliosData.documentocompra
                                 Group Join cajadet In HeliosData.documentoCajaDetalle
                                 On n.idDocumento Equals cajadet.documentoAfectado
                                 Into ords = Group
                                 From c In ords.DefaultIfEmpty
                                 Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                                 And n.idProveedor = strRuc And list.Contains(n.tipoCompra) _
                                 And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
                                 And n.fechaVcto >= s3 _
                                 And n.fechaVcto <= addDay90Max
                                 Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, n.fechaVcto,
                                 n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                                 n.importeUS, n.estadoPago Into g = Group
                                 Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .fechaVcto = fechaVcto,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


                For Each i In consulta2
                    doccompra = New documentocompra
                    doccompra.idDocumento = i.idDocumento
                    doccompra.tipoCompra = i.tipoVenta
                    doccompra.fechaContable = i.fechaPeriodo
                    doccompra.fechaDoc = i.fechaDoc
                    doccompra.fechaVcto = i.fechaVcto
                    doccompra.serie = i.serie
                    doccompra.numeroDoc = i.numeroDoc
                    doccompra.tipoDoc = i.tipoDocumento
                    doccompra.monedaDoc = i.moneda
                    doccompra.importeTotal = i.ImporteNacional
                    doccompra.tcDolLoc = i.tipoCambio
                    doccompra.importeUS = i.ImporteExtranjero
                    doccompra.estadoPago = i.estadoCobro
                    doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault
                    doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault
                    compraLista.Add(doccompra)
                Next
        End Select

        Return compraLista
    End Function

    Public Function GetCuentasXpagarPorFechaPeriodo(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, strPeriodo As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)
        Dim listaTipoSituacion As New List(Of String)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)
        list.Add(TIPO_COMPRA.COMPRA)

        Dim consulta2 = (From n In HeliosData.documentocompra
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                                 On n.idDocumento Equals cajadet.documentoAfectado
                                 Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                                 And n.idProveedor = strRuc And list.Contains(n.tipoCompra) _
                                 And n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
                                 And n.fechaContable = strPeriodo
                         Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc, n.fechaVcto,
                                 n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                                 n.importeUS, n.estadoPago Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .fechaVcto = fechaVcto,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoVenta
            doccompra.fechaContable = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.fechaVcto = i.fechaVcto
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDocumento
            doccompra.monedaDoc = i.moneda
            doccompra.importeTotal = i.ImporteNacional
            doccompra.tcDolLoc = i.tipoCambio
            doccompra.importeUS = i.ImporteExtranjero
            doccompra.estadoPago = i.estadoCobro
            doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault
            compraLista.Add(doccompra)
        Next



        Return compraLista
    End Function

    Public Function UbicarNCreditoPorSerieNro(strEmpresa As String, intIdEstablecimiento As Integer, strSerie As String, strNumero As String, strRuc As String)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)
        list.Add(TIPO_COMPRA.NOTA_CREDITO)
        Dim consulta = (From n In HeliosData.documentocompra
                        Join ent In HeliosData.entidad
                On n.idProveedor Equals ent.idEntidad
                        Join tbl In HeliosData.tabladetalle
                On n.tipoDoc Equals tbl.codigoDetalle
                        Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                And n.serie = strSerie And
                n.numeroDoc = strNumero And ent.nrodoc = strRuc And ent.tipoEntidad = "PR" _
                And list.Contains(n.tipoCompra) And tbl.idtabla = 10).ToList

        For Each i In consulta
            doccompra = New documentocompra
            doccompra.idDocumento = i.n.idDocumento
            doccompra.fechaDoc = i.n.fechaDoc
            doccompra.serie = i.n.serie
            doccompra.numeroDoc = String.Concat(i.tbl.descripcion.Substring(0, 3), ":", i.n.serie, "-", i.n.numeroDoc)
            doccompra.tipoDoc = i.n.tipoDoc
            doccompra.nombreEstablecimiento = i.tbl.descripcion
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Sub Insert(ByVal documentocompraBE As documentocompra, intIdDocumento As Integer)
        Dim docCompra As New documentocompra
        Using ts As New TransactionScope
            docCompra.idDocumento = intIdDocumento
            docCompra.tipoOperacion = documentocompraBE.tipoOperacion
            docCompra.codigoLibro = documentocompraBE.codigoLibro
            docCompra.idEmpresa = documentocompraBE.idEmpresa
            docCompra.idCentroCosto = documentocompraBE.idCentroCosto
            docCompra.fechaDoc = documentocompraBE.fechaDoc
            docCompra.fechaLaboral = documentocompraBE.fechaLaboral
            docCompra.fechaVcto = documentocompraBE.fechaVcto
            docCompra.fechaContable = documentocompraBE.fechaContable
            docCompra.fechaConstancia = documentocompraBE.fechaConstancia
            docCompra.nroConstancia = documentocompraBE.nroConstancia
            docCompra.tipoDoc = documentocompraBE.tipoDoc
            docCompra.serie = documentocompraBE.serie
            docCompra.numeroDoc = documentocompraBE.numeroDoc
            docCompra.idProveedor = documentocompraBE.idProveedor
            docCompra.idPersona = documentocompraBE.idPersona
            docCompra.monedaDoc = documentocompraBE.monedaDoc
            docCompra.tasaIgv = documentocompraBE.tasaIgv
            docCompra.tcDolLoc = documentocompraBE.tcDolLoc
            docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
            docCompra.regimen = documentocompraBE.regimen
            docCompra.tasaRegimen = documentocompraBE.tasaRegimen
            docCompra.nroRegimen = documentocompraBE.nroRegimen
            docCompra.bi01 = documentocompraBE.bi01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.bi03 = documentocompraBE.bi03
            docCompra.bi04 = documentocompraBE.bi04
            docCompra.isc01 = documentocompraBE.isc01
            docCompra.isc02 = documentocompraBE.isc02
            docCompra.isc03 = documentocompraBE.isc03
            docCompra.igv01 = documentocompraBE.igv01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.igv03 = documentocompraBE.igv03
            docCompra.otc01 = documentocompraBE.bi02
            docCompra.otc02 = documentocompraBE.otc02
            docCompra.otc03 = documentocompraBE.otc03
            docCompra.otc04 = documentocompraBE.otc04
            docCompra.bi01us = documentocompraBE.bi01us
            docCompra.bi02us = documentocompraBE.bi02us
            docCompra.bi03us = documentocompraBE.bi03us
            docCompra.bi04us = documentocompraBE.bi04us
            docCompra.isc01us = documentocompraBE.isc01us
            docCompra.isc02us = documentocompraBE.isc01us
            docCompra.isc03us = documentocompraBE.isc03us
            docCompra.igv01us = documentocompraBE.igv01us
            docCompra.igv02us = documentocompraBE.igv02us
            docCompra.igv03us = documentocompraBE.igv03us
            docCompra.otc01us = documentocompraBE.otc01us
            docCompra.otc02us = documentocompraBE.otc02us
            docCompra.otc03us = documentocompraBE.otc03us
            docCompra.otc04us = documentocompraBE.otc04us
            docCompra.percepcion = documentocompraBE.percepcion
            docCompra.percepcionus = documentocompraBE.percepcionus
            docCompra.importeTotal = documentocompraBE.importeTotal
            docCompra.importeUS = documentocompraBE.importeUS
            docCompra.destino = documentocompraBE.destino
            docCompra.estadoPago = documentocompraBE.estadoPago
            docCompra.glosa = documentocompraBE.glosa
            docCompra.referenciaDestino = documentocompraBE.referenciaDestino
            docCompra.saldoMontoNota = documentocompraBE.saldoMontoNota
            docCompra.saldoMontoNotaUSD = documentocompraBE.saldoMontoNotaUSD
            docCompra.tipoCompra = documentocompraBE.tipoCompra
            docCompra.sustentado = documentocompraBE.sustentado
            docCompra.situacion = documentocompraBE.situacion
            docCompra.estadoEntrega = documentocompraBE.estadoEntrega
            docCompra.aprobado = documentocompraBE.aprobado
            docCompra.apruebaPago = documentocompraBE.apruebaPago
            Select Case documentocompraBE.tipoCompra
                Case TIPO_COMPRA.COMPRA_AL_CREDITO, TIPO_COMPRA.OTRAS_ENTRADAS, TIPO_COMPRA.COMPRA, "VRC", TIPO_VENTA.VENTA_NOTA_CREDITO_ANTICIPO
                    docCompra.idPadre = documentocompraBE.idPadre
                Case TIPO_COMPRA.ORDEN_COMPRA
                    docCompra.idPadre = documentocompraBE.idPadre
                Case TIPO_COMPRA.NOTA_CREDITO, TIPO_COMPRA.NOTA_DEBITO, TIPO_COMPRA.BONIFICACIONES_RECIBIDAS, TIPO_COMPRA.NOTA_DEBITO_DEVOLUCION, "COMP"
                    docCompra.idPadre = documentocompraBE.idPadre
            End Select

            docCompra.tieneDetraccion = documentocompraBE.tieneDetraccion
            docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
            docCompra.fechaActualizacion = documentocompraBE.fechaActualizacion

            HeliosData.documentocompra.Add(docCompra)
            HeliosData.SaveChanges()
            ts.Complete()
            '   documentocompraBE.idDocumento = docCompra.idDocumento
        End Using
    End Sub


    'Public Sub Insert(ByVal documentocompraBE As documentocompra, intIdDocumento As Integer)
    '    Dim docCompra As New documentocompra
    '    Using ts As New TransactionScope
    '        docCompra.idDocumento = intIdDocumento
    '        docCompra.codigoLibro = documentocompraBE.codigoLibro
    '        docCompra.idEmpresa = documentocompraBE.idEmpresa
    '        docCompra.idCentroCosto = documentocompraBE.idCentroCosto
    '        docCompra.fechaDoc = documentocompraBE.fechaDoc
    '        docCompra.fechaLaboral = documentocompraBE.fechaLaboral
    '        docCompra.fechaVcto = documentocompraBE.fechaVcto
    '        docCompra.fechaContable = documentocompraBE.fechaContable
    '        docCompra.fechaConstancia = documentocompraBE.fechaConstancia
    '        docCompra.nroConstancia = documentocompraBE.nroConstancia
    '        docCompra.tipoDoc = documentocompraBE.tipoDoc
    '        docCompra.serie = documentocompraBE.serie
    '        docCompra.numeroDoc = documentocompraBE.numeroDoc
    '        docCompra.idProveedor = documentocompraBE.idProveedor
    '        docCompra.idPersona = documentocompraBE.idPersona
    '        docCompra.monedaDoc = documentocompraBE.monedaDoc
    '        docCompra.tasaIgv = documentocompraBE.tasaIgv
    '        docCompra.tcDolLoc = documentocompraBE.tcDolLoc
    '        docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
    '        docCompra.regimen = documentocompraBE.regimen
    '        docCompra.tasaRegimen = documentocompraBE.tasaRegimen
    '        docCompra.nroRegimen = documentocompraBE.nroRegimen
    '        docCompra.bi01 = documentocompraBE.bi01
    '        docCompra.bi02 = documentocompraBE.bi02
    '        docCompra.bi03 = documentocompraBE.bi03
    '        docCompra.bi04 = documentocompraBE.bi04
    '        docCompra.isc01 = documentocompraBE.isc01
    '        docCompra.isc02 = documentocompraBE.isc02
    '        docCompra.isc03 = documentocompraBE.isc03
    '        docCompra.igv01 = documentocompraBE.igv01
    '        docCompra.bi02 = documentocompraBE.bi02
    '        docCompra.igv03 = documentocompraBE.igv03
    '        docCompra.otc01 = documentocompraBE.bi02
    '        docCompra.otc02 = documentocompraBE.otc02
    '        docCompra.otc03 = documentocompraBE.otc03
    '        docCompra.otc04 = documentocompraBE.otc04
    '        docCompra.bi01us = documentocompraBE.bi01us
    '        docCompra.bi02us = documentocompraBE.bi02us
    '        docCompra.bi03us = documentocompraBE.bi03us
    '        docCompra.bi04us = documentocompraBE.bi04us
    '        docCompra.isc01us = documentocompraBE.isc01us
    '        docCompra.isc02us = documentocompraBE.isc01us
    '        docCompra.isc03us = documentocompraBE.isc03us
    '        docCompra.igv01us = documentocompraBE.igv01us
    '        docCompra.igv02us = documentocompraBE.igv02us
    '        docCompra.igv03us = documentocompraBE.igv03us
    '        docCompra.otc01us = documentocompraBE.otc01us
    '        docCompra.otc02us = documentocompraBE.otc02us
    '        docCompra.otc03us = documentocompraBE.otc03us
    '        docCompra.otc04us = documentocompraBE.otc04us
    '        docCompra.percepcion = documentocompraBE.percepcion
    '        docCompra.percepcionus = documentocompraBE.percepcionus
    '        docCompra.importeTotal = documentocompraBE.importeTotal
    '        docCompra.importeUS = documentocompraBE.importeUS
    '        docCompra.destino = documentocompraBE.destino
    '        docCompra.estadoPago = documentocompraBE.estadoPago
    '        docCompra.glosa = documentocompraBE.glosa
    '        docCompra.referenciaDestino = documentocompraBE.referenciaDestino
    '        docCompra.saldoMontoNota = documentocompraBE.saldoMontoNota
    '        docCompra.saldoMontoNotaUSD = documentocompraBE.saldoMontoNotaUSD
    '        docCompra.tipoCompra = documentocompraBE.tipoCompra
    '        docCompra.sustentado = documentocompraBE.sustentado
    '        docCompra.situacion = documentocompraBE.situacion
    '        docCompra.estadoEntrega = documentocompraBE.estadoEntrega
    '        docCompra.aprobado = documentocompraBE.aprobado
    '        docCompra.apruebaPago = documentocompraBE.apruebaPago
    '        Select Case documentocompraBE.tipoCompra
    '            Case TIPO_COMPRA.COMPRA_AL_CREDITO, TIPO_COMPRA.OTRAS_ENTRADAS, TIPO_COMPRA.COMPRA
    '                docCompra.idPadre = documentocompraBE.idPadre
    '            Case TIPO_COMPRA.ORDEN_COMPRA
    '                docCompra.idPadre = documentocompraBE.idPadre
    '            Case TIPO_COMPRA.NOTA_CREDITO, TIPO_COMPRA.NOTA_DEBITO, TIPO_COMPRA.BONIFICACIONES_RECIBIDAS, TIPO_COMPRA.NOTA_DEBITO_DEVOLUCION, "COMP"
    '                docCompra.idPadre = documentocompraBE.idPadre
    '        End Select

    '        docCompra.tieneDetraccion = documentocompraBE.tieneDetraccion
    '        docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
    '        docCompra.fechaActualizacion = documentocompraBE.fechaActualizacion

    '        HeliosData.documentocompra.Add(docCompra)
    '        HeliosData.SaveChanges()
    '        ts.Complete()
    '        '   documentocompraBE.idDocumento = docCompra.idDocumento
    '    End Using
    'End Sub

    Public Sub InsertSolicitudCompra(ByVal documentocompraBE As documentocompra, intIdDocumento As Integer)
        Dim docCompra As New documentocompra
        Using ts As New TransactionScope
            docCompra.idDocumento = intIdDocumento
            docCompra.codigoLibro = documentocompraBE.codigoLibro
            docCompra.idEmpresa = documentocompraBE.idEmpresa
            docCompra.idCentroCosto = documentocompraBE.idCentroCosto
            docCompra.fechaDoc = documentocompraBE.fechaDoc
            docCompra.fechaVcto = documentocompraBE.fechaVcto
            docCompra.fechaContable = documentocompraBE.fechaContable
            docCompra.tipoDoc = documentocompraBE.tipoDoc
            docCompra.serie = documentocompraBE.serie
            docCompra.numeroDoc = documentocompraBE.numeroDoc
            docCompra.idPersona = documentocompraBE.idProveedor
            docCompra.monedaDoc = documentocompraBE.monedaDoc
            docCompra.tasaIgv = documentocompraBE.tasaIgv
            docCompra.tcDolLoc = documentocompraBE.tcDolLoc
            docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
            docCompra.regimen = documentocompraBE.regimen
            docCompra.tasaRegimen = documentocompraBE.tasaRegimen
            docCompra.nroRegimen = documentocompraBE.nroRegimen
            docCompra.bi01 = documentocompraBE.bi01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.bi03 = documentocompraBE.bi03
            docCompra.bi04 = documentocompraBE.bi04
            docCompra.isc01 = documentocompraBE.isc01
            docCompra.isc02 = documentocompraBE.isc02
            docCompra.isc03 = documentocompraBE.isc03
            docCompra.igv01 = documentocompraBE.igv01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.igv03 = documentocompraBE.igv03
            docCompra.otc01 = documentocompraBE.bi02
            docCompra.otc02 = documentocompraBE.otc02
            docCompra.otc03 = documentocompraBE.otc03
            docCompra.otc04 = documentocompraBE.otc04
            docCompra.bi01us = documentocompraBE.bi01us
            docCompra.bi02us = documentocompraBE.bi02us
            docCompra.bi03us = documentocompraBE.bi03us
            docCompra.bi04us = documentocompraBE.bi04us
            docCompra.isc01us = documentocompraBE.isc01us
            docCompra.isc02us = documentocompraBE.isc01us
            docCompra.isc03us = documentocompraBE.isc03us
            docCompra.igv01us = documentocompraBE.igv01us
            docCompra.igv02us = documentocompraBE.igv02us
            docCompra.igv03us = documentocompraBE.igv03us
            docCompra.otc01us = documentocompraBE.otc01us
            docCompra.otc02us = documentocompraBE.otc02us
            docCompra.otc03us = documentocompraBE.otc03us
            docCompra.otc04us = documentocompraBE.otc04us
            docCompra.importeTotal = documentocompraBE.importeTotal
            docCompra.importeUS = documentocompraBE.importeUS
            docCompra.destino = documentocompraBE.destino
            docCompra.estadoPago = documentocompraBE.estadoPago
            docCompra.glosa = documentocompraBE.glosa
            docCompra.referenciaDestino = documentocompraBE.referenciaDestino
            docCompra.saldoMontoNota = documentocompraBE.saldoMontoNota
            docCompra.saldoMontoNotaUSD = documentocompraBE.saldoMontoNotaUSD
            docCompra.tipoCompra = documentocompraBE.tipoCompra
            docCompra.sustentado = documentocompraBE.sustentado
            docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
            docCompra.fechaActualizacion = documentocompraBE.fechaActualizacion
            Select Case documentocompraBE.tipoCompra
                Case TIPO_COMPRA.COMPRA_AL_CREDITO
                    docCompra.idPadre = documentocompraBE.idPadre
                Case TIPO_COMPRA.ORDEN_COMPRA
                    docCompra.idPadre = documentocompraBE.idPadre
                Case TIPO_COMPRA.NOTA_CREDITO, TIPO_COMPRA.NOTA_DEBITO
                    docCompra.idPadre = documentocompraBE.idPadre
            End Select

            HeliosData.documentocompra.Add(docCompra)
            HeliosData.SaveChanges()
            ts.Complete()
            '   documentocompraBE.idDocumento = docCompra.idDocumento
        End Using
    End Sub

    Public Sub InsertProgramado(ByVal documentocompraBE As documentocompra, intIdDocumento As Integer)
        Dim docCompra As New documentocompra
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer
        Using ts As New TransactionScope
            docCompra.idDocumento = intIdDocumento
            docCompra.codigoLibro = documentocompraBE.codigoLibro
            docCompra.idEmpresa = documentocompraBE.idEmpresa
            docCompra.idCentroCosto = documentocompraBE.idCentroCosto
            docCompra.fechaDoc = documentocompraBE.fechaDoc
            docCompra.fechaVcto = documentocompraBE.fechaVcto
            docCompra.fechaContable = documentocompraBE.fechaContable
            docCompra.tipoDoc = documentocompraBE.tipoDoc
            docCompra.serie = documentocompraBE.serie
            cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(documentocompraBE.IdNumeracion))
            docCompra.numeroDoc = cval
            docCompra.idProveedor = documentocompraBE.idProveedor
            docCompra.idPersona = documentocompraBE.idPersona
            docCompra.monedaDoc = documentocompraBE.monedaDoc
            docCompra.tasaIgv = documentocompraBE.tasaIgv
            docCompra.tcDolLoc = documentocompraBE.tcDolLoc
            docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
            docCompra.regimen = documentocompraBE.regimen
            docCompra.tasaRegimen = documentocompraBE.tasaRegimen
            docCompra.nroRegimen = documentocompraBE.nroRegimen
            docCompra.bi01 = documentocompraBE.bi01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.bi03 = documentocompraBE.bi03
            docCompra.bi04 = documentocompraBE.bi04
            docCompra.isc01 = documentocompraBE.isc01
            docCompra.isc02 = documentocompraBE.isc02
            docCompra.isc03 = documentocompraBE.isc03
            docCompra.igv01 = documentocompraBE.igv01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.igv03 = documentocompraBE.igv03
            docCompra.otc01 = documentocompraBE.bi02
            docCompra.otc02 = documentocompraBE.otc02
            docCompra.otc03 = documentocompraBE.otc03
            docCompra.otc04 = documentocompraBE.otc04
            docCompra.bi01us = documentocompraBE.bi01us
            docCompra.bi02us = documentocompraBE.bi02us
            docCompra.bi03us = documentocompraBE.bi03us
            docCompra.bi04us = documentocompraBE.bi04us
            docCompra.isc01us = documentocompraBE.isc01us
            docCompra.isc02us = documentocompraBE.isc01us
            docCompra.isc03us = documentocompraBE.isc03us
            docCompra.igv01us = documentocompraBE.igv01us
            docCompra.igv02us = documentocompraBE.igv02us
            docCompra.igv03us = documentocompraBE.igv03us
            docCompra.otc01us = documentocompraBE.otc01us
            docCompra.otc02us = documentocompraBE.otc02us
            docCompra.otc03us = documentocompraBE.otc03us
            docCompra.otc04us = documentocompraBE.otc04us
            docCompra.importeTotal = documentocompraBE.importeTotal
            docCompra.importeUS = documentocompraBE.importeUS
            docCompra.destino = documentocompraBE.destino
            docCompra.estadoPago = documentocompraBE.estadoPago
            docCompra.glosa = documentocompraBE.glosa
            docCompra.referenciaDestino = documentocompraBE.referenciaDestino
            docCompra.saldoMontoNota = documentocompraBE.saldoMontoNota
            docCompra.saldoMontoNotaUSD = documentocompraBE.saldoMontoNotaUSD
            docCompra.tipoCompra = documentocompraBE.tipoCompra
            docCompra.sustentado = documentocompraBE.sustentado
            docCompra.situacion = documentocompraBE.situacion
            docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
            docCompra.fechaActualizacion = documentocompraBE.fechaActualizacion
            Select Case documentocompraBE.tipoCompra
                Case TIPO_COMPRA.COMPRA_AL_CREDITO
                    docCompra.idPadre = documentocompraBE.idPadre
                Case TIPO_COMPRA.ORDEN_COMPRA
                    docCompra.idPadre = documentocompraBE.idPadre
                Case TIPO_COMPRA.NOTA_CREDITO, TIPO_COMPRA.NOTA_DEBITO
                    docCompra.idPadre = documentocompraBE.idPadre
            End Select

            HeliosData.documentocompra.Add(docCompra)
            HeliosData.SaveChanges()
            ts.Complete()
            '   documentocompraBE.idDocumento = docCompra.idDocumento
        End Using
    End Sub

    Public Sub InsertAPORTE(ByVal documentocompraBE As documentocompra, intIdDocumento As Integer)
        Dim docCompra As New documentocompra
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer

        Using ts As New TransactionScope
            docCompra.idDocumento = intIdDocumento
            docCompra.codigoLibro = documentocompraBE.codigoLibro
            docCompra.idEmpresa = documentocompraBE.idEmpresa
            docCompra.idCentroCosto = documentocompraBE.idCentroCosto
            docCompra.fechaDoc = documentocompraBE.fechaDoc
            docCompra.fechaVcto = documentocompraBE.fechaVcto
            docCompra.fechaContable = documentocompraBE.fechaContable
            docCompra.tipoDoc = documentocompraBE.tipoDoc
            docCompra.serie = documentocompraBE.serie
            cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(documentocompraBE.IdNumeracion))

            docCompra.numeroDoc = CStr(cval)
            docCompra.idProveedor = documentocompraBE.idProveedor
            docCompra.idPersona = documentocompraBE.idPersona
            docCompra.monedaDoc = documentocompraBE.monedaDoc
            docCompra.tasaIgv = documentocompraBE.tasaIgv
            docCompra.tcDolLoc = documentocompraBE.tcDolLoc
            docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
            docCompra.regimen = documentocompraBE.regimen
            docCompra.tasaRegimen = documentocompraBE.tasaRegimen
            docCompra.nroRegimen = documentocompraBE.nroRegimen
            docCompra.bi01 = documentocompraBE.bi01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.bi03 = documentocompraBE.bi03
            docCompra.bi04 = documentocompraBE.bi04
            docCompra.isc01 = documentocompraBE.isc01
            docCompra.isc02 = documentocompraBE.isc02
            docCompra.isc03 = documentocompraBE.isc03
            docCompra.igv01 = documentocompraBE.igv01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.igv03 = documentocompraBE.igv03
            docCompra.otc01 = documentocompraBE.bi02
            docCompra.otc02 = documentocompraBE.otc02
            docCompra.otc03 = documentocompraBE.otc03
            docCompra.otc04 = documentocompraBE.otc04
            docCompra.bi01us = documentocompraBE.bi01us
            docCompra.bi02us = documentocompraBE.bi02us
            docCompra.bi03us = documentocompraBE.bi03us
            docCompra.bi04us = documentocompraBE.bi04us
            docCompra.isc01us = documentocompraBE.isc01us
            docCompra.isc02us = documentocompraBE.isc01us
            docCompra.isc03us = documentocompraBE.isc03us
            docCompra.igv01us = documentocompraBE.igv01us
            docCompra.igv02us = documentocompraBE.igv02us
            docCompra.igv03us = documentocompraBE.igv03us
            docCompra.otc01us = documentocompraBE.otc01us
            docCompra.otc02us = documentocompraBE.otc02us
            docCompra.otc03us = documentocompraBE.otc03us
            docCompra.otc04us = documentocompraBE.otc04us
            docCompra.importeTotal = documentocompraBE.importeTotal
            docCompra.importeUS = documentocompraBE.importeUS
            docCompra.destino = documentocompraBE.destino
            docCompra.estadoPago = documentocompraBE.estadoPago
            docCompra.glosa = documentocompraBE.glosa
            docCompra.referenciaDestino = documentocompraBE.referenciaDestino
            docCompra.saldoMontoNota = documentocompraBE.saldoMontoNota
            docCompra.saldoMontoNotaUSD = documentocompraBE.saldoMontoNotaUSD
            docCompra.tipoCompra = documentocompraBE.tipoCompra
            docCompra.sustentado = documentocompraBE.sustentado
            docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
            docCompra.fechaActualizacion = documentocompraBE.fechaActualizacion
            Select Case documentocompraBE.tipoCompra
                Case TIPO_COMPRA.COMPRA_AL_CREDITO
                    docCompra.idPadre = documentocompraBE.idPadre
                Case TIPO_COMPRA.ORDEN_COMPRA
                    docCompra.idPadre = documentocompraBE.idPadre
                Case TIPO_COMPRA.NOTA_CREDITO, TIPO_COMPRA.NOTA_DEBITO
                    docCompra.idPadre = documentocompraBE.idPadre
            End Select

            HeliosData.documentocompra.Add(docCompra)
            HeliosData.SaveChanges()
            ts.Complete()
            '   documentocompraBE.idDocumento = docCompra.idDocumento
        End Using
    End Sub

    Public Function SaveCompra(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen), Optional nDocumentoTributo As documento = Nothing) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim totalesBL As New totalesAlmacenBL

        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Select Case objDocumento.documentocompra.TipoConfiguracion
                        Case "M"
                            Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                        Case "P"
                            Me.InsertProgramado(objDocumento.documentocompra, objDocumento.idDocumento)
                    End Select
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            inventario.InsertAV(i, objDocumento)
                        End If
                    Next

                    asientoBL.SavebyGroupDoc(objDocumento)

                    If Not IsNothing(nDocumentoTributo.documentoObligacionTributaria) Then
                        DocumentoTributoBL.SaveObligacionDefaultCompra(nDocumentoTributo, objDocumento.idDocumento)
                    End If
                    totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                    'objTotalesAlmacen.GrabarEnCascada()

                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function SaveCompraAlCreditoConRecep(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen), objlistaPrecios As List(Of listadoPrecios), Optional nDocumentoTributo As documento = Nothing) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim precioV As New listadoPreciosBL
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Select Case objDocumento.documentocompra.TipoConfiguracion
                        Case "M"
                            Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                        Case "P"
                            Me.InsertProgramado(objDocumento.documentocompra, objDocumento.idDocumento)
                    End Select
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            inventario.InsertPagado(i, objDocumento)
                            If i.FlagModificaPrecioVenta = "S" Then
                                precioV.GrabarPrecioEntrada(i)
                            End If
                        End If
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)

                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If
                    If Not IsNothing(nDocumentoTributo.documentoObligacionTributaria) Then
                        DocumentoTributoBL.SaveObligacionDefaultCompra(nDocumentoTributo, objDocumento.idDocumento)
                    End If


                    'For Each items In objlistaPrecios
                    '    If (Not IsNothing(lista.ObtenerPrecioPorItem(items.idItem, items.idAlmacen))) Then
                    '        lista.Insert(items)
                    '    End If
                    'Next
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GrabarBonificaciones(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen)) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim guiaBL As New documentoGuiaBL
        Dim precioV As New listadoPreciosBL
        Dim cajaBL As New documentoCajaBL
        Dim cierreINVBL As New cierreinventarioBL
        Dim cierreInv As New cierreinventario
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        Dim codSecuenciaDetalle As Integer = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            i.secuencia = codSecuenciaDetalle
                            inventario.InsertPagado(i, objDocumento)
                        End If
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                    End If
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub ActualualizarCompraSingle(objDocumento As documento)
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim guiaBL As New documentoGuiaBL
        Dim precioV As New listadoPreciosBL
        Dim cajaBL As New documentoCajaBL
        Dim cierreINVBL As New cierreinventarioBL
        Dim cierreInv As New cierreinventario
        Dim totalesAlmacenBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Try
            Using ts As New TransactionScope()
                Dim codDocu As Integer = objDocumento.idDocumento
                DocumentoBL.Update(objDocumento)
                Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                compraDetalleBL.EliminarDetalleCompra(objDocumento.idDocumento)
                inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                guiaBL.EliminarGuiaGeneral(objDocumento.idDocumento)

                For Each i In objDocumento.documentocompra.documentocompradetalle

                    Dim be As documentocompradetalle = HeliosData.documentocompradetalle.Where(Function(o) o.secuencia = i.secuencia).FirstOrDefault
                    If Not IsNothing(be) Then
                        be.idCosto = Nothing
                        be.tipoCosto = Nothing
                    End If

                    Select Case i.Editable
                        Case "SI"
                            compraDetalleBL.Update(i, Nothing)
                        Case "NO"

                    End Select
                    Select Case i.Action
                        Case BaseBE.EntityAction.INSERT, BaseBE.EntityAction.UPDATE

                            If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                                If i.tipoExistencia <> "08" Then
                                    i.secuencia = i.secuencia
                                    inventario.InsertPagado(i, objDocumento)

                                    t = New totalesAlmacen
                                    t.idEmpresa = i.IdEmpresa
                                    t.idEstablecimiento = i.IdEstablecimiento
                                    t.idAlmacen = i.almacenRef  ' almacen de DESTINO
                                    t.origenRecaudo = i.destino
                                    t.idItem = i.idItem
                                    t.descripcion = i.descripcionItem
                                    t.tipoExistencia = i.tipoExistencia
                                    t.tipoCambio = 0
                                    t.idUnidad = i.unidad1
                                    t.cantidad = i.monto1
                                    t.importeSoles = i.montokardex
                                    t.importeDolares = i.montokardexUS
                                    t.usuarioActualizacion = i.usuarioModificacion
                                    t.fechaActualizacion = i.fechaModificacion
                                    totalesAlmacenBL.UpdateStock(t)
                                End If
                            End If
                        Case BaseBE.EntityAction.DELETE

                    End Select
                Next
                asientoBL.DeleteGroup(objDocumento.idDocumento)
                asientoBL.SavebyGroupDoc(objDocumento)

                If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                    guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                End If

                Dim consultaVentas = (From vt In HeliosData.documentoventaAbarrotesDet
                                      Join v In HeliosData.documentoventaAbarrotes
                       On vt.idDocumento Equals v.idDocumento
                                      Join cd In HeliosData.documentocompradetalle
                       On cd.idItem Equals vt.idItem
                                      Where cd.idDocumento = codDocu _
                       And v.fechaDoc >= cd.fechaEntrega).ToList

                For Each i In consultaVentas
                    i.v.notificacionAsiento = "S"
                Next
                'Dim be As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault

                'be.aprobado = "N"

                'eliminado costos referenciados
                recursoCostoBL.eliminarDetalleCostoByIdDocumento(objDocumento.idDocumento)

                HeliosData.SaveChanges()
                ts.Complete()

            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub


    Public Sub GrabarCuetasPorPagarApertura(be As List(Of documento))
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim asientoBL As New AsientoBL

        Try
            Using ts As New TransactionScope()

                For Each i In be
                    'If ValidarDocumentoNro(i.documentocompra) = True Then
                    DocumentoBL.Insert(i)
                    Dim codigoComprobante = i.idDocumento

                    Me.Insert(i.documentocompra, codigoComprobante)

                    For Each det In i.documentocompra.documentocompradetalle
                        compraDetalleBL.InsertSingle(det, codigoComprobante)
                    Next
                    'Else
                    '    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                    'End If
                Next
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function SaveCompraNuevoMetodoContado(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen)) As Integer
        Dim DocumentoBL As New documentoBL
        Dim listaAcurar As New List(Of totalesAlmacen)
        Dim almacenBL As New almacenBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim guiaBL As New documentoGuiaBL
        Dim cajaBL As New documentoCajaBL
        Dim loteBL As New recursoCostoLoteBL
        Dim codDoc As Object
        Try
            listaAcurar = New List(Of totalesAlmacen)
            Using ts As New TransactionScope()

                codDoc = CInt(SPK_InsertCompra(objDocumento))

                Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.almacenRef, n.tipoExistencia).Distinct.ToList


                For Each a In ListaArticulos
                    If (almacenBL.GetEsAlmacenVirtual(a.almacenRef) = False) Then
                        listaAcurar = inventario.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                           .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
                                                                                                                                                 objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                                                                                                                           .tipoProducto = a.tipoExistencia,
                                                                                                                           .idItem = a.idItem}, Nothing)
                        totalesBL.GetCurarKardexCaberas(listaAcurar)
                    End If
                Next
                'If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                '    DocumentoBL.Insert(objDocumento)
                '    Dim codDocumento As Integer = objDocumento.idDocumento
                '    Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                '    Dim consultaExisteItemsCaja = (From n In objDocumento.documentocompra.documentocompradetalle
                '                                   Where n.estadoPago = "Pagado").Count

                '    If consultaExisteItemsCaja > 0 Then
                '        docCodigoCaja = cajaBL.InsertDocumentoCaja(objDocumento.documentocompra)
                '    End If

                '    For Each i In objDocumento.documentocompra.documentocompradetalle
                '        Dim codSecuenciaDetalle As Integer = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                '        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                '            If i.tipoExistencia <> "08" Then
                '                i.secuencia = codSecuenciaDetalle
                '                inventario.InsertPagado(i, objDocumento)
                '                If TmpProduccionPorLotes = True Then
                '                    loteBL.GrabarLotesOne(i.CustomRecursoCostoLote)
                '                End If

                '                Dim TA = HeliosData.totalesAlmacen.Where(Function(o) o.idAlmacen = i.almacenRef And o.idItem = i.idItem).FirstOrDefault
                '                If Not IsNothing(TA) Then
                '                    TA.cantidad += i.monto1
                '                    TA.importeSoles += i.montokardex
                '                    TA.importeDolares += i.montokardexUS
                '                Else
                '                    nuevoTA = New totalesAlmacen With
                '                        {
                '                            .idEmpresa = i.IdEmpresa,
                '                            .idEstablecimiento = i.IdEstablecimiento,
                '                            .idAlmacen = i.almacenRef,
                '                            .origenRecaudo = i.destino,
                '                            .tipoExistencia = i.tipoExistencia,
                '                            .idItem = i.idItem,
                '                            .descripcion = i.descripcionItem,
                '                            .idUnidad = i.unidad1,
                '                            .unidadMedida = i.unidad1,
                '                            .cantidad = i.monto1,
                '                            .importeSoles = i.montokardex,
                '                            .importeDolares = i.montokardexUS,
                '                            .cantidadMaxima = 10000,
                '                            .cantidadMinima = 10,
                '                            .status = StatusArticulo.Activo,
                '                            .usuarioActualizacion = i.usuarioModificacion,
                '                            .fechaActualizacion = i.fechaModificacion}
                '                    HeliosData.totalesAlmacen.Add(nuevoTA)
                '                End If

                '            End If
                '        End If

                '        If i.estadoPago = "Pagado" Then
                '            cajaBL.InsertCajadetalle(i, objDocumento.idDocumento, docCodigoCaja)
                '        End If
                '    Next

                '    If Not IsNothing(objDocumento.ListaCustomDocumento) Then
                '        For Each i In objDocumento.ListaCustomDocumento
                '            SaveCaja(i, objDocumento.idDocumento)
                '        Next
                '    End If

                '    asientoBL.SavebyGroupDoc(objDocumento)
                '    'totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                '    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                '        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                '    End If
                '    HeliosData.SaveChanges()
                '    ts.Complete()
                '    Return codDocumento ' objDocumento.idDocumento
                'Else
                '    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return codDoc
    End Function


    Property docCodigoCaja As Integer = 0

    Public Sub EditarCompra(documentoBE As documento)
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL

        Dim fechaActual = New Date(documentoBE.documentocompra.fechaDoc.Value.Year, documentoBE.documentocompra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)


        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(documentoBE.idEmpresa, fechaActual, documentoBE.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(documentoBE.idEmpresa, fechaActual.Year, fechaActual.Month, documentoBE.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = documentoBE.idEmpresa,
                                                  .idCentroCosto = documentoBE.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(documentoBE.idEmpresa, fechaActual.Year, fechaActual.Month, documentoBE.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If

        Using ts As New TransactionScope()
            SPK_EditarCompra(documentoBE)
            Dim ListaArticulos = (From n In documentoBE.documentocompra.documentocompradetalle
                                  Where n.tipoExistencia <> "GS"
                                  Select n.idItem, n.almacenRef, n.tipoExistencia, n.codigoLote).Distinct().ToList()


            For Each a In ListaArticulos
                If (almacenBL.GetEsAlmacenVirtual(a.almacenRef) = False) Then
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                       .fecha = New DateTime(documentoBE.documentocompra.fechaDoc.Value.Year,
                                                                                                                                             documentoBE.documentocompra.fechaDoc.Value.Month, 1),
                                                                                                                       .tipoProducto = a.tipoExistencia,
                                                                                                                       .idItem = a.idItem,
                                                                                                                       .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                End If
            Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub SPK_EditarCompra(documentoBE As documento)
        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim documentocompraBL As New documentocompraBL
        Dim documentocompradetalleBL As New documentocompradetalleBL
        Dim notificacionAlmacenBL As New notificacionAlmacenBL
        Dim documentoGuiaBL As New documentoGuiaBL
        Dim asientoBL As New AsientoBL
        Dim documentoCajaBl As New documentoCajaDetalleBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim documentoBL As New documentoBL
        Dim loteBL As New recursoCostoLoteBL
        Dim nuevoTA As New totalesAlmacen
        Using ts As New TransactionScope()
            Dim codDoc = documentoBE.idDocumento

            'eliminando inventario
            inventarioBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

            'eliminando documento caja
            documentoCajaBL.DeleteDocumentoCaja(documentoBE.idDocumento)

            'eliminando tributos
            documentoDetalleObligacionBL.EliminarGrupoTributo(documentoBE.idDocumento)

            'Eliminando notas de debito y credito
            documentoBL.EliminarDocNotasRef(documentoBE.idDocumento)

            'eliminando guía de remisión
            documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)

            'eliminando asiento contable
            AsientoBL.DeletePorDocumento(documentoBE.idDocumento)

            'eliminado costos referenciados
            recursoCostoBL.eliminarDetalleCostoByIdDocumento(documentoBE.idDocumento)

            '-----------------------------------------------------------------------
            documentocompraBL.Delete(New documentocompra With {.idDocumento = documentoBE.idDocumento})

            '*************ingresando datos modificados------------------------------
            documentoBL.Update(documentoBE)

            Me.Insert(documentoBE.documentocompra, documentoBE.idDocumento)

            For Each i In documentoBE.documentocompra.documentocompradetalle
                If i.tipoExistencia <> TipoRecurso.SERVICIO Then

                    Dim articuloExiste = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.codigoLote = i.CustomRecursoCostoLote.codigoLote And o.idAlmacen = i.almacenRef).FirstOrDefault
                    If articuloExiste Is Nothing Then
                        Dim codigoLoteNuevo = loteBL.GrabarLotesOne(i.CustomRecursoCostoLote)
                        i.codigoLote = codigoLoteNuevo
                        Dim codSecuencia = documentocompradetalleBL.InsertSingle(i, documentoBE.idDocumento)
                        i.secuencia = codSecuencia
                        i.nrolote = codigoLoteNuevo
                        inventarioBL.InsertPagado(i, documentoBE)

                        nuevoTA = New totalesAlmacen With
                                        {
                                            .idEmpresa = i.IdEmpresa,
                                            .idEstablecimiento = i.IdEstablecimiento,
                                            .codigoLote = codigoLoteNuevo,
                                            .idAlmacen = i.almacenRef,
                                            .origenRecaudo = i.destino,
                                            .tipoExistencia = i.tipoExistencia,
                                            .idItem = i.idItem,
                                            .descripcion = i.descripcionItem,
                                            .idUnidad = i.unidad1,
                                            .unidadMedida = i.unidad1,
                                            .cantidad = i.monto1,
                                            .importeSoles = i.montokardex,
                                            .importeDolares = i.montokardexUS,
                                            .cantidadMaxima = 10000,
                                            .cantidadMinima = 10,
                                            .fechaVcto = i.CustomRecursoCostoLote.fechaVcto,
                                            .status = StatusArticulo.Activo,
                                            .usuarioActualizacion = i.usuarioModificacion,
                                            .fechaActualizacion = i.fechaModificacion}
                        HeliosData.totalesAlmacen.Add(nuevoTA)
                    Else
                        i.codigoLote = i.CustomRecursoCostoLote.codigoLote
                        Dim codSecuencia = documentocompradetalleBL.InsertSingle(i, documentoBE.idDocumento)
                        i.secuencia = codSecuencia
                        i.nrolote = i.CustomRecursoCostoLote.codigoLote
                        inventarioBL.InsertPagado(i, documentoBE)
                    End If


                ElseIf i.tipoExistencia = TipoRecurso.SERVICIO Then
                    Dim codSecuenciaDetalle As Integer = documentocompradetalleBL.InsertSingle(i, documentoBE.idDocumento)
                End If

            Next
            asientoBL.SavebyGroupDoc(documentoBE)

            'totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
            If documentoBE.documentoGuia.documentoguiaDetalle.Count > 0 Then
                documentoGuiaBL.InsertGuiaNuevo(documentoBE, documentoBE.idDocumento)
            End If

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub EliminarCompra(documentoBE As documento)
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL

        Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = documentoBE.idDocumento).FirstOrDefault
        Dim compraDetalle = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList


        Dim fechaActual = New Date(compra.fechaDoc.Value.Year, compra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(compra.idEmpresa, fechaActual, compra.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = compra.idEmpresa,
                                                  .idCentroCosto = compra.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If


        Using ts As New TransactionScope
            EliminarCompraSPK(documentoBE, compraDetalle)

            Dim ListaArticulos = (From n In compraDetalle
                                  Where n.tipoExistencia <> "GS"
                                  Select n.idItem, n.almacenRef, n.tipoExistencia, n.codigoLote).Distinct().ToList()


            For Each a In ListaArticulos
                If (almacenBL.GetEsAlmacenVirtual(a.almacenRef) = False) Then
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                       .fecha = New DateTime(compra.fechaDoc.Value.Year,
                                                                                                                                             compra.fechaDoc.Value.Month, 1),
                                                                                                                       .tipoProducto = a.tipoExistencia,
                                                                                                                       .idItem = a.idItem,
                                                                                                                       .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                End If
            Next

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub EliminarEntradaInventario(documentoBE As documento)
        Using ts As New TransactionScope
            Dim documentoCompra = documentoBE.idDocumento
            Dim documentosRelacionados = HeliosData.documentocompra.Where(Function(o) o.idPadre = documentoCompra).ToList

            AnularCompra(documentoBE)
        End Using
    End Sub

    Public Sub AnularCompra(documentoBE As documento)
        Dim documentoGuiaBL As New documentoGuiaBL
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL

        Dim documentosRelacionados = HeliosData.documentocompra.Where(Function(o) o.idPadre = documentoBE.idDocumento And o.tipoCompra = TIPO_COMPRA.COMPRA).Count

        If documentosRelacionados > 0 Then
            Throw New Exception("No puede anular, anular relaciones")
        End If

        Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = documentoBE.idDocumento).FirstOrDefault
        Dim compraDetalle = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList


        Dim fechaActual = New Date(compra.fechaDoc.Value.Year, compra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(compra.idEmpresa, fechaActual, compra.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = compra.idEmpresa,
                                                  .idCentroCosto = compra.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If


        Using ts As New TransactionScope
            Dim listaInventario = (From n In HeliosData.InventarioMovimiento
                                   Join al In HeliosData.almacen
                                      On al.idAlmacen Equals n.idAlmacen
                                   Where
                                      n.idDocumento = documentoBE.idDocumento And
                                      al.tipo = "AF"
                                   Select n).ToList


            AnularCompraSPK(documentoBE, compraDetalle)

            Dim listaArticulos = (From n In listaInventario
                                  Select
                                      n.idItem,
                                      n.tipoProducto,
                                      n.idAlmacen,
                                      n.nrolote,
                                      n.cantidad,
                                      n.monto).Distinct.ToList()

            For Each i In listaArticulos

                Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And
                                                              o.idAlmacen = i.idAlmacen And
                                                              o.codigoLote = i.nrolote).FirstOrDefault
                If obj IsNot Nothing Then
                    obj.cantidad = obj.cantidad - i.cantidad
                    obj.importeSoles = obj.importeSoles - i.monto
                End If

                'Dim lista = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                '                New InventarioMovimiento With {
                '                .idAlmacen = a.idAlmacen,
                '                .fecha = Date.Now,
                '                .tipoProducto = a.tipoProducto,
                '                .idItem = a.idItem, .nrolote = a.nrolote
                '                }, Nothing)
                'totalesBL.GetCurarKardexCaberasLOTE(lista)
            Next

            'For Each i In compraDetalle.Where(Function(o) o.tipoExistencia <> "GS").ToList

            '    Dim guiaDet = HeliosData.documentoguiaDetalle.Where(Function(o) o.secuenciaRef = i.secuencia).ToList

            '    For Each g In guiaDet
            '        If (almacenBL.GetEsAlmacenVirtual(g.almacenRef) = False) Then
            '            Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = g.almacenRef And o.codigoLote = i.codigoLote).FirstOrDefault
            '            If obj IsNot Nothing Then
            '                obj.cantidad = obj.cantidad - g.cantidad
            '                obj.importeSoles = obj.importeSoles - g.importeMN
            '            End If

            '            'Dim guia = HeliosData.documentoGuia.Where(Function(o) o.idDocumento = g.idDocumento).Single
            '            'Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = g.almacenRef,
            '            '                                                                                                     .fecha = New DateTime(guia.fechaDoc.Value.Year,
            '            '                                                                                                                           guia.fechaDoc.Value.Month, 1),
            '            '                                                                                                     .tipoProducto = i.tipoExistencia,
            '            '                                                                                                     .idItem = i.idItem,
            '            '                                                                                                     .nrolote = i.codigoLote}, Nothing)
            '            'totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
            '        End If
            '    Next
            'Next
            'eliminando inventario
            '      inventarioBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

            'eliminando guía de remisión
            documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)
            compra.estadoPago = "ANU"
            compra.tipoCompra = TIPO_COMPRA.COMPRA_ANULADA

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub AnularNotaDeCompra(documentoBE As documento)
        Dim documentoGuiaBL As New documentoGuiaBL
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL

        Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = documentoBE.idDocumento).FirstOrDefault
        Dim compraDetalle = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList


        Dim fechaActual = New Date(compra.fechaDoc.Value.Year, compra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(compra.idEmpresa, fechaActual, compra.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = compra.idEmpresa,
                                                .idCentroCosto = compra.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If


        Using ts As New TransactionScope
            AnularCompraSPK(documentoBE, compraDetalle)

            For Each i In compraDetalle.Where(Function(o) o.tipoExistencia <> "GS").ToList

                Dim guiaDet = HeliosData.documentoguiaDetalle.Where(Function(o) o.secuenciaRef = i.secuencia).ToList

                For Each g In guiaDet
                    If (almacenBL.GetEsAlmacenVirtual(g.almacenRef) = False) Then
                        Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = g.almacenRef And o.codigoLote = i.codigoLote).FirstOrDefault
                        If obj IsNot Nothing Then
                            obj.cantidad = obj.cantidad - g.cantidad
                            obj.importeSoles = obj.importeSoles - g.importeMN
                        End If

                        Dim guia = HeliosData.documentoGuia.Where(Function(o) o.idDocumento = g.idDocumento).Single
                        Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = g.almacenRef,
                                                                                                                             .fecha = New DateTime(guia.fechaDoc.Value.Year,
                                                                                                                                                   guia.fechaDoc.Value.Month, 1),
                                                                                                                             .tipoProducto = i.tipoExistencia,
                                                                                                                             .idItem = i.idItem,
                                                                                                                             .nrolote = i.codigoLote}, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                    End If
                Next
            Next
            'eliminando inventario
            '      inventarioBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

            'eliminando guía de remisión
            documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)
            compra.estadoPago = "ANU"
            compra.tipoCompra = TIPO_COMPRA.NOTA_COMPRA_ANULADA

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub EliminarEntradainv(documentoBE As documento)
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL

        Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = documentoBE.idDocumento).FirstOrDefault
        Dim compraDetalle = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList

        '----------------------------------------------------------------------------------------------------------------------------
        Dim fechaActual = New Date(compra.fechaDoc.Value.Year, compra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(compra.idEmpresa, fechaActual, compra.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = compra.idEmpresa,
                                                .idCentroCosto = compra.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If
        '-----------------------------------------------------------------------------------------------------------------------------

        Using ts As New TransactionScope
            EliminarEntradaSPK(documentoBE, compraDetalle)

            Dim ListaArticulos = (From n In compraDetalle
                                  Where n.tipoExistencia <> "GS"
                                  Select n.idItem, n.almacenRef, n.tipoExistencia, n.codigoLote).Distinct().ToList()


            For Each a In ListaArticulos
                If (almacenBL.GetEsAlmacenVirtual(a.almacenRef) = False) Then
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                       .fecha = New DateTime(compra.fechaDoc.Value.Year,
                                                                                                                                             compra.fechaDoc.Value.Month, 1),
                                                                                                                       .tipoProducto = a.tipoExistencia,
                                                                                                                       .idItem = a.idItem,
                                                                                                                       .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                End If
            Next

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub AnularEntradainv(documentoBE As documento)

        Dim documentoGuiaBL As New documentoGuiaBL
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL

        Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = documentoBE.idDocumento).FirstOrDefault
        Dim compraDetalle = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList

        '----------------------------------------------------------------------------------------------------------------------------
        Dim fechaActual = New Date(compra.fechaDoc.Value.Year, compra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(compra.idEmpresa, fechaActual, compra.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = compra.idEmpresa,
                                                .idCentroCosto = compra.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If
        '-----------------------------------------------------------------------------------------------------------------------------

        Using ts As New TransactionScope
            Dim listaInventario = (From n In HeliosData.InventarioMovimiento
                                   Join al In HeliosData.almacen
                                      On al.idAlmacen Equals n.idAlmacen
                                   Where
                                      n.idDocumento = documentoBE.idDocumento And
                                      al.tipo = "AF"
                                   Select n).ToList


            'AnularEntradaSPK(documentoBE, compraDetalle)
            AnularCompraSPK(documentoBE, compraDetalle)
            Dim listaArticulos = (From n In listaInventario
                                  Select
                                      n.idItem,
                                      n.tipoProducto,
                                      n.idAlmacen,
                                      n.nrolote,
                                      n.cantidad,
                                      n.monto).Distinct.ToList()


            'For Each a In listaArticulos
            '    If (almacenBL.GetEsAlmacenVirtual(a.idAlmacen) = False) Then
            '        Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.idAlmacen,
            '                                                                                                           .fecha = New DateTime(compra.fechaDoc.Value.Year,
            '                                                                                                                                 compra.fechaDoc.Value.Month, 1),
            '                                                                                                           .tipoProducto = a.tipoProducto,
            '                                                                                                           .idItem = a.idItem,
            '                                                                                                           .nrolote = a.nrolote}, Nothing)
            '        totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
            '    End If
            'Next
            For Each i In listaArticulos

                Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And
                                                              o.idAlmacen = i.idAlmacen And
                                                              o.codigoLote = i.nrolote).FirstOrDefault
                If obj IsNot Nothing Then
                    obj.cantidad = obj.cantidad - i.cantidad
                    obj.importeSoles = obj.importeSoles - i.monto
                End If

            Next
            documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)
            compra.estadoPago = "ANU"
            compra.tipoCompra = TIPO_COMPRA.ENTRADA_INVENTARIO_ANULADA
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub EliminarSalidaInv(documentoBE As documento)
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL

        Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = documentoBE.idDocumento).FirstOrDefault
        Dim compraDetalle = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList


        '---------------------------validando cierre

        Dim fechaActual = New Date(compra.fechaDoc.Value.Year, compra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(compra.idEmpresa, fechaActual, compra.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = compra.idEmpresa,
                                                .idCentroCosto = compra.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If
        '-----------------------------------------------------------------------------------------------------------------------------


        Using ts As New TransactionScope
            EliminarSalidaSPK(documentoBE, compraDetalle)

            Dim ListaArticulos = (From n In compraDetalle
                                  Where n.tipoExistencia <> "GS"
                                  Select n.idItem, n.almacenRef, n.tipoExistencia, n.codigoLote).Distinct().ToList()


            For Each a In ListaArticulos
                If (almacenBL.GetEsAlmacenVirtual(a.almacenRef) = False) Then
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                       .fecha = New DateTime(compra.fechaDoc.Value.Year,
                                                                                                                                             compra.fechaDoc.Value.Month, 1),
                                                                                                                       .tipoProducto = a.tipoExistencia,
                                                                                                                       .idItem = a.idItem,
                                                                                                                       .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                End If
            Next

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub AnularSalidaInv(documentoBE As documento)
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL

        Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = documentoBE.idDocumento).FirstOrDefault
        Dim compraDetalle = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList


        '---------------------------validando cierre

        Dim fechaActual = New Date(compra.fechaDoc.Value.Year, compra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(compra.idEmpresa, fechaActual, compra.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = compra.idEmpresa,
                                                .idCentroCosto = compra.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(compra.idEmpresa, fechaActual.Year, fechaActual.Month, compra.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If
        '-----------------------------------------------------------------------------------------------------------------------------


        Using ts As New TransactionScope

            Dim listaVentaDet = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = documentoBE.idDocumento).ToList

            AnularSalidaSPK(documentoBE, compraDetalle)

            'Dim ListaArticulos = (From n In compraDetalle
            '                      Where n.tipoExistencia <> "GS"
            '                      Select n.idItem, n.almacenRef, n.tipoExistencia, n.codigoLote).Distinct().ToList()



            For Each a In listaVentaDet
                If (almacenBL.GetEsAlmacenVirtual(a.idAlmacen) = False) Then
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                            New InventarioMovimiento With
                            {
                            .idAlmacen = a.idAlmacen,
                            .fecha = New DateTime(compra.fechaDoc.Value.Year, compra.fechaDoc.Value.Month, 1),
                            .tipoProducto = a.tipoProducto,
                            .idItem = a.idItem,
                            .nrolote = a.nrolote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                End If
            Next

            'For Each a In ListaArticulos
            '    If (almacenBL.GetEsAlmacenVirtual(a.almacenRef) = False) Then
            '        Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
            '                                                                                                           .fecha = New DateTime(compra.fechaDoc.Value.Year,
            '                                                                                                                                 compra.fechaDoc.Value.Month, 1),
            '                                                                                                           .tipoProducto = a.tipoExistencia,
            '                                                                                                           .idItem = a.idItem,
            '                                                                                                           .nrolote = a.codigoLote}, Nothing)
            '        totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
            '    End If
            'Next
            compra.estadoPago = "ANU"
            compra.tipoCompra = TIPO_COMPRA.SALIDA_INVENTARIO_ANULADA
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub AnularCompraSPK(documentoBE As documento, compraDetalle As List(Of documentocompradetalle))
        Dim loteBL As New recursoCostoLoteBL
        Dim inventarioTransitoBL As New inventarioTransitoBL
        Dim listaventas As Integer
        Dim inventarioBL As New totalesAlmacenBL
        Dim invBL As New InventarioMovimientoBL
        Dim documentocompraBL As New documentocompraBL
        Dim documentocompradetalleBL As New documentocompradetalleBL
        Dim notificacionAlmacenBL As New notificacionAlmacenBL
        Dim documentoGuiaBL As New documentoGuiaBL
        Dim asientoBL As New AsientoBL
        Dim documentoCajaBl As New documentoCajaDetalleBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim documentoBL As New documentoBL
        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
        Dim listaVentasTipo As New List(Of String)
        Try

            listaVentasTipo.Add(StatusTipoOperacion.VENTA)
            listaVentasTipo.Add(StatusTipoOperacion.OTRAS_SALIDAS_DE_ALMACEN)
            listaVentasTipo.Add(StatusTipoOperacion.NOTA_VENTA)
            listaVentasTipo.Add(StatusTipoOperacion.TRANSFERENCIA_ENTRE_ALMACENES)

            Dim lotesComprados = HeliosData.recursoCostoLote.Where(Function(l) l.idDocumento = documentoBE.idDocumento).ToList

            listaventas = 0


            For Each i In lotesComprados
                Dim ArticuloTieneventa = HeliosData.InventarioMovimiento.Where(Function(o) o.nrolote = i.codigoLote And listaVentasTipo.Contains(o.tipoOperacion)).Count
                If ArticuloTieneventa > 0 Then
                    listaventas += 1
                Else

                End If
            Next
            'For Each i In compraDetalle
            '    'Dim ArticuloTieneventa = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.codigoLote = i.codigoLote).Count

            '    Dim ArticuloTieneventa = HeliosData.InventarioMovimiento.Where(Function(o) o.nrolote = i.codigoLote And listaVentasTipo.Contains(o.tipoOperacion)).Count

            '    If ArticuloTieneventa > 0 Then
            '        listaventas += 1
            '    Else

            '    End If

            '    Dim productosConTransferencias = (From compra In HeliosData.documentocompra
            '                                      Join detalle In HeliosData.documentocompradetalle
            '                                          On detalle.idDocumento Equals compra.idDocumento
            '                                      Where compra.tipoCompra = "TEA" And detalle.codigoLote = i.codigoLote).Count

            '    'Dim productosConTransferencias = HeliosData.documentocompra.Where(Function(o) o.tipoCompra = "TEA") _
            '    '    .Join(HeliosData.documentocompradetalle.Where(Function(d) d.codigoLote = i.codigoLote),
            '    '          Function(compraDet) compraDet.idDocumento,
            '    '          Function(Compra) Compra.idDocumento,
            '    '          Function(Compra, compraDet) _
            '    '              New With {Key .secuenciaCompra = compraDet.secuencia}).Count

            '    If productosConTransferencias > 0 Then
            '        Throw New Exception("ETEA")
            '    End If
            '    'Eliminado lote comprado

            '    'loteBL.DeleteLoteDocumento(i.codigoLote)
            'Next
            Using ts As New TransactionScope
                If listaventas > 0 Then
                    ''eliminando inventario
                    'invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

                    Throw New Exception("No puede eliminar la compra, tiene ventas")

                ElseIf listaventas = 0 Then
                    'eliminado lotes
                    loteBL.DeleteLoteDocumento(documentoBE.idDocumento)

                    'eliminado datos de inventario en transito
                    inventarioTransitoBL.EliminarInventario(documentoBE.idDocumento)

                    ''eliminando inventario
                    invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

                    'eliminando documento caja
                    documentoCajaBl.DeleteDocumentoCaja(documentoBE.idDocumento)

                    'eliminando tributos
                    documentoDetalleObligacionBL.EliminarGrupoTributo(documentoBE.idDocumento)

                    'Eliminando notas de debito y credito
                    documentoBL.EliminarDocNotasRef(documentoBE.idDocumento)

                    ''eliminando guía de remisión
                    'documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)

                    'eliminando asiento contable
                    asientoBL.DeletePorDocumento(documentoBE.idDocumento)

                    'eliminado costos referenciados
                    recursoCostoBL.eliminarDetalleCostoByIdDocumento(documentoBE.idDocumento)

                    '    documentoBL.DeleteSingle(documentoBE)

                    'For Each i In compraDetalle
                    '    Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = i.almacenRef And o.codigoLote = i.codigoLote).FirstOrDefault
                    '    If obj IsNot Nothing Then
                    '        obj.cantidad = obj.cantidad - i.monto1
                    '        obj.importeSoles = obj.importeSoles - i.montokardex
                    '    End If
                    'Next
                End If
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub EliminarCompraSPK(documentoBE As documento, compraDetalle As List(Of documentocompradetalle))
        Dim listaventas As Integer
        Dim inventarioBL As New totalesAlmacenBL
        Dim invBL As New InventarioMovimientoBL
        Dim documentocompraBL As New documentocompraBL
        Dim documentocompradetalleBL As New documentocompradetalleBL
        Dim notificacionAlmacenBL As New notificacionAlmacenBL
        Dim documentoGuiaBL As New documentoGuiaBL
        Dim asientoBL As New AsientoBL
        Dim documentoCajaBl As New documentoCajaDetalleBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim documentoBL As New documentoBL
        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
        Try
            listaventas = 0
            For Each i In compraDetalle
                Dim ArticuloTieneventa = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.codigoLote = i.codigoLote).Count
                If ArticuloTieneventa > 0 Then
                    listaventas += 1
                Else

                End If

                Dim productosConTransferencias = (From compra In HeliosData.documentocompra
                                                  Join detalle In HeliosData.documentocompradetalle
                                                      On detalle.idDocumento Equals compra.idDocumento
                                                  Where compra.tipoCompra = "TEA" And detalle.codigoLote = i.codigoLote).Count

                'Dim productosConTransferencias = HeliosData.documentocompra.Where(Function(o) o.tipoCompra = "TEA") _
                '    .Join(HeliosData.documentocompradetalle.Where(Function(d) d.codigoLote = i.codigoLote),
                '          Function(compraDet) compraDet.idDocumento,
                '          Function(Compra) Compra.idDocumento,
                '          Function(Compra, compraDet) _
                '              New With {Key .secuenciaCompra = compraDet.secuencia}).Count

                If productosConTransferencias > 0 Then
                    Throw New Exception("ETEA")
                End If


            Next
            Using ts As New TransactionScope
                If listaventas > 0 Then
                    ''eliminando inventario
                    'invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

                    Throw New Exception("No puede eliminar la compra")

                ElseIf listaventas = 0 Then
                    'eliminando inventario
                    invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

                    'eliminando documento caja
                    documentoCajaBl.DeleteDocumentoCaja(documentoBE.idDocumento)

                    'eliminando tributos
                    documentoDetalleObligacionBL.EliminarGrupoTributo(documentoBE.idDocumento)

                    'Eliminando notas de debito y credito
                    documentoBL.EliminarDocNotasRef(documentoBE.idDocumento)

                    'eliminando guía de remisión
                    documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)

                    'eliminando asiento contable
                    asientoBL.DeletePorDocumento(documentoBE.idDocumento)

                    'eliminado costos referenciados
                    recursoCostoBL.eliminarDetalleCostoByIdDocumento(documentoBE.idDocumento)

                    documentoBL.DeleteSingle(documentoBE)

                    For Each i In compraDetalle
                        Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = i.almacenRef And o.codigoLote = i.codigoLote).FirstOrDefault
                        If obj IsNot Nothing Then
                            obj.cantidad = obj.cantidad - i.monto1
                            obj.importeSoles = obj.importeSoles - i.montokardex
                        End If
                    Next
                End If
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub AnularEntradaSPK(documentoBE As documento, compraDetalle As List(Of documentocompradetalle))
        Dim listaventas As Integer
        Dim inventarioBL As New totalesAlmacenBL
        Dim invBL As New InventarioMovimientoBL
        Dim documentocompraBL As New documentocompraBL
        Dim documentocompradetalleBL As New documentocompradetalleBL
        Dim notificacionAlmacenBL As New notificacionAlmacenBL
        Dim documentoGuiaBL As New documentoGuiaBL
        Dim asientoBL As New AsientoBL
        Dim documentoCajaBl As New documentoCajaDetalleBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim loteBL As New recursoCostoLoteBL
        Dim documentoBL As New documentoBL
        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
        Dim listaVentasTipo As New List(Of String)
        Try
            listaVentasTipo.Add(StatusTipoOperacion.VENTA)
            listaVentasTipo.Add(StatusTipoOperacion.OTRAS_SALIDAS_DE_ALMACEN)
            listaVentasTipo.Add(StatusTipoOperacion.NOTA_VENTA)

            listaventas = 0

            Dim lotesComprados = HeliosData.recursoCostoLote.Where(Function(l) l.idDocumento = documentoBE.idDocumento).ToList

            'For Each i In compraDetalle
            '    Dim ArticuloTieneventa = HeliosData.InventarioMovimiento.Where(Function(o) o.nrolote = i.codigoLote And listaVentasTipo.Contains(o.tipoOperacion)).Count
            '    If ArticuloTieneventa > 0 Then
            '        listaventas += 1
            '    Else

            '    End If
            '    loteBL.DeleteLote(i.codigoLote)
            'Next

            For Each i In lotesComprados
                Dim ArticuloTieneventa = HeliosData.InventarioMovimiento.Where(Function(o) o.nrolote = i.codigoLote And listaVentasTipo.Contains(o.tipoOperacion)).Count
                If ArticuloTieneventa > 0 Then
                    listaventas += 1
                Else

                End If
            Next



            Using ts As New TransactionScope
                If listaventas > 0 Then
                    ''eliminando inventario
                    'invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

                    Throw New Exception("El documento tiene ventas")

                ElseIf listaventas = 0 Then
                    'eliminando inventario
                    invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

                    'eliminando documento caja
                    documentoCajaBl.DeleteDocumentoCaja(documentoBE.idDocumento)

                    'eliminando guía de remisión
                    documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)

                    'eliminando asiento contable
                    asientoBL.DeletePorDocumento(documentoBE.idDocumento)

                    'eliminado costos referenciados
                    recursoCostoBL.eliminarDetalleCostoByIdDocumento(documentoBE.idDocumento)

                    '    documentoBL.DeleteSingle(documentoBE)

                    For Each i In compraDetalle
                        Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = i.almacenRef And o.codigoLote = i.codigoLote).FirstOrDefault
                        If obj IsNot Nothing Then
                            obj.cantidad = obj.cantidad - i.monto1
                            obj.importeSoles = obj.importeSoles - i.importe
                        End If
                    Next
                End If
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub EliminarEntradaSPK(documentoBE As documento, compraDetalle As List(Of documentocompradetalle))
        Dim listaventas As Integer
        Dim inventarioBL As New totalesAlmacenBL
        Dim invBL As New InventarioMovimientoBL
        Dim documentocompraBL As New documentocompraBL
        Dim documentocompradetalleBL As New documentocompradetalleBL
        Dim notificacionAlmacenBL As New notificacionAlmacenBL
        Dim documentoGuiaBL As New documentoGuiaBL
        Dim asientoBL As New AsientoBL
        Dim documentoCajaBl As New documentoCajaDetalleBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim documentoBL As New documentoBL
        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
        Try
            listaventas = 0
            For Each i In compraDetalle
                Dim ArticuloTieneventa = HeliosData.documentoventaAbarrotesDet.Where(Function(o) o.codigoLote = i.codigoLote).Count
                If ArticuloTieneventa > 0 Then
                    listaventas += 1
                Else

                End If
            Next
            Using ts As New TransactionScope
                If listaventas > 0 Then
                    ''eliminando inventario
                    'invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

                    Throw New Exception("El documento tiene ventas")

                ElseIf listaventas = 0 Then
                    'eliminando inventario
                    invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

                    'eliminando documento caja
                    documentoCajaBl.DeleteDocumentoCaja(documentoBE.idDocumento)

                    'eliminando guía de remisión
                    documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)

                    'eliminando asiento contable
                    asientoBL.DeletePorDocumento(documentoBE.idDocumento)

                    'eliminado costos referenciados
                    recursoCostoBL.eliminarDetalleCostoByIdDocumento(documentoBE.idDocumento)

                    documentoBL.DeleteSingle(documentoBE)

                    For Each i In compraDetalle
                        Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = i.almacenRef And o.codigoLote = i.codigoLote).FirstOrDefault
                        If obj IsNot Nothing Then
                            obj.cantidad = obj.cantidad - i.monto1
                            obj.importeSoles = obj.importeSoles - i.importe
                        End If
                    Next
                End If
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub EliminarSalidaSPK(documentoBE As documento, compraDetalle As List(Of documentocompradetalle))
        Dim inventarioBL As New totalesAlmacenBL
        Dim invBL As New InventarioMovimientoBL
        Dim documentocompraBL As New documentocompraBL
        Dim documentocompradetalleBL As New documentocompradetalleBL
        Dim notificacionAlmacenBL As New notificacionAlmacenBL
        Dim documentoGuiaBL As New documentoGuiaBL
        Dim asientoBL As New AsientoBL
        Dim documentoCajaBl As New documentoCajaDetalleBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim documentoBL As New documentoBL
        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
        Try
            Using ts As New TransactionScope
                'eliminando inventario
                invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

                'eliminando documento caja
                documentoCajaBl.DeleteDocumentoCaja(documentoBE.idDocumento)

                'eliminando guía de remisión
                documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)

                'eliminando asiento contable
                asientoBL.DeletePorDocumento(documentoBE.idDocumento)

                'eliminado costos referenciados
                recursoCostoBL.eliminarDetalleCostoByIdDocumento(documentoBE.idDocumento)

                documentoBL.DeleteSingle(documentoBE)

                For Each i In compraDetalle
                    Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = i.almacenRef And o.codigoLote = i.codigoLote).FirstOrDefault
                    If obj IsNot Nothing Then
                        obj.cantidad = obj.cantidad + i.monto1
                        obj.importeSoles = obj.importeSoles + i.importe
                    End If
                Next
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub AnularSalidaSPK(documentoBE As documento, compraDetalle As List(Of documentocompradetalle))
        Dim inventarioBL As New totalesAlmacenBL
        Dim invBL As New InventarioMovimientoBL
        Dim documentocompraBL As New documentocompraBL
        Dim documentocompradetalleBL As New documentocompradetalleBL
        Dim notificacionAlmacenBL As New notificacionAlmacenBL
        Dim documentoGuiaBL As New documentoGuiaBL
        Dim asientoBL As New AsientoBL
        Dim documentoCajaBl As New documentoCajaDetalleBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim documentoBL As New documentoBL
        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
        Try
            Using ts As New TransactionScope
                'eliminando inventario
                invBL.DeleteInventarioPorDocumento(documentoBE.idDocumento)

                'eliminando documento caja
                documentoCajaBl.DeleteDocumentoCaja(documentoBE.idDocumento)

                'eliminando guía de remisión
                documentoGuiaBL.EliminarGuiaGeneral(documentoBE.idDocumento)

                'eliminando asiento contable
                asientoBL.DeletePorDocumento(documentoBE.idDocumento)

                'eliminado costos referenciados
                recursoCostoBL.eliminarDetalleCostoByIdDocumento(documentoBE.idDocumento)

                '    documentoBL.DeleteSingle(documentoBE)

                For Each i In compraDetalle
                    Dim obj = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.idAlmacen = i.almacenRef And o.codigoLote = i.codigoLote).FirstOrDefault
                    If obj IsNot Nothing Then
                        obj.cantidad = obj.cantidad + i.monto1
                        obj.importeSoles = obj.importeSoles + i.importe
                    End If
                Next
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function SPK_InsertCompra(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim nuevoTA As totalesAlmacen
        Dim guiaBL As New documentoGuiaBL
        Dim cajaBL As New documentoCajaBL
        Dim loteBL As New recursoCostoLoteBL
        Dim PrecioBL As New ConfiguracionPrecioProductoBL

        Try
            Using ts As New TransactionScope()
                'If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                DocumentoBL.Insert(objDocumento)
                Dim codDocumento As Integer = objDocumento.idDocumento
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                Dim consultaExisteItemsCaja = (From n In objDocumento.documentocompra.documentocompradetalle
                                               Where n.estadoPago = "Pagado").Count

                If consultaExisteItemsCaja > 0 Then
                    docCodigoCaja = cajaBL.InsertDocumentoCaja(objDocumento.documentocompra)
                End If
                Dim codigoLote = 0
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                        If i.CustomPrecios IsNot Nothing Then
                            If i.CustomPrecios.Count > 0 Then
                                PrecioBL.GrabarListadoPrecios(i.CustomPrecios)
                            End If
                        End If
                    End If

                    If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                        If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then
                            codigoLote = i.codigoLote
                        Else
                            codigoLote = loteBL.GrabarLotesOne(i.CustomRecursoCostoLote)
                        End If

                        i.codigoLote = codigoLote

                        Dim articulo = HeliosData.detalleitems.Where(Function(o) o.codigodetalle = i.idItem).Single
                        If articulo.AfectoCompra Then
                            If articulo.Retencion.HasValue Then
                                If articulo.Retencion = True Then
                                    Dim porcentaje = articulo.ValorRetencion / 100
                                    Dim importeCompra = i.importe
                                    Dim montoRecaudo = importeCompra * porcentaje
                                    i.tipoRecaudo = "R"
                                    i.porcRecaudo = articulo.ValorRetencion
                                    i.valorRecaudo = montoRecaudo
                                End If
                            End If

                            If articulo.Percepcion.HasValue Then
                                If articulo.Percepcion = True Then
                                    Dim porcentaje = articulo.ValorRetencion / 100
                                    Dim importeCompra = i.importe
                                    Dim montoRecaudo = importeCompra * porcentaje
                                    i.tipoRecaudo = "P"
                                    i.porcRecaudo = articulo.ValorRetencion
                                    i.valorRecaudo = montoRecaudo
                                End If
                            End If
                        End If

                        Dim codSecuenciaDetalle As Integer = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        If i.tipoExistencia <> "08" Then
                            i.secuencia = codSecuenciaDetalle
                            i.nrolote = codigoLote
                            inventario.InsertPagado(i, objDocumento)

                            If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then

                            Else
                                nuevoTA = New totalesAlmacen With
                                    {
                                        .idEmpresa = i.IdEmpresa,
                                        .idEstablecimiento = i.IdEstablecimiento,
                                        .codigoLote = codigoLote,
                                        .idAlmacen = i.almacenRef,
                                        .origenRecaudo = i.destino,
                                        .tipoExistencia = i.tipoExistencia,
                                        .idItem = i.idItem,
                                        .descripcion = i.descripcionItem,
                                        .idUnidad = i.unidad1,
                                        .unidadMedida = i.unidad1,
                                        .cantidad = i.monto1,
                                        .importeSoles = i.montokardex,
                                        .importeDolares = i.montokardexUS,
                                        .cantidadMaxima = 10000,
                                        .cantidadMinima = 10,
                                        .fechaVcto = i.CustomRecursoCostoLote.fechaVcto,
                                        .status = StatusArticulo.Activo,
                                        .usuarioActualizacion = i.usuarioModificacion,
                                        .fechaActualizacion = i.fechaModificacion}
                                HeliosData.totalesAlmacen.Add(nuevoTA)
                            End If


                        End If
                    ElseIf i.tipoExistencia = TipoRecurso.SERVICIO Then
                        Dim codSecuenciaDetalle As Integer = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    End If

                    If i.estadoPago = "Pagado" Then
                        cajaBL.InsertCajadetalle(i, objDocumento.idDocumento, docCodigoCaja)
                    End If
                Next
                asientoBL.SavebyGroupDoc(objDocumento)

                'totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                    guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                End If
                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumento ' objDocumento.idDocumento
                'Else
                '    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function SaveCompraNuevoMetodo(objDocumento As documento) As Integer
        Dim almacenBL As New almacenBL
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim codDoc As Integer = 0
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Try
            Dim fechaActual = New Date(objDocumento.documentocompra.fechaDoc.Value.Year, objDocumento.documentocompra.fechaDoc.Value.Month, 1)
            Dim fechaAnterior = fechaActual.AddMonths(-1)

            'si es false es porque no esta dentro del inicio de operaciones
            Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(objDocumento.idEmpresa, fechaActual, objDocumento.idCentroCosto)
            If valor = "False" Then
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = objDocumento.idEmpresa,
                                                .idCentroCosto = objDocumento.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                End If
            ElseIf valor = "True" Then
                Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
            Else
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                '                                    {.idEmpresa = objDocumento.idEmpresa,
                '                                     .anio = fechaAnterior.Year,
                '                                     .mes = fechaAnterior.Month}) = False Then
                '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                'End If
            End If

            Using ts As New TransactionScope()
                Dim fechaGuia As DateTime = objDocumento.documentoGuia.fechaDoc

                codDoc = SPK_InsertCompra(objDocumento)

                If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then


                    Dim listaCompraDet = objDocumento.documentocompra.documentocompradetalle.ToList
                    Dim ListaArticulos = (From n In listaCompraDet
                                          Where n.tipoExistencia <> "GS"
                                          Select n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct.ToList

                    For Each a In ListaArticulos
                        Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                         .fecha = New DateTime(fechaGuia.Year, fechaGuia.Month, 1),
                                                                                                                         .tipoProducto = a.tipoExistencia,
                                                                                                                         .idItem = a.idItem, .nrolote = a.codigoLote}, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(lista)
                    Next
                End If

                '   Dim ExistenComprasSuperiores = HeliosData.documentocompra.Where(Function(o) TruncateTime(o.fechaDoc) >= objDocumento.fechaProceso).Count

                'Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                '         +             Where n.tipoExistencia <> "GS"
                '                      Select n.idItem, n.almacenRef, n.tipoExistencia).Distinct().ToList()


                'For Each a In ListaArticulos
                '    If (almacenBL.GetEsAlmacenVirtual(a.almacenRef) = False) Then
                '        listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                '                                                                                                           .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
                '                                                                                                                                 objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                '                                                                                                           .tipoProducto = a.tipoExistencia,
                '                                                                                                           .idItem = a.idItem}, Nothing)
                '        totalesBL.GetCurarKardexCaberas(listaAcurar)
                '    End If
                'Next
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return codDoc
    End Function

    Public Function SaveCompraNuevoMetodoOrden(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen), objOtrosDatos As documentoOtrosDatos) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim guiaBL As New documentoGuiaBL
        Dim cajaBL As New documentoCajaBL

        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Dim codDocumento As Integer = objDocumento.idDocumento
                    Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                    Dim consultaExisteItemsCaja = (From n In objDocumento.documentocompra.documentocompradetalle
                                                   Where n.estadoPago = "Pagado").Count

                    If consultaExisteItemsCaja > 0 Then
                        docCodigoCaja = cajaBL.InsertDocumentoCaja(objDocumento.documentocompra)
                    End If

                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        Dim codSecuenciaDetalle As Integer = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            If i.tipoExistencia <> "08" Then
                                i.secuencia = codSecuenciaDetalle
                                inventario.InsertPagado(i, objDocumento)
                            End If
                        End If

                        If i.estadoPago = "Pagado" Then
                            cajaBL.InsertCajadetalle(i, objDocumento.idDocumento, docCodigoCaja)
                        End If
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                    End If

                    updateEstadoOrden(objOtrosDatos)

                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return codDocumento ' objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub updateEstadoOrden(ByVal documentoBE As documentoOtrosDatos)

        Using ts As New TransactionScope
            Dim doc As documentocompra = HeliosData.documentocompra.Where(Function(o) _
                                            o.idDocumento = documentoBE.idDocumento).First()
            doc.situacion = documentoBE.condicionPago
            'HeliosData.ObjectStateManager.GetObjectStateEntry(doc).State.ToString()
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Public Function SaveRegistroHonorarios(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim precioV As New listadoPreciosBL
        Dim cajaBL As New documentoCajaBL
        '     Dim cajaDetBL As New documentoCajaDetalleBL
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                    'm
                    Dim consultaExisteItemsCaja = (From n In objDocumento.documentocompra.documentocompradetalle
                                                   Where n.estadoPago = "Pagado").Count
                    If consultaExisteItemsCaja > 0 Then
                        docCodigoCaja = cajaBL.InsertDocumentoCaja(objDocumento.documentocompra)
                    End If
                    'm

                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        Dim codSecuenciaDetalle As Integer = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                        'm
                        If i.estadoPago = "Pagado" Then
                            cajaBL.InsertCajadetalle(i, objDocumento.idDocumento, docCodigoCaja)
                        End If
                        'm
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function SaveRegistroCompraAnticipada(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim precioV As New listadoPreciosBL
        Dim cajaBL As New documentoCajaBL
        '     Dim cajaDetBL As New documentoCajaDetalleBL
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                    'm
                    'Dim consultaExisteItemsCaja = (From n In objDocumento.documentocompra.documentocompradetalle _
                    '                             Where n.estadoPago = "Pagado").Count
                    'If consultaExisteItemsCaja > 0 Then
                    '    docCodigoCaja = cajaBL.InsertDocumentoCaja(objDocumento.documentocompra)
                    'End If
                    ''m

                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        Dim codSecuenciaDetalle As Integer = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                        'm
                        'If i.estadoPago = "Pagado" Then
                        '    cajaBL.InsertCajadetalle(i, objDocumento.idDocumento, docCodigoCaja)
                        'End If
                        'm
                    Next


                    If Not IsNothing(objDocumento.ListaCustomDocumento) Then
                        For Each i In objDocumento.ListaCustomDocumento
                            i.nroDoc = objDocumento.documentocompra.serie & "-" & objDocumento.documentocompra.numeroDoc
                            i.documentoCaja.numeroDoc = objDocumento.documentocompra.serie & "-" & objDocumento.documentocompra.numeroDoc
                            SaveCaja(i, objDocumento.idDocumento)
                        Next
                    End If

                    asientoBL.SavebyGroupDoc(objDocumento)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function



#Region "COMPRA SIN RECEPCION - DIRECTA"
    Public Function SaveCompraDirectaSinRecepcion(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen), objDocumentoCaja As documento, cajaUsuario As cajaUsuario, Optional nDocumentoTributo As documento = Nothing) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim totalesBL As New totalesAlmacenBL

        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Select Case objDocumento.documentocompra.TipoConfiguracion
                        Case "M"
                            Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                        Case "P"
                            Me.InsertProgramado(objDocumento.documentocompra, objDocumento.idDocumento)
                    End Select
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            inventario.InsertAV(i, objDocumento)
                        End If
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    '     CajaUsuarioBL.ActualizarMontoCajaUsuarioCompras(cajaUsuario)
                    SaveCaja(objDocumentoCaja, objDocumento.idDocumento)
                    'If Not IsNothing(nDocumentoTributo.documentoObligacionTributaria) Then
                    '    DocumentoTributoBL.SaveObligacionDefaultCompra(nDocumentoTributo, objDocumento.idDocumento)
                    'End If
                    totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)

                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function UpdateCompraDirectaSinRecepcion(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen),
                                       objDocumentoCaja As documento,
                                       nCajaUsuarioMontos As cajaUsuario, nCajaUsuarioEliminar As cajaUsuario)
        Dim DocumentoBL As New documentoBL
        Dim documentocajaDetalleBL As New documentoCajaDetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim asientoBL As New AsientoBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim CajaUsuarioBL As New CajaUsuarioBL
        Dim documentoGuiBL As New documentoGuiaBL
        Dim colIdDocPadre As Integer
        Dim docGuiBL As New documentoGuiaBL
        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL

        Try
            Using ts As New TransactionScope()
                Dim nID = (From n In HeliosData.documentocompra
                           Where n.idDocumento = objDocumento.idDocumento).First

                colIdDocPadre = objDocumento.idDocumento
                If nID.numeroDoc = CStr(objDocumento.documentocompra.numeroDoc) _
                    And nID.serie = objDocumento.documentocompra.serie And
                    nID.idProveedor = objDocumento.documentocompra.idProveedor Then

                    DocumentoBL.Update(objDocumento)
                    '  CajaUsuarioBL.UpdateCajaUsuarioCompras2(nCajaUsuarioMontos, nCajaUsuarioEliminar, objDocumento.documentocompra)
                    Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                    asientoBL.DeleteGroup(objDocumento.idDocumento)
                    inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                    objTotalesAlmacen.UpdateSingleLista(listaTotales, objDeleteTotales)

                    DocumentoBL.DeleteSinglePagado(documentocajaDetalleBL.RecuperarIDCompra(objDocumento.idDocumento)) 'ELIMINANDO DOCUMENTO CAJA
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.Update(i, objDocumento.tipoDoc)
                        'AQUI SE INSERTAN DATOS AL ALMACEN
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            If i.Action <> BaseBE.EntityAction.DELETE Then
                                inventario.InsertPagado(i, objDocumento)
                            End If
                        End If
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)

                    SaveCaja(objDocumentoCaja, objDocumento.idDocumento)

                    If Not IsNothing(objDocumento.documentoGuia) Then

                        docGuiBL.EliminarGuiasRemisionCAC(objDocumento.idDocumento)
                        If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                            docGuiBL.InsertGuiaRemisionCompraAlCredito(objDocumento, objDocumento.idDocumento)
                        End If
                    End If
                    'documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                    'documentoGuiBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)

                    'documentoDetalleObligacionBL.EliminarGrupoTributoPercepcion(colIdDocPadre)
                    'DocumentoBL.EliminarDocNotasRef(colIdDocPadre)
                    documentoDetalleObligacionBL.EliminarGrupoTributoPercepcion(colIdDocPadre)
                    DocumentoBL.EliminarDocNotasRef(colIdDocPadre)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return True
                ElseIf ValidarDocumentoNro(objDocumento.documentocompra) = True Then

                    DocumentoBL.Update(objDocumento)
                    '   CajaUsuarioBL.UpdateCajaUsuarioCompras2(nCajaUsuarioMontos, nCajaUsuarioEliminar, objDocumento.documentocompra)
                    Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                    asientoBL.DeleteGroup(objDocumento.idDocumento)
                    inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                    objTotalesAlmacen.UpdateSingleLista(listaTotales, objDeleteTotales)

                    DocumentoBL.DeleteSinglePagado(documentocajaDetalleBL.RecuperarIDCompra(objDocumento.idDocumento)) 'ELIMINANDO DOCUMENTO CAJA
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.Update(i, objDocumento.tipoDoc)
                        'AQUI SE INSERTAN DATOS AL ALMACEN
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            If i.Action <> BaseBE.EntityAction.DELETE Then
                                inventario.InsertPagado(i, objDocumento)
                            End If
                        End If
                    Next
                    asientoBL.SavebyGroupDoc(objDocumento)
                    SaveCaja(objDocumentoCaja, objDocumento.idDocumento)
                    If Not IsNothing(objDocumento.documentoGuia) Then

                        docGuiBL.EliminarGuiasRemisionCAC(objDocumento.idDocumento)
                        If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                            docGuiBL.InsertGuiaRemisionCompraAlCredito(objDocumento, objDocumento.idDocumento)
                        End If
                    End If
                    'documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                    'documentoGuiBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)

                    'documentoDetalleObligacionBL.EliminarGrupoTributoPercepcion(colIdDocPadre)
                    'DocumentoBL.EliminarDocNotasRef(colIdDocPadre)
                    documentoDetalleObligacionBL.EliminarGrupoTributoPercepcion(colIdDocPadre)
                    DocumentoBL.EliminarDocNotasRef(colIdDocPadre)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return True
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

    Public Sub UpdateDataNotaCredito(intSecuencia As Integer, intImporteMN As Decimal, intImporteME As Decimal,
                              intCantidad As Decimal, CAN_BOF As Decimal)
        Try
            Using ts As New TransactionScope()

                Dim Detalle As documentocompradetalle = HeliosData.documentocompradetalle.Where(Function(o) o.secuencia = intSecuencia).First
                If IsNothing(Detalle.notaCreditoMN) Then
                    Detalle.notaCreditoMN = 0
                End If

                If IsNothing(Detalle.notaCreditoME) Then
                    Detalle.notaCreditoME = 0
                End If

                If IsNothing(Detalle.cantidadCredito) Then
                    Detalle.cantidadCredito = 0
                End If

                'If IsNothing(Detalle.cantidadDebito) Then
                '    Detalle.cantidadDebito = 0
                'End If

                Detalle.cantidadCredito = CDec(Detalle.cantidadCredito) + CDec(intCantidad)
                Detalle.notaCreditoMN = CDec(Detalle.notaCreditoMN) + CDec(intImporteMN)
                Detalle.notaCreditoME = CDec(Detalle.notaCreditoME) + CDec(intImporteME)
                '   Detalle.cantidadDebito = CDec(Detalle.cantidadDebito) + CAN_BOF

                'HeliosData.ObjectStateManager.GetObjectStateEntry(Detalle).State.ToString()
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try

    End Sub

    Public Sub UpdateDataNotaDebito(intSecuencia As Integer, intImporteMN As Decimal, intImporteME As Decimal,
                              intCantidad As Decimal)
        Try
            Using ts As New TransactionScope()

                Dim Detalle As documentocompradetalle = HeliosData.documentocompradetalle.Where(Function(o) o.secuencia = intSecuencia).First
                If IsNothing(Detalle.notaDebitoMN) Then
                    Detalle.notaDebitoMN = 0
                End If

                If IsNothing(Detalle.notaDebitoME) Then
                    Detalle.notaDebitoME = 0
                End If

                If IsNothing(Detalle.cantidadDebito) Then
                    Detalle.cantidadDebito = 0
                End If

                ' Detalle.cantidadCredito = CDec(Detalle.cantidadDebito) + CDec(intCantidad)
                Detalle.notaDebitoMN = CDec(Detalle.notaDebitoMN) + CDec(intImporteMN)
                Detalle.notaDebitoME = CDec(Detalle.notaDebitoME) + CDec(intImporteME)

                'HeliosData.ObjectStateManager.GetObjectStateEntry(Detalle).State.ToString()
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try

    End Sub

    Public Function SaveCompraNotaCredito(objDocumento As documento, nListaTotalesAlmacen As List(Of totalesAlmacen),
                                          nDocumentoNota As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim CAN_BOF As Decimal = 0
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0

        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)

                Select Case objDocumento.documentocompra.destino
                    Case "9917", "9918" 'beneficios. bonificaciones

                        Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                        For Each i In objDocumento.documentocompra.documentocompradetalle

                            compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                            Select Case objDocumento.documentocompra.destino

                                Case "9917" 'beneficios. bonificaciones
                                    inventario.InsertNotaCreditoBoNif(i, objDocumento)
                                Case "9918"
                                    inventario.InsertNotaCredito_Bonificacion(i, objDocumento)
                            End Select

                        Next


                    Case Else
                        Dim totals3 = Aggregate p In HeliosData.documentoCajaDetalle
                          Where p.documentoAfectado = objDocumento.documentocompra.idPadre
                          Into importePagado = Sum(p.montoSoles),
                                importePagadoME = Sum(p.montoUsd)

                        Dim compra As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = objDocumento.documentocompra.idPadre).FirstOrDefault

                        saldo_Pago = compra.importeTotal.GetValueOrDefault - totals3.importePagado.GetValueOrDefault
                        saldo_Pagome = compra.importeUS.GetValueOrDefault - totals3.importePagadoME.GetValueOrDefault
                        saldo_Final = saldo_Pago - objDocumento.documentocompra.importeTotal
                        saldo_Finalme = saldo_Pagome - objDocumento.documentocompra.importeUS
                        If saldo_Final < 0 Then
                            objDocumento.documentocompra.saldoMontoNota = saldo_Final * -1
                            objDocumento.documentocompra.saldoMontoNotaUSD = saldo_Finalme * -1
                            ' objDocumento.documentocompra.estadoPago = "PN"
                        Else
                            '   objDocumento.documentocompra.estadoPago = "DC"
                        End If

                        Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                        For Each i In objDocumento.documentocompra.documentocompradetalle

                            'VALIDANDO ITEMS INGRESADOS COMO NOTA DE CREDITO
                            Dim totalPagosCajaDet = Aggregate p In HeliosData.documentoCajaDetalle
                                   Where p.idItem = i.idItem And p.documentoAfectado = compra.idDocumento
                   Into importePagadoItem = Sum(p.montoSoles),
                        importePagadoMEItem = Sum(p.montoUsd)

                            Dim compraDetalle As documentocompradetalle = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = compra.idDocumento _
                                                                                                                   And o.idItem = i.idItem).FirstOrDefault

                            saldoItem = compraDetalle.importe - i.importe - totalPagosCajaDet.importePagadoItem.GetValueOrDefault - compraDetalle.notaCreditoMN.GetValueOrDefault '+ compraDetalle.notaDebitoMN.GetValueOrDefault
                            saldoItemME = compraDetalle.importeUS - i.importeUS - totalPagosCajaDet.importePagadoMEItem.GetValueOrDefault - compraDetalle.notaCreditoME.GetValueOrDefault '+ compraDetalle.notaDebitoME.GetValueOrDefault
                            'saldoItem = compraDetalle.importe - i.importe - totalPagosCajaDet.importePagadoItem.GetValueOrDefault - compraDetalle.notaCreditoMN.GetValueOrDefault ' + compraDetalle.notaDebitoMN.GetValueOrDefault
                            'saldoItemME = compraDetalle.importeUS - i.importeUS - totalPagosCajaDet.importePagadoMEItem.GetValueOrDefault - compraDetalle.notaCreditoME.GetValueOrDefault ' + compraDetalle.notaDebitoME.GetValueOrDefault

                            If saldoItem < 0 Then
                                i.bonificacion = "S"
                                i.notaCreditoMN = saldoItem * -1
                                i.notaCreditoME = saldoItemME * -1
                            Else
                                i.bonificacion = "N"
                            End If

                            compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                            Select Case objDocumento.documentocompra.destino
                                Case "9913" 'DISMI CA
                                    Select Case i.tipoExistencia
                                        Case "GS"

                                        Case Else
                                            inventario.InsertNotaCredito(i, objDocumento)
                                    End Select
                                Case "9914", "9916" 'DISMI IMPORTE, DEV EXIST

                                    Select Case i.tipoExistencia
                                        Case "GS"

                                        Case Else
                                            inventario.InsertNotaCredito(i, objDocumento)
                                    End Select
                                    'Case "9917" 'beneficios. bonificaciones
                                    '    inventario.InsertNotaCredito(i, objDocumento)

                            End Select

                        Next
                End Select


                Select Case objDocumento.documentocompra.destino
                    Case "9913" 'DISMI CA
                        totalesBL.SaveTotalesListaCompraPagada(nListaTotalesAlmacen, 0)
                    Case "9914", "9916" 'DISMI IMPORTE, DEV EXIST
                        asientoBL.SavebyGroupDoc(objDocumento)
                        totalesBL.SaveTotalesListaCompraPagada(nListaTotalesAlmacen, 0)
                    Case "9917" 'beneficios. bonificaciones
                        asientoBL.SavebyGroupDoc(objDocumento)
                        totalesBL.SaveTotalesListaCompraPagada(nListaTotalesAlmacen, 0)
                    Case "9918"
                        totalesBL.SaveTotalesListaCompraPagada(nListaTotalesAlmacen, 0)
                End Select


                If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                    guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                End If
                If Not IsNothing(nDocumentoNota.idEmpresa) Then
                    SaveCaja(nDocumentoNota, objDocumento.idDocumento)
                End If
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub EliminarDetalleNotaCredito(compraDetalle As List(Of documentocompradetalle))

    End Sub

    Public Sub EliminarNotaCreditoMetodoNuevo(obj As documento)
        Dim t As New totalesAlmacen
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Dim documentoBL As New documentoBL
        Dim recursoBL As New recursoCostoDetalleBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Try

            Dim compraDetalle As List(Of documentocompradetalle) = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = obj.idDocumento).ToList
            Dim NotaCredito = HeliosData.documentocompra.Where(Function(o) o.idDocumento = obj.idDocumento).FirstOrDefault

            Dim fechaActual = New Date(NotaCredito.fechaDoc.Value.Year, NotaCredito.fechaDoc.Value.Month, 1)
            Dim fechaAnterior = fechaActual.AddMonths(-1)

            'si es false es porque no esta dentro del inicio de operaciones
            Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(NotaCredito.idEmpresa, fechaActual, NotaCredito.idCentroCosto)
            If valor = "False" Then
                If cierreinventarioBL.InventarioEstaCerradoV2(NotaCredito.idEmpresa, fechaActual.Year, fechaActual.Month, NotaCredito.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = NotaCredito.idEmpresa,
                                                .idCentroCosto = NotaCredito.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                End If
            ElseIf valor = "True" Then
                Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
            Else
                If cierreinventarioBL.InventarioEstaCerradoV2(NotaCredito.idEmpresa, fechaActual.Year, fechaActual.Month, NotaCredito.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                '                                    {.idEmpresa = objDocumento.idEmpresa,
                '                                     .anio = fechaAnterior.Year,
                '                                     .mes = fechaAnterior.Month}) = False Then
                '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                'End If
            End If

            Using ts As New TransactionScope

                EliminarNotaCreditoMetodoNuevo_SPK(obj)

                Dim ListaArticulos = (From n In compraDetalle
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.almacenRef, n.tipoExistencia, n.codigoLote).Distinct.ToList


                For Each a In ListaArticulos
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                       .fecha = New DateTime(NotaCredito.fechaDoc.Value.Year,
                                                                                                                                             NotaCredito.fechaDoc.Value.Month, 1),
                                                                                                                       .tipoProducto = a.tipoExistencia,
                                                                                                                       .idItem = a.idItem,
                                                                                                                       .nrolote = a.codigoLote},
                                                                                                                   New cierreinventario With {.anio = NotaCredito.fechaDoc.Value.Year, .mes = NotaCredito.fechaDoc.Value.Month})
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub EliminarNotaCreditoMetodoNuevo_SPK(obj As documento)
        Dim t As New totalesAlmacen
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Dim documentoBL As New documentoBL
        Dim recursoBL As New recursoCostoDetalleBL
        Try
            Using ts As New TransactionScope
                'If TieneNotasCD(obj.IdDocumentoAfectado) = True Then
                '    Throw New Exception("No puede eliminar cuando existan varias referencias!!")
                'Else
                Dim compra As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = obj.IdDocumentoAfectado).FirstOrDefault
                Dim compraDetalle As List(Of documentocompradetalle) = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = obj.idDocumento).ToList
                inventarioBL.DeleteInventarioPorDocumento(obj.idDocumento)
                documentoCajaDetalleBL.DeleteDocumentoCaja(obj.idDocumento)

                Dim lista As New List(Of String)
                lista.Add("07")
                lista.Add("87")

                Dim listaHijas = (From n In HeliosData.documentocompra Where lista.Contains(n.tipoDoc) _
                                 AndAlso n.idPadre = obj.idDocumento AndAlso n.tipoCompra = "EXD").ToList

                For Each i In listaHijas
                    documentoCajaDetalleBL.DeleteDocumentoCaja(i.idDocumento)
                    documentoBL.DeleteSingleVariable(i.idDocumento)
                Next
                documentoBL.DeleteSingle2Free(obj)

                documentoCajaDetalleBL.ActualizarItemsPagosFullCompras(obj.IdDocumentoAfectado)

                Dim ventaDetalle = (From n In HeliosData.documentocompradetalle
                                    Where n.idDocumento = compra.idDocumento AndAlso n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
                              And n.bonificacion <> "S").Count

                If ventaDetalle > 0 Then
                    compra.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                Else
                    compra.estadoPago = TIPO_COMPRA.PAGO.PAGADO
                End If

                'eliminado costos referenciados
                recursoBL.eliminarDetalleCostoByIdDocumento(obj.idDocumento)


                'Dim ListaArticulos = (From n In compraDetalle
                '                      Where n.tipoExistencia <> "GS"
                '                      Select n.idItem, n.almacenRef, n.tipoExistencia).Distinct.ToList


                'For Each a In ListaArticulos
                '    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                '                                                                                                       .fecha = New DateTime(compra.fechaDoc.Value.Year, compra.fechaDoc.Value.Month, 1),
                '                                                                                                       .tipoProducto = a.tipoExistencia,
                '                                                                                                       .idItem = a.idItem},
                '                                                                                                   New cierreinventario With {.anio = compra.fechaDoc.Value.Year, .mes = compra.fechaDoc.Value.Month})
                '    totalesBL.GetCurarKardexCaberas(listaAcurar)
                'Next
                HeliosData.SaveChanges()
                ts.Complete()
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub EliminarNotaCreditoBonificacion(obj As documento)
        Dim t As New totalesAlmacen
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Dim documentoBL As New documentoBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Try
            Using ts As New TransactionScope
                Dim compraDetalle As List(Of documentocompradetalle) = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = obj.idDocumento).ToList
                For Each i In compraDetalle
                    Select Case i.tipoExistencia
                        Case "GS"

                        Case Else
                            t = New totalesAlmacen
                            t.idEmpresa = obj.idEmpresa
                            t.idEstablecimiento = obj.idCentroCosto
                            t.idAlmacen = i.almacenRef
                            t.origenRecaudo = i.destino
                            t.idItem = i.idItem
                            t.cantidad = i.monto1 * -1
                            t.importeSoles = i.importe * -1
                            t.importeDolares = i.importeUS * -1
                            totalesBL.UpdateSingle2(t)
                    End Select
                Next
                inventarioBL.DeleteInventarioPorDocumento(obj.idDocumento)


                'eliminado costos referenciados
                recursoCostoBL.eliminarDetalleCostoByIdDocumento(obj.idDocumento)

                documentoBL.DeleteSingle2Free(obj)
                HeliosData.SaveChanges()
                ts.Complete()
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub EliminarNotaDebitoMetodoNuevo_SPK(obj As documento)
        Dim t As New totalesAlmacen
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Dim documentoBL As New documentoBL
        Try
            Using ts As New TransactionScope
                'Dim compraDetalle As List(Of documentocompradetalle) = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = obj.idDocumento).ToList

                documentoCajaDetalleBL.DeleteDocumentoCaja(obj.idDocumento)

                Dim cajaDetalle = (From n In HeliosData.documentoCajaDetalle
                                   Where n.documentoAfectado = obj.IdDocumentoAfectado And n.montoSoles = obj.ImporteMN _
                                  AndAlso n.montoUsd = obj.ImporteME).FirstOrDefault

                If Not IsNothing(cajaDetalle) Then
                    documentoCajaDetalleBL.DeleteDocumentoCaja(cajaDetalle.idDocumento)
                    documentoBL.DeleteSingleVariable(cajaDetalle.idDocumento)
                End If
                inventarioBL.DeleteInventarioPorDocumento(obj.idDocumento)
                documentoBL.DeleteSingleVariable(obj.idDocumento)

                documentoCajaDetalleBL.ActualizarItemsPagosFullCompras(obj.IdDocumentoAfectado)

                Dim venta As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = obj.IdDocumentoAfectado).FirstOrDefault

                Dim ventaDetalle = (From n In HeliosData.documentocompradetalle
                                    Where n.idDocumento = venta.idDocumento AndAlso
                              n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
                              And n.bonificacion <> "S").Count

                If ventaDetalle > 0 Then
                    venta.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                Else
                    venta.estadoPago = TIPO_COMPRA.PAGO.PAGADO
                End If

                'Dim ListaArticulos = (From n In compraDetalle
                '                      Where n.tipoExistencia <> "GS"
                '                      Select n.idItem, n.almacenRef, n.tipoExistencia).Distinct.ToList


                'For Each a In ListaArticulos
                '    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                '                                                                                                       .fecha = New DateTime(venta.fechaDoc.Value.Year, venta.fechaDoc.Value.Month, 1),
                '                                                                                                       .tipoProducto = a.tipoExistencia,
                '                                                                                                       .idItem = a.idItem},
                '                                                                                                   New cierreinventario With {.anio = venta.fechaDoc.Value.Year, .mes = venta.fechaDoc.Value.Month})
                '    totalesBL.GetCurarKardexCaberas(listaAcurar)
                'Next

                HeliosData.SaveChanges()
                ts.Complete()
                'End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub EliminarNotaDebitoMetodoNuevo(obj As documento)
        Dim t As New totalesAlmacen
        Dim totalesBL As New totalesAlmacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        Dim documentoBL As New documentoBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Try
            Dim compraDetalle As List(Of documentocompradetalle) = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = obj.idDocumento).ToList
            Dim NotaDebito = HeliosData.documentocompra.Where(Function(o) o.idDocumento = obj.idDocumento).FirstOrDefault

            Dim fechaActual = New Date(NotaDebito.fechaDoc.Value.Year, NotaDebito.fechaDoc.Value.Month, 1)
            Dim fechaAnterior = fechaActual.AddMonths(-1)

            'si es false es porque no esta dentro del inicio de operaciones
            Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(NotaDebito.idEmpresa, fechaActual, NotaDebito.idCentroCosto)
            If valor = "False" Then
                If cierreinventarioBL.InventarioEstaCerradoV2(NotaDebito.idEmpresa, fechaActual.Year, fechaActual.Month, NotaDebito.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = NotaDebito.idEmpresa,
                                                .idCentroCosto = NotaDebito.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                End If
            ElseIf valor = "True" Then
                Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
            Else
                If cierreinventarioBL.InventarioEstaCerradoV2(NotaDebito.idEmpresa, fechaActual.Year, fechaActual.Month, NotaDebito.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                '                                    {.idEmpresa = objDocumento.idEmpresa,
                '                                     .anio = fechaAnterior.Year,
                '                                     .mes = fechaAnterior.Month}) = False Then
                '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                'End If
            End If

            Using ts As New TransactionScope
                EliminarNotaDebitoMetodoNuevo_SPK(obj)

                Dim ListaArticulos = (From n In compraDetalle
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.almacenRef, n.tipoExistencia, n.codigoLote).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                       .fecha = New DateTime(NotaDebito.fechaDoc.Value.Year,
                                                                                                                                             NotaDebito.fechaDoc.Value.Month, 1),
                                                                                                                       .tipoProducto = a.tipoExistencia,
                                                                                                                       .idItem = a.idItem,
                                                                                                                       .nrolote = a.codigoLote},
                                                                                                                   New cierreinventario With {.anio = NotaDebito.fechaDoc.Value.Year, .mes = NotaDebito.fechaDoc.Value.Month})
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function UbicarExcedenteCompraPorProveedorXperiodo(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As Integer, strPeriodo As String, intmoneda As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        'Dim consulta = (From n In HeliosData.documentoventaAbarrotes _
        '        Where n.idEmpresa = strEmpresa And n.idEstablecimiento = intIdEstablecimiento _
        '        And n.idCliente = strRuc And n.fechaPeriodo = strPeriodo And n.tipoVenta = "EXD" Order By n.fechaDoc).ToList


        'Dim consulta2 = (From n In HeliosData.documentocompra _
        '               Group Join cajadet In HeliosData.documentoCajaDetalle _
        '               On n.idDocumento Equals cajadet.documentoAfectado _
        '               Into ords = Group _
        '               From c In ords.DefaultIfEmpty _
        '               Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
        '               And n.idProveedor = strRuc And n.fechaContable = strPeriodo And n.tipoCompra = "EXD" _
        '               Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc,
        '               n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
        '               n.importeUS, n.estadoPago Into g = Group _
        '               Select New With {
        '                              .idDocumento = idDocumento,
        '                              .tipoCompra = tipoCompra,
        '                              .fechaPeriodo = fechaContable,
        '                              .fechaDoc = fechaDoc,
        '                              .serie = serie,
        '                              .numeroDoc = numeroDoc,
        '                              .tipoDocumento = tipoDoc,
        '                              .moneda = monedaDoc,
        '                              .ImporteNacional = importeTotal,
        '                              .tipoCambio = tcDolLoc,
        '                              .ImporteExtranjero = importeUS,
        '                              .estadoCobro = estadoPago,
        '                              .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
        '                              .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList



        Dim con = (From c In HeliosData.documentocompra
                   Where
                (New String() {"EXD"}).Contains(c.tipoCompra) And
                 c.idEmpresa = strEmpresa And c.idCentroCosto = intIdEstablecimiento _
                     And c.idProveedor = strRuc And c.fechaContable = strPeriodo _
                     And c.monedaDoc = intmoneda
                   Select
                c.idDocumento,
                c.tipoCompra,
                c.fechaContable,
                c.fechaDoc,
                c.serie,
                c.numeroDoc,
                c.tipoDoc,
                c.monedaDoc,
                c.importeTotal,
                c.tcDolLoc,
                c.importeUS,
                c.estadoPago,
                PagosMN = (CType((Aggregate t1 In
                                  (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                   Where
                                   DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                   Select New With {
                                       DocumentoCajaDetalle.montoSoles
                                   }) Into Sum(t1.montoSoles)), Decimal?)),
               PagosME = (CType((Aggregate t1 In
                                 (From DocumentoCajaDetalle In HeliosData.documentoCajaDetalle
                                  Where
                                  DocumentoCajaDetalle.documentoAfectado = c.idDocumento
                                  Select New With {
                                      DocumentoCajaDetalle.montoUsd
                                  }) Into Sum(t1.montoUsd)), Decimal?)),
              PagoNotaCredito = (CType((Aggregate t1 In
                                        (From Documentocompra In HeliosData.documentocompra
                                         Where
                                         (New String() {"07", "87", "9901"}).Contains(Documentocompra.tipoDoc) And
                                         Documentocompra.idPadre = c.idDocumento
                                         Select New With {
                                             Documentocompra.importeTotal
                                         }) Into Sum(t1.importeTotal)), Decimal?)),
                     PagoNotaDebito = (CType((Aggregate t1 In
                                              (From Documentocompra In HeliosData.documentocompra
                                               Where
                                               (New String() {"08", "88"}).Contains(Documentocompra.tipoDoc) And
                                               Documentocompra.idPadre = c.idDocumento
                                               Select New With {
                                                   Documentocompra.importeTotal
                                               }) Into Sum(t1.importeTotal)), Decimal?)),
                           Conteo = ((Aggregate t1 In
                                      (From cro In HeliosData.Cronograma
                                       Where
                                       cro.idDocumentoRef = c.idDocumento And
                                       cro.estado = "PN"
                                       Select New With {
                                              cro
                                       }) Into Count()))).ToList

        For Each i In con
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoCompra
            doccompra.fechaContable = i.fechaContable
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDoc
            doccompra.monedaDoc = i.monedaDoc
            doccompra.importeTotal = i.importeTotal
            doccompra.tcDolLoc = i.tcDolLoc
            doccompra.importeUS = i.importeUS
            doccompra.PagoSumaMN = i.PagosMN.GetValueOrDefault
            doccompra.PagoSumaME = i.PagosME.GetValueOrDefault
            doccompra.estadoPago = i.estadoPago
            doccompra.PagoNotaCreditoMN = i.PagoNotaCredito.GetValueOrDefault
            doccompra.PagoNotaCreditoME = 0 ' i.PagoNotaCreditoME.GetValueOrDefault
            doccompra.PagoNotaDebitoMN = i.PagoNotaDebito.GetValueOrDefault
            doccompra.PagoNotaDebitoME = 0 ' i.PagoNotaDebitoME.GetValueOrDefault
            doccompra.conteoCuotas = i.Conteo
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function


    Public Function SaveCompraNotaCredito2(objDocumento As documento,
                                          nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim docVenta As New documentoventaAbarrotesBL
        Dim CAN_BOF As Decimal = 0
        Dim saldo_Final As Decimal = 0
        Dim saldo_Finalme As Decimal = 0
        Dim saldo_Pago As Decimal = 0
        Dim saldo_Pagome As Decimal = 0

        Dim saldoItem As Decimal = 0
        Dim saldoItemME As Decimal = 0
        Dim cajaBL As New documentoCajaDetalleBL
        Dim t As New totalesAlmacen
        Dim nMovimiento As New movimiento
        Dim nAsiento As New asiento
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval = 0
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Try

            Dim fechaActual = New Date(objDocumento.documentocompra.fechaDoc.Value.Year, objDocumento.documentocompra.fechaDoc.Value.Month, 1)
            Dim fechaAnterior = fechaActual.AddMonths(-1)


            'si es false es porque no esta dentro del inicio de operaciones
            Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(objDocumento.idEmpresa, fechaActual, objDocumento.idCentroCosto)
            If valor = "False" Then
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = objDocumento.idEmpresa,
                                                .idCentroCosto = objDocumento.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                End If
            ElseIf valor = "True" Then
                Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
            Else
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                '                                    {.idEmpresa = objDocumento.idEmpresa,
                '                                     .anio = fechaAnterior.Year,
                '                                     .mes = fechaAnterior.Month}) = False Then
                '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                'End If
            End If

            Using ts As New TransactionScope()
                Dim codTipoDoc As String = objDocumento.tipoDoc
                Dim compra As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = objDocumento.documentocompra.idPadre).FirstOrDefault
                Dim codcomprobante = objDocumento.tipoDoc
                compra.fechaActualizacion = Date.Now

                Select Case objDocumento.tipoDoc
                    Case "87"
                        ' compra.estadoPago = "ANU"

                        cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorCodigo("NCE"))
                        objDocumento.nroDoc = "1-" & cval
                        objDocumento.documentocompra.serie = "1"
                        objDocumento.documentocompra.numeroDoc = cval
                    Case Else

                End Select
                DocumentoBL.Insert(objDocumento)
                Dim codNota = objDocumento.idDocumento
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    Dim itemDetalle = compraDetalleBL.GetUbicar_documentocompradetallePorID(i.secuencia)
                    i.codigoLote = itemDetalle.codigoLote
                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

                    'VALIDANDO ITEMS INGRESADOS COMO NOTA DE CREDITO
                    cajaBL.ActualizarItemsPagosCompra(i, objDocumento.documentocompra.idPadre)
                    '--------------------------------------------------------

                    Select Case i.TipoOperacion
                        Case "9913" 'DISMI CA
                            Select Case i.tipoExistencia
                                Case "GS"

                                    'nAsiento = New asiento
                                    'nAsiento.periodo = objDocumento.documentocompra.fechaContable
                                    'nAsiento.idDocumento = objDocumento.idDocumento
                                    'nAsiento.idEmpresa = Gempresas.IdEmpresaRuc
                                    'nAsiento.idCentroCostos = GEstableciento.IdEstablecimiento
                                    'nAsiento.idDocumentoRef = objDocumento.idDocumento
                                    'nAsiento.fechaProceso = (objDocumento.fechaProceso)
                                    'nAsiento.codigoLibro = "8"
                                    'nAsiento.tipo = "D"
                                    'nAsiento.tipoAsiento = "ACCL"
                                    'nAsiento.importeMN = i.montokardex
                                    'nAsiento.importeME = i.montokardexUS
                                    'nAsiento.glosa = "Asiento de costo"
                                    'nAsiento.usuarioActualizacion = objDocumento.usuarioActualizacion
                                    'nAsiento.fechaActualizacion = objDocumento.fechaActualizacion


                                    'nMovimiento = New movimiento
                                    'nMovimiento.cuenta = "791"
                                    'nMovimiento.descripcion = "CARGAS IMPUTABLES A CUENTAS DE COSTOS Y GASTOS"
                                    'nMovimiento.tipo = "D"
                                    'nMovimiento.monto = i.montokardex
                                    'nMovimiento.montoUSD = i.montokardexUS
                                    'nMovimiento.usuarioActualizacion = i.usuarioModificacion
                                    'nMovimiento.fechaActualizacion = i.fechaModificacion
                                    'nAsiento.movimiento.Add(nMovimiento)

                                    'nMovimiento = New movimiento
                                    'nMovimiento.cuenta = "91"
                                    'nMovimiento.descripcion = "COSTOS POR DISTRIBUIR."
                                    'nMovimiento.tipo = "H"
                                    'nMovimiento.monto = i.montokardex
                                    'nMovimiento.montoUSD = i.montokardexUS
                                    'nMovimiento.usuarioActualizacion = i.usuarioModificacion
                                    'nMovimiento.fechaActualizacion = i.fechaModificacion
                                    'nAsiento.movimiento.Add(nMovimiento)

                                    'asientoBL.Insert(nAsiento, objDocumento.idDocumento)
                                Case Else
                                    Select Case objDocumento.tipoDoc
                                        Case "87"
                                            i.Serie = "1"
                                            i.NumDoc = cval
                                        Case Else

                                    End Select
                                    i.codigoLote = itemDetalle.codigoLote
                                    i.nrolote = itemDetalle.codigoLote
                                    inventario.InsertNotaCredito(i, objDocumento)

                                    't = New totalesAlmacen
                                    't.idEmpresa = i.IdEmpresa
                                    't.idEstablecimiento = i.IdEstablecimiento
                                    't.idAlmacen = i.almacenRef
                                    't.origenRecaudo = i.destino
                                    't.idItem = i.idItem
                                    't.cantidad = i.monto1 * -1
                                    't.precioUnitarioCompra = i.precioUnitario * -1
                                    't.importeSoles = i.montokardex * -1
                                    't.importeDolares = i.montokardexUS * -1


                                    'totalesBL.UpdateSingle2(t)
                            End Select
                        Case "9914", "9916" 'DISMI IMPORTE, DEV EXIST

                            Select Case i.tipoExistencia
                                Case "GS"

                                    'nAsiento = New asiento
                                    'nAsiento.idDocumento = objDocumento.idDocumento
                                    'nAsiento.periodo = objDocumento.documentocompra.fechaContable
                                    'nAsiento.idEmpresa = Gempresas.IdEmpresaRuc
                                    'nAsiento.idCentroCostos = GEstableciento.IdEstablecimiento
                                    'nAsiento.idDocumentoRef = objDocumento.idDocumento
                                    'nAsiento.fechaProceso = (objDocumento.fechaProceso)
                                    'nAsiento.codigoLibro = "8"
                                    'nAsiento.tipo = "D"
                                    'nAsiento.tipoAsiento = "ACCL"
                                    'nAsiento.importeMN = i.montokardex
                                    'nAsiento.importeME = i.montokardexUS
                                    'nAsiento.glosa = "Asiento de costo"
                                    'nAsiento.usuarioActualizacion = objDocumento.usuarioActualizacion
                                    'nAsiento.fechaActualizacion = objDocumento.fechaActualizacion


                                    'nMovimiento = New movimiento
                                    'nMovimiento.cuenta = "791"
                                    'nMovimiento.descripcion = "CARGAS IMPUTABLES A CUENTAS DE COSTOS Y GASTOS"
                                    'nMovimiento.tipo = "D"
                                    'nMovimiento.monto = i.montokardex
                                    'nMovimiento.montoUSD = i.montokardexUS
                                    'nMovimiento.usuarioActualizacion = i.usuarioModificacion
                                    'nMovimiento.fechaActualizacion = i.fechaModificacion
                                    'nAsiento.movimiento.Add(nMovimiento)

                                    'nMovimiento = New movimiento
                                    'nMovimiento.cuenta = "91"
                                    'nMovimiento.descripcion = "COSTOS POR DISTRIBUIR."
                                    'nMovimiento.tipo = "H"
                                    'nMovimiento.monto = i.montokardex
                                    'nMovimiento.montoUSD = i.montokardexUS
                                    'nMovimiento.usuarioActualizacion = i.usuarioModificacion
                                    'nMovimiento.fechaActualizacion = i.fechaModificacion
                                    'nAsiento.movimiento.Add(nMovimiento)
                                    'asientoBL.Insert(nAsiento, objDocumento.idDocumento)
                                Case Else
                                    Select Case objDocumento.tipoDoc
                                        Case "87"
                                            i.Serie = "1"
                                            i.NumDoc = cval
                                        Case Else

                                    End Select
                                    i.codigoLote = itemDetalle.codigoLote
                                    i.nrolote = itemDetalle.codigoLote
                                    inventario.InsertNotaCredito(i, objDocumento)


                                    't = New totalesAlmacen
                                    't.idEmpresa = i.IdEmpresa
                                    't.idEstablecimiento = i.IdEstablecimiento
                                    't.idAlmacen = i.almacenRef
                                    't.origenRecaudo = i.destino
                                    't.idItem = i.idItem
                                    't.cantidad = i.monto1 * -1
                                    't.precioUnitarioCompra = i.precioUnitario * -1
                                    't.importeSoles = i.montokardex * -1
                                    't.importeDolares = i.montokardexUS * -1
                                    'totalesBL.UpdateSingle2(t)
                            End Select
                            'Case "9917" 'beneficios. bonificaciones
                            '    inventario.InsertNotaCredito(i, objDocumento)


                        Case "9925"

                    End Select

                Next

                If Not IsNothing(objDocumento.documentoGuia) Then
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        Select Case codTipoDoc 'objDocumento.tipoDoc
                            Case "87"
                                'cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(13064))
                                cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorCodigo("NCE"))
                                objDocumento.nroDoc = "1-" & cval
                                objDocumento.documentoGuia.serie = "1"
                                objDocumento.documentoGuia.numeroDoc = cval
                            Case Else

                        End Select
                        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                    End If
                End If

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        objDocumento.idDocumento = codNota
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If
                'Cobrando Saldo de la venta cuando es una venta al credito
                '    If objDocumento.documentoventaAbarrotes.ImporteDevMN > 0 Then
                'If objDocumento.documentoventaAbarrotes.SaldoVentaMN > 0 Then
                If Not IsNothing(nDocumentoSaldoVenta.documentoCaja) Then
                    If Not IsNothing(nDocumentoSaldoVenta.documentoCaja.idEmpresa) Then
                        SaveCaja(nDocumentoSaldoVenta, objDocumento.documentocompra.idPadre)
                    End If
                End If

                '-----------------------------------------------------------------------------------
                'creando documento de excendente por devolucion de dinero
                If Not IsNothing(objDocumento.documentocompra.EstadoPagoDevolucion) Then
                    objDocumento.idDocumento = codNota
                    Dim codGenerado = GrabarDocumentoDevolucion(objDocumento)

                    Select Case objDocumento.documentocompra.EstadoPagoDevolucion
                        Case TIPO_VENTA.PAGO.COBRADO
                            If Not IsNothing(nDocumentoNota.idEmpresa) Then
                                Dim listaPagos As List(Of documentocompradetalle) = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = codGenerado).ToList
                                SaveCaja2(nDocumentoNota, codGenerado, listaPagos)
                            End If
                        Case TIPO_VENTA.PAGO.PENDIENTE_PAGO

                    End Select

                End If

                Select Case codcomprobante
                    Case "87"
                        compra.estadoPago = "ANU" 'TIPO_COMPRA.PAGO.PAGADO
                    Case Else
                        Dim ventaDetalle = (From n In HeliosData.documentocompradetalle
                                            Where n.idDocumento = compra.idDocumento _
                                                          AndAlso n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
                                                          AndAlso n.bonificacion <> "S").Count

                        If ventaDetalle > 0 Then
                            compra.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                        Else
                            compra.estadoPago = TIPO_COMPRA.PAGO.PAGADO
                        End If
                End Select

                Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.almacenRef, n.tipoExistencia, n.codigoLote).Distinct.ToList


                For Each a In ListaArticulos
                    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                     .fecha = New DateTime(objDocumento.fechaProceso.Year,
                                                                                                                                           objDocumento.fechaProceso.Month, 1),
                                                                                                                     .tipoProducto = a.tipoExistencia,
                                                                                                                     .idItem = a.idItem,
                                                                                                                     .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub confirmarTrasnferenciaPedniente(be As documentocompra)
        Dim inventario As New InventarioMovimientoBL
        Dim ventaBL As New documentoventaAbarrotesBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim fechaActual = New Date(be.fechaDoc.Value.Year, be.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)
        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(be.idEmpresa, fechaActual, be.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = be.idEmpresa,
                                                .idCentroCosto = be.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If
        End If

        Using ts As New TransactionScope
            Dim d As New documentocompradetalle
            Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = be.idDocumento).FirstOrDefault
            Dim detalle = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = be.idDocumento).ToList


            compra.tipoDoc = be.tipoDoc
            compra.serie = be.serie
            compra.numeroDoc = be.numeroDoc
            compra.estadoEntrega = be.estadoEntrega

            For Each i In detalle
                i.TipoOperacion = StatusTipoOperacion.TRANSFERENCIA_ENTRE_ALMACENES
                i.fechaEntrega = be.fechaDoc
                i.ItemEntregadototal = "S"
            Next

            Dim numeroVenta = be.numeroDoc
            ventaBL.DetalleInventarioJiuni_Logistica(detalle, compra, numeroVenta)

            guiaBL.InsertGuiaNuevo(be.documento, compra.idDocumento)

            Dim listaVentaDet = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = compra.idDocumento).ToList

            If listaVentaDet.Count > 0 Then
                Dim fechaEnvioAlmacen = be.fechaDoc.Value.Date
                For Each a In listaVentaDet
                    Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                    New InventarioMovimiento With {
                    .idAlmacen = a.idAlmacen,
                    .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                    .tipoProducto = a.tipoProducto,
                    .idItem = a.idItem,
                    .nrolote = a.nrolote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(lista)
                Next
            End If
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub GrabarNotaCompraDirecta(be As documento)
        Dim inventario As New InventarioMovimientoBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim totalesBL As New totalesAlmacenBL
        Dim fechaActual = New Date(be.documentocompra.fechaDoc.Value.Year, be.documentocompra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(be.idEmpresa, fechaActual, be.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = be.idEmpresa,
                                                .idCentroCosto = be.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If
        End If

        Using ts As New TransactionScope
            GrabarNotaCompra(be)
            Dim listaCompraDet = be.documentocompra.documentocompradetalle.ToList
            Dim ListaArticulos = (From n In listaCompraDet
                                  Where n.tipoExistencia <> "GS"
                                  Select n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct.ToList

            Dim fechaCompra = be.documentocompra.fechaDoc
            For Each a In ListaArticulos
                Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                    New InventarioMovimiento With
                    {
                    .idAlmacen = a.almacenRef,
                    .fecha = New DateTime(fechaCompra.Value.Year, fechaCompra.Value.Month, 1),
                    .tipoProducto = a.tipoExistencia,
                    .idItem = a.idItem,
                    .nrolote = a.codigoLote}, Nothing)
                totalesBL.GetCurarKardexCaberasLOTE(lista)
            Next

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub GrabarCompraAdicionalLoteExistente(be As documento)
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim fechaActual = New Date(be.documentocompra.fechaDoc.Value.Year, be.documentocompra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(be.idEmpresa, fechaActual, be.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = be.idEmpresa,
                                                .idCentroCosto = be.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(be.idEmpresa, fechaActual.Year, fechaActual.Month, be.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If
        End If

        Using ts As New TransactionScope()
            GrabarCompraAdicionalLoteExistente_SPK(be)
            Dim listaCompraDet = be.documentocompra.documentocompradetalle.ToList
            Dim ListaArticulos = (From n In listaCompraDet
                                  Where n.tipoExistencia <> "GS"
                                  Select n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct.ToList

            Dim fechaCompra = be.documentocompra.fechaDoc
            For Each a In ListaArticulos
                Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                    New InventarioMovimiento With
                    {
                    .idAlmacen = a.almacenRef,
                    .fecha = New DateTime(fechaCompra.Value.Year, fechaCompra.Value.Month, 1),
                    .tipoProducto = a.tipoExistencia,
                    .idItem = a.idItem,
                    .nrolote = a.codigoLote}, Nothing)
                totalesBL.GetCurarKardexCaberasLOTE(lista)
            Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub GrabarCompraAdicionalLoteExistente_SPK(be As documento)
        Dim PrecioBL As New ConfiguracionPrecioProductoBL
        Dim inventario As New InventarioMovimientoBL
        Dim documentoBL As New documentoBL
        Dim loteBL As New recursoCostoLoteBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Using ts As New TransactionScope()
            documentoBL.Insert(be)
            Dim codDocumento As Integer = be.idDocumento
            Insert(be.documentocompra, be.idDocumento)
            Dim codigoLote = 0
            For Each i In be.documentocompra.documentocompradetalle
                If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                    codigoLote = i.codigoLote

                    Dim codSecuenciaDetalle As Integer = compraDetalleBL.InsertSingle(i, be.idDocumento)
                    If i.tipoExistencia <> "08" Then
                        i.secuencia = codSecuenciaDetalle
                        i.nrolote = codigoLote
                        inventario.InsertPagado(i, be)
                    End If
                End If
            Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub GrabarNotaCompra(be As documento)
        Dim PrecioBL As New ConfiguracionPrecioProductoBL
        Dim inventario As New InventarioMovimientoBL
        Dim documentoBL As New documentoBL
        Dim loteBL As New recursoCostoLoteBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Using ts As New TransactionScope()
            documentoBL.Insert(be)
            Dim codDocumento As Integer = be.idDocumento
            Insert(be.documentocompra, be.idDocumento)
            Dim codigoLote = 0
            For Each i In be.documentocompra.documentocompradetalle
                If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                    If be.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then
                        codigoLote = i.codigoLote
                    Else
                        codigoLote = loteBL.GrabarLotesOne(i.CustomRecursoCostoLote)
                    End If

                    i.codigoLote = codigoLote

                    Dim articulo = HeliosData.detalleitems.Where(Function(o) o.codigodetalle = i.idItem).Single
                    If i.CustomPrecios IsNot Nothing Then
                        If i.CustomPrecios.Count > 0 Then
                            PrecioBL.GrabarListadoPrecios(i.CustomPrecios)
                        End If
                    End If
                    If articulo.AfectoCompra Then
                        If articulo.Retencion.HasValue Then
                            If articulo.Retencion = True Then
                                Dim porcentaje = articulo.ValorRetencion / 100
                                Dim importeCompra = i.importe
                                Dim montoRecaudo = importeCompra * porcentaje
                                i.tipoRecaudo = "R"
                                i.porcRecaudo = articulo.ValorRetencion
                                i.valorRecaudo = montoRecaudo
                            End If
                        End If

                        If articulo.Percepcion.HasValue Then
                            If articulo.Percepcion = True Then
                                Dim porcentaje = articulo.ValorRetencion / 100
                                Dim importeCompra = i.importe
                                Dim montoRecaudo = importeCompra * porcentaje
                                i.tipoRecaudo = "P"
                                i.porcRecaudo = articulo.ValorRetencion
                                i.valorRecaudo = montoRecaudo
                            End If
                        End If
                    End If

                    Dim codSecuenciaDetalle As Integer = compraDetalleBL.InsertSingle(i, be.idDocumento)
                    If i.tipoExistencia <> "08" Then
                        i.secuencia = codSecuenciaDetalle
                        i.nrolote = codigoLote
                        inventario.InsertPagado(i, be)

                        If be.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then

                        Else
                            Dim nuevoTA = New totalesAlmacen With
                                    {
                                        .idEmpresa = i.IdEmpresa,
                                        .idEstablecimiento = i.IdEstablecimiento,
                                        .codigoLote = codigoLote,
                                        .idAlmacen = i.almacenRef,
                                        .origenRecaudo = i.destino,
                                        .tipoExistencia = i.tipoExistencia,
                                        .idItem = i.idItem,
                                        .descripcion = i.descripcionItem,
                                        .idUnidad = i.unidad1,
                                        .unidadMedida = i.unidad1,
                                        .cantidad = i.monto1,
                                        .importeSoles = i.montokardex,
                                        .importeDolares = i.montokardexUS,
                                        .cantidadMaxima = 10000,
                                        .cantidadMinima = 10,
                                        .fechaVcto = i.CustomRecursoCostoLote.fechaVcto,
                                        .status = StatusArticulo.Activo,
                                        .usuarioActualizacion = i.usuarioModificacion,
                                        .fechaActualizacion = i.fechaModificacion}
                            HeliosData.totalesAlmacen.Add(nuevoTA)
                        End If


                    End If

                End If
            Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function GetNumeracionCompra(be As documentocompra) As Integer
        Return (HeliosData.documentocompra.Where(Function(o) o.idEmpresa = be.idEmpresa And o.idCentroCosto = be.idCentroCosto And o.tipoCompra = be.tipoCompra).Count + 1)
    End Function

    Public Sub RechazarCompraRapida(be As documento)
        Using ts As New TransactionScope
            Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = be.idDocumento).SingleOrDefault
            compra.aprobado = be.tipoOperacion

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Function GrabarCompraRapidaRef(compra As documento) As Integer
        Dim documentoBL As New documentoBL
        Dim documentocompraBL As New documentocompraBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Using ts As New TransactionScope
            documentoBL.Insert(compra)
            documentocompraBL.Insert(compra.documentocompra, compra.idDocumento)
            For Each i In compra.documentocompra.documentocompradetalle
                compraDetalleBL.InsertSingle(i, compra.idDocumento)
            Next

            HeliosData.SaveChanges()
            ts.Complete()
            Return compra.idDocumento
        End Using
    End Function

    Public Sub ConfirmarListaRapida(lista As List(Of documento), compra As documento)
        Dim documentoBL As New documentoBL
        Dim documentocompraBL As New documentocompraBL
        Dim documentocompradetalleBL As New documentocompradetalleBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL

        Dim empresaSel = lista(0).documentocompra.idEmpresa
        Dim establecimientoSel = lista(0).documentocompra.idCentroCosto
        Dim fechaActual = New Date(lista(0).documentocompra.fechaDoc.Value.Year, lista(0).documentocompra.fechaDoc.Value.Month, 1) ' New Date(objDocumento.documentocompra.fechaDoc.Value.Year, objDocumento.documentocompra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(empresaSel, fechaActual, establecimientoSel)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(empresaSel, fechaActual.Year, fechaActual.Month, establecimientoSel) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = empresaSel,
                                                .idCentroCosto = establecimientoSel,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(empresaSel, fechaActual.Year, fechaActual.Month, establecimientoSel) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If
        End If

        If compra IsNot Nothing Then
            '    HeliosData.documento.Add(compra)
            GrabarCompraRapidaRef(compra)
            'documentoBL.Insert(compra)
            'documentocompraBL.Insert(compra.documentocompra, compra.idDocumento)
            'documentocompradetalleBL.InsertSingleOrden(compra.documentocompra.documentocompradetalle.First, compra.idDocumento)
        End If

        For Each i In lista
            If compra IsNot Nothing Then
                ActualizarCompraRapida(i, compra)
            Else
                ActualizarCompraRapida(i)
            End If
            Dim ListaArticulosVendidos = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = i.idDocumento).ToList

            If ListaArticulosVendidos.Count > 0 Then
                Dim fechaEnvioAlmacen = i.documentocompra.fechaDoc.Value.Date
                For Each a In ListaArticulosVendidos
                    Dim listado = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(
                        New InventarioMovimiento With {
                        .idAlmacen = a.idAlmacen,
                        .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                        .tipoProducto = a.tipoProducto,
                        .idItem = a.idItem,
                        .nrolote = a.nrolote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listado)
                Next
            End If
        Next
    End Sub

    Public Sub ConfirmarNotaDeCompra(documentoNota As documento, compra As documento)
        Try
            Dim valida = HeliosData.documentocompra.Where(Function(o) o.idDocumento = documentoNota.idDocumento).SingleOrDefault

            If valida IsNot Nothing Then
                If valida.aprobado = "S" Then
                    Throw New Exception("El comprobante ya fue revisado, revise otro.")
                End If
            End If
            Using ts As New TransactionScope
                If compra IsNot Nothing Then
                    GrabarCompraRapidaRef(compra)
                End If
                If compra IsNot Nothing Then
                    ActualizarNotaDeCompra(documentoNota, compra)
                Else
                    ActualizarNotaDeCompra(documentoNota)
                End If
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Private Sub ActualizarCompraRapida(i As documento)
        Using ts As New TransactionScope
            Dim doc = HeliosData.documento.Where(Function(o) o.idDocumento = i.idDocumento).SingleOrDefault
            Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = i.idDocumento).SingleOrDefault
            Dim det = HeliosData.documentocompradetalle.Where(Function(o) o.secuencia = i.documentocompra.CustomDetalleCompra.secuencia).SingleOrDefault

            doc.idEntidad = i.idEntidad
            doc.entidad = i.entidad
            doc.tipoEntidad = "PR"
            doc.nrodocEntidad = i.nrodocEntidad

            compra.aprobado = i.documentocompra.aprobado
            compra.idProveedor = i.documentocompra.idProveedor
            compra.bi01 = i.documentocompra.bi01
            compra.igv01 = i.documentocompra.igv01
            compra.importeTotal = i.documentocompra.importeTotal

            det.importe = i.documentocompra.CustomDetalleCompra.importe
            det.precioUnitario = i.documentocompra.CustomDetalleCompra.precioUnitario
            det.montokardex = i.documentocompra.CustomDetalleCompra.montokardex
            det.montoIgv = i.documentocompra.CustomDetalleCompra.montoIgv

            Dim inventario = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = i.idDocumento).FirstOrDefault

            inventario.monto = i.documentocompra.CustomDetalleCompra.importe


            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub ActualizarCompraRapida(i As documento, beCompra As documento)
        Using ts As New TransactionScope
            Dim doc = HeliosData.documento.Where(Function(o) o.idDocumento = i.idDocumento).SingleOrDefault
            Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = i.idDocumento).SingleOrDefault
            Dim det = HeliosData.documentocompradetalle.Where(Function(o) o.secuencia = i.documentocompra.CustomDetalleCompra.secuencia).SingleOrDefault

            doc.idEntidad = i.idEntidad
            doc.entidad = i.entidad
            doc.tipoEntidad = "PR"
            doc.nrodocEntidad = i.nrodocEntidad

            compra.aprobado = i.documentocompra.aprobado
            compra.idProveedor = i.documentocompra.idProveedor
            compra.bi01 = i.documentocompra.bi01
            compra.igv01 = i.documentocompra.igv01
            compra.importeTotal = i.documentocompra.importeTotal

            det.ItemEntregadototal = "S"
            det.importe = i.documentocompra.CustomDetalleCompra.importe
            det.precioUnitario = i.documentocompra.CustomDetalleCompra.precioUnitario
            det.montokardex = i.documentocompra.CustomDetalleCompra.montokardex
            det.montoIgv = i.documentocompra.CustomDetalleCompra.montoIgv

            Dim inventario = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = i.idDocumento).FirstOrDefault

            Select Case det.destino
                Case "1"
                    inventario.monto = i.documentocompra.CustomDetalleCompra.montokardex
                Case Else
                    inventario.monto = i.documentocompra.CustomDetalleCompra.importe
            End Select
            inventario.idDocumento = beCompra.idDocumento
            inventario.idDocumentoRef = beCompra.idDocumento
            inventario.tipoDocAlmacen = beCompra.documentocompra.tipoDoc
            inventario.serie = beCompra.documentocompra.serie
            inventario.numero = beCompra.documentocompra.numeroDoc

            Dim lote As Integer = det.codigoLote
            Dim recursolote = HeliosData.recursoCostoLote.Where(Function(o) o.codigoLote = lote).Single
            recursolote.productoSustentado = True


            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub ActualizarNotaDeCompra(i As documento)
        Using ts As New TransactionScope

            Dim doc = HeliosData.documento.Where(Function(o) o.idDocumento = i.idDocumento).SingleOrDefault
            Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = i.idDocumento).SingleOrDefault
            Dim compraDetails = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = i.idDocumento).ToList

            doc.idEntidad = i.idEntidad
            doc.entidad = i.entidad
            doc.tipoEntidad = "PR"
            doc.nrodocEntidad = i.nrodocEntidad

            compra.aprobado = i.documentocompra.aprobado
            compra.idProveedor = i.documentocompra.idProveedor

            For Each det In compraDetails
                Dim lote As Integer = det.codigoLote
                Dim recursolote = HeliosData.recursoCostoLote.Where(Function(o) o.codigoLote = lote).Single
                recursolote.productoSustentado = False

                det.ItemEntregadototal = "S"
            Next

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Private Sub ActualizarNotaDeCompra(notaCompra As documento, beCompra As documento)
        Using ts As New TransactionScope
            Dim doc = HeliosData.documento.Where(Function(o) o.idDocumento = notaCompra.idDocumento).SingleOrDefault
            Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = notaCompra.idDocumento).SingleOrDefault
            Dim compraDetails = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = notaCompra.idDocumento).ToList

            doc.idEntidad = notaCompra.idEntidad
            doc.entidad = notaCompra.entidad
            doc.tipoEntidad = "PR"
            doc.nrodocEntidad = notaCompra.nrodocEntidad

            compra.aprobado = notaCompra.documentocompra.aprobado
            compra.idProveedor = notaCompra.documentocompra.idProveedor

            For Each det In compraDetails
                Dim lote As Integer = det.codigoLote
                Dim recursolote = HeliosData.recursoCostoLote.Where(Function(o) o.codigoLote = lote).Single
                recursolote.productoSustentado = True

                det.ItemEntregadototal = "S"
            Next

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    'Public Function SaveCompraNotaCredito2(objDocumento As documento,
    '                                      nDocumentoNota As documento, Optional nDocumentoSaldoVenta As documento = Nothing) As Integer
    '    Dim DocumentoBL As New documentoBL
    '    Dim compraDetalleBL As New documentocompradetalleBL
    '    Dim inventario As New InventarioMovimientoBL
    '    Dim asientoBL As New AsientoBL
    '    Dim totalesBL As New totalesAlmacenBL
    '    Dim guiaBL As New documentoGuiaBL
    '    Dim docVenta As New documentoventaAbarrotesBL
    '    Dim CAN_BOF As Decimal = 0
    '    Dim saldo_Final As Decimal = 0
    '    Dim saldo_Finalme As Decimal = 0
    '    Dim saldo_Pago As Decimal = 0
    '    Dim saldo_Pagome As Decimal = 0

    '    Dim saldoItem As Decimal = 0
    '    Dim saldoItemME As Decimal = 0
    '    Dim cajaBL As New documentoCajaDetalleBL
    '    Dim t As New totalesAlmacen
    '    Dim nMovimiento As New movimiento
    '    Dim nAsiento As New asiento
    '    Try
    '        Using ts As New TransactionScope()
    '            DocumentoBL.Insert(objDocumento)

    '            Dim compra As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = objDocumento.documentocompra.idPadre).FirstOrDefault
    '            Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

    '            For Each i In objDocumento.documentocompra.documentocompradetalle

    '                compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)

    '                'VALIDANDO ITEMS INGRESADOS COMO NOTA DE CREDITO
    '                cajaBL.ActualizarItemsPagosCompra(i, objDocumento.documentocompra.idPadre)
    '                '--------------------------------------------------------

    '                Select Case i.TipoOperacion
    '                    Case "9913" 'DISMI CA
    '                        Select Case i.tipoExistencia
    '                            Case "GS"

    '                                nAsiento = New asiento
    '                                nAsiento.idDocumento = objDocumento.idDocumento
    '                                nAsiento.idEmpresa = Gempresas.IdEmpresaRuc
    '                                nAsiento.idCentroCostos = GEstableciento.IdEstablecimiento
    '                                nAsiento.idDocumentoRef = objDocumento.idDocumento
    '                                nAsiento.fechaProceso = (objDocumento.fechaProceso)
    '                                nAsiento.codigoLibro = "8"
    '                                nAsiento.tipo = "D"
    '                                nAsiento.tipoAsiento = "ACCL"
    '                                nAsiento.importeMN = i.montokardex
    '                                nAsiento.importeME = i.montokardexUS
    '                                nAsiento.glosa = "Asiento de costo"
    '                                nAsiento.usuarioActualizacion = objDocumento.usuarioActualizacion
    '                                nAsiento.fechaActualizacion = objDocumento.fechaActualizacion


    '                                nMovimiento = New movimiento
    '                                nMovimiento.cuenta = "791"
    '                                nMovimiento.descripcion = "CARGAS IMPUTABLES A CUENTAS DE COSTOS Y GASTOS"
    '                                nMovimiento.tipo = "D"
    '                                nMovimiento.monto = i.montokardex
    '                                nMovimiento.montoUSD = i.montokardexUS
    '                                nMovimiento.usuarioActualizacion = i.usuarioModificacion
    '                                nMovimiento.fechaActualizacion = i.fechaModificacion
    '                                nAsiento.movimiento.Add(nMovimiento)

    '                                nMovimiento = New movimiento
    '                                nMovimiento.cuenta = "91"
    '                                nMovimiento.descripcion = "COSTOS POR DISTRIBUIR."
    '                                nMovimiento.tipo = "H"
    '                                nMovimiento.monto = i.montokardex
    '                                nMovimiento.montoUSD = i.montokardexUS
    '                                nMovimiento.usuarioActualizacion = i.usuarioModificacion
    '                                nMovimiento.fechaActualizacion = i.fechaModificacion
    '                                nAsiento.movimiento.Add(nMovimiento)

    '                                asientoBL.Insert(nAsiento, objDocumento.idDocumento)
    '                            Case Else
    '                                inventario.InsertNotaCredito(i, objDocumento)

    '                                t = New totalesAlmacen
    '                                t.idEmpresa = i.IdEmpresa
    '                                t.idEstablecimiento = i.IdEstablecimiento
    '                                t.idAlmacen = i.almacenRef
    '                                t.origenRecaudo = i.destino
    '                                t.idItem = i.idItem
    '                                t.cantidad = i.monto1 * -1
    '                                t.precioUnitarioCompra = i.precioUnitario * -1
    '                                t.importeSoles = i.montokardex * -1
    '                                t.importeDolares = i.montokardexUS * -1


    '                                totalesBL.UpdateSingle2(t)
    '                        End Select
    '                    Case "9914", "9916" 'DISMI IMPORTE, DEV EXIST

    '                        Select Case i.tipoExistencia
    '                            Case "GS"

    '                                nAsiento = New asiento
    '                                nAsiento.idDocumento = objDocumento.idDocumento
    '                                nAsiento.idEmpresa = Gempresas.IdEmpresaRuc
    '                                nAsiento.idCentroCostos = GEstableciento.IdEstablecimiento
    '                                nAsiento.idDocumentoRef = objDocumento.idDocumento
    '                                nAsiento.fechaProceso = (objDocumento.fechaProceso)
    '                                nAsiento.codigoLibro = "8"
    '                                nAsiento.tipo = "D"
    '                                nAsiento.tipoAsiento = "ACCL"
    '                                nAsiento.importeMN = i.montokardex
    '                                nAsiento.importeME = i.montokardexUS
    '                                nAsiento.glosa = "Asiento de costo"
    '                                nAsiento.usuarioActualizacion = objDocumento.usuarioActualizacion
    '                                nAsiento.fechaActualizacion = objDocumento.fechaActualizacion


    '                                nMovimiento = New movimiento
    '                                nMovimiento.cuenta = "791"
    '                                nMovimiento.descripcion = "CARGAS IMPUTABLES A CUENTAS DE COSTOS Y GASTOS"
    '                                nMovimiento.tipo = "D"
    '                                nMovimiento.monto = i.montokardex
    '                                nMovimiento.montoUSD = i.montokardexUS
    '                                nMovimiento.usuarioActualizacion = i.usuarioModificacion
    '                                nMovimiento.fechaActualizacion = i.fechaModificacion
    '                                nAsiento.movimiento.Add(nMovimiento)

    '                                nMovimiento = New movimiento
    '                                nMovimiento.cuenta = "91"
    '                                nMovimiento.descripcion = "COSTOS POR DISTRIBUIR."
    '                                nMovimiento.tipo = "H"
    '                                nMovimiento.monto = i.montokardex
    '                                nMovimiento.montoUSD = i.montokardexUS
    '                                nMovimiento.usuarioActualizacion = i.usuarioModificacion
    '                                nMovimiento.fechaActualizacion = i.fechaModificacion
    '                                nAsiento.movimiento.Add(nMovimiento)
    '                                asientoBL.Insert(nAsiento, objDocumento.idDocumento)
    '                            Case Else
    '                                inventario.InsertNotaCredito(i, objDocumento)


    '                                t = New totalesAlmacen
    '                                t.idEmpresa = i.IdEmpresa
    '                                t.idEstablecimiento = i.IdEstablecimiento
    '                                t.idAlmacen = i.almacenRef
    '                                t.origenRecaudo = i.destino
    '                                t.idItem = i.idItem
    '                                t.cantidad = i.monto1 * -1
    '                                t.precioUnitarioCompra = i.precioUnitario * -1
    '                                t.importeSoles = i.montokardex * -1
    '                                t.importeDolares = i.montokardexUS * -1
    '                                totalesBL.UpdateSingle2(t)
    '                        End Select
    '                        'Case "9917" 'beneficios. bonificaciones
    '                        '    inventario.InsertNotaCredito(i, objDocumento)


    '                    Case "9925"

    '                End Select

    '            Next

    '            If Not IsNothing(objDocumento.documentoGuia) Then
    '                If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
    '                    guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
    '                End If
    '            End If

    '            'guardando asientos contables
    '            If Not IsNothing(objDocumento.asiento) Then
    '                If objDocumento.asiento.Count > 0 Then
    '                    asientoBL.SavebyGroupDoc(objDocumento)
    '                End If
    '            End If
    '            'Cobrando Saldo de la venta cuando es una venta al credito
    '            '    If objDocumento.documentoventaAbarrotes.ImporteDevMN > 0 Then
    '            'If objDocumento.documentoventaAbarrotes.SaldoVentaMN > 0 Then
    '            If Not IsNothing(nDocumentoSaldoVenta.documentoCaja) Then
    '                If Not IsNothing(nDocumentoSaldoVenta.documentoCaja.idEmpresa) Then
    '                    SaveCaja(nDocumentoSaldoVenta, objDocumento.documentocompra.idPadre)
    '                End If
    '            End If

    '            '-----------------------------------------------------------------------------------
    '            'creando documento de excendente por devolucion de dinero
    '            If Not IsNothing(objDocumento.documentocompra.EstadoPagoDevolucion) Then
    '                Dim codGenerado = GrabarDocumentoDevolucion(objDocumento)

    '                Select Case objDocumento.documentocompra.EstadoPagoDevolucion
    '                    Case TIPO_VENTA.PAGO.COBRADO
    '                        If Not IsNothing(nDocumentoNota.idEmpresa) Then
    '                            Dim listaPagos As List(Of documentocompradetalle) = HeliosData.documentocompradetalle.Where(Function(o) o.idDocumento = codGenerado).ToList
    '                            SaveCaja2(nDocumentoNota, codGenerado, listaPagos)
    '                        End If
    '                    Case TIPO_VENTA.PAGO.PENDIENTE_PAGO

    '                End Select

    '            End If


    '            Dim ventaDetalle = (From n In HeliosData.documentocompradetalle _
    '                            Where n.idDocumento = compra.idDocumento AndAlso n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO).Count

    '            If ventaDetalle > 0 Then
    '                compra.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
    '            Else
    '                compra.estadoPago = TIPO_COMPRA.PAGO.PAGADO
    '            End If


    '            HeliosData.SaveChanges()
    '            ts.Complete()
    '            Return objDocumento.idDocumento
    '        End Using
    '    Catch ex As Exception
    '        Throw ex
    '    End Try
    'End Function

    Public Sub InsertCabeceraVentaExcedente(ByVal documentoventaAbarrotesBE As documentocompra, intIdDocmento As Integer)
        Dim docVentaAbarrotes As New documentocompra
        Dim numeracionBL As New numeracionBoletasBL
        Dim cval As Integer = 0
        Using ts As New TransactionScope
            docVentaAbarrotes.idDocumento = intIdDocmento
            docVentaAbarrotes.tipoOperacion = documentoventaAbarrotesBE.tipoOperacion
            docVentaAbarrotes.codigoLibro = documentoventaAbarrotesBE.codigoLibro
            docVentaAbarrotes.idEmpresa = documentoventaAbarrotesBE.idEmpresa
            docVentaAbarrotes.idCentroCosto = documentoventaAbarrotesBE.idCentroCosto
            docVentaAbarrotes.tipoDoc = documentoventaAbarrotesBE.tipoDoc
            docVentaAbarrotes.fechaDoc = documentoventaAbarrotesBE.fechaDoc
            docVentaAbarrotes.fechaContable = documentoventaAbarrotesBE.fechaContable
            docVentaAbarrotes.serie = documentoventaAbarrotesBE.serie
            docVentaAbarrotes.numeroDoc = documentoventaAbarrotesBE.numeroDoc
            docVentaAbarrotes.idProveedor = documentoventaAbarrotesBE.idProveedor
            docVentaAbarrotes.monedaDoc = documentoventaAbarrotesBE.monedaDoc
            docVentaAbarrotes.tcDolLoc = documentoventaAbarrotesBE.tcDolLoc
            docVentaAbarrotes.tasaIgv = documentoventaAbarrotesBE.tasaIgv
            docVentaAbarrotes.bi01 = documentoventaAbarrotesBE.bi01
            docVentaAbarrotes.bi02 = documentoventaAbarrotesBE.bi02
            docVentaAbarrotes.isc01 = documentoventaAbarrotesBE.isc01
            docVentaAbarrotes.isc02 = documentoventaAbarrotesBE.isc02
            docVentaAbarrotes.igv01 = documentoventaAbarrotesBE.igv01
            docVentaAbarrotes.igv02 = documentoventaAbarrotesBE.igv02
            docVentaAbarrotes.otc01 = documentoventaAbarrotesBE.otc01
            docVentaAbarrotes.otc02 = documentoventaAbarrotesBE.otc02
            docVentaAbarrotes.bi01us = documentoventaAbarrotesBE.bi01us
            docVentaAbarrotes.bi02us = documentoventaAbarrotesBE.bi02us
            docVentaAbarrotes.isc01us = documentoventaAbarrotesBE.isc01us
            docVentaAbarrotes.isc02us = documentoventaAbarrotesBE.isc02us
            docVentaAbarrotes.igv01us = documentoventaAbarrotesBE.igv01us
            docVentaAbarrotes.igv02us = documentoventaAbarrotesBE.igv02us
            docVentaAbarrotes.otc01us = documentoventaAbarrotesBE.otc01us
            docVentaAbarrotes.otc02us = documentoventaAbarrotesBE.otc02us
            docVentaAbarrotes.importeTotal = documentoventaAbarrotesBE.ImporteDevMN
            docVentaAbarrotes.importeUS = documentoventaAbarrotesBE.ImporteDevME
            docVentaAbarrotes.estadoPago = documentoventaAbarrotesBE.estadoPago
            docVentaAbarrotes.glosa = documentoventaAbarrotesBE.glosa
            docVentaAbarrotes.tipoCompra = documentoventaAbarrotesBE.tipoCompra
            docVentaAbarrotes.idPadre = documentoventaAbarrotesBE.idPadre
            docVentaAbarrotes.usuarioActualizacion = documentoventaAbarrotesBE.usuarioActualizacion
            docVentaAbarrotes.fechaActualizacion = documentoventaAbarrotesBE.fechaActualizacion

            HeliosData.documentocompra.Add(docVentaAbarrotes)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Function ConteoReclamaciones(tipoDoc As String)
        Dim conteo = (From i In HeliosData.documentocompra
                      Where i.tipoDoc = tipoDoc).Count
        conteo = conteo + 1
        Return conteo
    End Function


    Function GrabarDocumentoDevolucion(objDocumento As documento) As Integer
        Dim documentoBL As New documentoBL
        Dim n As New documentocompradetalle
        'Dim codDoc As Integer
        Try
            Using ts As New TransactionScope
                'codDoc = objDocumento.idDocumento
                documentoBL.Insert(objDocumento)
                objDocumento.documentocompra.tipoCompra = "EXD"
                objDocumento.documentocompra.glosa = "Por devolución de dinero"
                'objDocumento.documentocompra.idPadre = codDoc
                Select Case objDocumento.documentocompra.EstadoPagoDevolucion
                    Case TIPO_VENTA.PAGO.COBRADO
                        objDocumento.documentocompra.estadoPago = TIPO_VENTA.PAGO.COBRADO
                    Case TIPO_VENTA.PAGO.PENDIENTE_PAGO
                        objDocumento.documentocompra.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                End Select


                Dim numeroRec = ConteoReclamaciones("9910")
                objDocumento.documentocompra.tipoDoc = "9910"
                objDocumento.documentocompra.numeroDoc = numeroRec
                'objDocumento.documentocompra.numeroVenta = numeroRec
                objDocumento.documentocompra.serie = "RECN"
                objDocumento.documentocompra.tipoOperacion = "9920"
                'objDocumento.documentocompra.estado = "1"

                InsertCabeceraVentaExcedente(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    If i.TieneExcedente = True Then
                        n = New documentocompradetalle
                        n.idDocumento = objDocumento.idDocumento
                        n.almacenRef = i.almacenRef
                        n.idItem = i.idItem
                        n.descripcionItem = i.descripcionItem
                        n.FechaVcto = Nothing
                        n.tipoExistencia = i.tipoExistencia
                        n.destino = i.destino
                        n.unidad1 = i.unidad1
                        n.monto1 = i.monto1
                        n.unidad2 = i.unidad2
                        n.monto2 = i.monto2
                        n.precioUnitario = i.precioUnitario
                        n.precioUnitarioUS = i.precioUnitarioUS
                        n.importe = i.ImporteDevolucionmn
                        n.importeUS = i.ImporteDevolucionme
                        n.montokardex = i.montokardex
                        n.montoIsc = 0
                        n.montoIgv = i.montoIgv
                        n.otrosTributos = 0
                        n.montokardexUS = i.montokardexUS
                        n.montoIscUS = 0
                        n.montoIgvUS = i.montoIgvUS
                        n.otrosTributosUS = 0
                        n.preEvento = Nothing
                        n.idPadreDTCompra = i.idPadreDTCompra
                        n.tipoCompra = "EXD"
                        Select Case objDocumento.documentocompra.EstadoPagoDevolucion
                            Case TIPO_VENTA.PAGO.COBRADO
                                n.estadoPago = TIPO_VENTA.PAGO.COBRADO
                            Case TIPO_VENTA.PAGO.PENDIENTE_PAGO
                                n.estadoPago = TIPO_VENTA.PAGO.PENDIENTE_PAGO
                        End Select
                        n.usuarioModificacion = i.usuarioModificacion
                        n.fechaModificacion = i.fechaModificacion
                        HeliosData.documentocompradetalle.Add(n)
                    End If
                Next
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return objDocumento.idDocumento
    End Function

    Public Function SaveCompraNotaDebito(objDocumento As documento, nListaTotalesAlmacen As List(Of totalesAlmacen), nDocumentoNota As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    Select Case i.tipoExistencia
                        Case "GS"

                        Case Else
                            inventario.InsertNotaDebito(i, objDocumento)
                    End Select
                    UpdateDataNotaDebito(i.secuencia, i.importe, i.importeUS, 0)
                Next
                asientoBL.SavebyGroupDoc(objDocumento)
                totalesBL.SaveTotalesListaCompraPagada(nListaTotalesAlmacen, 0)
                If Not IsNothing(nDocumentoNota.idEmpresa) Then
                    SaveCaja(nDocumentoNota, objDocumento.idDocumento)
                End If
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Function GrabarNotaDebito_SPK(objDocumento As documento, nDocumentoNota As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim cajaBL As New documentoCajaDetalleBL

        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Dim venta As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = objDocumento.documentocompra.idPadre).FirstOrDefault
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    i.preEvento = Nothing
                    Dim itemDetalle = compraDetalleBL.GetUbicar_documentocompradetallePorID(i.secuencia)
                    i.codigoLote = itemDetalle.codigoLote
                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    cajaBL.ActualizarItemsPagosCompra(i, objDocumento.documentocompra.idPadre)
                    Select Case i.tipoExistencia
                        Case "GS"

                        Case Else
                            Select Case i.TipoOperacion
                                Case "9921" 'INCREMENTO DEL COSTO

                                    i.nrolote = itemDetalle.codigoLote
                                    inventario.InsertNotaDebito(i, objDocumento)
                                    't = New totalesAlmacen
                                    't.idEmpresa = i.IdEmpresa
                                    't.idEstablecimiento = i.IdEstablecimiento
                                    't.idAlmacen = i.almacenRef
                                    't.origenRecaudo = i.destino
                                    't.idItem = i.idItem
                                    't.cantidad = 0
                                    't.precioUnitarioCompra = i.precioUnitario
                                    't.importeSoles = i.montokardex
                                    't.importeDolares = i.montokardexUS
                                    'totalesBL.UpdateSingle2(t)
                                Case "9923" 'OTROS

                            End Select

                    End Select
                Next
                'asientoBL.SavebyGroupDoc(objDocumento)
                'If Not IsNothing(nDocumentoNota.idEmpresa) Then
                '    SaveCaja(nDocumentoNota, objDocumento.idDocumento)
                'End If

                'guardando asientos contables
                If Not IsNothing(objDocumento.asiento) Then
                    If objDocumento.asiento.Count > 0 Then
                        asientoBL.SavebyGroupDoc(objDocumento)
                    End If
                End If


                Dim ventaDetalle = (From n In HeliosData.documentocompradetalle
                                    Where n.idDocumento = venta.idDocumento _
                                AndAlso n.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
                                AndAlso n.bonificacion <> "S").Count

                If ventaDetalle > 0 Then
                    venta.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO
                Else
                    venta.estadoPago = TIPO_COMPRA.PAGO.PAGADO
                End If


                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GrabarNotaDebito(objDocumento As documento, nDocumentoNota As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim cajaBL As New documentoCajaDetalleBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Try

            Dim fechaActual = New Date(objDocumento.documentocompra.fechaDoc.Value.Year, objDocumento.documentocompra.fechaDoc.Value.Month, 1)
            Dim fechaAnterior = fechaActual.AddMonths(-1)


            'si es false es porque no esta dentro del inicio de operaciones
            Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(objDocumento.idEmpresa, fechaActual, objDocumento.idCentroCosto)
            If valor = "False" Then
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = objDocumento.idEmpresa,
                                                .idCentroCosto = objDocumento.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                End If
            ElseIf valor = "True" Then
                Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
            Else
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                '                                    {.idEmpresa = objDocumento.idEmpresa,
                '                                     .anio = fechaAnterior.Year,
                '                                     .mes = fechaAnterior.Month}) = False Then
                '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                'End If
            End If

            Using ts As New TransactionScope()

                Dim codDocumento = GrabarNotaDebito_SPK(objDocumento, nDocumentoNota)

                Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                                      Where n.tipoExistencia <> "GS"
                                      Select n.idItem, n.almacenRef, n.tipoExistencia, n.codigoLote).Distinct.ToList

                For Each a In ListaArticulos
                    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                       .fecha = New DateTime(objDocumento.fechaProceso.Year,
                                                                                                                                             objDocumento.fechaProceso.Month, 1),
                                                                                                                       .tipoProducto = a.tipoExistencia,
                                                                                                                       .idItem = a.idItem,
                                                                                                                       .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return codDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Private Sub SaveCaja(nCaja As documento, intIdCompra As Integer)
        Dim DocumentoBL As New documentoBL
        Dim documentoCajaBL As New documentoCajaBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        DocumentoBL.Insert(nCaja)
        documentoCajaBL.Insert(nCaja.documentoCaja, nCaja.idDocumento)
        documentoCajaDetalleBL.Insert(nCaja, nCaja.idDocumento, intIdCompra)
    End Sub

    Private Sub SaveCaja2(nCaja As documento, intIdCompra As Integer, ListaCompra As List(Of documentocompradetalle))
        Dim DocumentoBL As New documentoBL
        Dim documentoCajaBL As New documentoCajaBL
        Dim documentoCajaDetalleBL As New documentoCajaDetalleBL
        DocumentoBL.Insert(nCaja)
        documentoCajaBL.Insert(nCaja.documentoCaja, nCaja.idDocumento)
        documentoCajaDetalleBL.InsertDetalleNotaC(ListaCompra, nCaja.idDocumento, intIdCompra)
    End Sub



    Public Function ValidarDocumentoNro(nDOcumento As documentocompra) As Boolean
        Dim consulta = HeliosData.documentocompra.Where(Function(o) o.idEmpresa = nDOcumento.idEmpresa _
                                                            And o.idCentroCosto = nDOcumento.idCentroCosto _
                                                         And o.serie = nDOcumento.serie _
                                                         And o.numeroDoc = nDOcumento.numeroDoc _
                                                         And o.tipoDoc = nDOcumento.tipoDoc _
                                                         And o.idProveedor = nDOcumento.idProveedor).FirstOrDefault

        If IsNothing(consulta) Then
            Return True
        Else
            Return False
        End If

    End Function

    Public Function SaveCompraPagada(objDocumento As documento, objDocumentoCaja As documento,
                                     objTotalesAlmacen As List(Of totalesAlmacen), cajaUsuario As cajaUsuario,
                                     objListaPrecio As List(Of listadoPrecios),
                                     Optional nDocumentoTributo As documento = Nothing) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim CajaUsuarioBL As New CajaUsuarioBL
        Dim totalesBL As New totalesAlmacenBL
        Dim lista As New listadoPreciosBL
        Dim guiaBL As New documentoGuiaBL
        Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        Dim precioV As New listadoPreciosBL
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Select Case objDocumento.documentocompra.TipoConfiguracion
                        Case "M"
                            Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                        Case "P"
                            Me.InsertProgramado(objDocumento.documentocompra, objDocumento.idDocumento)
                    End Select
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            inventario.InsertPagado(i, objDocumento)
                            If i.FlagModificaPrecioVenta = "S" Then
                                precioV.GrabarPrecioEntrada(i)
                            End If
                        End If
                    Next
                    'Select Case objDocumento.documentocompra.tipoCompra
                    '    Case TIPO_COMPRA.COMPRA_PAGADA
                    asientoBL.SavebyGroupDoc(objDocumento)
                    '  End Select

                    totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                    '    CajaUsuarioBL.ActualizarMontoCajaUsuarioCompras(cajaUsuario)
                    SaveCaja(objDocumentoCaja, objDocumento.idDocumento)
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If
                    'If Not IsNothing(nDocumentoTributo.documentoObligacionTributaria) Then
                    '    DocumentoTributoBL.SaveObligacionDefaultCompra(nDocumentoTributo, objDocumento.idDocumento)
                    'End If

                    'For Each items In objListaPrecio
                    '    If (Not IsNothing(lista.ObtenerPrecioPorItem(items.idItem, items.idAlmacen))) Then
                    '        lista.Insert(items)
                    '    End If
                    'Next
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function SaveAporteExistencia(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen)) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Me.InsertAPORTE(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                        inventario.InsertAportes(i, objDocumento)
                    End If
                Next
                asientoBL.SavebyGroupDoc(objDocumento)
                totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                '    guiaBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Sub InsertarEnvioTrasnferenciaSinConfirmar(objDocumento As documento)
        Dim DocumentoBL As New documentoBL
        Dim AsientoBL As New AsientoBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim t As New totalesAlmacen
        Dim totalesBL As New totalesAlmacenBL
        Dim guiaBL As New documentoGuiaBL
        Dim numeracionBL As New numeracionBoletasBL
        '    Dim nuevoTA As totalesAlmacen
        Dim codTransferencia As Integer
        Dim codGuiaRemision As Integer
        Try
            Using ts As New TransactionScope

                If (Not IsNothing(objDocumento.documentocompra.numeroDoc)) Then
                    DocumentoBL.Insert(objDocumento)
                Else
                    Dim cval = Convert.ToInt32(numeracionBL.GenerarNumeroPorID(objDocumento.documentocompra.IdNumeracion))
                    objDocumento.nroDoc = objDocumento.documentocompra.serie & "-" & cval
                    DocumentoBL.Insert(objDocumento)
                    objDocumento.documentocompra.numeroDoc = cval
                End If

                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento) 'TRANSFERENCIA
                codTransferencia = objDocumento.idDocumento

                'Registrando Guia de remision
                objDocumento.documentoGuia.tipoDoc = "99"
                DocumentoBL.Insert(objDocumento) 'GUIA REMISION
                codGuiaRemision = objDocumento.idDocumento
                guiaBL.InsertarGuiaCabecera(objDocumento.documentoGuia, codGuiaRemision)
                '------------------------------------------------------------------------------
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    'grabando detalle trasferencia
                    Dim codSecuenciaRef = compraDetalleBL.InsertSingleTransAlmacen(i, codTransferencia)

                    'grabando detalle guia remision
                    HeliosData.documentoguiaDetalle.Add(New documentoguiaDetalle With
                                                        {
                                                        .idDocumento = codGuiaRemision,
                                                        .idItem = i.idItem,
                                                        .descripcionItem = i.descripcionItem,
                                                        .destino = i.destino,
                                                        .unidadMedida = i.unidad1,
                                                        .cantidad = i.monto1,
                                                        .precioUnitario = i.precioUnitario,
                                                        .precioUnitarioUS = i.precioUnitarioUS,
                                                        .importeMN = i.importe,
                                                        .importeME = i.importeUS,
                                                        .almacenRef = i.almacenRef,
                                                        .estado = TipoGuiaDetalle.Pendiente,
                                                        .nombreRecepcion = i.nombreRecepcion,
                                                        .dniRecepcion = i.dniRecepcion,
                                                        .puntoLlegada = i.puntoLlegada,
                                                        .idDocumentoPadre = codTransferencia,
                                                        .secuenciaRef = codSecuenciaRef,
                                                        .usuarioModificacion = i.usuarioModificacion,
                                                        .fechaModificacion = i.fechaModificacion,
                                                        .tipoExistencia = i.tipoExistencia
                                                    })
                    '---------------------------------------------------------------------------
                    i.TipoRegistro = "S"
                    i.codigoLote = i.codigoLote
                    i.idDocumento = codTransferencia
                    inventarioBL.InsertTransferencia(i)
                    '---------------------------------------------------------------------------
                Next
                AsientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub GrabarTransferenciaAlmacenes(objDocumento As documento)

        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Try
            'Dim fechaActual = objDocumento.documentocompra.fechaDoc
            'Dim fechaAnterior = fechaActual.Value.AddMonths(-1)
            Dim fechaActual = New Date(objDocumento.documentocompra.fechaDoc.Value.Year, objDocumento.documentocompra.fechaDoc.Value.Month, 1)
            Dim fechaAnterior = fechaActual.AddMonths(-1)

            'si es false es porque no esta dentro del inicio de operaciones
            Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(objDocumento.idEmpresa, fechaActual, objDocumento.idCentroCosto)
            If valor = "False" Then
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = objDocumento.idEmpresa,
                                                .idCentroCosto = objDocumento.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                End If
            ElseIf valor = "True" Then
                Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
            Else
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                '                                    {.idEmpresa = objDocumento.idEmpresa,
                '                                     .anio = fechaAnterior.Year,
                '                                     .mes = fechaAnterior.Month}) = False Then
                '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                'End If
            End If
            Using ts As New TransactionScope
                InsertarEnvioTrasnferenciaSinConfirmar(objDocumento)
                'Dim listaAlmacenes = HeliosData.almacen.Where(Function(o) o.idEmpresa = Gempresas.IdEmpresaRuc And o.tipo = TipoAlmacen.Deposito).ToList

                Dim lstAlmacenesDeSalida = (From destino In objDocumento.documentocompra.documentocompradetalle
                                            Select New With {destino.almacenRef, destino.tipoExistencia, destino.idItem, destino.codigoLote}).Distinct.ToList

                'Dim lstAlmacenesDestino = (From envio In objDocumento.documentocompra.documentocompradetalle
                '                           Select New With {envio.almacenDestino, envio.tipoExistencia, envio.idItem, envio.codigoLote}).Distinct.ToList



                For Each a In lstAlmacenesDeSalida
                    Dim lista = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                         .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year, objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                                                                                                                         .tipoProducto = a.tipoExistencia,
                                                                                                                         .idItem = a.idItem, .nrolote = a.codigoLote}, Nothing)

                    totalesBL.GetCurarKardexCaberasLOTE(lista)
                Next

                'For Each a In lstAlmacenesDestino
                '    Dim lista = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenDestino,
                '                                                                                                         .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year, objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                '                                                                                                         .tipoProducto = a.tipoExistencia,
                '                                                                                                         .idItem = a.idItem, .nrolote = a.codigoLote}, Nothing)

                '    totalesBL.GetCurarKardexCaberasLOTE(lista)
                'Next

                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Sub StatusApruebaPagoFactura(be As documentocompra)
        Using ts As New TransactionScope
            Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = be.idDocumento).Single
            compra.apruebaPago = be.apruebaPago

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    'Public Sub GrabarTransferenciaAlmacenes(objDocumento As documento)
    '    Dim DocumentoBL As New documentoBL
    '    Dim AsientoBL As New AsientoBL
    '    Dim inventarioBL As New InventarioMovimientoBL
    '    Dim compraDetalleBL As New documentocompradetalleBL
    '    Dim t As New totalesAlmacen
    '    Dim totalesBL As New totalesAlmacenBL
    '    Try
    '        Using ts As New TransactionScope
    '            documentoBL.Insert(objDocumento)
    '            Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
    '            For Each i In objDocumento.documentocompra.documentocompradetalle
    '                compraDetalleBL.InsertSingleTransAlmacen(i, objDocumento.idDocumento)

    '                i.TipoRegistro = "S"
    '                inventarioBL.InsertTransferencia(i, objDocumento)

    '                i.TipoRegistro = "E"
    '                inventarioBL.InsertTransferencia(i, objDocumento)

    '                'ENTRADA DE ITEMS AL ALMACEN DE DESTINO

    '                t = New totalesAlmacen
    '                t.idEmpresa = i.IdEmpresa
    '                t.idEstablecimiento = i.IdEstablecimiento
    '                t.idAlmacen = i.almacenDestino  ' almacen de DESTINO
    '                t.origenRecaudo = i.destino
    '                t.idItem = i.idItem
    '                t.descripcion = i.descripcionItem
    '                t.tipoExistencia = i.tipoExistencia
    '                t.tipoCambio = 0
    '                t.idUnidad = i.unidad1
    '                t.cantidad = i.monto1
    '                t.importeSoles = i.importe
    '                t.importeDolares = i.importeUS
    '                t.usuarioActualizacion = i.usuarioModificacion
    '                t.fechaActualizacion = i.fechaModificacion
    '                totalesBL.ActualizarItemsTransferencia(t)

    '                'SALIDA DE ITEMS DEL ALMACEN DE ORIGEN
    '                t = New totalesAlmacen
    '                t.idEmpresa = i.IdEmpresa
    '                t.idEstablecimiento = i.IdEstablecimiento
    '                t.idAlmacen = i.almacenRef ' almacen de origen de donde sale la mercaderia
    '                t.origenRecaudo = i.destino
    '                t.idItem = i.idItem
    '                t.descripcion = i.descripcionItem
    '                t.tipoExistencia = i.tipoExistencia
    '                t.tipoCambio = 0
    '                t.idUnidad = i.unidad1
    '                t.cantidad = i.monto1 * -1
    '                t.importeSoles = i.importe * -1
    '                t.importeDolares = i.importeUS * -1
    '                t.usuarioActualizacion = i.usuarioModificacion
    '                t.fechaActualizacion = i.fechaModificacion
    '                totalesBL.ActualizarItemsTransferencia(t)
    '            Next
    '            AsientoBL.SavebyGroupDoc(objDocumento)
    '            HeliosData.SaveChanges()
    '            ts.Complete()
    '        End Using
    '    Catch ex As Exception
    '        Throw ex
    '    End Try
    'End Sub

    Public Function SaveOtrasEntradas(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen),
                                       nListaOrigenAlmacen As List(Of totalesAlmacen)) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim guiaBL As New documentoGuiaBL
        Dim totalesBL As New totalesAlmacenBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    compraDetalleBL.InsertSingleTransAlmacen(i, objDocumento.idDocumento)
                    inventario.InsertAlmacenOE(i, objDocumento)
                    inventario.InsertAlmacenOE_Origen(i, objDocumento)
                Next
                asientoBL.SavebyGroupDoc(objDocumento)
                totalesBL.SaveTotalesListaCompraPagada(objTotalesAlmacen, 0)
                Select Case objDocumento.documentocompra.destino
                    Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.TRANSFERENCIA_ALMACENES
                        totalesBL.SaveTotalesListaCompraPagada(nListaOrigenAlmacen, 0)
                End Select
                ' guiaBL.InsertGuia(objDocumento.documentoGuia, objDocumento.idDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GrabarCambioArticulo(objDocumento As documento, art As detalleitems) As Integer
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim almacenOrigen As Integer?
        Dim almacenDestino As Integer?
        Dim idItem As Integer
        Using ts As New TransactionScope()

            Dim listaCompra = objDocumento.documentocompra.documentocompradetalle.ToList
            almacenDestino = listaCompra(0).almacenRef
            almacenOrigen = listaCompra(0).almacenDestino
            idItem = listaCompra(0).idItem

            GrabarCambioArticulo = GrabarCambioArticuloSPK(objDocumento, art)

            'Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
            '                      Where n.tipoExistencia <> "GS"
            '                      Select idItem, n.almacenRef, n.tipoExistencia).Distinct().ToList()

            'origen 

            Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With
                                                                                        {.idAlmacen = almacenOrigen,
                                                                                        .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
                                                                                                              objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                                                                                                              .tipoProducto = listaCompra(0).tipoExistencia,
                                                                                                              .idItem = idItem}, Nothing)
            totalesBL.GetCurarKardexCaberas(listaAcurar)



            'destino

            Dim listaAcurar2 = inventarioBL.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With
                                                                                        {.idAlmacen = almacenDestino,
                                                                                        .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
                                                                                                              objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                                                                                                              .tipoProducto = listaCompra(0).tipoExistencia,
                                                                                                              .idItem = GrabarCambioArticulo}, Nothing)
            totalesBL.GetCurarKardexCaberas(listaAcurar2)


            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Function

    Public Function GrabarCambioArticuloSPK(objDocumento As documento, art As detalleitems) As Integer
        Dim articuloBL As New detalleitemsBL
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim guiaBL As New documentoGuiaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim precio As New listadoPreciosBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim t As New totalesAlmacen
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento
        Dim cuentaMascara As New cuentaMascara
        Dim cuentaMascaraBL As New cuentaMascaraBL
        'Dim codArticuloHistorico As Integer
        Dim codProdNuevo As Integer = 0
        Dim nombreArticuloOrigen As String = Nothing
        Dim nombreArticuloDestino As String = Nothing
        Using ts As New TransactionScope()
            DocumentoBL.Insert(objDocumento)
            Dim doc = HeliosData.documento.Where(Function(o) o.idDocumento = objDocumento.idDocumento).FirstOrDefault
            If Not IsNothing(doc) Then
                doc.nroDoc = doc.idDocumento
                objDocumento.documentocompra.numeroDoc = doc.idDocumento
            End If

            Insert(objDocumento.documentocompra, objDocumento.idDocumento)

            For Each i In objDocumento.documentocompra.documentocompradetalle
                nombreArticuloOrigen = i.descripcionItem
                nombreArticuloDestino = i.DescripcionArticulo2

                totalesBL.GetChangeStatusArticuloIdItem(New totalesAlmacen With {.idItem = i.idItem, .status = StatusArticulo.Inactivo})

                Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                i.secuencia = codSecuencia

                'salida del artículo
                i.almacenRef = i.almacenDestino
                i.descripcionItem = nombreArticuloOrigen
                inventario.InsertAlmacenOSDefault(i, objDocumento)

                't = New totalesAlmacen
                't.idEmpresa = i.IdEmpresa
                't.idEstablecimiento = i.IdEstablecimiento
                't.tipoExistencia = i.tipoExistencia
                't.descripcion = i.descripcionItem
                't.idUnidad = i.unidad1
                't.idAlmacen = i.almacenRef
                't.origenRecaudo = i.destino
                't.idItem = i.idItem
                't.cantidad = i.monto1 * -1
                't.precioUnitarioCompra = 0
                't.importeSoles = i.importe * -1
                't.importeDolares = 0
                't.usuarioActualizacion = i.usuarioModificacion
                't.fechaActualizacion = i.fechaModificacion
                'totalesBL.UpdateStockOtrasEntradas(t)
                '----------------------------------------------------------------------

                'creando el nuevo producto
                '----------------------------------------------------------------------

                If art.FlagArticuloNuevo = True Then
                    art.idAlmacen = i.almacenRef
                    codProdNuevo = articuloBL.InsertItemDualTablaV2(art)

                    i.idItem = codProdNuevo
                    i.descripcionItem = art.descripcionItem
                    i.almacenRef = i.almacenRef
                    inventario.InsertAlmacenOEDefault(i, objDocumento)

                Else
                    'Articulo existente
                    't = New totalesAlmacen
                    't.idEmpresa = i.IdEmpresa
                    't.idEstablecimiento = i.IdEstablecimiento
                    't.tipoExistencia = i.tipoExistencia
                    't.descripcion = i.descripcionItem
                    't.idUnidad = i.unidad1
                    't.idAlmacen = i.almacenRef
                    't.origenRecaudo = i.destino
                    't.idItem = art.idItem
                    't.cantidad = i.monto1
                    't.precioUnitarioCompra = 0
                    't.importeSoles = i.importe
                    't.importeDolares = 0
                    't.usuarioActualizacion = i.usuarioModificacion
                    't.fechaActualizacion = i.fechaModificacion
                    'totalesBL.UpdateStockOtrasEntradas(t)

                    i.idItem = art.idItem
                    i.descripcionItem = art.descripcionItem
                    i.almacenRef = i.almacenRef
                    inventario.InsertAlmacenOEDefault(i, objDocumento)
                End If
            Next
            HeliosData.SaveChanges()
            ts.Complete()
            Return codProdNuevo
        End Using
    End Function

    Function InsertarOtrasEntradas_SPC(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim guiaBL As New documentoGuiaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim precio As New listadoPreciosBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim nuevoTA As New totalesAlmacen
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento
        Dim cuentaMascara As New cuentaMascara
        Dim cuentaMascaraBL As New cuentaMascaraBL
        Dim codDocumento As Integer = 0
        Dim loteBL As New recursoCostoLoteBL
        Dim PrecioBL As New ConfiguracionPrecioProductoBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                codDocumento = objDocumento.idDocumento
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)

                'If objDocumento.documentocompra.tipoOperacion = "10.01" Then
                '    nAsiento = New asiento
                '    nAsiento.idDocumento = objDocumento.idDocumento
                '    nAsiento.idEmpresa = Gempresas.IdEmpresaRuc
                '    nAsiento.idCentroCostos = GEstableciento.IdEstablecimiento
                '    nAsiento.idEntidad = Nothing
                '    nAsiento.nombreEntidad = Nothing
                '    nAsiento.tipoEntidad = TIPO_ENTIDAD.PROVEEDOR
                '    nAsiento.fechaProceso = objDocumento.documentocompra.fechaDoc
                '    nAsiento.codigoLibro = "13"
                '    nAsiento.tipo = ASIENTO_CONTABLE.HABILITADO.DISABLED
                '    nAsiento.tipoAsiento = ASIENTO_CONTABLE.PRODUCTOS_EN_TRANSITO
                '    nAsiento.importeMN = objDocumento.documentocompra.importeTotal
                '    nAsiento.importeME = objDocumento.documentocompra.importeUS
                '    nAsiento.glosa = objDocumento.documentocompra.glosa
                '    nAsiento.usuarioActualizacion = objDocumento.usuarioActualizacion
                '    nAsiento.fechaActualizacion = objDocumento.fechaActualizacion
                '    asientoBL.InsertDefault(nAsiento, objDocumento.idDocumento)

                'End If
                '   Dim codAsiento = nAsiento.idAsiento
                Dim codigoLote = 0
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    If i.CustomPrecios IsNot Nothing Then
                        If i.CustomPrecios.Count > 0 Then
                            PrecioBL.GrabarListadoPrecios(i.CustomPrecios)
                        End If
                    End If

                    Select Case objDocumento.documentocompra.destino
                        Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.ENTRADA_EXISTENCIAS
                            If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then
                                codigoLote = i.codigoLote
                            Else
                                codigoLote = loteBL.GrabarLotesOne(i.CustomRecursoCostoLote)
                            End If
                            i.codigoLote = codigoLote

                            Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                            i.secuencia = codSecuencia
                            i.nrolote = codigoLote
                            inventario.InsertAlmacenOEDefault(i, objDocumento)

                            If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then

                            Else
                                nuevoTA = New totalesAlmacen With
                                        {
                                            .idEmpresa = i.IdEmpresa,
                                            .idEstablecimiento = i.IdEstablecimiento,
                                            .codigoLote = codigoLote,
                                            .idAlmacen = i.almacenRef,
                                            .origenRecaudo = i.destino,
                                            .tipoExistencia = i.tipoExistencia,
                                            .idItem = i.idItem,
                                            .descripcion = i.descripcionItem,
                                            .idUnidad = i.unidad1,
                                            .unidadMedida = i.unidad1,
                                            .cantidad = i.monto1,
                                            .importeSoles = i.importe,
                                            .importeDolares = i.importeUS,
                                            .cantidadMaxima = 10000,
                                            .cantidadMinima = 10,
                                            .fechaVcto = i.CustomRecursoCostoLote.fechaVcto,
                                            .status = StatusArticulo.Activo,
                                            .usuarioActualizacion = i.usuarioModificacion,
                                            .fechaActualizacion = i.fechaModificacion}
                                HeliosData.totalesAlmacen.Add(nuevoTA)
                            End If

                            't = New totalesAlmacen
                            't.idEmpresa = i.IdEmpresa
                            't.idEstablecimiento = i.IdEstablecimiento
                            't.tipoExistencia = i.tipoExistencia
                            't.descripcion = i.descripcionItem
                            '' t.descripcion = i.DetalleItem
                            't.idUnidad = i.unidad1
                            't.idAlmacen = i.almacenRef
                            't.origenRecaudo = i.destino
                            't.idItem = i.idItem
                            't.cantidad = i.monto1
                            't.precioUnitarioCompra = 0
                            't.importeSoles = i.importe
                            't.importeDolares = i.importeUS
                            't.usuarioActualizacion = i.usuarioModificacion
                            't.fechaActualizacion = i.fechaModificacion
                            'totalesBL.UpdateStockOtrasEntradas(t)


                        Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.SALIDA_EXISTENCIAS

                            nuevoTA = New totalesAlmacen
                            nuevoTA.idEmpresa = i.IdEmpresa
                            nuevoTA.idEstablecimiento = i.IdEstablecimiento
                            nuevoTA.codigoLote = i.CustomRecursoCostoLote.codigoLote
                            nuevoTA.idAlmacen = i.almacenRef
                            nuevoTA.origenRecaudo = i.destino
                            nuevoTA.idItem = i.idItem
                            nuevoTA.cantidad = i.monto1 * -1

                            Dim Product = totalesBL.ObtenerCanDisponibleProductLote(nuevoTA)

                            If i.monto1 > Product.cantidad Then
                                Throw New Exception("El artículo: " & i.descripcionItem & ", no tiene stock disponible!")
                            End If


                            i.codigoLote = i.CustomRecursoCostoLote.codigoLote

                            Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                            i.secuencia = codSecuencia

                            i.nrolote = i.CustomRecursoCostoLote.codigoLote
                            inventario.InsertAlmacenOSDefault(i, objDocumento)

                            't = New totalesAlmacen
                            't.idEmpresa = i.IdEmpresa
                            't.idEstablecimiento = i.IdEstablecimiento
                            't.tipoExistencia = i.tipoExistencia
                            't.descripcion = i.descripcionItem
                            ''   t.descripcion = i.DetalleItem
                            't.idUnidad = i.unidad1
                            't.idAlmacen = i.almacenRef
                            't.origenRecaudo = i.destino
                            't.idItem = i.idItem
                            't.cantidad = i.monto1 * -1
                            't.precioUnitarioCompra = 0
                            't.importeSoles = (i.precioUnitario * i.monto1) * -1
                            't.importeDolares = (i.precioUnitarioUS * i.monto1) * -1
                            't.usuarioActualizacion = i.usuarioModificacion
                            't.fechaActualizacion = i.fechaModificacion
                            'totalesBL.UpdateTotalesVentas(t)

                            If Not IsNothing(i.tipoCosto) Then
                                'registro de los asientos contables
                                'nMovimiento = New movimiento
                                'nMovimiento.idAsiento = codAsiento
                                'Select Case i.tipoExistencia
                                '    Case "01"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "01", "ITEM", "EXT01.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "03"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "03", "ITEM", "EXT03.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "04"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "04", "ITEM", "EXT04.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "05"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "05", "ITEM", "EXT05.2")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                'End Select
                                'nMovimiento.descripcion = i.descripcionItem
                                'nMovimiento.tipo = "D"
                                'nMovimiento.monto = i.importe
                                'nMovimiento.montoUSD = i.importeUS
                                'nMovimiento.usuarioActualizacion = i.usuarioModificacion
                                'nMovimiento.fechaActualizacion = i.fechaModificacion
                                'HeliosData.movimiento.Add(nMovimiento)

                                ''----------------- haber----------------------------------------

                                'nMovimiento = New movimiento
                                'nMovimiento.idAsiento = codAsiento
                                'Select Case i.tipoExistencia
                                '    Case "01"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "01", "ITEM", "EXT01.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "03"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "03", "ITEM", "ALM03.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "04"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "04", "ITEM", "ALM04.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                '    Case "05"
                                '        cuentaMascara = cuentaMascaraBL.UbicarCuentaXmoduloXitem(Gempresas.IdEmpresaRuc, "05", "ITEM", "ALM05.1")
                                '        nMovimiento.cuenta = cuentaMascara.cuentaEspecifica
                                'End Select
                                'nMovimiento.descripcion = i.descripcionItem
                                'nMovimiento.tipo = "H"
                                'nMovimiento.monto = i.importe
                                'nMovimiento.montoUSD = i.importeUS
                                'nMovimiento.usuarioActualizacion = i.usuarioModificacion
                                'nMovimiento.fechaActualizacion = i.fechaModificacion
                                'HeliosData.movimiento.Add(nMovimiento)
                                '----------------------------------------------------------------------------------




                                'ESTE ES EL VIGENTE HASTA 4/04/2017 ************************************
                                ' recursoCostoBL.GrabarDetalleRecursosByOne(i, objDocumento.idDocumento)
                            End If
                    End Select
                Next

                '     asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return codDocumento
    End Function


    'Private Sub Part_DetalleLogistica(objDocumento As documento)
    '    Dim totalesBL As New totalesAlmacenBL
    '    Dim inventario As New InventarioMovimientoBL
    '    Dim ventaDetalleBL As New documentoventaAbarrotesDetBL
    '    Dim t As New totalesAlmacen

    '    Using ts As New TransactionScope
    '        For Each i In objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet
    '            Dim codSecuenciaDetalle As Integer = ventaDetalleBL.InsertSingleContado(i, objDocumento.idDocumento)
    '            i.secuencia = codSecuenciaDetalle
    '        Next


    '        Dim numeroVenta = objDocumento.CustomNumero
    '        DetalleInventarioJiuni(objDocumento.documentoventaAbarrotes.documentoventaAbarrotesDet.ToList(), objDocumento.documentoventaAbarrotes, numeroVenta)
    '        HeliosData.SaveChanges()
    '        ts.Complete()
    '    End Using


    'End Sub

    Function InsertarSalida_SPC(objDocumento As documento) As Integer
        Dim ventaBL As New documentoventaAbarrotesBL
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim guiaBL As New documentoGuiaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim precio As New listadoPreciosBL
        Dim nuevoTA As New totalesAlmacen
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento
        Dim cuentaMascara As New cuentaMascara
        Dim cuentaMascaraBL As New cuentaMascaraBL
        Dim codDocumento As Integer = 0
        Dim loteBL As New recursoCostoLoteBL
        Dim PrecioBL As New ConfiguracionPrecioProductoBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                codDocumento = objDocumento.idDocumento
                objDocumento.documentocompra.idDocumento = codDocumento
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                '   For Each i In objDocumento.documentocompra.documentocompradetalle
                Select Case objDocumento.documentocompra.destino
                    Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.TRANSFERENCIA_ALMACENES
                        For Each i In objDocumento.documentocompra.documentocompradetalle
                            Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                            i.secuencia = codSecuencia
                        Next


                        Select Case objDocumento.documentocompra.estadoEntrega
                            Case EstadoTransferenciaAlmacen.EntregaConExito
                                'por la salida de inventario de origen
                                Dim numeroVenta = objDocumento.CustomNumero
                                ventaBL.DetalleInventarioJiuni_Logistica(objDocumento.documentocompra.documentocompradetalle.ToList(), objDocumento.documentocompra, numeroVenta)

                                guiaBL.InsertGuiaNuevo(objDocumento.CustomDocumentoCaja, codDocumento)

                            Case EstadoTransferenciaAlmacen.Pedido

                        End Select

                    Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.SALIDA_EXISTENCIAS
                        For Each i In objDocumento.documentocompra.documentocompradetalle
                            Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                            i.secuencia = codSecuencia
                        Next

                        Dim numeroVenta = objDocumento.CustomNumero
                        ventaBL.DetalleInventarioJiuni_Logistica(objDocumento.documentocompra.documentocompradetalle.ToList(), objDocumento.documentocompra, numeroVenta)
                End Select
                '    Next

                '     asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return codDocumento
    End Function

    Sub GrabarPedidoLogistica(objDocumento As documento)
        Try
            Using ts As New TransactionScope()
                HeliosData.documento.Add(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Function EditarOtrasSalida_SPC(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim guiaBL As New documentoGuiaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim precio As New listadoPreciosBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim nuevoTA As New totalesAlmacen
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento
        Dim cuentaMascara As New cuentaMascara
        Dim cuentaMascaraBL As New cuentaMascaraBL
        Dim codDocumento As Integer = 0
        Dim loteBL As New recursoCostoLoteBL
        Dim documentoCajaBl As New documentoCajaDetalleBL
        Try
            Using ts As New TransactionScope()

                'eliminando inventario
                inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)

                'eliminando documento caja
                documentoCajaBl.DeleteDocumentoCaja(objDocumento.idDocumento)


                'eliminando guía de remisión
                guiaBL.EliminarGuiaGeneral(objDocumento.idDocumento)

                'eliminando asiento contable
                asientoBL.DeletePorDocumento(objDocumento.idDocumento)

                'eliminado costos referenciados
                recursoCostoBL.eliminarDetalleCostoByIdDocumento(objDocumento.idDocumento)

                '-----------------------------------------------------------------------
                Delete(New documentocompra With {.idDocumento = objDocumento.idDocumento})
                '---------------------------------------------------------------------------------------------

                DocumentoBL.Update(objDocumento)
                codDocumento = objDocumento.idDocumento
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    'Validando Stock por articulo
                    nuevoTA = New totalesAlmacen
                    nuevoTA.idEmpresa = i.IdEmpresa
                    nuevoTA.idEstablecimiento = i.IdEstablecimiento
                    nuevoTA.codigoLote = i.CustomRecursoCostoLote.codigoLote
                    nuevoTA.idAlmacen = i.almacenRef
                    nuevoTA.origenRecaudo = i.destino
                    nuevoTA.idItem = i.idItem
                    nuevoTA.cantidad = i.monto1 * -1

                    Dim Product = totalesBL.ObtenerCanDisponibleProductLote(nuevoTA)

                    If i.monto1 > Product.cantidad Then
                        Throw New Exception("El artículo: " & i.descripcionItem & ", no tiene stock disponible!")
                    End If
                    '----------------------------------------------------------------------------------------------------------

                    i.codigoLote = i.CustomRecursoCostoLote.codigoLote
                    Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    i.secuencia = codSecuencia
                    i.nrolote = i.CustomRecursoCostoLote.codigoLote
                    inventario.InsertAlmacenOSDefault(i, objDocumento)
                Next
                '     asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return codDocumento
    End Function

    Function EditarOtrasEntrada_SPC(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim guiaBL As New documentoGuiaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim precio As New listadoPreciosBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim nuevoTA As New totalesAlmacen
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento
        Dim cuentaMascara As New cuentaMascara
        Dim cuentaMascaraBL As New cuentaMascaraBL
        Dim codDocumento As Integer = 0
        Dim loteBL As New recursoCostoLoteBL
        Dim documentoCajaBl As New documentoCajaDetalleBL
        Try
            Using ts As New TransactionScope()

                'eliminando inventario
                inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)

                'eliminando documento caja
                documentoCajaBl.DeleteDocumentoCaja(objDocumento.idDocumento)


                'eliminando guía de remisión
                guiaBL.EliminarGuiaGeneral(objDocumento.idDocumento)

                'eliminando asiento contable
                asientoBL.DeletePorDocumento(objDocumento.idDocumento)

                'eliminado costos referenciados
                recursoCostoBL.eliminarDetalleCostoByIdDocumento(objDocumento.idDocumento)

                '-----------------------------------------------------------------------
                Delete(New documentocompra With {.idDocumento = objDocumento.idDocumento})
                '---------------------------------------------------------------------------------------------

                DocumentoBL.Update(objDocumento)
                codDocumento = objDocumento.idDocumento
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle

                    Dim articuloExiste = HeliosData.totalesAlmacen.Where(Function(o) o.idItem = i.idItem And o.codigoLote = i.CustomRecursoCostoLote.codigoLote And o.idAlmacen = i.almacenRef).FirstOrDefault
                    If articuloExiste Is Nothing Then
                        Dim codigoLoteNuevo = loteBL.GrabarLotesOne(i.CustomRecursoCostoLote)
                        i.codigoLote = codigoLoteNuevo
                        Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        i.secuencia = codSecuencia
                        i.nrolote = codigoLoteNuevo
                        inventario.InsertAlmacenOEDefault(i, objDocumento)

                        nuevoTA = New totalesAlmacen With
                                        {
                                            .idEmpresa = i.IdEmpresa,
                                            .idEstablecimiento = i.IdEstablecimiento,
                                            .codigoLote = codigoLoteNuevo,
                                            .idAlmacen = i.almacenRef,
                                            .origenRecaudo = i.destino,
                                            .tipoExistencia = i.tipoExistencia,
                                            .idItem = i.idItem,
                                            .descripcion = i.descripcionItem,
                                            .idUnidad = i.unidad1,
                                            .unidadMedida = i.unidad1,
                                            .cantidad = i.monto1,
                                            .importeSoles = i.importe,
                                            .importeDolares = i.importeUS,
                                            .cantidadMaxima = 10000,
                                            .cantidadMinima = 10,
                                            .fechaVcto = i.CustomRecursoCostoLote.fechaVcto,
                                            .status = StatusArticulo.Activo,
                                            .usuarioActualizacion = i.usuarioModificacion,
                                            .fechaActualizacion = i.fechaModificacion}
                        HeliosData.totalesAlmacen.Add(nuevoTA)
                    Else
                        i.codigoLote = i.CustomRecursoCostoLote.codigoLote
                        Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                        i.secuencia = codSecuencia
                        i.nrolote = i.CustomRecursoCostoLote.codigoLote
                        inventario.InsertAlmacenOEDefault(i, objDocumento)
                    End If


                Next
                '     asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
        Return codDocumento
    End Function

    Public Sub EditarOtraEntrada(objDocumento As documento)
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL

        Dim fechaActual = New Date(objDocumento.documentocompra.fechaDoc.Value.Year, objDocumento.documentocompra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)


        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(objDocumento.idEmpresa, fechaActual, objDocumento.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = objDocumento.idEmpresa,
                                                .idCentroCosto = objDocumento.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If

        Using ts As New TransactionScope
            EditarOtrasEntrada_SPC(objDocumento)

            Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                                  Where n.tipoExistencia <> "GS"
                                  Select n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct().ToList()


            For Each a In ListaArticulos
                If (almacenBL.GetEsAlmacenVirtual(a.almacenRef) = False) Then
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                       .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
                                                                                                                                             objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                                                                                                                       .tipoProducto = a.tipoExistencia,
                                                                                                                       .idItem = a.idItem,
                                                                                                                       .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                End If
            Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub EditarOtraSalida(objDocumento As documento)
        Dim almacenBL As New almacenBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL

        'Dim fechaActual = objDocumento.documentocompra.fechaDoc
        'Dim fechaAnterior = fechaActual.Value.AddMonths(-1)
        Dim fechaActual = New Date(objDocumento.documentocompra.fechaDoc.Value.Year, objDocumento.documentocompra.fechaDoc.Value.Month, 1)
        Dim fechaAnterior = fechaActual.AddMonths(-1)

        'si es false es porque no esta dentro del inicio de operaciones
        Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(objDocumento.idEmpresa, fechaActual, objDocumento.idCentroCosto)
        If valor = "False" Then
            If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = objDocumento.idEmpresa,
                                                .idCentroCosto = objDocumento.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            End If
        ElseIf valor = "True" Then
            Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
        Else
            If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
            End If

            'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
            '                                    {.idEmpresa = objDocumento.idEmpresa,
            '                                     .anio = fechaAnterior.Year,
            '                                     .mes = fechaAnterior.Month}) = False Then
            '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
            'End If
        End If

        Using ts As New TransactionScope
            EditarOtrasSalida_SPC(objDocumento)

            Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                                  Where n.tipoExistencia <> "GS"
                                  Select n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct().ToList()


            For Each a In ListaArticulos
                If (almacenBL.GetEsAlmacenVirtual(a.almacenRef) = False) Then
                    Dim listaAcurar = inventarioBL.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                       .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
                                                                                                                                             objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                                                                                                                       .tipoProducto = a.tipoExistencia,
                                                                                                                       .idItem = a.idItem,
                                                                                                                       .nrolote = a.codigoLote}, Nothing)
                    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                End If
            Next
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function SaveOtrasEntradasDefault(objDocumento As documento, objTotalesAlmacen As List(Of totalesAlmacen)) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Try
            Dim fechaActual = New Date(objDocumento.documentocompra.fechaDoc.Value.Year,
                                       objDocumento.documentocompra.fechaDoc.Value.Month, 1)
            Dim fechaAnterior = fechaActual.AddMonths(-1)


            'si es false es porque no esta dentro del inicio de operaciones
            Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(objDocumento.idEmpresa, fechaActual, objDocumento.idCentroCosto)
            If valor = "False" Then
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = objDocumento.idEmpresa,
                                                .idCentroCosto = objDocumento.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                End If
            ElseIf valor = "True" Then
                Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
            Else
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                'If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                '                                    {.idEmpresa = objDocumento.idEmpresa,
                '                                     .anio = fechaAnterior.Year,
                '                                     .mes = fechaAnterior.Month}) = False Then
                '    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                'End If
            End If

            Using ts As New TransactionScope()
                Dim codDoc = InsertarOtrasEntradas_SPC(objDocumento)
                Select Case objDocumento.documentocompra.destino
                    Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.ENTRADA_EXISTENCIAS
                        If objDocumento.documentocompra.AsigancionDeLotes = "LOTE EXISTENTE" Then
                            Dim listaEntradasDet = objDocumento.documentocompra.documentocompradetalle.ToList
                            Dim ListaArticulos = (From n In listaEntradasDet
                                                  Where n.tipoExistencia <> "GS"
                                                  Select n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct.ToList

                            For Each a In ListaArticulos
                                Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                                 .fecha = New DateTime(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1),
                                                                                                                                 .tipoProducto = a.tipoExistencia,
                                                                                                                                 .idItem = a.idItem, .nrolote = a.codigoLote}, Nothing)
                                totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                            Next
                        End If

                    Case TIPO_COMPRA.MOVIMIENTO_ALMACEN.SALIDA_EXISTENCIAS
                        Dim listaSalidaDet = objDocumento.documentocompra.documentocompradetalle.ToList
                        Dim ListaArticulos = (From n In listaSalidaDet
                                              Where n.tipoExistencia <> "GS"
                                              Select n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct.ToList

                        For Each a In listaSalidaDet
                            Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                                                                                                                             .fecha = New DateTime(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1),
                                                                                                                             .tipoProducto = a.tipoExistencia,
                                                                                                                             .idItem = a.idItem, .nrolote = a.CustomRecursoCostoLote.codigoLote}, Nothing)
                            totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                        Next
                End Select

                'Dim ListaArticulos = (From n In objDocumento.documentocompra.documentocompradetalle
                '                      Select n.idItem, n.almacenRef, n.tipoExistencia).Distinct.ToList


                'For Each a In ListaArticulos
                '    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticulo(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                '                                                                                                       .fecha = New DateTime(objDocumento.documentocompra.fechaDoc.Value.Year,
                '                                                                                                                             objDocumento.documentocompra.fechaDoc.Value.Month, 1),
                '                                                                                                       .tipoProducto = a.tipoExistencia,
                '                                                                                                       .idItem = a.idItem}, Nothing)
                '    totalesBL.GetCurarKardexCaberas(listaAcurar)
                'Next


                HeliosData.SaveChanges()
                ts.Complete()
                Return codDoc
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GrabarSalidaInventario(objDocumento As documento) As Integer
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim cierreinventarioBL As New cierreinventarioBL
        Dim empresaCierreMensualBL As New empresaCierreMensualBL
        Try
            Dim fechaActual = New Date(objDocumento.documentocompra.fechaDoc.Value.Year,
                                       objDocumento.documentocompra.fechaDoc.Value.Month, 1)
            Dim fechaAnterior = fechaActual.AddMonths(-1)


            'si es false es porque no esta dentro del inicio de operaciones
            Dim valor = empresaCierreMensualBL.GetValidaFechaInicioOperacion(objDocumento.idEmpresa, fechaActual, objDocumento.idCentroCosto)
            If valor = "False" Then
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If

                If empresaCierreMensualBL.EstadoMesCerrado(New empresaCierreMensual With
                                                {.idEmpresa = objDocumento.idEmpresa,
                                                .idCentroCosto = objDocumento.idCentroCosto,
                                                 .anio = fechaAnterior.Year,
                                                 .mes = fechaAnterior.Month}) = False Then
                    Throw New Exception("Debe cerrar el período anterior: " & MonthName(fechaAnterior.Month) & "-" & fechaAnterior.Year)
                End If
            ElseIf valor = "True" Then
                Throw New Exception("No puede ingresar en un período anterior al inicio de operaciones")
            Else
                If cierreinventarioBL.InventarioEstaCerradoV2(objDocumento.idEmpresa, fechaActual.Year, fechaActual.Month, objDocumento.idCentroCosto) Then
                    Throw New Exception("El período: " & MonthName(fechaActual.Month) & ", esta cerrado!")
                End If
            End If

            Using ts As New TransactionScope()
                Dim codDoc = InsertarSalida_SPC(objDocumento)


                Dim listaVentaDet = HeliosData.InventarioMovimiento.Where(Function(o) o.idDocumento = codDoc).ToList

                If listaVentaDet.Count > 0 Then
                    Dim fechaEnvioAlmacen = objDocumento.documentocompra.fechaDoc.Value.Date
                    For Each a In listaVentaDet
                        Dim lista = inventario.GetCuracionEntradasAlmacenByArticuloLote(
                        New InventarioMovimiento With {
                        .idAlmacen = a.idAlmacen,
                        .fecha = New DateTime(fechaEnvioAlmacen.Year, fechaEnvioAlmacen.Month, 1),
                        .tipoProducto = a.tipoProducto,
                        .idItem = a.idItem,
                        .nrolote = a.nrolote}, Nothing)
                        totalesBL.GetCurarKardexCaberasLOTE(lista)
                    Next
                End If


                '        Dim listaSalidaDet = objDocumento.documentocompra.documentocompradetalle.ToList
                '        Dim ListaArticulos = (From n In listaSalidaDet
                '                      Where
                '                          n.tipoExistencia <> "GS"
                '                      Select
                '                          n.idItem, n.almacenRef, n.tipoExistencia, n.CustomRecursoCostoLote.codigoLote).Distinct.ToList

                'For Each a In listaSalidaDet
                '    Dim listaAcurar = inventario.GetCuracionEntradasAlmacenByArticuloLote(New InventarioMovimiento With {.idAlmacen = a.almacenRef,
                '                                                                                                             .fecha = New DateTime(objDocumento.fechaProceso.Year, objDocumento.fechaProceso.Month, 1),
                '                                                                                                             .tipoProducto = a.tipoExistencia,
                '                                                                                                             .idItem = a.idItem, .nrolote = a.CustomRecursoCostoLote.codigoLote}, Nothing)
                '    totalesBL.GetCurarKardexCaberasLOTE(listaAcurar)
                'Next


                HeliosData.SaveChanges()
                ts.Complete()
                Return codDoc
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub GrabarRetornoProductosTerminados(objDocumento As documento)
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim totalesBL As New totalesAlmacenBL
        Dim t As New totalesAlmacen
        Dim asientoBL As New AsientoBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    inventario.InsertAlmacenOEDefault(i, objDocumento)

                    t = New totalesAlmacen
                    t.idEmpresa = i.IdEmpresa
                    t.idEstablecimiento = i.IdEstablecimiento
                    t.tipoExistencia = i.tipoExistencia
                    t.descripcion = i.descripcionItem
                    t.idUnidad = i.unidad1
                    t.idAlmacen = i.almacenRef
                    t.origenRecaudo = i.destino
                    t.idItem = i.idItem
                    t.cantidad = i.monto1
                    t.precioUnitarioCompra = 0
                    t.importeSoles = (i.precioUnitario * i.monto1)
                    t.importeDolares = (i.precioUnitarioUS * i.monto1)
                    t.usuarioActualizacion = i.usuarioModificacion
                    t.fechaActualizacion = i.fechaModificacion
                    totalesBL.UpdateStockOtrasEntradas(t)

                    Dim costo As recursoCosto = HeliosData.recursoCosto.Where(Function(o) o.idCosto = i.idCosto).FirstOrDefault
                    costo.status = i.Status ' StatusProductosTerminados.Entregado

                Next

                asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function GrabarProduccion(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim guiaBL As New documentoGuiaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim precio As New listadoPreciosBL
        Dim recursoCostoBL As New recursoCostoDetalleBL
        Dim t As New totalesAlmacen
        Dim nAsiento As New asiento
        Dim nMovimiento As New movimiento

        Dim costo_Compra As New recursoCosto_compraDetalle
        Dim costo_CompraBL As New recursoCosto_compraDetalleBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    Dim codSecuencia = compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    i.secuencia = codSecuencia


                    inventario.InsertAlmacenOSDefault(i, objDocumento)

                    t = New totalesAlmacen
                    t.idEmpresa = i.IdEmpresa
                    t.idEstablecimiento = i.IdEstablecimiento
                    t.tipoExistencia = i.tipoExistencia
                    t.descripcion = i.descripcionItem
                    t.idUnidad = i.unidad1
                    t.idAlmacen = i.almacenRef
                    t.origenRecaudo = i.destino
                    t.idItem = i.idItem
                    t.cantidad = i.monto1 * -1
                    t.precioUnitarioCompra = 0
                    t.importeSoles = (i.precioUnitario * i.monto1) * -1
                    t.importeDolares = (i.precioUnitarioUS * i.monto1) * -1
                    t.usuarioActualizacion = i.usuarioModificacion
                    t.fechaActualizacion = i.fechaModificacion
                    totalesBL.UpdateTotalesVentas(t)
                    recursoCostoBL.GrabarDetalleRecursosByOne(i, objDocumento.idDocumento)

                    costo_Compra = New recursoCosto_compraDetalle
                    costo_Compra.idDocumento = objDocumento.idDocumento
                    costo_Compra.idCosto = i.idProyecto
                    costo_Compra.secuenciacosto = i.SecuenciaCosto
                    costo_Compra.secuenciaCompra = codSecuencia
                    costo_Compra.cantidad = i.monto1
                    costo_CompraBL.Grabar(costo_Compra)
                Next

                asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Function InsertProducto(i As documentocompradetalle) As Integer
        Dim detalleItem As New detalleitems

        Using ts As New TransactionScope
            detalleItem = New detalleitems With
                            {
                                .Action = Business.Entity.BaseBE.EntityAction.INSERT,
                                .idEmpresa = i.IdEmpresa,
                                .idEstablecimiento = i.IdEstablecimiento,
                                .idItem = i.idItem,
                                .descripcionItem = i.descripcionItem,
                                .tipoExistencia = i.tipoExistencia,
                                .presentacion = i.unidad2,
                                .cuenta = String.Empty,
                                .origenProducto = i.destino,
                                .tipoProducto = "I",
                                .unidad1 = i.unidad1,
                                .marcaRef = i.marcaRef,
                                .estado = "A",
                                .fechaActualizacion = Date.Now
                            }
            HeliosData.detalleitems.Add(detalleItem)
            HeliosData.SaveChanges()
            ts.Complete()
            Return detalleItem.codigodetalle
        End Using
    End Function

    Public Function GrabarProductosTerminados(objDocumento As documento) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim asientoBL As New AsientoBL
        Dim guiaBL As New documentoGuiaBL
        Dim totalesBL As New totalesAlmacenBL
        Dim precio As New listadoPreciosBL
        Dim detalleItem As New detalleitems
        Dim objTotales As New totalesAlmacen
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Insert(objDocumento)
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle

                    Dim codProducto = InsertProducto(i)
                    '-------------------------------------------------------------------------

                    objTotales = New totalesAlmacen
                    objTotales.idEmpresa = i.IdEmpresa
                    objTotales.idEstablecimiento = i.IdEstablecimiento
                    objTotales.idAlmacen = i.almacenRef '
                    objTotales.origenRecaudo = i.destino
                    objTotales.tipoCambio = TmpTipoCambio
                    objTotales.tipoExistencia = i.tipoExistencia
                    objTotales.idItem = codProducto
                    objTotales.descripcion = i.descripcionItem
                    objTotales.idUnidad = i.unidad1
                    objTotales.cantidad = i.monto1
                    objTotales.precioUnitarioCompra = 0
                    objTotales.importeSoles = i.importe
                    objTotales.importeDolares = i.importeUS
                    objTotales.cantidadMinima = i.CantMinima
                    objTotales.cantidadMaxima = i.CantMaxima
                    objTotales.usuarioActualizacion = i.usuarioModificacion
                    objTotales.fechaActualizacion = i.fechaModificacion
                    totalesBL.Insert(objTotales)
                    '-----------------------------------------------------------------
                    i.idItem = codProducto
                    compraDetalleBL.InsertSingle(i, objDocumento.idDocumento)
                    inventario.InsertAlmacenOEDefault(i, objDocumento)
                Next
                asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                Return objDocumento.idDocumento
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function UpdateOtrasEntradas(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen))
        Dim DocumentoBL As New documentoBL
        Dim documentocajaDetalleBL As New documentoCajaDetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim asientoBL As New AsientoBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim documentoGuiBL As New documentoGuiaBL
        Try
            Using ts As New TransactionScope()
                DocumentoBL.Update(objDocumento)
                Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                asientoBL.DeleteGroup(objDocumento.idDocumento)
                inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                objTotalesAlmacen.UpdateTotalAlmacenOE(listaTotales, objDeleteTotales)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    compraDetalleBL.Update(i, objDocumento.tipoDoc)
                    If i.Action <> BaseBE.EntityAction.DELETE Then
                        inventario.InsertAlmacenOEDefault(i, objDocumento)
                    End If

                Next
                asientoBL.SavebyGroupDoc(objDocumento)
                '   documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                '     documentoGuiBL.InsertGuia(objDocumento.documentoGuia, objDocumento.idDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                Return True
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Function UpdateCompra(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen),
                                  Optional nDocumentoTributo As documento = Nothing)
        Dim DocumentoBL As New documentoBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim asientoBL As New AsientoBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim docGuiBL As New documentoGuiaBL
        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
        Dim colIdDocPadre As Integer
        'Dim docObligacionBL As New documentoObligacionTributariaBL
        'Dim DocumentoTributoBL As New documentoObligacionTributariaBL
        'Dim documentoTributo As New documentoObligacionTributaria

        Try


            Using ts As New TransactionScope()

                Dim nID = (From n In HeliosData.documentocompra
                           Where n.idDocumento = objDocumento.idDocumento).First

                colIdDocPadre = objDocumento.idDocumento

                If nID.numeroDoc = CStr(objDocumento.documentocompra.numeroDoc) _
                    And nID.serie = objDocumento.documentocompra.serie And
                    nID.idProveedor = objDocumento.documentocompra.idProveedor Then

                    DocumentoBL.Update(objDocumento)
                    Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                    asientoBL.DeleteGroup(objDocumento.idDocumento)
                    inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                    objTotalesAlmacen.UpdateSingleLista(listaTotales, objDeleteTotales)
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.Update(i, objDocumento.tipoDoc)
                        'AQUI SE INSERTAN DATOS AL ALMACEN
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            If i.Action <> BaseBE.EntityAction.DELETE Then
                                '     inventario.Insert(i, objDocumento)
                                inventario.InsertPagado(i, objDocumento)
                            End If
                        End If
                    Next

                    'Select Case objDocumento.documentocompra.tipoCompra
                    '    Case TIPO_COMPRA.COMPRA_AL_CREDITO
                    'GRABA AQUI LOS ASIENTOS CONTABLES
                    asientoBL.SavebyGroupDoc(objDocumento)
                    '  End Select
                    If Not IsNothing(objDocumento.documentoGuia) Then

                        docGuiBL.EliminarGuiasRemisionCAC(objDocumento.idDocumento)
                        If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                            docGuiBL.InsertGuiaRemisionCompraAlCredito(objDocumento, objDocumento.idDocumento)
                        End If
                    End If

                    'documentoTributo = docObligacionBL.UbicarTributoPorIdDocumentoCompra(objDocumento.idDocumento)
                    'If Not IsNothing(documentoTributo) Then
                    '    docObligacionBL.EliminarObligacion(documentoTributo.idDocumento)
                    'End If
                    'DocumentoTributoBL.SaveObligacion(nDocumentoTributo, objDocumento.idDocumento)
                    documentoDetalleObligacionBL.EliminarGrupoTributoPercepcion(colIdDocPadre)
                    DocumentoBL.EliminarDocNotasRef(colIdDocPadre)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return True
                ElseIf ValidarDocumentoNro(objDocumento.documentocompra) = True Then

                    DocumentoBL.Update(objDocumento)
                    Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                    asientoBL.DeleteGroup(objDocumento.idDocumento)
                    inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                    objTotalesAlmacen.UpdateSingleLista(listaTotales, objDeleteTotales)
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.Update(i, objDocumento.tipoDoc)
                        'AQUI SE INSERTAN DATOS AL ALMACEN
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            If i.Action <> BaseBE.EntityAction.DELETE Then
                                '   inventario.Insert(i, objDocumento)
                                inventario.InsertPagado(i, objDocumento)
                            End If
                        End If
                    Next
                    'Select Case objDocumento.documentocompra.tipoCompra
                    '    Case TIPO_COMPRA.COMPRA_AL_CREDITO
                    'GTRABRA AQUI LOS ASIENTOS CONTABLES
                    asientoBL.SavebyGroupDoc(objDocumento)
                    '    End Select
                    If Not IsNothing(objDocumento.documentoGuia) Then
                        docGuiBL.EliminarGuiasRemisionCAC(objDocumento.idDocumento)
                        If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                            docGuiBL.InsertGuiaRemisionCompraAlCredito(objDocumento, objDocumento.idDocumento)
                        End If
                    End If
                    'documentoTributo = docObligacionBL.UbicarTributoPorIdDocumentoCompra(objDocumento.idDocumento)
                    'If Not IsNothing(documentoTributo) Then
                    '    docObligacionBL.EliminarObligacion(documentoTributo.idDocumento)
                    'End If
                    'DocumentoTributoBL.SaveObligacion(nDocumentoTributo, objDocumento.idDocumento)
                    documentoDetalleObligacionBL.EliminarGrupoTributoPercepcion(colIdDocPadre)
                    DocumentoBL.EliminarDocNotasRef(colIdDocPadre)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return True

                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If


            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function UpdateCompraAlCreditoCnRecep(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen),
                                  Optional nDocumentoTributo As documento = Nothing)
        Dim DocumentoBL As New documentoBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim asientoBL As New AsientoBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim documentoGuiBL As New documentoGuiaBL
        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
        Dim colIdDocPadre As Integer
        Dim precioV As New listadoPreciosBL
        Try
            Using ts As New TransactionScope()
                Dim nID = (From n In HeliosData.documentocompra
                           Where n.idDocumento = objDocumento.idDocumento).First

                colIdDocPadre = objDocumento.idDocumento

                If nID.numeroDoc = CStr(objDocumento.documentocompra.numeroDoc) _
                    And nID.serie = objDocumento.documentocompra.serie And
                    nID.idProveedor = objDocumento.documentocompra.idProveedor Then

                    DocumentoBL.Update(objDocumento)
                    Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                    asientoBL.DeleteGroup(objDocumento.idDocumento)
                    inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                    objTotalesAlmacen.UpdateSingleLista(listaTotales, objDeleteTotales)
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.Update(i, objDocumento.tipoDoc)
                        'AQUI SE INSERTAN DATOS AL ALMACEN
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            If i.Action <> BaseBE.EntityAction.DELETE Then
                                '     inventario.Insert(i, objDocumento)
                                inventario.InsertPagado(i, objDocumento)
                                '     precioV.GrabarPrecioEntrada(i)
                            End If
                        End If
                    Next

                    'Select Case objDocumento.documentocompra.tipoCompra
                    '    Case TIPO_COMPRA.COMPRA_AL_CREDITO
                    'GRABA AQUI LOS ASIENTOS CONTABLES
                    asientoBL.SavebyGroupDoc(objDocumento)
                    '  End Select
                    If Not IsNothing(objDocumento.documentoGuia) Then
                        documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                        If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                            documentoGuiBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                        End If
                    End If

                    'documentoTributo = docObligacionBL.UbicarTributoPorIdDocumentoCompra(objDocumento.idDocumento)
                    'If Not IsNothing(documentoTributo) Then
                    '    docObligacionBL.EliminarObligacion(documentoTributo.idDocumento)
                    'End If
                    'DocumentoTributoBL.SaveObligacion(nDocumentoTributo, objDocumento.idDocumento)
                    documentoDetalleObligacionBL.EliminarGrupoTributoPercepcion(colIdDocPadre)
                    DocumentoBL.EliminarDocNotasRef(colIdDocPadre)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return True
                ElseIf ValidarDocumentoNro(objDocumento.documentocompra) = True Then

                    DocumentoBL.Update(objDocumento)
                    Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                    asientoBL.DeleteGroup(objDocumento.idDocumento)
                    inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                    objTotalesAlmacen.UpdateSingleLista(listaTotales, objDeleteTotales)
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.Update(i, objDocumento.tipoDoc)
                        'AQUI SE INSERTAN DATOS AL ALMACEN
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            If i.Action <> BaseBE.EntityAction.DELETE Then
                                '   inventario.Insert(i, objDocumento)
                                inventario.InsertPagado(i, objDocumento)
                            End If
                        End If
                    Next
                    'Select Case objDocumento.documentocompra.tipoCompra
                    '    Case TIPO_COMPRA.COMPRA_AL_CREDITO
                    'GTRABRA AQUI LOS ASIENTOS CONTABLES
                    asientoBL.SavebyGroupDoc(objDocumento)
                    '    End Select
                    If Not IsNothing(objDocumento.documentoGuia) Then
                        documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                        If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                            documentoGuiBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                        End If

                    End If
                    'documentoTributo = docObligacionBL.UbicarTributoPorIdDocumentoCompra(objDocumento.idDocumento)
                    'If Not IsNothing(documentoTributo) Then
                    '    docObligacionBL.EliminarObligacion(documentoTributo.idDocumento)
                    'End If
                    'DocumentoTributoBL.SaveObligacion(nDocumentoTributo, objDocumento.idDocumento)
                    documentoDetalleObligacionBL.EliminarGrupoTributoPercepcion(colIdDocPadre)
                    DocumentoBL.EliminarDocNotasRef(colIdDocPadre)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return True

                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If


            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function UpdateAporteExistencia(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen))
        Dim DocumentoBL As New documentoBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim asientoBL As New AsientoBL
        Dim objTotalesAlmacen As New totalesAlmacenBL

        Try
            Using ts As New TransactionScope()
                DocumentoBL.Update(objDocumento)
                Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                asientoBL.DeleteGroup(objDocumento.idDocumento)
                inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                objTotalesAlmacen.UpdateTotalAlmacenOE(listaTotales, objDeleteTotales)
                For Each i In objDocumento.documentocompra.documentocompradetalle
                    compraDetalleBL.Update(i, objDocumento.tipoDoc)
                    'AQUI SE INSERTAN DATOS AL ALMACEN
                    If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                        If i.Action <> BaseBE.EntityAction.DELETE Then
                            inventario.InsertAportes(i, objDocumento)
                        End If
                    End If
                Next
                asientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
                Return True
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Function UpdateCompraPagada(objDocumento As documento, listaTotales As List(Of totalesAlmacen), objDeleteTotales As List(Of totalesAlmacen),
                                       objDocumentoCaja As documento,
                                       nCajaUsuarioMontos As cajaUsuario, nCajaUsuarioEliminar As cajaUsuario)
        Dim DocumentoBL As New documentoBL
        Dim documentocajaDetalleBL As New documentoCajaDetalleBL
        Dim inventario As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim asientoBL As New AsientoBL
        Dim objTotalesAlmacen As New totalesAlmacenBL
        Dim CajaUsuarioBL As New CajaUsuarioBL
        Dim documentoGuiBL As New documentoGuiaBL
        Dim colIdDocPadre As Integer

        Dim documentoDetalleObligacionBL As New documentoObligacionTributariaDetalleBL
        Try
            Using ts As New TransactionScope()
                Dim nID = (From n In HeliosData.documentocompra
                           Where n.idDocumento = objDocumento.idDocumento).First

                colIdDocPadre = objDocumento.idDocumento
                If nID.numeroDoc = CStr(objDocumento.documentocompra.numeroDoc) _
                    And nID.serie = objDocumento.documentocompra.serie And
                    nID.idProveedor = objDocumento.documentocompra.idProveedor Then

                    DocumentoBL.Update(objDocumento)
                    '   CajaUsuarioBL.UpdateCajaUsuarioCompras2(nCajaUsuarioMontos, nCajaUsuarioEliminar, objDocumento.documentocompra)
                    Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                    asientoBL.DeleteGroup(objDocumento.idDocumento)
                    inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                    objTotalesAlmacen.UpdateSingleLista(listaTotales, objDeleteTotales)

                    DocumentoBL.DeleteSinglePagado(documentocajaDetalleBL.RecuperarIDCompra(objDocumento.idDocumento)) 'ELIMINANDO DOCUMENTO CAJA
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.Update(i, objDocumento.tipoDoc)
                        'AQUI SE INSERTAN DATOS AL ALMACEN
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            If i.Action <> BaseBE.EntityAction.DELETE Then
                                inventario.InsertPagado(i, objDocumento)
                            End If
                        End If
                    Next

                    'GTRABRA AQUI LOS ASIENTOS CONTABLES
                    asientoBL.SavebyGroupDoc(objDocumento)

                    SaveCaja(objDocumentoCaja, objDocumento.idDocumento)

                    documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        documentoGuiBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If


                    documentoDetalleObligacionBL.EliminarGrupoTributoPercepcion(colIdDocPadre)
                    DocumentoBL.EliminarDocNotasRef(colIdDocPadre)

                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return True
                ElseIf ValidarDocumentoNro(objDocumento.documentocompra) = True Then

                    DocumentoBL.Update(objDocumento)
                    '    CajaUsuarioBL.UpdateCajaUsuarioCompras2(nCajaUsuarioMontos, nCajaUsuarioEliminar, objDocumento.documentocompra)
                    Me.Update(objDocumento.documentocompra, objDocumento.idDocumento)
                    asientoBL.DeleteGroup(objDocumento.idDocumento)
                    inventario.DeleteInventarioPorDocumento(objDocumento.idDocumento)
                    objTotalesAlmacen.UpdateSingleLista(listaTotales, objDeleteTotales)

                    DocumentoBL.DeleteSinglePagado(documentocajaDetalleBL.RecuperarIDCompra(objDocumento.idDocumento)) 'ELIMINANDO DOCUMENTO CAJA
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        compraDetalleBL.Update(i, objDocumento.tipoDoc)
                        'AQUI SE INSERTAN DATOS AL ALMACEN
                        If i.tipoExistencia <> TipoRecurso.SERVICIO Then
                            If i.Action <> BaseBE.EntityAction.DELETE Then
                                inventario.InsertPagado(i, objDocumento)
                            End If
                        End If
                    Next
                    'GTRABRA AQUI LOS ASIENTOS CONTABLES
                    asientoBL.SavebyGroupDoc(objDocumento)

                    SaveCaja(objDocumentoCaja, objDocumento.idDocumento)

                    documentoGuiBL.EliminarDocGuia(objDocumento.idDocumento)
                    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                        documentoGuiBL.InsertGuiaPagado(objDocumento.documentoGuia, objDocumento.idDocumento)
                    End If

                    documentoDetalleObligacionBL.EliminarGrupoTributoPercepcion(colIdDocPadre)
                    DocumentoBL.EliminarDocNotasRef(colIdDocPadre)
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return True
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If


            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Sub Update(ByVal documentocompraBE As documentocompra, intidDoc As Integer)
        Using ts As New TransactionScope
            Dim docCompra As documentocompra = HeliosData.documentocompra.Where(Function(o) _
                                            o.idDocumento = intidDoc).First()

            docCompra.codigoLibro = documentocompraBE.codigoLibro
            docCompra.idEmpresa = documentocompraBE.idEmpresa
            docCompra.idCentroCosto = documentocompraBE.idCentroCosto
            docCompra.fechaDoc = documentocompraBE.fechaDoc
            docCompra.fechaVcto = documentocompraBE.fechaVcto
            docCompra.fechaContable = documentocompraBE.fechaContable
            docCompra.fechaConstancia = documentocompraBE.fechaConstancia
            docCompra.nroConstancia = documentocompraBE.nroConstancia
            docCompra.tipoDoc = documentocompraBE.tipoDoc
            docCompra.serie = documentocompraBE.serie
            docCompra.numeroDoc = documentocompraBE.numeroDoc
            docCompra.idProveedor = documentocompraBE.idProveedor
            docCompra.monedaDoc = documentocompraBE.monedaDoc
            docCompra.tasaIgv = documentocompraBE.tasaIgv
            docCompra.tcDolLoc = documentocompraBE.tcDolLoc
            docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
            docCompra.regimen = documentocompraBE.regimen
            docCompra.tasaRegimen = documentocompraBE.tasaRegimen
            docCompra.nroRegimen = documentocompraBE.nroRegimen
            docCompra.bi01 = documentocompraBE.bi01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.bi03 = documentocompraBE.bi03
            docCompra.bi04 = documentocompraBE.bi04
            docCompra.isc01 = documentocompraBE.isc01
            docCompra.isc02 = documentocompraBE.isc02
            docCompra.isc03 = documentocompraBE.isc03
            docCompra.igv01 = documentocompraBE.igv01
            docCompra.bi02 = documentocompraBE.bi02
            docCompra.igv03 = documentocompraBE.igv03
            docCompra.otc01 = documentocompraBE.bi02
            docCompra.otc02 = documentocompraBE.otc02
            docCompra.otc03 = documentocompraBE.otc03
            docCompra.otc04 = documentocompraBE.otc04
            docCompra.bi01us = documentocompraBE.bi01us
            docCompra.bi02us = documentocompraBE.bi02us
            docCompra.bi03us = documentocompraBE.bi03us
            docCompra.bi04us = documentocompraBE.bi04us
            docCompra.isc01us = documentocompraBE.isc01us
            docCompra.isc02us = documentocompraBE.isc01us
            docCompra.isc03us = documentocompraBE.isc03us
            docCompra.igv01us = documentocompraBE.igv01us
            docCompra.igv02us = documentocompraBE.igv02us
            docCompra.igv03us = documentocompraBE.igv03us
            docCompra.otc01us = documentocompraBE.otc01us
            docCompra.otc02us = documentocompraBE.otc02us
            docCompra.otc03us = documentocompraBE.otc03us
            docCompra.otc04us = documentocompraBE.otc04us
            docCompra.importeTotal = documentocompraBE.importeTotal
            docCompra.importeUS = documentocompraBE.importeUS
            docCompra.destino = documentocompraBE.destino
            docCompra.estadoPago = documentocompraBE.estadoPago
            docCompra.glosa = documentocompraBE.glosa
            docCompra.referenciaDestino = documentocompraBE.referenciaDestino
            docCompra.saldoMontoNota = documentocompraBE.saldoMontoNota
            docCompra.saldoMontoNotaUSD = documentocompraBE.saldoMontoNotaUSD
            docCompra.tipoCompra = documentocompraBE.tipoCompra
            docCompra.sustentado = documentocompraBE.sustentado
            docCompra.situacion = documentocompraBE.situacion
            docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
            docCompra.fechaActualizacion = documentocompraBE.fechaActualizacion

            'HeliosData.ObjectStateManager.GetObjectStateEntry(docCompra).State.ToString()
            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Sub Delete(ByVal documentocompraBE As documentocompra)
        Dim compra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = documentocompraBE.idDocumento).FirstOrDefault
        Using ts As New TransactionScope
            CType(HeliosData, System.Data.Entity.Infrastructure.IObjectContextAdapter).ObjectContext.DeleteObject(compra)
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Public Function GetListar_documentocompra() As List(Of documentocompra)
        Return (From a In HeliosData.documentocompra Select a).ToList
    End Function

    Public Function GetUbicar_documentocompraPorID(idDocumento As Integer) As documentocompra
        Dim docCompra As New documentocompra

        'Return (From a In HeliosData.documentocompra
        '        Where a.idDocumento = idDocumento).FirstOrDefault

        Dim com = (From n In HeliosData.documentocompra
                   Where n.idDocumento = idDocumento).FirstOrDefault

        If Not IsNothing(com) Then
            docCompra = New documentocompra
            docCompra.idDocumento = com.idDocumento
            docCompra.codigoLibro = com.codigoLibro
            docCompra.idEmpresa = com.idEmpresa
            docCompra.idCentroCosto = com.idCentroCosto
            docCompra.fechaDoc = com.fechaDoc
            docCompra.fechaVcto = com.fechaVcto
            docCompra.fechaContable = com.fechaContable
            docCompra.periodoTributo = com.periodoTributo
            docCompra.tipoDoc = com.tipoDoc
            docCompra.serie = com.serie
            docCompra.numeroDoc = com.numeroDoc
            docCompra.idProveedor = com.idProveedor
            docCompra.idPersona = com.idPersona
            docCompra.monedaDoc = com.monedaDoc
            docCompra.tasaIgv = com.tasaIgv
            docCompra.tcDolLoc = com.tcDolLoc
            docCompra.tipoRecaudo = com.tipoRecaudo
            docCompra.regimen = com.regimen
            docCompra.tasaRegimen = com.tasaRegimen
            docCompra.nroRegimen = com.nroRegimen
            docCompra.bi01 = com.bi01
            docCompra.bi02 = com.bi02
            docCompra.bi03 = com.bi03
            docCompra.bi04 = com.bi04
            docCompra.isc01 = com.isc01
            docCompra.isc02 = com.isc02
            docCompra.isc03 = com.isc03
            docCompra.igv01 = com.igv01
            docCompra.igv02 = com.igv02
            docCompra.igv03 = com.igv03
            docCompra.otc01 = com.otc01
            docCompra.otc02 = com.otc02
            docCompra.otc03 = com.otc03
            docCompra.otc04 = com.otc04
            docCompra.bi01us = com.bi01us
            docCompra.bi02us = com.bi02us
            docCompra.bi03us = com.bi03us
            docCompra.bi04us = com.bi04us
            docCompra.isc01us = com.isc01us
            docCompra.isc02us = com.isc02us
            docCompra.isc03us = com.isc03us

            docCompra.igv01us = com.igv01us
            docCompra.igv02us = com.igv02us
            docCompra.igv03us = com.igv03us

            docCompra.otc01us = com.otc01us
            docCompra.otc02us = com.otc02us
            docCompra.otc03us = com.otc03us
            docCompra.otc04us = com.otc04us

            docCompra.importeTotal = com.importeTotal
            docCompra.importeUS = com.importeUS

            docCompra.destino = com.destino
            docCompra.estadoPago = com.estadoPago
            docCompra.glosa = com.glosa
            docCompra.referenciaDestino = com.referenciaDestino
            docCompra.saldoMontoNota = com.saldoMontoNota
            docCompra.saldoMontoNotaUSD = com.saldoMontoNotaUSD

            docCompra.tipoCompra = com.tipoCompra
            docCompra.sustentado = com.sustentado
            docCompra.idPadre = com.idPadre
            docCompra.situacion = com.situacion
            docCompra.tieneDetraccion = com.tieneDetraccion
            docCompra.usuarioActualizacion = com.usuarioActualizacion
            docCompra.fechaActualizacion = com.fechaActualizacion
        End If



        Return docCompra
    End Function

    Public Function GetUbicarCompraPorID(idDocumento As Integer) As documentocompra
        Dim docCompra As New documentocompra

        'Return (From a In HeliosData.documentocompra
        '        Where a.idDocumento = idDocumento).FirstOrDefault

        Dim com = (From n In HeliosData.documentocompra
                   Join prov In HeliosData.entidad
                           On prov.idEntidad Equals n.idProveedor
                   Where n.idDocumento = idDocumento
                   Select New With
                       {
                       n.idDocumento,
                       n.codigoLibro,
                       n.idEmpresa,
                       n.idCentroCosto,
                       n.fechaDoc,
                       n.fechaVcto,
                       n.fechaContable,
                       n.periodoTributo,
                       n.tipoDoc,
                       n.serie,
                       n.numeroDoc,
                       n.idProveedor,
                       n.idPersona,
                       n.monedaDoc,
                       n.tasaIgv,
                       n.tcDolLoc,
                        n.tipoRecaudo,
                         n.regimen,
                        n.tasaRegimen,
                        n.nroRegimen,
                        n.bi01,
                        n.bi02,
                        n.bi03,
                        n.bi04,
                        n.isc01,
                        n.isc02,
                        n.isc03,
                        n.igv01,
                        n.igv02,
                        n.igv03,
                        n.otc01,
                        n.otc02,
                        n.otc03,
                        n.otc04,
                        n.bi01us,
                        n.bi02us,
                        n.bi03us,
                        n.bi04us,
                        n.isc01us,
                        n.isc02us,
                        n.isc03us,
                        n.igv01us,
                        n.igv02us,
                        n.igv03us,
                        n.otc01us,
                        n.otc02us,
                        n.otc03us,
                        n.otc04us,
                        n.importeTotal,
                        n.importeUS,
                        n.destino,
                        n.estadoPago,
                        n.glosa,
                        n.referenciaDestino,
                        n.saldoMontoNota,
                        n.saldoMontoNotaUSD,
                        n.tipoCompra,
                        n.sustentado,
                        n.idPadre,
                        n.situacion,
                        n.tieneDetraccion,
                        n.usuarioActualizacion,
                        n.fechaActualizacion,
                       prov
                       }).FirstOrDefault

        If Not IsNothing(com) Then
            docCompra = New documentocompra
            docCompra.idDocumento = com.idDocumento
            docCompra.codigoLibro = com.codigoLibro
            docCompra.idEmpresa = com.idEmpresa
            docCompra.idCentroCosto = com.idCentroCosto
            docCompra.fechaDoc = com.fechaDoc
            docCompra.fechaVcto = com.fechaVcto
            docCompra.fechaContable = com.fechaContable
            docCompra.periodoTributo = com.periodoTributo
            docCompra.tipoDoc = com.tipoDoc
            docCompra.serie = com.serie
            docCompra.numeroDoc = com.numeroDoc
            docCompra.idProveedor = com.idProveedor
            docCompra.idPersona = com.idPersona
            docCompra.monedaDoc = com.monedaDoc
            docCompra.tasaIgv = com.tasaIgv
            docCompra.tcDolLoc = com.tcDolLoc
            docCompra.tipoRecaudo = com.tipoRecaudo
            docCompra.regimen = com.regimen
            docCompra.tasaRegimen = com.tasaRegimen
            docCompra.nroRegimen = com.nroRegimen
            docCompra.bi01 = com.bi01
            docCompra.bi02 = com.bi02
            docCompra.bi03 = com.bi03
            docCompra.bi04 = com.bi04
            docCompra.isc01 = com.isc01
            docCompra.isc02 = com.isc02
            docCompra.isc03 = com.isc03
            docCompra.igv01 = com.igv01
            docCompra.igv02 = com.igv02
            docCompra.igv03 = com.igv03
            docCompra.otc01 = com.otc01
            docCompra.otc02 = com.otc02
            docCompra.otc03 = com.otc03
            docCompra.otc04 = com.otc04
            docCompra.bi01us = com.bi01us
            docCompra.bi02us = com.bi02us
            docCompra.bi03us = com.bi03us
            docCompra.bi04us = com.bi04us
            docCompra.isc01us = com.isc01us
            docCompra.isc02us = com.isc02us
            docCompra.isc03us = com.isc03us

            docCompra.igv01us = com.igv01us
            docCompra.igv02us = com.igv02us
            docCompra.igv03us = com.igv03us

            docCompra.otc01us = com.otc01us
            docCompra.otc02us = com.otc02us
            docCompra.otc03us = com.otc03us
            docCompra.otc04us = com.otc04us

            docCompra.importeTotal = com.importeTotal
            docCompra.importeUS = com.importeUS

            docCompra.destino = com.destino
            docCompra.estadoPago = com.estadoPago
            docCompra.glosa = com.glosa
            docCompra.referenciaDestino = com.referenciaDestino
            docCompra.saldoMontoNota = com.saldoMontoNota
            docCompra.saldoMontoNotaUSD = com.saldoMontoNotaUSD

            docCompra.tipoCompra = com.tipoCompra
            docCompra.sustentado = com.sustentado
            docCompra.idPadre = com.idPadre
            docCompra.situacion = com.situacion
            docCompra.tieneDetraccion = com.tieneDetraccion
            docCompra.usuarioActualizacion = com.usuarioActualizacion
            docCompra.fechaActualizacion = com.fechaActualizacion

            docCompra.entidad = New entidad With
            {
            .idEntidad = com.prov.idEntidad,
            .nombreCompleto = com.prov.nombreCompleto,
            .nrodoc = com.numeroDoc
            }
        End If



        Return docCompra
    End Function



    Public Function GetListarComprasPorPeriodo(intIdProyecto As Integer, strPeriodo As String, strTipoCompra As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                        Where doc.idProyecto = intIdProyecto And
                       compra.fechaContable = strPeriodo And compra.tipoCompra = strTipoCompra
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc

            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

#Region "MOVIIENTOS DE ALMACEN"

    Public Function GetCambiosDeArticulo(be As documentocompra) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Group Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                       Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where compra.fechaContable = be.fechaContable And compra.tipoCompra = TIPO_VENTA.CambioArticulo _
                       And compra.idCentroCosto = be.idCentroCosto
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = "-"
            objRecurso.NroDocEntidad = "-"
            objRecurso.TipoPersona = "OT"
            objRecurso.NombreEntidad = "OTROS"

            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.destino = obj.compra.destino
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarPorPeriodoEntradas(strIdEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, strTipoCompra As String, strTipoConsulta As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra

        'Dim array() As String = {"OSA", "OEA"}

        Select Case strTipoConsulta
            Case "EMPRESA"

                Dim consulta = HeliosData.MovimientosAlmacenXPeriodo(strPeriodo, intIdEstablecimiento, strIdEmpresa, "EMPRESA").ToList

                For Each obj In consulta
                    objRecurso = New documentocompra

                    objRecurso.idDocumento = obj.idDocumento
                    objRecurso.idEmpresa = obj.idEmpresa
                    objRecurso.idCentroCosto = obj.idCentroCosto
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.fechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc


                    If Not IsNothing(obj.NombreEntidad) Then
                        objRecurso.tipoDocEntidad = "-"
                        objRecurso.NroDocEntidad = "-"
                        objRecurso.NombreEntidad = obj.NombreEntidad
                        objRecurso.TipoPersona = "ENT"
                    Else
                        If Not IsNothing(obj.NombreTrabajador) Then
                            objRecurso.tipoDocEntidad = "DNI"
                            objRecurso.NroDocEntidad = "-" 'obj.pe.idPersona
                            objRecurso.NombreEntidad = obj.NombreTrabajador
                            objRecurso.TipoPersona = "TRAB"
                        End If
                    End If

                    objRecurso.importeTotal = obj.importeTotal
                    objRecurso.tcDolLoc = obj.tcDolLoc
                    objRecurso.importeUS = obj.importeUS
                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.destino = obj.destino
                    objRecurso.estadoPago = obj.estadoPago
                    objRecurso.estadoEntrega = obj.estadoEntrega
                    objRecurso.aprobado = obj.aprobado
                    Lista.Add(objRecurso)
                Next

            Case "UNIDAD_ORGANICA"

                Dim consulta = HeliosData.MovimientosAlmacenXPeriodo(strPeriodo, intIdEstablecimiento, strIdEmpresa, "UNIDAD_ORGANICA").ToList

                For Each obj In consulta
                    objRecurso = New documentocompra

                    objRecurso.idDocumento = obj.idDocumento
                    objRecurso.idEmpresa = obj.idEmpresa
                    objRecurso.idCentroCosto = obj.idCentroCosto
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.fechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc


                    If Not IsNothing(obj.NombreEntidad) Then
                        objRecurso.tipoDocEntidad = "-"
                        objRecurso.NroDocEntidad = "-"
                        objRecurso.NombreEntidad = obj.NombreEntidad
                        objRecurso.TipoPersona = "ENT"
                    Else
                        If Not IsNothing(obj.NombreTrabajador) Then
                            objRecurso.tipoDocEntidad = "DNI"
                            objRecurso.NroDocEntidad = "-" 'obj.pe.idPersona
                            objRecurso.NombreEntidad = obj.NombreTrabajador
                            objRecurso.TipoPersona = "TRAB"
                        End If
                    End If

                    objRecurso.importeTotal = obj.importeTotal
                    objRecurso.tcDolLoc = obj.tcDolLoc
                    objRecurso.importeUS = obj.importeUS
                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.destino = obj.destino
                    objRecurso.estadoPago = obj.estadoPago
                    objRecurso.estadoEntrega = obj.estadoEntrega
                    objRecurso.aprobado = obj.aprobado
                    Lista.Add(objRecurso)
                Next


        End Select



        '   dfsfd()
        'Dim consulta = From compra In HeliosData.documentocompra _
        '               Join doc In HeliosData.documento _
        '               On doc.idDocumento Equals compra.idDocumento _
        '               Group Join entidad In HeliosData.entidad _
        '               On compra.idProveedor Equals entidad.idEntidad _
        '               Into ords = Group _
        '               From c In ords.DefaultIfEmpty _
        '               Group Join per In HeliosData.Persona On _
        '               compra.idPersona Equals per.idPersona And _
        '               compra.idEmpresa Equals per.idEmpresa _
        '               Into ords2 = Group _
        '               From pe In ords2.DefaultIfEmpty


        'Dim consulta = (From doc In HeliosData.documento _
        '               Join compra In HeliosData.documentocompra _
        '               On doc.idDocumento Equals compra.idDocumento _
        '               Group Join entidad In HeliosData.entidad _
        '               On compra.idProveedor Equals entidad.idEntidad _
        '               Into ords = Group _
        '               From c In ords.DefaultIfEmpty _
        '               Group Join per In HeliosData.Persona On _
        '               compra.idPersona Equals per.idPersona And _
        '               compra.idEmpresa Equals per.idEmpresa _
        '               Into ords2 = Group _
        '               From pe In ords2.DefaultIfEmpty _
        '               Where compra.fechaContable = strPeriodo And array.Contains(compra.tipoCompra) _
        '               And compra.idCentroCosto = intIdEstablecimiento _
        '               Order By compra.fechaDoc Ascending).ToList



        Return Lista
    End Function

    Public Function GetListarPorPeriodoEntradasTransferencia(strIdEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, strTipoCompra As String, strTipoConsulta As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra

        Dim array() As String = {"TEA"}


        Select Case strTipoConsulta
            Case "EMPRESA"
                Dim consulta = HeliosData.MovimientosAlmacenXPeriodo(strPeriodo, intIdEstablecimiento, strIdEmpresa, strTipoConsulta).ToList

                For Each obj In consulta
                    objRecurso = New documentocompra

                    objRecurso.idDocumento = obj.idDocumento
                    objRecurso.idEmpresa = obj.idEmpresa
                    objRecurso.idCentroCosto = obj.idCentroCosto
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.fechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc


                    If Not IsNothing(obj.NombreEntidad) Then
                        objRecurso.tipoDocEntidad = "-"
                        objRecurso.NroDocEntidad = "-"
                        objRecurso.NombreEntidad = obj.NombreEntidad
                        objRecurso.TipoPersona = "ENT"
                    Else
                        If Not IsNothing(obj.NombreTrabajador) Then
                            objRecurso.tipoDocEntidad = "DNI"
                            objRecurso.NroDocEntidad = "-" 'obj.pe.idPersona
                            objRecurso.NombreEntidad = obj.NombreTrabajador
                            objRecurso.TipoPersona = "TRAB"
                        End If
                    End If

                    objRecurso.importeTotal = obj.importeTotal
                    objRecurso.tcDolLoc = obj.tcDolLoc
                    objRecurso.importeUS = obj.importeUS
                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.destino = obj.destino
                    Lista.Add(objRecurso)
                Next

            Case "UNIDAD_ORGANICA"
                Dim consulta = HeliosData.MovimientosAlmacenXPeriodo(strPeriodo, intIdEstablecimiento, strIdEmpresa, strTipoConsulta).ToList

                For Each obj In consulta
                    objRecurso = New documentocompra

                    objRecurso.idDocumento = obj.idDocumento
                    objRecurso.idEmpresa = obj.idEmpresa
                    objRecurso.idCentroCosto = obj.idCentroCosto
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.fechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc


                    If Not IsNothing(obj.NombreEntidad) Then
                        objRecurso.tipoDocEntidad = "-"
                        objRecurso.NroDocEntidad = "-"
                        objRecurso.NombreEntidad = obj.NombreEntidad
                        objRecurso.TipoPersona = "ENT"
                    Else
                        If Not IsNothing(obj.NombreTrabajador) Then
                            objRecurso.tipoDocEntidad = "DNI"
                            objRecurso.NroDocEntidad = "-" 'obj.pe.idPersona
                            objRecurso.NombreEntidad = obj.NombreTrabajador
                            objRecurso.TipoPersona = "TRAB"
                        End If
                    End If

                    objRecurso.importeTotal = obj.importeTotal
                    objRecurso.tcDolLoc = obj.tcDolLoc
                    objRecurso.importeUS = obj.importeUS
                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.destino = obj.destino
                    Lista.Add(objRecurso)
                Next

        End Select


        'Dim consulta = (From doc In HeliosData.documento _
        '               Join compra In HeliosData.documentocompra _
        '               On doc.idDocumento Equals compra.idDocumento _
        '               Group Join entidad In HeliosData.entidad _
        '               On compra.idProveedor Equals entidad.idEntidad _
        '               Into ords = Group _
        '               From c In ords.DefaultIfEmpty _
        '               Group Join per In HeliosData.Persona On _
        '               compra.idPersona Equals per.idPersona And _
        '               compra.idEmpresa Equals per.idEmpresa _
        '               Into ords2 = Group _
        '               From pe In ords2.DefaultIfEmpty _
        '               Where compra.fechaContable = strPeriodo And array.Contains(compra.tipoCompra) _
        '               And compra.idCentroCosto = intIdEstablecimiento _
        '               Order By compra.fechaDoc Ascending).ToList



        Return Lista
    End Function


    Public Function GetReporteMovAlmcenByEntradaSalida(intIdEstablecimiento As Integer, strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra

        Dim array() As String = {"OSA", "OEA"}
        Dim consulta = (From det In HeliosData.documentocompradetalle
                        Group Join ent In HeliosData.entidad On New With {.IdEntidad = CInt(det.documentocompra.idProveedor)} Equals New With {.IdEntidad = ent.idEntidad} Into ent_join = Group
                        From ent In ent_join.DefaultIfEmpty()
                        Group Join per In HeliosData.Persona
                       On New With {.IdPersona = CStr(det.documentocompra.idProveedor), det.documentocompra.idEmpresa} _
                       Equals New With {per.idPersona, per.idEmpresa} Into per_join = Group
                        From per In per_join.DefaultIfEmpty()
                        Where
                       (New String() {"OEA", "OSA"}).Contains(det.documentocompra.tipoCompra) And
                       CLng(det.documentocompra.idCentroCosto) = intIdEstablecimiento And
                       det.documentocompra.fechaContable = strPeriodo
                        Order By
                       det.descripcionItem,
                       det.documentocompra.destino,
                       det.documentocompra.fechaDoc
                        Select
                       det.documentocompra.destino,
                       FechaDoc = CType(det.documentocompra.fechaDoc, DateTime?),
                       det.documentocompra.glosa,
                       NombreCompleto = ent.nombreCompleto,
                       NombrePersona = per.nombreCompleto,
                       det.documentocompra.serie,
                       det.documentocompra.numeroDoc,
                       det.descripcionItem,
                       det.unidad1,
                       det.monto1,
                       det.precioUnitario,
                       det.importe,
                       det.importeUS).ToList

        'Dim consulta = (From doc In HeliosData.documento _
        '               Join compra In HeliosData.documentocompra _
        '               On doc.idDocumento Equals compra.idDocumento _
        '               Join det In HeliosData.documentocompradetalle _
        '               On det.idDocumento Equals compra.idDocumento _
        '               Group Join entidad In HeliosData.entidad _
        '               On compra.idProveedor Equals entidad.idEntidad _
        '               Into ords = Group _
        '               From c In ords.DefaultIfEmpty _
        '               Group Join per In HeliosData.Persona On _
        '               compra.idPersona Equals per.idPersona And _
        '               compra.idEmpresa Equals per.idEmpresa _
        '               Into ords2 = Group _
        '               From pe In ords2.DefaultIfEmpty _
        '               Where compra.fechaContable = strPeriodo And array.Contains(compra.tipoCompra) _
        '               And compra.idCentroCosto = intIdEstablecimiento _
        '               Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.fechaDoc = obj.FechaDoc
            objRecurso.serie = obj.serie
            objRecurso.numeroDoc = obj.numeroDoc

            If Not IsNothing(obj.NombreCompleto) Then
                objRecurso.NombreEntidad = obj.NombreCompleto
                objRecurso.TipoPersona = "PROV"
            Else
                objRecurso.NombreEntidad = obj.NombrePersona
                objRecurso.TipoPersona = "TRAB"
            End If

            objRecurso.glosa = obj.glosa

            objRecurso.NomProducto = obj.descripcionItem
            objRecurso.UnidMedidad = obj.unidad1
            objRecurso.Cantidad = obj.monto1
            objRecurso.PrecUnit = obj.precioUnitario
            objRecurso.importeTotal = obj.importe
            objRecurso.importeUS = obj.importeUS
            objRecurso.destino = obj.destino
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetReporteTransferenciaAlmacen(intIdEstablecimiento As Integer, strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra

        Dim consulta = (From det In HeliosData.documentocompradetalle
                        Group Join ent In HeliosData.entidad On New With {.IdEntidad = CInt(det.documentocompra.idProveedor)} Equals New With {.IdEntidad = ent.idEntidad} Into ent_join = Group
                        From ent In ent_join.DefaultIfEmpty()
                        Group Join per In HeliosData.Persona
                        On New With {.IdPersona = CStr(det.documentocompra.idProveedor), det.documentocompra.idEmpresa} _
                        Equals New With {per.idPersona, per.idEmpresa} Into per_join = Group
                        From per In per_join.DefaultIfEmpty()
                        Group Join almOrigen In HeliosData.almacen On
                        almOrigen.idAlmacen Equals det.almacenRef Into almOrigen_join = Group
                        From almOrigen In almOrigen_join.DefaultIfEmpty()
                        Group Join almDestino In HeliosData.almacen On
                        almDestino.idAlmacen Equals det.almacenDestino Into almDestino_join = Group
                        From almDestino In almDestino_join.DefaultIfEmpty()
                        Where
                        (New String() {"TEA"}).Contains(det.documentocompra.tipoCompra) And
                        CLng(det.documentocompra.idCentroCosto) = intIdEstablecimiento And
                        det.documentocompra.fechaContable = strPeriodo
                        Order By
                        det.descripcionItem,
                        det.documentocompra.destino,
                        det.documentocompra.fechaDoc
                        Select
                        nomAlmacenOrigen = almOrigen.descripcionAlmacen,
                        nomAlmacenDestino = almDestino.descripcionAlmacen,
                        det.documentocompra.destino,
                        FechaDoc = CType(det.documentocompra.fechaDoc, DateTime?),
                        det.documentocompra.glosa,
                        NombreCompleto = ent.nombreCompleto,
                        NombrePersona = per.nombreCompleto,
                        det.documentocompra.serie,
                        det.documentocompra.numeroDoc,
                        det.descripcionItem,
                        det.unidad1,
                        det.monto1,
                        det.precioUnitario,
                        det.importe,
                        det.importeUS).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.fechaDoc = obj.FechaDoc
            objRecurso.serie = obj.serie
            objRecurso.numeroDoc = obj.numeroDoc

            If Not IsNothing(obj.NombreCompleto) Then
                objRecurso.NombreEntidad = obj.NombreCompleto
                objRecurso.TipoPersona = "PROV"
            Else
                objRecurso.NombreEntidad = obj.NombrePersona
                objRecurso.TipoPersona = "TRAB"
            End If

            objRecurso.NomAlmacenOrigen = obj.nomAlmacenOrigen
            objRecurso.NomAlmacenDestino = obj.nomAlmacenDestino

            objRecurso.glosa = obj.glosa

            objRecurso.NomProducto = obj.descripcionItem
            objRecurso.UnidMedidad = obj.unidad1
            objRecurso.Cantidad = obj.monto1
            objRecurso.PrecUnit = obj.precioUnitario
            objRecurso.importeTotal = obj.importe
            objRecurso.importeUS = obj.importeUS
            objRecurso.destino = obj.destino
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetListarMvimientosAlmacenPorDia(intIdEmpresa As String, intIdEstablecimiento As Integer, strTipoCompra As String, tipoConsulta As String, Optional fecha As DateTime = Nothing) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra

        'Dim consulta = (From doc In HeliosData.documento _
        '               Join compra In HeliosData.documentocompra _
        '               On doc.idDocumento Equals compra.idDocumento _
        '               Group Join entidad In HeliosData.entidad _
        '               On compra.idProveedor Equals entidad.idEntidad _
        '               Into ords = Group _
        '               From c In ords.DefaultIfEmpty _
        '               Group Join per In HeliosData.Persona On _
        '               compra.idPersona Equals per.idPersona And _
        '               compra.idEmpresa Equals per.idEmpresa _
        '               Into ords2 = Group _
        '               From pe In ords2.DefaultIfEmpty _
        '               Where compra.fechaDoc.Value.Day = DateTime.Now.Day And _
        '               compra.fechaDoc.Value.Month = DateTime.Now.Month And _
        '               compra.fechaDoc.Value.Year = DateTime.Now.Year And _
        '               compra.tipoCompra = strTipoCompra _
        '               And compra.idCentroCosto = intIdEstablecimiento _
        '               Order By compra.fechaDoc Ascending).ToList

        Select Case tipoConsulta
            Case "EMPRESA"
                Dim consulta = HeliosData.MovimientosAlmacenXfecha(fecha.Year, fecha.Month, fecha.Day, intIdEmpresa, intIdEstablecimiento, strTipoCompra, "EMPRESA").ToList

                For Each obj In consulta
                    objRecurso = New documentocompra

                    objRecurso.idDocumento = obj.idDocumento
                    objRecurso.idCentroCosto = obj.idCentroCosto
                    objRecurso.idEmpresa = obj.idEmpresa
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.fechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc

                    If Not IsNothing(obj.NombreEntidad) Then
                        objRecurso.tipoDocEntidad = "-"
                        objRecurso.NroDocEntidad = "-"
                        objRecurso.NombreEntidad = obj.NombreEntidad
                        objRecurso.TipoPersona = "ENT"
                    Else
                        If Not IsNothing(obj.NombreTrabajador) Then
                            objRecurso.tipoDocEntidad = "DNI"
                            objRecurso.NroDocEntidad = "-" 'obj.pe.idPersona
                            objRecurso.NombreEntidad = obj.NombreTrabajador
                            objRecurso.TipoPersona = "TRAB"
                        End If
                    End If

                    objRecurso.importeTotal = obj.importeTotal
                    objRecurso.tcDolLoc = obj.tcDolLoc
                    objRecurso.importeUS = obj.importeUS
                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.destino = obj.destino
                    Lista.Add(objRecurso)
                Next

            Case "UNIDAD_ORGANICA"
                Dim consulta = HeliosData.MovimientosAlmacenXfecha(fecha.Year, fecha.Month, fecha.Day, intIdEmpresa, intIdEstablecimiento, strTipoCompra, "UNIDAD_ORGANICA").ToList

                For Each obj In consulta
                    objRecurso = New documentocompra

                    objRecurso.idDocumento = obj.idDocumento
                    objRecurso.idCentroCosto = obj.idCentroCosto
                    objRecurso.idEmpresa = obj.idEmpresa
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.fechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc

                    If Not IsNothing(obj.NombreEntidad) Then
                        objRecurso.tipoDocEntidad = "-"
                        objRecurso.NroDocEntidad = "-"
                        objRecurso.NombreEntidad = obj.NombreEntidad
                        objRecurso.TipoPersona = "ENT"
                    Else
                        If Not IsNothing(obj.NombreTrabajador) Then
                            objRecurso.tipoDocEntidad = "DNI"
                            objRecurso.NroDocEntidad = "-" 'obj.pe.idPersona
                            objRecurso.NombreEntidad = obj.NombreTrabajador
                            objRecurso.TipoPersona = "TRAB"
                        End If
                    End If

                    objRecurso.importeTotal = obj.importeTotal
                    objRecurso.tcDolLoc = obj.tcDolLoc
                    objRecurso.importeUS = obj.importeUS
                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.destino = obj.destino
                    Lista.Add(objRecurso)
                Next

        End Select

        Return Lista
    End Function
#End Region

    Public Function GetListarComprasPorPeriodoGeneral(intIdProyecto As Integer, strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                        Where doc.idProyecto = intIdProyecto And
                       compra.fechaContable = strPeriodo _
                       And Not listaTipoCompra.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarComprasPorProveedorCaja(intIdEstable As Integer, intIdProveedor As Integer, strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join compraDetalle In HeliosData.documentocompradetalle
                       On compra.idDocumento Equals compraDetalle.idDocumento
                        Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                        Group Join detalleCaja In HeliosData.documentoCajaDetalle
                       On compraDetalle.idDocumento Equals detalleCaja.documentoAfectado _
                       And compraDetalle.idItem Equals detalleCaja.idItem
                       Into ords = Group
                        From cdt In ords.DefaultIfEmpty
                        Group Join caja In HeliosData.documentoCaja On
                       caja.idDocumento Equals cdt.idDocumento
                       Into ords1 = Group
                        From cdt1 In ords1.DefaultIfEmpty
                        Group Join EF In HeliosData.estadosFinancieros On
                       cdt1.entidadFinanciera Equals EF.idestado
                        Into ords2 = Group
                        From cdt2 In ords2.DefaultIfEmpty
                        Where compra.idProveedor = intIdProveedor And
                       compra.idCentroCosto = intIdEstable And
                       compra.fechaContable = strPeriodo _
                       And Not listaTipoCompra.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre

            'DATOS CAJA DETALLE
            objRecurso.FechaPago = obj.compra.fechaDoc

            If Not IsNothing(obj.cdt1) Then
                objRecurso.NumDocOperCaja = obj.cdt1.numeroOperacion
            Else
                objRecurso.NumDocOperCaja = String.Empty
            End If

            If Not IsNothing(obj.cdt1) Then
                objRecurso.NumeroTipoDocCaja = obj.cdt1.numeroDoc
            Else
                objRecurso.NumeroTipoDocCaja = String.Empty
            End If

            If Not IsNothing(obj.cdt1) Then
                objRecurso.CtaCorrienteDeposito = obj.cdt1.ctaCorrienteDeposito
            Else
                objRecurso.CtaCorrienteDeposito = String.Empty
            End If

            If Not IsNothing(obj.cdt1) Then
                objRecurso.BancoDeposito = obj.cdt1.bancoEntidad
            Else
                objRecurso.BancoDeposito = String.Empty
            End If

            If Not IsNothing(obj.cdt1) Then
                objRecurso.TipoDocPagoCaja = obj.cdt1.tipoDocPago
            Else
                objRecurso.TipoDocPagoCaja = String.Empty
            End If
            If Not IsNothing(obj.cdt2) Then
                objRecurso.NombreCajaPago = obj.cdt2.descripcion
            Else
                objRecurso.NombreCajaPago = String.Empty
            End If
            objRecurso.DetalleItemCaja = obj.compraDetalle.descripcionItem
            If Not IsNothing(obj.cdt) Then
                objRecurso.ImportePagoMN = obj.cdt.montoSoles.GetValueOrDefault
            Else
                objRecurso.ImportePagoMN = 0.0
            End If
            If Not IsNothing(obj.cdt) Then
                objRecurso.ImportePagoME = obj.cdt.montoUsd.GetValueOrDefault
            Else
                objRecurso.ImportePagoME = 0.0
            End If
            'detalle compra
            objRecurso.ImporteCompraDetalleMN = obj.compraDetalle.importe
            objRecurso.ImporteCompraDetalleME = obj.compraDetalle.importeUS

            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetSumaCuentasXpagar(intIdEstable As Integer, strPeriodo As String) As documentocompra
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO_CON_RECEPCION)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)

        Dim s As New DateTime(AnioGeneral, 1, 1)
        Dim addDay As DateTime = s.AddDays(CInt(30))
        'Dim consulta30 = Aggregate compraDet In HeliosData.documentocompradetalle _
        '                 Group Join detalleCaja In HeliosData.documentoCajaDetalle _
        '                 On compraDet.secuencia Equals detalleCaja.documentoAfectadodetalle _
        '                 Into ords = Group _
        '                 From cdt In ords.DefaultIfEmpty _
        '                 Join compra In HeliosData.documentocompra On _
        '                 compraDet.idDocumento Equals compra.idDocumento _
        '                 Where compra.idCentroCosto = intIdEstable _
        '                 And compra.fechaDoc >= s _
        '                 And compra.fechaDoc <= addDay _
        '                 And compraDet.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO _
        '                 Group cdt By compraDet.importe _ 
        '                 Into _ 
        '                       DeudaMN = importe, _
        '                       DeudaME = (compraDet.importeUS), _
        '                       PagadoMN = Sum(cdt.montoSoles), _
        '                       PagadoME = Sum(cdt.montoUsd)


        Dim consulta30 = Aggregate compraDet In HeliosData.documentocompradetalle
                         Group Join detalleCaja In HeliosData.documentoCajaDetalle
                         On compraDet.secuencia Equals detalleCaja.documentoAfectadodetalle
                         Into ords = Group
                         From cdt In ords.DefaultIfEmpty
                         Join compra In HeliosData.documentocompra On
                         compraDet.idDocumento Equals compra.idDocumento
                         Where compra.idCentroCosto = intIdEstable _
                          And compra.fechaDoc >= s _
                         And compra.fechaDoc <= addDay _
                         And compraDet.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO AndAlso compra.tipoCompra <> "EXD"
                         Into importeCompraMN = Sum(compraDet.importe),
                       importeCompraME = Sum(compraDet.importeUS),
                       PagoMN = Sum(cdt.montoSoles),
                       PagoME = Sum(cdt.montoUsd)



        '--------------------------------- 60 ------------------------------------------
        addDay = addDay.AddDays(1)
        Dim s60 As New DateTime(AnioGeneral, addDay.Date.Month, addDay.Date.Day)
        Dim addDay60 As DateTime = s60.AddDays(CInt(30))
        Dim consulta60 = Aggregate compraDet In HeliosData.documentocompradetalle
                         Group Join detalleCaja In HeliosData.documentoCajaDetalle
                         On compraDet.secuencia Equals detalleCaja.documentoAfectadodetalle
                         Into ords = Group
                         From cdt In ords.DefaultIfEmpty
                         Join compra In HeliosData.documentocompra On
                         compraDet.idDocumento Equals compra.idDocumento
                         Where compra.idCentroCosto = intIdEstable _
                       And compra.fechaDoc >= s60 _
                       And compra.fechaDoc <= addDay60 _
                       And compra.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO AndAlso compra.tipoCompra <> "EXD"
                        Into importeCompraMN = Sum(compraDet.importe),
                       importeCompraME = Sum(compraDet.importeUS),
                       PagoMN = Sum(cdt.montoSoles),
                       PagoME = Sum(cdt.montoUsd)



        '****************************************** 90***********************************************
        addDay60 = addDay60.AddDays(1)
        Dim s90 As New DateTime(AnioGeneral, addDay60.Date.Month, addDay60.Date.Day)
        '  Dim dias90 = DateDiff(DateInterval.Day, s, DateTime.Now.Date)
        Dim addDay90 As DateTime = s90.AddDays(CInt(30))
        Dim consulta90 = Aggregate compraDet In HeliosData.documentocompradetalle
                         Group Join detalleCaja In HeliosData.documentoCajaDetalle
                         On compraDet.secuencia Equals detalleCaja.documentoAfectadodetalle
                         Into ords = Group
                         From cdt In ords.DefaultIfEmpty
                         Join compra In HeliosData.documentocompra On
                         compraDet.idDocumento Equals compra.idDocumento
                         Where compra.idCentroCosto = intIdEstable _
                       And compra.fechaDoc >= s90 _
                       And compra.fechaDoc <= addDay90 _
                       And compraDet.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO AndAlso compra.tipoCompra <> "EXD"
                        Into importeCompraMN = Sum(compraDet.importe),
                       importeCompraME = Sum(compraDet.importeUS),
                       PagoMN = Sum(cdt.montoSoles),
                       PagoME = Sum(cdt.montoUsd)



        '****************************************** 90 A MAS ++ ***********************************************
        addDay90 = addDay90.AddDays(1)
        Dim s90mas As New DateTime(AnioGeneral, addDay90.Date.Month, addDay90.Date.Day)
        Dim dias90mas = DateDiff(DateInterval.Day, s90mas, DateTime.Now.Date)
        Dim addDay90mas As DateTime = s90mas.AddDays(CInt(dias90mas))
        Dim consulta90mas = Aggregate compraDet In HeliosData.documentocompradetalle
                         Group Join detalleCaja In HeliosData.documentoCajaDetalle
                         On compraDet.secuencia Equals detalleCaja.documentoAfectadodetalle
                         Into ords = Group
                         From cdt In ords.DefaultIfEmpty
                         Join compra In HeliosData.documentocompra On
                         compraDet.idDocumento Equals compra.idDocumento
                         Where compra.idCentroCosto = intIdEstable _
                       And compra.fechaDoc >= s90mas _
                       And compra.fechaDoc <= addDay90mas _
                       And compra.estadoPago = TIPO_COMPRA.PAGO.PENDIENTE_PAGO AndAlso compra.tipoCompra <> "EXD"
                       Into importeCompraMN = Sum(compraDet.importe),
                       importeCompraME = Sum(compraDet.importeUS),
                       PagoMN = Sum(cdt.montoSoles),
                       PagoME = Sum(cdt.montoUsd)

        '      Into g = Group _
        'Select New With {.importeCompraMN = importe,
        '                 .importeCompraME = importeUS,
        '                 g, .PagoMN = g.Sum(Function(c) c.montoSoles),
        '                  .PagoME = g.Sum(Function(c) c.montoUsd)
        '             }).FirstOrDefault



        Dim total30MN As Decimal = 0
        Dim total30ME As Decimal = 0

        Dim total60MN As Decimal = 0
        Dim total60ME As Decimal = 0

        Dim total90MN As Decimal = 0
        Dim total90ME As Decimal = 0

        Dim total90MASMN As Decimal = 0
        Dim total90MASME As Decimal = 0

        If Not IsNothing(consulta30) Then
            total30MN = consulta30.importeCompraMN.GetValueOrDefault - consulta30.PagoMN.GetValueOrDefault
            total30ME = consulta30.importeCompraME.GetValueOrDefault - consulta30.PagoME.GetValueOrDefault
        Else
            total30MN = 0
            total30ME = 0
        End If

        If Not IsNothing(consulta60) Then
            total60MN = consulta60.importeCompraMN.GetValueOrDefault - consulta60.PagoMN.GetValueOrDefault
            total60ME = consulta60.importeCompraME.GetValueOrDefault - consulta60.PagoME.GetValueOrDefault
        Else
            total60MN = 0
            total60ME = 0
        End If

        If Not IsNothing(consulta90) Then
            total90MN = consulta90.importeCompraMN.GetValueOrDefault - consulta90.PagoMN.GetValueOrDefault
            total90ME = consulta90.importeCompraME.GetValueOrDefault - consulta90.PagoME.GetValueOrDefault
        Else
            total90MN = 0
            total90ME = 0
        End If

        If Not IsNothing(consulta90mas) Then
            total90MASMN = consulta90mas.importeCompraMN.GetValueOrDefault - consulta90mas.PagoMN.GetValueOrDefault
            total90MASME = consulta90mas.importeCompraME.GetValueOrDefault - consulta90mas.PagoME.GetValueOrDefault
        Else
            total90MASMN = 0
            total90MASME = 0
        End If



        '**********************************************************************************************

        'objRecurso = New documentocompra With {.importeTotal = totalMN, .importeUS = totalME}
        objRecurso = New documentocompra
        objRecurso.Monto30mn = total30MN
        objRecurso.Monto30me = total30ME

        objRecurso.Monto60mn = total60MN
        objRecurso.Monto60me = total60ME

        objRecurso.Monto90mn = total90MN
        objRecurso.Monto90me = total90ME

        objRecurso.Monto90Masmn = total90MASMN
        objRecurso.Monto90Masme = total90MASME

        Return objRecurso
    End Function
    'Public Function GetSumaCuentasXpagar(intIdEstable As Integer, strPeriodo As String) As documentocompra
    '    Dim Lista As New List(Of documentocompra)
    '    Dim listaTipoCompra As New List(Of String)
    '    Dim objRecurso As New documentocompra

    '    listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO)
    '    listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO_CON_RECEPCION)
    '    '   listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)

    '    Select Case strPeriodo
    '        Case "90+"
    '            Dim s As New DateTime(AnioGeneral, 1, 1)
    '            Dim dias = DateDiff(DateInterval.Day, s, DateTime.Now.Date)
    '            Dim addDay As DateTime = s.AddDays(CInt(dias))
    '            Dim consulta = Aggregate doc In HeliosData.documento _
    '                           Join compra In HeliosData.documentocompra _
    '                           On doc.idDocumento Equals compra.idDocumento _
    '                           Join compraDetalle In HeliosData.documentocompradetalle _
    '                           On compra.idDocumento Equals compraDetalle.idDocumento _
    '                           Join entidad In HeliosData.entidad _
    '                           On compra.idProveedor Equals entidad.idEntidad _
    '                           Group Join detalleCaja In HeliosData.documentoCajaDetalle _
    '                           On compraDetalle.idDocumento Equals detalleCaja.documentoAfectado _
    '                           And compraDetalle.idItem Equals detalleCaja.idItem _
    '                           Into ords = Group _
    '                           From cdt In ords.DefaultIfEmpty _
    '                          Group Join caja In HeliosData.documentoCaja On _
    '                           caja.idDocumento Equals cdt.idDocumento _
    '                           Into ords1 = Group _
    '                           From cdt1 In ords1.DefaultIfEmpty _
    '                           Group Join EF In HeliosData.estadosFinancieros On _
    '                           cdt1.entidadFinanciera Equals EF.idestado _
    '                            Into ords2 = Group _
    '                           From cdt2 In ords2.DefaultIfEmpty _
    '                           Where compra.idCentroCosto = intIdEstable _
    '                           And compra.fechaDoc >= s _
    '                           And compra.fechaDoc <= addDay _
    '                           And listaTipoCompra.Contains(compra.tipoCompra) _
    '                           Order By compra.fechaDoc Ascending _
    '                           Into _
    '                           DeudaMN = Sum(compraDetalle.importe), _
    '                           DeudaME = Sum(compraDetalle.importeUS), _
    '                           PagadoMN = Sum(cdt.montoSoles), _
    '                           PagadoME = Sum(cdt.montoUsd)


    '            Dim totalMN As Decimal = 0
    '            Dim totalME As Decimal = 0
    '            totalMN = consulta.DeudaMN.GetValueOrDefault - consulta.PagadoMN.GetValueOrDefault
    '            totalME = consulta.DeudaME.GetValueOrDefault - consulta.PagadoME.GetValueOrDefault

    '            objRecurso = New documentocompra With {.importeTotal = totalMN, .importeUS = totalME}


    '        Case Else
    '            Dim s As New DateTime(AnioGeneral, 1, 1)
    '            Dim addDay As DateTime = s.AddDays(CInt(strPeriodo))
    '            Dim consulta = Aggregate doc In HeliosData.documento _
    '                           Join compra In HeliosData.documentocompra _
    '                           On doc.idDocumento Equals compra.idDocumento _
    '                           Join compraDetalle In HeliosData.documentocompradetalle _
    '                           On compra.idDocumento Equals compraDetalle.idDocumento _
    '                           Join entidad In HeliosData.entidad _
    '                           On compra.idProveedor Equals entidad.idEntidad _
    '                           Group Join detalleCaja In HeliosData.documentoCajaDetalle _
    '                           On compraDetalle.idDocumento Equals detalleCaja.documentoAfectado _
    '                           And compraDetalle.idItem Equals detalleCaja.idItem _
    '                           Into ords = Group _
    '                           From cdt In ords.DefaultIfEmpty _
    '                          Group Join caja In HeliosData.documentoCaja On _
    '                           caja.idDocumento Equals cdt.idDocumento _
    '                           Into ords1 = Group _
    '                           From cdt1 In ords1.DefaultIfEmpty _
    '                           Group Join EF In HeliosData.estadosFinancieros On _
    '                           cdt1.entidadFinanciera Equals EF.idestado _
    '                            Into ords2 = Group _
    '                           From cdt2 In ords2.DefaultIfEmpty _
    '                           Where compra.idCentroCosto = intIdEstable _
    '                           And compra.fechaDoc >= s _
    '                           And compra.fechaDoc <= addDay _
    '                           And listaTipoCompra.Contains(compra.tipoCompra) _
    '                           Order By compra.fechaDoc Ascending _
    '                           Into _
    '                           DeudaMN = Sum(compraDetalle.importe), _
    '                           DeudaME = Sum(compraDetalle.importeUS), _
    '                           PagadoMN = Sum(cdt.montoSoles), _
    '                           PagadoME = Sum(cdt.montoUsd)



    '            '--------------------------------- 60 ------------------------------------------
    '            addDay = addDay.AddDays(1)
    '            Dim s60 As New DateTime(AnioGeneral, addDay.Date.Month, addDay.Date.Day)
    '            Dim addDay60 As DateTime = s60.AddDays(CInt(30))
    '            Dim consulta60 = Aggregate doc In HeliosData.documento _
    '                           Join compra In HeliosData.documentocompra _
    '                           On doc.idDocumento Equals compra.idDocumento _
    '                           Join compraDetalle In HeliosData.documentocompradetalle _
    '                           On compra.idDocumento Equals compraDetalle.idDocumento _
    '                           Join entidad In HeliosData.entidad _
    '                           On compra.idProveedor Equals entidad.idEntidad _
    '                           Group Join detalleCaja In HeliosData.documentoCajaDetalle _
    '                           On compraDetalle.idDocumento Equals detalleCaja.documentoAfectado _
    '                           And compraDetalle.idItem Equals detalleCaja.idItem _
    '                           Into ords = Group _
    '                           From cdt In ords.DefaultIfEmpty _
    '                          Group Join caja In HeliosData.documentoCaja On _
    '                           caja.idDocumento Equals cdt.idDocumento _
    '                           Into ords1 = Group _
    '                           From cdt1 In ords1.DefaultIfEmpty _
    '                           Group Join EF In HeliosData.estadosFinancieros On _
    '                           cdt1.entidadFinanciera Equals EF.idestado _
    '                            Into ords2 = Group _
    '                           From cdt2 In ords2.DefaultIfEmpty _
    '                           Where compra.idCentroCosto = intIdEstable _
    '                           And compra.fechaDoc >= s60 _
    '                           And compra.fechaDoc <= addDay60 _
    '                           And listaTipoCompra.Contains(compra.tipoCompra) _
    '                           Order By compra.fechaDoc Ascending _
    '                           Into _
    '                           DeudaMN = Sum(compraDetalle.importe), _
    '                           DeudaME = Sum(compraDetalle.importeUS), _
    '                           PagadoMN = Sum(cdt.montoSoles), _
    '                           PagadoME = Sum(cdt.montoUsd)


    '            '****************************************** 90***********************************************
    '            addDay60 = addDay60.AddDays(1)
    '            Dim s90 As New DateTime(AnioGeneral, addDay60.Date.Month, addDay60.Date.Day)
    '            Dim dias90 = DateDiff(DateInterval.Day, s, DateTime.Now.Date)
    '            Dim addDay90 As DateTime = s90.AddDays(CInt(30))
    '            Dim consulta90 = Aggregate doc In HeliosData.documento _
    '                           Join compra In HeliosData.documentocompra _
    '                           On doc.idDocumento Equals compra.idDocumento _
    '                           Join compraDetalle In HeliosData.documentocompradetalle _
    '                           On compra.idDocumento Equals compraDetalle.idDocumento _
    '                           Join entidad In HeliosData.entidad _
    '                           On compra.idProveedor Equals entidad.idEntidad _
    '                           Group Join detalleCaja In HeliosData.documentoCajaDetalle _
    '                           On compraDetalle.idDocumento Equals detalleCaja.documentoAfectado _
    '                           And compraDetalle.idItem Equals detalleCaja.idItem _
    '                           Into ords = Group _
    '                           From cdt In ords.DefaultIfEmpty _
    '                          Group Join caja In HeliosData.documentoCaja On _
    '                           caja.idDocumento Equals cdt.idDocumento _
    '                           Into ords1 = Group _
    '                           From cdt1 In ords1.DefaultIfEmpty _
    '                           Group Join EF In HeliosData.estadosFinancieros On _
    '                           cdt1.entidadFinanciera Equals EF.idestado _
    '                            Into ords2 = Group _
    '                           From cdt2 In ords2.DefaultIfEmpty _
    '                           Where compra.idCentroCosto = intIdEstable _
    '                           And compra.fechaDoc >= addDay90 _
    '                           And compra.fechaDoc <= addDay90 _
    '                           And listaTipoCompra.Contains(compra.tipoCompra) _
    '                           Order By compra.fechaDoc Ascending _
    '                           Into _
    '                           DeudaMN = Sum(compraDetalle.importe), _
    '                           DeudaME = Sum(compraDetalle.importeUS), _
    '                           PagadoMN = Sum(cdt.montoSoles), _
    '                           PagadoME = Sum(cdt.montoUsd)





    '            Dim totalMN As Decimal = 0
    '            Dim totalME As Decimal = 0
    '            totalMN = consulta.DeudaMN.GetValueOrDefault - consulta.PagadoMN.GetValueOrDefault
    '            totalME = consulta.DeudaME.GetValueOrDefault - consulta.PagadoME.GetValueOrDefault

    '            objRecurso = New documentocompra With {.importeTotal = totalMN, .importeUS = totalME}
    '    End Select

    '    Return objRecurso
    'End Function



    Public Function GetListarComprasNotaCreditoPorProveedorCaja(intIdEstable As Integer, intIdProveedor As Integer, strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join compraDetalle In HeliosData.documentocompradetalle
                       On compra.idDocumento Equals compraDetalle.idDocumento
                        Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                        Group Join detalleCaja In HeliosData.documentoCajaDetalle
                       On compraDetalle.idDocumento Equals detalleCaja.documentoAfectado _
                       And compraDetalle.idItem Equals detalleCaja.idItem
                       Into ords = Group
                        From cdt In ords.DefaultIfEmpty
                        Group Join caja In HeliosData.documentoCaja On
                       caja.idDocumento Equals cdt.idDocumento
                       Into ords1 = Group
                        From cdt1 In ords1.DefaultIfEmpty
                        Group Join EF In HeliosData.estadosFinancieros On
                       cdt1.entidadFinanciera Equals EF.idestado
                        Into ords2 = Group
                        From cdt2 In ords2.DefaultIfEmpty
                        Where compra.idProveedor = intIdProveedor And
                       compra.idCentroCosto = intIdEstable And
                       compra.fechaContable = strPeriodo _
                       And listaTipoCompra.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre

            'DATOS CAJA DETALLE
            objRecurso.FechaPago = obj.compra.fechaDoc

            If Not IsNothing(obj.cdt1) Then
                objRecurso.NumDocOperCaja = obj.cdt1.numeroOperacion
            Else
                objRecurso.NumDocOperCaja = String.Empty
            End If

            If Not IsNothing(obj.cdt1) Then
                objRecurso.NumeroTipoDocCaja = obj.cdt1.numeroDoc
            Else
                objRecurso.NumeroTipoDocCaja = String.Empty
            End If

            If Not IsNothing(obj.cdt1) Then
                objRecurso.CtaCorrienteDeposito = obj.cdt1.ctaCorrienteDeposito
            Else
                objRecurso.CtaCorrienteDeposito = String.Empty
            End If

            If Not IsNothing(obj.cdt1) Then
                objRecurso.BancoDeposito = obj.cdt1.bancoEntidad
            Else
                objRecurso.BancoDeposito = String.Empty
            End If

            If Not IsNothing(obj.cdt1) Then
                objRecurso.TipoDocPagoCaja = obj.cdt1.tipoDocPago
            Else
                objRecurso.TipoDocPagoCaja = String.Empty
            End If
            If Not IsNothing(obj.cdt2) Then
                objRecurso.NombreCajaPago = obj.cdt2.descripcion
            Else
                objRecurso.NombreCajaPago = String.Empty
            End If
            objRecurso.DetalleItemCaja = obj.compraDetalle.descripcionItem
            If Not IsNothing(obj.cdt) Then
                objRecurso.ImportePagoMN = obj.cdt.montoSoles.GetValueOrDefault
            Else
                objRecurso.ImportePagoMN = 0.0
            End If
            If Not IsNothing(obj.cdt) Then
                objRecurso.ImportePagoME = obj.cdt.montoUsd.GetValueOrDefault
            Else
                objRecurso.ImportePagoME = 0.0
            End If
            'detalle compra
            objRecurso.ImporteCompraDetalleMN = obj.compraDetalle.importe
            objRecurso.ImporteCompraDetalleME = obj.compraDetalle.importeUS

            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarAportesPorPeriodo(strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra


        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable = strPeriodo _
                       And compra.tipoCompra = TIPO_COMPRA.APORTE_EXISTENCIAS
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago

            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetListarComprasPorPeriodoGeneral_CONT(intIdEstablecimiento As Integer, strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaTipoCompra.Add(TIPO_COMPRA.APORTE_EXISTENCIAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'Dim consulta = (From doc In HeliosData.documento _
        '               Join compra In HeliosData.documentocompra _
        '               On doc.idDocumento Equals compra.idDocumento _
        '               Join entidad In HeliosData.entidad _
        '               On compra.idProveedor Equals entidad.idEntidad _
        '               Where compra.fechaContable = strPeriodo _
        '               And compra.idCentroCosto = intIdEstablecimiento _
        '               And Not listaTipoCompra.Contains(compra.tipoCompra) _
        '               Order By compra.fechaDoc Ascending).ToList

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                      On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable = strPeriodo _
                      And compra.idCentroCosto = intIdEstablecimiento _
                      And listaTipoSituacion.Contains(compra.situacion) _
                      And Not listaTipoCompra.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.compra.fechaContable
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarComprasPorPeriodoGeneral_CONT_CREDITO(intIdEstablecimiento As Integer, strPeriodo As String, Optional strIdCajaUsuario As String = Nothing) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_AL_CREDITO_CON_RECEPCION)


        If IsNothing(strIdCajaUsuario) Then
            Dim consulta = (From doc In HeliosData.documento
                            Join compra In HeliosData.documentocompra
                    On doc.idDocumento Equals compra.idDocumento
                            Join entidad In HeliosData.entidad
                    On compra.idProveedor Equals entidad.idEntidad
                            Where compra.fechaContable = strPeriodo _
                    And compra.idCentroCosto = intIdEstablecimiento _
                    And listaTipoCompra.Contains(compra.tipoCompra) _
                     And listaTipoSituacion.Contains(compra.situacion)
                            Order By compra.fechaDoc Ascending).ToList

            For Each obj In consulta
                objRecurso = New documentocompra
                objRecurso.fechaContable = obj.compra.fechaContable
                objRecurso.periodoTributo = obj.compra.periodoTributo
                objRecurso.idDocumento = obj.compra.idDocumento
                objRecurso.tipoCompra = obj.compra.tipoCompra
                objRecurso.tipoOperacion = obj.doc.tipoOperacion
                objRecurso.fechaDoc = obj.compra.fechaDoc
                objRecurso.tipoDoc = obj.compra.tipoDoc
                objRecurso.serie = obj.compra.serie
                objRecurso.numeroDoc = obj.compra.numeroDoc
                objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                objRecurso.NroDocEntidad = obj.entidad.nrodoc
                objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                objRecurso.TipoPersona = obj.entidad.tipoPersona
                objRecurso.importeTotal = obj.compra.importeTotal
                objRecurso.tcDolLoc = obj.compra.tcDolLoc
                objRecurso.importeUS = obj.compra.importeUS
                objRecurso.monedaDoc = obj.compra.monedaDoc
                objRecurso.estadoPago = obj.compra.estadoPago
                objRecurso.idPadre = obj.compra.idPadre
                objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                objRecurso.situacion = obj.compra.situacion
                Lista.Add(objRecurso)
            Next
        Else


            Dim consulta = (From doc In HeliosData.documento
                            Join compra In HeliosData.documentocompra
                    On doc.idDocumento Equals compra.idDocumento
                            Join entidad In HeliosData.entidad
                    On compra.idProveedor Equals entidad.idEntidad
                            Where compra.fechaContable = strPeriodo And compra.usuarioActualizacion = strIdCajaUsuario _
                    And compra.idCentroCosto = intIdEstablecimiento _
                    And listaTipoCompra.Contains(compra.tipoCompra) _
                     And listaTipoSituacion.Contains(compra.situacion)
                            Order By compra.fechaDoc Ascending).ToList

            For Each obj In consulta
                objRecurso = New documentocompra
                objRecurso.fechaContable = obj.compra.fechaContable
                objRecurso.periodoTributo = obj.compra.periodoTributo
                objRecurso.idDocumento = obj.compra.idDocumento
                objRecurso.tipoCompra = obj.compra.tipoCompra
                objRecurso.tipoOperacion = obj.doc.tipoOperacion
                objRecurso.fechaDoc = obj.compra.fechaDoc
                objRecurso.tipoDoc = obj.compra.tipoDoc
                objRecurso.serie = obj.compra.serie
                objRecurso.numeroDoc = obj.compra.numeroDoc
                objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                objRecurso.NroDocEntidad = obj.entidad.nrodoc
                objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                objRecurso.TipoPersona = obj.entidad.tipoPersona
                objRecurso.importeTotal = obj.compra.importeTotal
                objRecurso.tcDolLoc = obj.compra.tcDolLoc
                objRecurso.importeUS = obj.compra.importeUS
                objRecurso.monedaDoc = obj.compra.monedaDoc
                objRecurso.estadoPago = obj.compra.estadoPago
                objRecurso.idPadre = obj.compra.idPadre
                objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                objRecurso.situacion = obj.compra.situacion
                Lista.Add(objRecurso)
            Next

        End If



        Return Lista
    End Function

    Public Function GetListarComprasPorPeriodoGeneralTransferencia(intIdEstablecimiento As Integer, strPeriodo As String, Optional UsuarioCaja As String = Nothing) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        'If IsNothing(UsuarioCaja) Then

        Dim consulta = HeliosData.MovimientosTransferenciaXAlmacen(strPeriodo, intIdEstablecimiento).ToList

        For Each obj In consulta

            'Dim consultaDetalle = (From doc In HeliosData.documentocompradetalle
            '                       Join entidad In HeliosData.almacen
            '          On doc.almacenDestino Equals entidad.idAlmacen
            '                       Join entidadRef In HeliosData.almacen
            '          On doc.almacenRef Equals entidadRef.idAlmacen
            '                       Where doc.idDocumento = obj.doc.idDocumento).FirstOrDefault

            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.fechaContable
            objRecurso.periodoTributo = obj.fechaContable
            objRecurso.idDocumento = obj.idDocumento
            objRecurso.tipoCompra = obj.tipoCompra
            objRecurso.tipoOperacion = obj.tipoOperacion
            objRecurso.fechaDoc = obj.fechaDoc
            objRecurso.tipoDoc = obj.tipoDoc
            objRecurso.serie = obj.serie

            If (Not IsNothing(obj.idProveedor)) Then
                objRecurso.NroDocEntidad = obj.numeroDoc
                objRecurso.NombreEntidad = obj.nombreCompleto
            Else
                objRecurso.NroDocEntidad = obj.DNI_Person
                objRecurso.NombreEntidad = obj.nombres + " " + obj.appat + " " + obj.apmat
            End If

            objRecurso.numeroDoc = obj.numeroDoc
            objRecurso.tipoDocEntidad = obj.tipoDoc

            'objRecurso.TipoPersona = obj.tip
            objRecurso.importeTotal = obj.importeTotal
            objRecurso.tcDolLoc = obj.tcDolLoc
            objRecurso.importeUS = obj.importeUS
            objRecurso.monedaDoc = obj.monedaDoc
            objRecurso.estadoPago = obj.estadoPago
            'objRecurso.idPadre = obj.idPadre
            objRecurso.usuarioActualizacion = obj.usuarioActualizacion
            objRecurso.situacion = obj.situacion
            objRecurso.aprobado = obj.aprobado
            objRecurso.estadoEntrega = obj.estadoEntrega
            objRecurso.NomAlmacenOrigen = obj.AlmOrigen
            objRecurso.NomAlmacenDestino = obj.AlmDestino
            'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    ''' <summary>
    ''' Transferencias x establecimientos y empresa
    ''' </summary>
    ''' <param name="intIdEstablecimiento">Establecimiento</param>
    ''' <returns></returns>
    Public Function GetTransferenciasByEmpresa(intIdEstablecimiento As Integer) As List(Of documentocompra)
        GetTransferenciasByEmpresa = New List(Of documentocompra)
        Dim objRecurso As New documentocompra
        Dim consulta = HeliosData.MovimientosTransferenciaXAlmacen_Full(intIdEstablecimiento).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.fechaContable
            objRecurso.periodoTributo = obj.fechaContable
            objRecurso.idDocumento = obj.idDocumento
            objRecurso.tipoCompra = obj.tipoCompra
            objRecurso.tipoOperacion = obj.tipoOperacion
            objRecurso.fechaDoc = obj.fechaDoc
            objRecurso.tipoDoc = obj.tipoDoc
            objRecurso.serie = obj.serie

            If (Not IsNothing(obj.idProveedor)) Then
                objRecurso.NroDocEntidad = obj.numeroDoc
                objRecurso.NombreEntidad = obj.nombreCompleto
            Else
                objRecurso.NroDocEntidad = obj.idPersona
                objRecurso.NombreEntidad = obj.nombres + " " + obj.appat + " " + obj.apmat
            End If

            objRecurso.numeroDoc = obj.numeroDoc
            objRecurso.tipoDocEntidad = obj.tipoDoc

            'objRecurso.TipoPersona = obj.tip
            objRecurso.importeTotal = obj.importeTotal
            objRecurso.tcDolLoc = obj.tcDolLoc
            objRecurso.importeUS = obj.importeUS
            objRecurso.monedaDoc = obj.monedaDoc
            objRecurso.estadoPago = obj.estadoPago
            'objRecurso.idPadre = obj.idPadre
            objRecurso.usuarioActualizacion = obj.usuarioActualizacion
            objRecurso.situacion = obj.situacion
            objRecurso.aprobado = obj.aprobado
            objRecurso.estadoEntrega = obj.estadoEntrega
            objRecurso.NomAlmacenOrigen = obj.AlmOrigen
            objRecurso.NomAlmacenDestino = obj.AlmDestino
            'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
            GetTransferenciasByEmpresa.Add(objRecurso)
        Next

        Return GetTransferenciasByEmpresa
    End Function

    Public Function GetAlertaTransferenciasConteo(be As documentocompra) As List(Of documentocompra)

        Dim query = HeliosData.documentocompra.Where(Function(o) o.idEmpresa = be.idEmpresa And
                                                         o.idCentroCosto = be.idCentroCosto And
                                                         o.tipoCompra = be.tipoCompra).GroupBy(Function(g) New With
                 {
                                                                                                                                          Key g.estadoEntrega,
                                                                                                                                          Key g.tipoCompra
                                                                                                                                          }).
           Select(Function(group) New With
           {
           .tipoCompra = group.Key.tipoCompra,
           .estadoEntrega = group.Key.estadoEntrega,
           .TotalCount = group.Count()
                      }).ToList()

        GetAlertaTransferenciasConteo = New List(Of documentocompra)
        For Each i In query
            GetAlertaTransferenciasConteo.Add(New documentocompra With
                                    {
                                    .tipoCompra = i.tipoCompra,
                                    .estadoEntrega = i.estadoEntrega,
                                    .conteoCuotas = i.TotalCount
                                    })
        Next
    End Function


    Public Function GetNotasDeComprasPorPeriodo(be As documentocompra) As List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DE_COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_PAGADA)
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                            On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                            On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable = be.fechaContable _
                            And compra.idCentroCosto = be.idCentroCosto _
                            And listaTipoCompra.Contains(compra.tipoCompra) _
                            And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList


        Dim strPeriodo = be.fechaContable.Replace("/", "")
        Dim consulta2 = (From doc In HeliosData.documento
                         Join compra In HeliosData.documentocompra
                             On doc.idDocumento Equals compra.idDocumento
                         Join entidad In HeliosData.entidad
                             On compra.idProveedor Equals entidad.idEntidad
                         Where compra.periodoTributo = strPeriodo _
                             And compra.idCentroCosto = be.idCentroCosto _
                             And listaTipoCompra.Contains(compra.tipoCompra) _
                             And compra.tieneDetraccion = "S" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

        Dim con3 = consulta.Concat(consulta2).OrderBy(Function(o) o.compra.fechaDoc).ToList

        GetNotasDeComprasPorPeriodo = New List(Of documentocompra)

        For Each obj In con3
            GetNotasDeComprasPorPeriodo.Add(New documentocompra With
                                            {
                                            .fechaContable = obj.compra.fechaContable,
                                            .periodoTributo = obj.compra.periodoTributo,
                                            .idDocumento = obj.compra.idDocumento,
                                            .tipoCompra = obj.compra.tipoCompra,
                                            .tipoOperacion = obj.doc.tipoOperacion,
                                            .fechaDoc = obj.compra.fechaDoc,
                                            .tipoDoc = obj.compra.tipoDoc,
                                            .serie = obj.compra.serie,
                                            .numeroDoc = obj.compra.numeroDoc,
                                            .tipoDocEntidad = obj.entidad.tipoDoc,
                                            .NroDocEntidad = obj.entidad.nrodoc,
                                            .NombreEntidad = obj.entidad.nombreCompleto,
                                            .TipoPersona = obj.entidad.tipoPersona,
                                            .tcDolLoc = obj.compra.tcDolLoc,
                                            .importeTotal = obj.compra.importeTotal,
                                            .importeUS = obj.compra.importeUS,
                                            .monedaDoc = obj.compra.monedaDoc,
                                            .estadoPago = obj.compra.estadoPago,
                                            .idPadre = obj.compra.idPadre,
                                            .usuarioActualizacion = obj.compra.usuarioActualizacion,
                                            .situacion = obj.compra.situacion,
                                            .aprobado = obj.compra.aprobado,
                                            .tieneDetraccion = obj.compra.tieneDetraccion
                                            })
        Next
    End Function

    Public Function GetComprasObservadas(be As documentocompra) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_PAGADA)

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                 On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                 On compra.idProveedor Equals entidad.idEntidad
                        Where compra.idCentroCosto = be.idCentroCosto _
                 And listaTipoCompra.Contains(compra.tipoCompra) _
                 And compra.situacion = statusComprobantes.Observado).ToList


        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.compra.fechaContable
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            objRecurso.aprobado = obj.compra.aprobado
            objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
            'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
            Lista.Add(objRecurso)
        Next
        Return Lista
    End Function

    Public Function GetListarOrdenComprasPorPeriodoGeneral(intIdEstablecimiento As Integer, strPeriodo As String, tipoOrden As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoSituacion.Add(TIPO_SITUACION.ORDEN_COMPRA_TRANSITO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.ORDEN_APROBADO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'listaTipoCompra.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        'listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        'listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)

        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        'If IsNothing(UsuarioCaja) Then
        'Dim consulta = (From doc In HeliosData.documento _
        '         Join compra In HeliosData.documentocompra _
        '         On doc.idDocumento Equals compra.idDocumento _
        '         Join entidad In HeliosData.entidad _
        '         On compra.idProveedor Equals entidad.idEntidad _
        '         Where compra.fechaContable = strPeriodo _
        '         And compra.idCentroCosto = intIdEstablecimiento _
        '         And listaTipoCompra.Contains(compra.tipoCompra) _
        '         And listaTipoSituacion.Contains(compra.situacion) _
        '                 Order By compra.fechaDoc).ToList
        'compra.fechaContable = strPeriodo _
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                On compra.idProveedor Equals entidad.idEntidad
                        Where compra.idCentroCosto = intIdEstablecimiento _
                And compra.tipoCompra = tipoOrden _
                And listaTipoSituacion.Contains(compra.situacion)
                        Order By compra.fechaDoc).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.compra.fechaContable
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            objRecurso.aprobado = obj.compra.aprobado
            'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
            Lista.Add(objRecurso)
        Next


        Return Lista
    End Function

    Public Function GetListarOrdenComprasPorFiltro(intIdEstablecimiento As Integer, strPeriodo As String, tipoOrden As String, intproveedor As Integer, moneda As Integer) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoSituacion.Add(TIPO_SITUACION.ORDEN_COMPRA_TRANSITO)
        listaTipoCompra.Add(TIPO_COMPRA.ORDEN_APROBADO)

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                 On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                 On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable = strPeriodo _
                 And compra.idCentroCosto = intIdEstablecimiento _
                 And compra.tipoCompra = tipoOrden _
                 And listaTipoSituacion.Contains(compra.situacion) _
                 And compra.monedaDoc = moneda _
                 And compra.idProveedor = intproveedor
                        Order By compra.fechaDoc).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.compra.fechaContable
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            objRecurso.aprobado = obj.compra.aprobado
            'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
            Lista.Add(objRecurso)
        Next


        Return Lista
    End Function


    Public Function GetListarOrdenServiciosPorPeriodoGeneral(intIdEstablecimiento As Integer, strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoSituacion.Add(TIPO_SITUACION.ORDEN_SERVICIO_TRANSITO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.ORDEN_SERVICIO_APROBADO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'listaTipoCompra.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        'listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        'listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)

        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        'If IsNothing(UsuarioCaja) Then
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                 On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                 On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable = strPeriodo _
                 And compra.idCentroCosto = intIdEstablecimiento _
                 And listaTipoCompra.Contains(compra.tipoCompra) _
                 And listaTipoSituacion.Contains(compra.situacion)
                        Order By compra.fechaDoc).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.compra.fechaContable
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            objRecurso.aprobado = obj.compra.aprobado
            'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
            Lista.Add(objRecurso)
        Next


        Return Lista
    End Function

    Public Function GetListarComprasPorPeriodoGeneralCentral(intIdEstablecimiento As Integer, strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaTipoCompra.Add(TIPO_COMPRA.APORTE_EXISTENCIAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'Dim consulta = (From doc In HeliosData.documento _
        '               Join compra In HeliosData.documentocompra _
        '               On doc.idDocumento Equals compra.idDocumento _
        '               Join entidad In HeliosData.entidad _
        '               On compra.idProveedor Equals entidad.idEntidad _
        '               Where compra.fechaContable = strPeriodo _
        '               And compra.idCentroCosto = intIdEstablecimiento _
        '               And Not listaTipoCompra.Contains(compra.tipoCompra) _
        '               Order By compra.fechaDoc Ascending).ToList

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                      On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable = strPeriodo _
                      Or compra.periodoTributo = strPeriodo _
                      And compra.idCentroCosto = intIdEstablecimiento _
                      And listaTipoSituacion.Contains(compra.situacion) _
                      And Not listaTipoCompra.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            If Not IsNothing(obj.compra.periodoTributo) Then
                If obj.compra.periodoTributo = strPeriodo Then
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                    objRecurso.NroDocEntidad = obj.entidad.nrodoc
                    objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                    objRecurso.TipoPersona = obj.entidad.tipoPersona
                    objRecurso.importeTotal = obj.compra.importeTotal
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    objRecurso.importeUS = obj.compra.importeUS
                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    Lista.Add(objRecurso)

                End If
            End If
            If obj.compra.fechaContable = strPeriodo Then
                If IsNothing(obj.compra.periodoTributo) Then
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                    objRecurso.NroDocEntidad = obj.entidad.nrodoc
                    objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                    objRecurso.TipoPersona = obj.entidad.tipoPersona
                    objRecurso.importeTotal = obj.compra.importeTotal
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    objRecurso.importeUS = obj.compra.importeUS
                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    Lista.Add(objRecurso)
                End If

            End If

        Next

        Return Lista
    End Function

    Public Function GetListarComprasPorANioGeNeral(intIdEstablecimiento As Integer, strANio As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaTipoCompra.Add(TIPO_COMPRA.APORTE_EXISTENCIAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)


        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                      On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable.Contains(strANio) _
                      And compra.idCentroCosto = intIdEstablecimiento _
                      And listaTipoSituacion.Contains(compra.situacion) _
                      And Not listaTipoCompra.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetListarComprasPorAnio(intIdEstablecimiento As Integer, strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        '   Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaTipoCompra.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_PAGADA)

        Dim consulta = (From doc In HeliosData.documento
                        Group Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                      Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where c.fechaContable.Contains(strPeriodo) _
                      And c.idCentroCosto = intIdEstablecimiento _
                      And Not listaTipoCompra.Contains(c.tipoCompra)
                        Group c By
                      c.fechaContable
                          Into g = Group
                        Select New With {.Periodo = fechaContable,
                                          g, .CountCompras = g.Count(Function(c) c.idEmpresa),
                                           .importeMN = g.Sum(Function(c) c.importeTotal),
                                           .importeME = g.Sum(Function(c) c.importeUS)
                                       }
                                   ).ToList


        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.Periodo
            objRecurso.CountCompras = obj.CountCompras
            objRecurso.importeTotal = obj.importeMN.GetValueOrDefault
            objRecurso.importeUS = obj.importeME.GetValueOrDefault
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarComprasPorAnioEmpresa(empresa As String, anio As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        '   Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaTipoCompra.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        listaTipoCompra.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_PAGADA)

        Dim consulta = (From doc In HeliosData.documento
                        Group Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                      Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Where c.fechaContable.Contains(anio) _
                            And c.idEmpresa = empresa _
                      And listaTipoCompra.Contains(c.tipoCompra)
                        Group c By
                      c.fechaContable
                          Into g = Group
                        Select New With {.Periodo = fechaContable,
                            .tipoCompra = "CMP",
                                          g, .CountCompras = g.Count(Function(c) c.idEmpresa),
                                           .importeMN = g.Sum(Function(c) c.importeTotal),
                                           .importeME = g.Sum(Function(c) c.importeUS)
                                       }
                                   ).ToList



        Dim consultaNotaCredito = (From doc In HeliosData.documento
                                   Group Join compra In HeliosData.documentocompra
                                       On doc.idDocumento Equals compra.idDocumento
                                       Into ords = Group
                                   From c In ords.DefaultIfEmpty
                                   Where c.fechaContable.Contains(anio) _
                                       And c.idEmpresa = empresa _
                                       And c.tipoCompra = TIPO_COMPRA.NOTA_CREDITO
                                   Group c By
                                       c.fechaContable,
                                       c.tipoCompra
                                       Into g = Group
                                   Select New With {.Periodo = fechaContable,
                                       .tipoCompra = tipoCompra,
                                          g, .CountCompras = g.Count(Function(c) c.idEmpresa),
                                           .importeMN = g.Sum(Function(c) c.importeTotal * -1),
                                           .importeME = g.Sum(Function(c) c.importeUS * -1)
                                       }
                                   ).ToList


        Dim consultaFinal = consulta.Concat(consultaNotaCredito).ToList

        Dim consultaResumen = consultaFinal.GroupBy(Function(x) x.Periodo, Function(x) x.importeMN,
                                                    Function(periodo, monto) New With {.key = periodo, .sumCompra = monto.Sum()}).ToList

        For Each obj In consultaResumen
            objRecurso = New documentocompra
            objRecurso.tipoCompra = "CMP"
            objRecurso.fechaContable = obj.key
            objRecurso.CountCompras = 0 'obj.CountCompras
            objRecurso.importeTotal = obj.sumCompra.GetValueOrDefault ' obj.importeMN.GetValueOrDefault
            objRecurso.importeUS = 0 'obj.importeME.GetValueOrDefault
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetTotalComprasByPeriodoProveedor(be As documentocompra) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.COMPRA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        Dim consulta = (From doc In HeliosData.documento
                        Group Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                      Into ords = Group
                        From c In ords.DefaultIfEmpty
                        Join ent In HeliosData.entidad
                        On ent.idEntidad Equals c.idProveedor
                        Where c.fechaContable.Contains(be.fechaContable) _
                      And c.idCentroCosto = be.idCentroCosto _
                      And listaTipoCompra.Contains(c.tipoCompra)
                        Group c By
                      c.idProveedor, c.fechaContable, ent.nombreCompleto
                          Into g = Group
                        Select New With {.fecha = fechaContable,
                                           .idProveedor = idProveedor,
                                           .nomProveedor = nombreCompleto,
                                          g, .CountCompras = g.Count(Function(c) c.idEmpresa),
                                           .importeMN = g.Sum(Function(c) c.importeTotal),
                                           .importeME = g.Sum(Function(c) c.importeUS)
                                       }
                                   ).OrderByDescending(Function(o) o.importeMN).Take(5)



        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.idProveedor = obj.idProveedor
            objRecurso.nombreProveedor = obj.nomProveedor
            objRecurso.fechaContable = obj.fecha
            objRecurso.CountCompras = obj.CountCompras
            objRecurso.importeTotal = obj.importeMN
            objRecurso.importeUS = obj.importeME
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarComprasPorPeriodoCambioGeneral(intIdEstablecimiento As Integer, strPeriodo As String, Optional UsuarioCaja As String = Nothing) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.TIPO_CAMBIO_INVENTARIO)

        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        'If IsNothing(UsuarioCaja) Then
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                 On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                 On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable = strPeriodo _
                 And compra.idCentroCosto = intIdEstablecimiento _
                 And listaTipoCompra.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc).ToList

        For Each obj In consulta

            Dim consultaDetalle = (From doc In HeliosData.documentocompradetalle
                                   Join entidad In HeliosData.almacen
                      On doc.almacenDestino Equals entidad.idAlmacen
                                   Join entidadRef In HeliosData.almacen
                      On doc.almacenRef Equals entidadRef.idAlmacen
                                   Where doc.idDocumento = obj.doc.idDocumento).FirstOrDefault


            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.compra.fechaContable
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            objRecurso.aprobado = obj.compra.aprobado
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.NomAlmacenOrigen = consultaDetalle.entidad.descripcionAlmacen
            objRecurso.NomAlmacenDestino = consultaDetalle.entidadRef.descripcionAlmacen
            'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarNotasPorIdCompraPadre(intIDoCumento As Integer, strTipoNota As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra

        Select Case strTipoNota
            Case "00"
                Dim notas As New List(Of String)
                notas.Add(TIPO_COMPRA.NOTA_CREDITO)
                notas.Add(TIPO_COMPRA.NOTA_DEBITO)

                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                                Where compra.idPadre = intIDoCumento _
                       And notas.Contains(compra.tipoCompra)
                                Order By compra.fechaDoc Ascending).ToList

                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.destino = obj.compra.destino
                    objRecurso.sustentado = obj.compra.sustentado
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.importeTotal = obj.compra.importeTotal
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    objRecurso.importeUS = obj.compra.importeUS
                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    Lista.Add(objRecurso)
                Next
            Case Else
                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                                Where compra.idPadre = intIDoCumento _
                       And compra.tipoCompra = strTipoNota
                                Order By compra.fechaDoc Ascending).ToList

                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.destino = obj.compra.destino
                    objRecurso.sustentado = obj.compra.sustentado
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.importeTotal = obj.compra.importeTotal
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    objRecurso.importeUS = obj.compra.importeUS
                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function ListarNotasXidCompra(intIDoCumento As Integer) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra
        Dim listaCompra As New List(Of String)
        listaCompra.Add(TIPO_COMPRA.NOTA_CREDITO)
        listaCompra.Add(TIPO_COMPRA.NOTA_DEBITO)

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Where compra.idPadre = intIDoCumento _
                       And listaCompra.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.sustentado = obj.compra.sustentado
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            Lista.Add(objRecurso)
        Next
        Return Lista
    End Function


    Public Function ValidarEstadoManipulacion(intIdDocumentoCompra As Integer) As Integer
        Return (From n In HeliosData.documentocompra Where
                n.idPadre = intIdDocumentoCompra And
                n.tipoCompra = "NTC").Count
    End Function

    Public Function GetListarComprasPorProveedor(strIdEmpresa As String, intIdEstable As Integer, intIdProveedor As Integer) As List(Of documentocompra)
        Dim ListaDoc As New List(Of String)

        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra

        ListaDoc.Add("07")
        ListaDoc.Add("08")
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                        Where doc.idEmpresa = strIdEmpresa _
                       And doc.idCentroCosto = intIdEstable _
                       And compra.idProveedor = intIdProveedor _
                       And Not ListaDoc.Contains(compra.tipoDoc)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc

            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function


    Public Function GetListarAportesPorMes(intIdEstablecimiento As Integer, ByVal strPeriodo As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                        Where compra.idCentroCosto = intIdEstablecimiento And
                       compra.fechaContable = strPeriodo _
                       And compra.tipoCompra = TIPO_COMPRA.APORTE_EXISTENCIAS
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago

            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarAportesPorRango(ByVal desde As Date, ByVal hasta As Date) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra


        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaDoc >= desde _
                        And compra.fechaDoc <= hasta _
                       And compra.tipoCompra = TIPO_COMPRA.APORTE_EXISTENCIAS
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago

            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarAportesPorDia(intIdEstablecimiento As Integer) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra


        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                        Where compra.idCentroCosto = intIdEstablecimiento And
                       compra.fechaDoc.Value.Day = CDate(DateTime.Now).Day _
                       And compra.fechaDoc.Value.Month = CDate(DateTime.Now).Month _
                       And compra.fechaDoc.Value.Year = CDate(DateTime.Now).Year _
                       And compra.tipoCompra = TIPO_COMPRA.APORTE_EXISTENCIAS
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago

            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetComprasDelDiaxOperacion(be As documentocompra) As List(Of documentocompra)
        Dim obj As New documentocompradetalle
        Dim list As New List(Of String)

        list.Add(TIPO_COMPRA.COMPRA)
        list.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        list.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        list.Add(TIPO_COMPRA.BONIFICACIONES_RECIBIDAS)
        list.Add(TIPO_COMPRA.NOTA_CREDITO)
        list.Add(TIPO_COMPRA.NOTA_DEBITO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        list.Add(TIPO_COMPRA.COMPRA_PAGADA)


        Dim consulta = HeliosData.documentocompra.Where(Function(o) o.fechaDoc.Value.Year = be.fechaDoc.Value.Year _
                                                                And o.fechaDoc.Value.Month = be.fechaDoc.Value.Month _
                                                                And o.fechaDoc.Value.Day = be.fechaDoc.Value.Day _
                                                                And list.Contains(o.tipoCompra) _
                                                                And o.idEmpresa = be.idEmpresa).GroupBy(Function(x) x.tipoCompra, Function(x) x.importeTotal,
                                                                  Function(tipo, monto) New With {.key = tipo, .sumCompra = monto.Sum()}).ToList


        GetComprasDelDiaxOperacion = New List(Of documentocompra)
        For Each i In consulta
            GetComprasDelDiaxOperacion.Add(New documentocompra With {.tipoCompra = i.key, .importeTotal = i.sumCompra.GetValueOrDefault})
        Next
    End Function



    Public Function GetListarComprasPorRango_CONT(ByVal desde As Date, ByVal hasta As Date) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra
        listaTipoCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaTipoCompra.Add(TIPO_COMPRA.APORTE_EXISTENCIAS)
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaDoc >= desde _
                       And compra.fechaDoc <= hasta _
                       And Not listaTipoCompra.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago

            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function GetListarComprasPorMes_CONT(ByVal año As Integer, ByVal mes As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        listaTipoCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaTipoCompra.Add(TIPO_COMPRA.APORTE_EXISTENCIAS)
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaDoc.Value.Month = CInt(mes) _
                       And compra.fechaDoc.Value.Year = año _
                       And Not listaTipoCompra.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago

            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function UpdateSingleDocCompra(ByVal intIdDocumento As Integer) As Integer
        Dim tag As Integer
        Dim totaltesalamcen3 As New totalesAlmacenBL
        Dim documentobl As New documentoBL
        Using ts As New TransactionScope
            Dim consulta = (From c In HeliosData.documentocompra
                            Where c.idDocumento = intIdDocumento
                            Select c).ToList
            If Not IsNothing(consulta) Then
                For Each items In consulta

                    'HeliosData.ObjectStateManager.GetObjectStateEntry(items).State.ToString()

                    If items.situacion = TIPO_SITUACION.ALMACEN_FISICO_SOBRANTE Or items.situacion = TIPO_SITUACION.ALMACEN_TRANSITO_FISICO Or items.situacion = TIPO_SITUACION.ALMACEN_FISICO Then


                        items.situacion = TIPO_SITUACION.ALMACEN_FISICO_SOBRANTE

                        tag = 1
                    ElseIf items.situacion = TIPO_SITUACION.ALMACEN_TRANSITO Then

                        documentobl.DeleteSingleVariable(items.idDocumento)
                        'totaltesalamcen3.DeleteTotAlmacenPorItem(items)
                        'totaltesalamcen3.DeleteTotAlmacenPorItem(items)
                        'eliminarCompraTransito(items.secuencia)
                        tag = 2
                    End If


                Next
                HeliosData.SaveChanges()
                ts.Complete()
                Return tag
            Else
                Throw New Exception("El comprobante no se encuentra, verifique su existencia!")
            End If
        End Using
    End Function

    Public Function UbicarCompraPorIdDocumento(intIdDocumento As Integer) As documentocompra
        Dim documeNtoCompra As New documentocompra

        documeNtoCompra = (From n In HeliosData.documentocompra
                           Where n.idDocumento = intIdDocumento Select n).FirstOrDefault

        Return documeNtoCompra
    End Function


    Public Sub UpdateSingleDocCompraSL(ByVal intIdDocumento As Integer)

        Using ts As New TransactionScope
            Dim consulta = (From c In HeliosData.documentocompra
                            Where c.idDocumento = intIdDocumento
                            Select c).FirstOrDefault
            If Not IsNothing(consulta) Then
                consulta.situacion = TIPO_SITUACION.ALMACEN_TRANSITO_FISICO
                'HeliosData.ObjectStateManager.GetObjectStateEntry(consulta).State.ToString()
                HeliosData.SaveChanges()
                ts.Complete()
            Else
                Throw New Exception("El comprobante no se encuentra, verifique su existencia!")
            End If
        End Using
    End Sub
    Public Sub EditarEstadoCompra(intIdDocumento As Integer, strEstadoPago As String)
        Dim consulta As documentocompra = HeliosData.documentocompra.Where(Function(o) o.idDocumento = intIdDocumento).FirstOrDefault
        Using ts As New TransactionScope
            consulta.estadoPago = strEstadoPago
            'HeliosData.ObjectStateManager.GetObjectStateEntry(consulta).State.ToString()
            HeliosData.SaveChanges()
            ts.Complete()
        End Using

    End Sub

    Public Function GrabarOrdenesServicio(objDocumento As documento, objOtroDoc As documentoOtrosDatos) As Integer
        Dim DocumentoBL As New documentoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim compraOtros As New documentoOtrosDatosBL
        Dim IdSecuencia As Integer
        Try
            Using ts As New TransactionScope()
                If ValidarDocumentoNro(objDocumento.documentocompra) = True Then
                    DocumentoBL.Insert(objDocumento)
                    Me.InsertProgramado(objDocumento.documentocompra, objDocumento.idDocumento)

                    compraOtros.InsertServicio(objOtroDoc, objDocumento.idDocumento, Nothing)
                    For Each i In objDocumento.documentocompra.documentocompradetalle
                        IdSecuencia = compraDetalleBL.InsertSingleOrden(i, objDocumento.idDocumento)
                        'InsertarOtrsDoc(IdSecuencia)
                    Next
                    HeliosData.SaveChanges()
                    ts.Complete()
                    Return objDocumento.idDocumento
                Else
                    Throw New Exception("El número de documento ya está registrado, ingrese otro número!")
                End If
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetListarOrdenCompraNoAprobadoSL(intIdEmpresa As String, ByVal intidEstablecimiento As Integer, ByVal EstadoOrden As String, ByVal strTipoSituacion As String) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim objRecurso As New documentocompra
        Dim listaSol As New List(Of String)
        Dim conteoServicio As Integer = 0

        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                      On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                      On compra.idProveedor Equals entidad.idEntidad
                        Where compra.idEmpresa = intIdEmpresa And
                      compra.fechaContable = PeriodoGeneral _
                      And compra.tipoCompra = EstadoOrden
                        Order By compra.fechaDoc Ascending).ToList

        For Each obj In consulta
            objRecurso = New documentocompra

            Dim consultaDetalle = (From doc In HeliosData.documentocompradetalle
                                   Where doc.idDocumento = obj.compra.idDocumento _
                           And doc.situacion = strTipoSituacion).Count

            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.idProveedor = obj.compra.idProveedor

            Select Case strTipoSituacion
                Case TIPO_COMPRA.ORDEN_COMPRA
                    If (consultaDetalle = 0) Then
                        objRecurso.situacion = TIPO_COMPRA.ORDEN_APROBADO
                    Else
                        objRecurso.situacion = TIPO_COMPRA.ORDEN_COMPRA
                    End If
                Case TIPO_COMPRA.ORDEN_SERVICIO
                    If (consultaDetalle = 0) Then
                        objRecurso.situacion = TIPO_COMPRA.ORDEN_SERVICIO_APROBADO
                    Else
                        objRecurso.situacion = TIPO_COMPRA.ORDEN_SERVICIO
                    End If
            End Select



            objRecurso.glosa = obj.compra.glosa

            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Sub updateDocumentoGuiaTransferencia(ByVal documentoBE As documentoGuia)

        Using ts As New TransactionScope

            Dim documentoCompra As documentocompra = HeliosData.documentocompra.Where(Function(o) _
                                            o.idDocumento = documentoBE.idEntidadTransporte).First()

            documentoCompra.numeroDoc = documentoBE.numeroDoc
            documentoCompra.serie = documentoBE.serie

            HeliosData.SaveChanges()
            ts.Complete()
        End Using
    End Sub

    Public Function GetListarComprasPorPeriodoGeneralTransferenciaSC(intIdEstablecimiento As Integer, strPeriodo As String, Optional UsuarioCaja As String = Nothing) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        'listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)

        listaTipoCompra.Add(TIPO_COMPRA.TRANSFERENCIA_ENTRE_ALMACEN)

        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)
        'listaTipoCompra.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)

        'If IsNothing(UsuarioCaja) Then
        Dim consulta = (From doc In HeliosData.documento
                        Join compra In HeliosData.documentocompra
                 On doc.idDocumento Equals compra.idDocumento
                        Join entidad In HeliosData.entidad
                 On compra.idProveedor Equals entidad.idEntidad
                        Where compra.fechaContable = strPeriodo _
                 And compra.idCentroCosto = intIdEstablecimiento _
                 And listaTipoCompra.Contains(compra.tipoCompra)
                        Order By compra.fechaDoc).ToList

        For Each obj In consulta

            Dim consultaDetalle = (From doc In HeliosData.documentocompradetalle
                                   Join entidad In HeliosData.almacen
                      On doc.almacenDestino Equals entidad.idAlmacen
                                   Join entidadRef In HeliosData.almacen
                      On doc.almacenRef Equals entidadRef.idAlmacen
                                   Where doc.idDocumento = obj.doc.idDocumento).FirstOrDefault


            objRecurso = New documentocompra
            objRecurso.fechaContable = obj.compra.fechaContable
            objRecurso.periodoTributo = obj.compra.periodoTributo
            objRecurso.idDocumento = obj.compra.idDocumento
            objRecurso.tipoCompra = obj.compra.tipoCompra
            objRecurso.tipoOperacion = obj.doc.tipoOperacion
            objRecurso.fechaDoc = obj.compra.fechaDoc
            objRecurso.tipoDoc = obj.compra.tipoDoc
            objRecurso.serie = obj.compra.serie
            objRecurso.numeroDoc = obj.compra.numeroDoc
            objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
            objRecurso.NroDocEntidad = obj.entidad.nrodoc
            objRecurso.NombreEntidad = obj.entidad.nombreCompleto
            objRecurso.TipoPersona = obj.entidad.tipoPersona
            objRecurso.importeTotal = obj.compra.importeTotal
            objRecurso.tcDolLoc = obj.compra.tcDolLoc
            objRecurso.importeUS = obj.compra.importeUS
            objRecurso.monedaDoc = obj.compra.monedaDoc
            objRecurso.estadoPago = obj.compra.estadoPago
            objRecurso.idPadre = obj.compra.idPadre
            objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
            objRecurso.situacion = obj.compra.situacion
            objRecurso.aprobado = obj.compra.aprobado
            objRecurso.estadoEntrega = obj.compra.estadoEntrega
            objRecurso.NomAlmacenOrigen = consultaDetalle.entidad.descripcionAlmacen
            objRecurso.NomAlmacenDestino = consultaDetalle.entidadRef.descripcionAlmacen
            'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
            Lista.Add(objRecurso)
        Next

        Return Lista
    End Function

    Public Function consultaEstadodocCompra(intIdDocumento As Integer) As Integer
        Using ts As New TransactionScope
            Dim objRecurso As New documentocompra

            Dim Conforme = Aggregate a In HeliosData.documentoguiaDetalle
                         Where a.idDocumentoPadre = intIdDocumento And a.estado = TipoGuia.Entregado
                                Into DBmn = Sum(a.cantidad),
                                DBmne = Sum(a.cantidad)

            Dim ConformeAbarrotes = Aggregate a In HeliosData.documentocompradetalle
                      Where a.idDocumento = intIdDocumento
                                Into DBmn = Sum(a.monto1),
                                DBmne = Sum(a.monto1)

            If (Conforme.DBmn.GetValueOrDefault = ConformeAbarrotes.DBmn.GetValueOrDefault) Then
                Dim consulta = (From doc In HeliosData.documentocompra
                                Where doc.idDocumento = intIdDocumento).FirstOrDefault

                'objRecurso = New documentoventaAbarrotes

                'consulta.usuarioActualizacion = TipoGuia.Entregado
                consulta.estadoEntrega = TipoEntregado.Entregado

                HeliosData.SaveChanges()
                ts.Complete()
            Else

                ts.Complete()
            End If
            Return 1
        End Using
    End Function

    Public Sub GrabarCambioTipoInventario(objDocumento As documento)
        Dim DocumentoBL As New documentoBL
        Dim AsientoBL As New AsientoBL
        Dim inventarioBL As New InventarioMovimientoBL
        Dim compraDetalleBL As New documentocompradetalleBL
        Dim t As New totalesAlmacen
        Dim totalesBL As New totalesAlmacenBL
        Dim productoBL As New detalleitemsBL()
        Dim objDetalleItem As New detalleitems
        Dim detalleItemExiste As New detalleitems
        Dim guiaBL As New documentoGuiaBL
        Dim idDetalle As Integer
        Try
            Using ts As New TransactionScope
                DocumentoBL.Insert(objDocumento)
                Me.Insert(objDocumento.documentocompra, objDocumento.idDocumento)
                For Each i In objDocumento.documentocompra.documentocompradetalle


                    detalleItemExiste = productoBL.GetUbicaProductoNombreCambioInventario(i.descripcionItem, i.tipoExistencia)
                    If IsNothing(detalleItemExiste) Then

                        objDetalleItem = New detalleitems
                        With objDetalleItem
                            .Action = Business.Entity.BaseBE.EntityAction.INSERT
                            .idEmpresa = i.IdEmpresa
                            .idEstablecimiento = i.IdEstablecimiento
                            .descripcionItem = i.descripcionItem
                            .tipoExistencia = i.tipoExistencia
                            .presentacion = "06"
                            .cuenta = i.CuentaItem
                            .origenProducto = "1"
                            .tipoProducto = "I"
                            .unidad1 = i.unidad1
                            .marcaRef = i.marcaRef
                            .estado = Nothing
                            .usuarioActualizacion = "Maykol"
                            .fechaActualizacion = Date.Now

                        End With
                        idDetalle = productoBL.InsertDetalleCambioInventario(objDetalleItem)
                        compraDetalleBL.InsertSingleCambioInventario(i, objDocumento.idDocumento, idDetalle)


                        i.TipoRegistro = "S"
                        inventarioBL.InsertCambioInventario(i, objDocumento, i.idItem, i.Editable)

                        i.TipoRegistro = "E"
                        inventarioBL.InsertCambioInventario(i, objDocumento, idDetalle, i.tipoExistencia)

                    Else
                        compraDetalleBL.InsertSingleCambioInventario(i, objDocumento.idDocumento, detalleItemExiste.codigodetalle)
                        idDetalle = detalleItemExiste.codigodetalle

                        i.TipoRegistro = "S"
                        inventarioBL.InsertCambioInventario(i, objDocumento, i.idItem, i.Editable)

                        i.TipoRegistro = "E"
                        inventarioBL.InsertCambioInventario(i, objDocumento, idDetalle, i.tipoExistencia)

                    End If



                    'ENTRADA DE ITEMS AL ALMACEN DE DESTINO

                    t = New totalesAlmacen
                    t.idEmpresa = i.IdEmpresa
                    t.idEstablecimiento = i.IdEstablecimiento
                    t.idAlmacen = i.almacenDestino   ' almacen de DESTINO
                    t.origenRecaudo = i.destino
                    t.idItem = idDetalle
                    t.descripcion = i.descripcionItem
                    t.tipoExistencia = i.tipoExistencia
                    t.tipoCambio = 0
                    t.idUnidad = i.unidad1
                    t.cantidad = i.monto1
                    t.importeSoles = i.importe
                    t.importeDolares = i.importeUS
                    t.usuarioActualizacion = i.usuarioModificacion
                    t.fechaActualizacion = i.fechaModificacion
                    totalesBL.ActualizarItemsCambioInventario(t)

                    'SALIDA DE ITEMS DEL ALMACEN DE ORIGEN
                    t = New totalesAlmacen
                    t.idEmpresa = i.IdEmpresa
                    t.idEstablecimiento = i.IdEstablecimiento
                    t.idAlmacen = i.almacenRef ' almacen de origen de donde sale la mercaderia
                    t.origenRecaudo = i.destino
                    t.idItem = i.idItem
                    t.descripcion = i.descripcionItem
                    t.tipoExistencia = i.Editable
                    t.tipoCambio = 0
                    t.idUnidad = i.unidad1
                    t.cantidad = i.monto1 * -1
                    t.importeSoles = i.importe * -1
                    t.importeDolares = i.importeUS * -1
                    t.usuarioActualizacion = i.usuarioModificacion
                    t.fechaActualizacion = i.fechaModificacion

                    totalesBL.ActualizarItemsCambioInventario(t)
                Next

                'If (Not IsNothing(objDocumento.documentoGuia)) Then
                '    If objDocumento.documentoGuia.documentoguiaDetalle.Count > 0 Then
                '        guiaBL.InsertGuiaNuevo(objDocumento, objDocumento.idDocumento)
                '    End If
                'End If


                AsientoBL.SavebyGroupDoc(objDocumento)
                HeliosData.SaveChanges()
                ts.Complete()
            End Using
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Public Function UbicarPorProveedorXperiodo(strEmpresa As String, intIdEstablecimiento As Integer, strRuc As String, strPeriodo As String, tipo As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)
        Dim listaTipoSituacion As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        Dim consulta2 = (From n In HeliosData.documentocompra
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                       On n.idDocumento Equals cajadet.documentoAfectado
                       Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                       And n.idProveedor = strRuc And n.fechaContable = strPeriodo And (n.tipoCompra) = tipo
                         Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc,
                       n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                       n.importeUS, n.estadoPago, n.igv01, n.bi01 Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .igv = igv01,
                                      .bio = bi01,
                                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoVenta
            doccompra.fechaContable = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDocumento
            doccompra.monedaDoc = i.moneda
            doccompra.importeTotal = i.ImporteNacional
            doccompra.tcDolLoc = i.tipoCambio
            doccompra.importeUS = i.ImporteExtranjero
            doccompra.estadoPago = i.estadoCobro
            doccompra.bi01 = i.igv
            doccompra.igv01 = i.bio
            objitemsaldoant = docanti.ObtenerPagosAnticipoPorDocumento(i.idDocumento)

            doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault + objitemsaldoant.MontoPagadoSoles
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Public Function UbicarCompraPorProveedorXperiodoAntFull(strEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, tipo As String) As List(Of documentocompra)
        Dim doccompra As New documentocompra
        Dim compraLista As New List(Of documentocompra)
        Dim list As New List(Of String)
        Dim listaTipoSituacion As New List(Of String)

        Dim docanti As New documentoAnticipoDetalleBL
        Dim objitemsaldoant As New documentoAnticipoDetalle

        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_CON_RECEPCION)
        'list.Add(TIPO_COMPRA.COMPRA_DIRECTA_SIN_RECEPCION)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_FISICO)
        listaTipoSituacion.Add(TIPO_SITUACION.ALMACEN_TRANSITO_FISICO)
        'list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_OTORGADO)
        list.Add(TIPO_COMPRA.COMPRA_ANTICIPADA_RECIBIDA)

        Dim consulta2 = (From n In HeliosData.documentocompra
                         Group Join cajadet In HeliosData.documentoCajaDetalle
                       On n.idDocumento Equals cajadet.documentoAfectado
                       Into ords = Group
                         From c In ords.DefaultIfEmpty
                         Where n.idEmpresa = strEmpresa And n.idCentroCosto = intIdEstablecimiento _
                       And n.fechaContable = strPeriodo And n.tipoCompra = tipo
                         Group c By n.idDocumento, n.tipoCompra, n.fechaContable, n.fechaDoc,
                       n.serie, n.numeroDoc, n.tipoDoc, n.monedaDoc, n.importeTotal, n.tcDolLoc,
                       n.importeUS, n.estadoPago, n.bi01, n.igv01 Into g = Group
                         Select New With {
                                      .idDocumento = idDocumento,
                                      .tipoVenta = tipoCompra,
                                      .fechaPeriodo = fechaContable,
                                      .fechaDoc = fechaDoc,
                                      .serie = serie,
                                      .numeroDoc = numeroDoc,
                                      .tipoDocumento = tipoDoc,
                                      .moneda = monedaDoc,
                                      .ImporteNacional = importeTotal,
                                      .tipoCambio = tcDolLoc,
                                      .ImporteExtranjero = importeUS,
                                      .estadoCobro = estadoPago,
                                      .bio = bi01,
                                      .igv = igv01,
                                      .SumaPagoMN = g.Sum(Function(o) o.montoSoles),
                                      .SumaPagoME = g.Sum(Function(o) o.montoUsd)}).OrderBy(Function(o) o.fechaDoc).ToList


        For Each i In consulta2
            doccompra = New documentocompra
            doccompra.idDocumento = i.idDocumento
            doccompra.tipoCompra = i.tipoVenta
            doccompra.fechaContable = i.fechaPeriodo
            doccompra.fechaDoc = i.fechaDoc
            doccompra.serie = i.serie
            doccompra.numeroDoc = i.numeroDoc
            doccompra.tipoDoc = i.tipoDocumento
            doccompra.monedaDoc = i.moneda
            doccompra.importeTotal = i.ImporteNacional
            doccompra.tcDolLoc = i.tipoCambio
            doccompra.importeUS = i.ImporteExtranjero
            doccompra.estadoPago = i.estadoCobro
            doccompra.bi01 = i.bio
            doccompra.igv01 = i.igv
            objitemsaldoant = docanti.ObtenerPagosAnticipoPorDocumento(i.idDocumento)

            doccompra.PagoSumaMN = i.SumaPagoMN.GetValueOrDefault + objitemsaldoant.MontoPagadoSoles
            doccompra.PagoSumaME = i.SumaPagoME.GetValueOrDefault + objitemsaldoant.MontoPagadoUSD
            compraLista.Add(doccompra)
        Next
        Return compraLista
    End Function

    Function ListaTotalXCompraTransito(listaidPersona As List(Of String), fechaInicio As DateTime, fechaFin As DateTime, periodo As String, tipo As String) As List(Of documentocompra)
        Dim lista As New List(Of documentocompra)
        Dim docCompra As New documentocompra

        Dim listaCompra As New List(Of String)
        listaCompra.Add(TIPO_COMPRA.COMPRA)
        listaCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaCompra.Add(TIPO_COMPRA.OTRAS_SALIDAS)
        listaCompra.Add(TIPO_COMPRA.TRANSFERENCIA_ENTRE_ALMACEN)

        Using ts As New TransactionScope
            Select Case tipo
                Case "XTodo"
                    Dim consultaCaja = (From b In HeliosData.documentocompradetalle
                                        Where
                                             listaidPersona.Contains(b.documentocompra.usuarioActualizacion) And
                                               CLng(b.almacenRef) = 6013 And
                                                                                 listaCompra.Contains(b.documentocompra.tipoCompra)
                                        Group New With {b.documentocompra, b} By
                                        IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                        b.documentocompra.codigoLibro,
                                        b.documentocompra.idEmpresa,
                                        IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                        FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                        FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                        FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                        FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                        b.documentocompra.fechaContable,
                                        b.documentocompra.nroConstancia,
                                        b.documentocompra.periodoTributo,
                                        b.documentocompra.tipoDoc,
                                        b.documentocompra.serie,
                                        b.documentocompra.numeroDoc,
                                        IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                        b.documentocompra.idPersona,
                                        b.documentocompra.monedaDoc,
                                        TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                        TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                        Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                        b.documentocompra.tipoRecaudo,
                                        b.documentocompra.regimen,
                                        TasaRegimen = CType(b.documentocompra.tasaRegimen, Decimal?),
                                        b.documentocompra.nroRegimen,
                                        Bi01 = CType(b.documentocompra.bi01, Decimal?),
                                        Bi02 = CType(b.documentocompra.bi02, Decimal?),
                                        Bi03 = CType(b.documentocompra.bi03, Decimal?),
                                        Bi04 = CType(b.documentocompra.bi04, Decimal?),
                                        Isc01 = CType(b.documentocompra.isc01, Decimal?),
                                        Isc02 = CType(b.documentocompra.isc02, Decimal?),
                                        Isc03 = CType(b.documentocompra.isc03, Decimal?),
                                        Igv01 = CType(b.documentocompra.igv01, Decimal?),
                                        Igv02 = CType(b.documentocompra.igv02, Decimal?),
                                        Igv03 = CType(b.documentocompra.igv03, Decimal?),
                                        Otc01 = CType(b.documentocompra.otc01, Decimal?),
                                        Otc02 = CType(b.documentocompra.otc02, Decimal?),
                                        Otc03 = CType(b.documentocompra.otc03, Decimal?),
                                        Otc04 = CType(b.documentocompra.otc04, Decimal?),
                                        Bi01us = CType(b.documentocompra.bi01us, Decimal?),
                                        Bi02us = CType(b.documentocompra.bi02us, Decimal?),
                                        Bi03us = CType(b.documentocompra.bi03us, Decimal?),
                                        Bi04us = CType(b.documentocompra.bi04us, Decimal?),
                                        Isc01us = CType(b.documentocompra.isc01us, Decimal?),
                                        Isc02us = CType(b.documentocompra.isc02us, Decimal?),
                                        Isc03us = CType(b.documentocompra.isc03us, Decimal?),
                                        Igv01us = CType(b.documentocompra.igv01us, Decimal?),
                                        Igv02us = CType(b.documentocompra.igv02us, Decimal?),
                                        Igv03us = CType(b.documentocompra.igv03us, Decimal?),
                                        Otc01us = CType(b.documentocompra.otc01us, Decimal?),
                                        Otc02us = CType(b.documentocompra.otc02us, Decimal?),
                                        Otc03us = CType(b.documentocompra.otc03us, Decimal?),
                                        Otc04us = CType(b.documentocompra.otc04us, Decimal?),
                                        b.importe,
                                        b.importeUS,
                                        b.documentocompra.destino,
                                        b.documentocompra.estadoPago,
                                        b.documentocompra.glosa,
                                        b.documentocompra.referenciaDestino,
                                        SaldoMontoNota = CType(b.documentocompra.saldoMontoNota, Decimal?),
                                        SaldoMontoNotaUSD = CType(b.documentocompra.saldoMontoNotaUSD, Decimal?),
                                        b.documentocompra.tipoCompra,
                                        b.documentocompra.sustentado,
                                        IdPadre = CType(b.documentocompra.idPadre, Int32?),
                                        b.documentocompra.situacion,
                                        b.documentocompra.aprobado,
                                        b.documentocompra.tieneDetraccion,
                                        AsignacionPorcentaje = CType(b.documentocompra.asignacionPorcentaje, Decimal?),
                                        DetraccionPorcentaje = CType(b.documentocompra.detraccionPorcentaje, Decimal?),
                                        b.documentocompra.estadoEntrega,
                                        b.documentocompra.usuarioActualizacion,
                                        FechaActualizacion = CType(b.documentocompra.fechaActualizacion, DateTime?)
                                       Into g = Group
                                        Select
                                          IdDocumento = CType(IdDocumento, Int32?),
                                          codigoLibro,
                                          idEmpresa,
                                          IdCentroCosto = CType(IdCentroCosto, Int32?),
                                          FechaLaboral = CType(FechaLaboral, DateTime?),
                                          FechaDoc = CType(FechaDoc, DateTime?),
                                          FechaVcto = CType(FechaVcto, DateTime?),
                                          FechaConstancia = CType(FechaConstancia, DateTime?),
                                          fechaContable,
                                          nroConstancia,
                                          periodoTributo,
                                          tipoDoc,
                                          serie,
                                          numeroDoc,
                                          IdProveedor = CType(IdProveedor, Int32?),
                                          idPersona,
                                          monedaDoc,
                                          TasaIgv = CType(TasaIgv, Decimal?),
                                          TcDolLoc = CType(TcDolLoc, Decimal?),
                                          Tipocambio = CType(Tipocambio, Decimal?),
                                          tipoRecaudo,
                                          regimen,
                                          TasaRegimen = CType(TasaRegimen, Decimal?),
                                          nroRegimen,
                                          Bi01 = CType(Bi01, Decimal?),
                                          Bi02 = CType(Bi02, Decimal?),
                                          Bi03 = CType(Bi03, Decimal?),
                                          Bi04 = CType(Bi04, Decimal?),
                                          Isc01 = CType(Isc01, Decimal?),
                                          Isc02 = CType(Isc02, Decimal?),
                                          Isc03 = CType(Isc03, Decimal?),
                                          Igv01 = CType(Igv01, Decimal?),
                                          Igv02 = CType(Igv02, Decimal?),
                                          Igv03 = CType(Igv03, Decimal?),
                                          Otc01 = CType(Otc01, Decimal?),
                                          Otc02 = CType(Otc02, Decimal?),
                                          Otc03 = CType(Otc03, Decimal?),
                                          Otc04 = CType(Otc04, Decimal?),
                                          Bi01us = CType(Bi01us, Decimal?),
                                          Bi02us = CType(Bi02us, Decimal?),
                                          Bi03us = CType(Bi03us, Decimal?),
                                          Bi04us = CType(Bi04us, Decimal?),
                                          Isc01us = CType(Isc01us, Decimal?),
                                          Isc02us = CType(Isc02us, Decimal?),
                                          Isc03us = CType(Isc03us, Decimal?),
                                          Igv01us = CType(Igv01us, Decimal?),
                                          Igv02us = CType(Igv02us, Decimal?),
                                          Igv03us = CType(Igv03us, Decimal?),
                                          Otc01us = CType(Otc01us, Decimal?),
                                          Otc02us = CType(Otc02us, Decimal?),
                                          Otc03us = CType(Otc03us, Decimal?),
                                          Otc04us = CType(Otc04us, Decimal?),
                                          importe = CType(g.Sum(Function(p) p.b.importe), Decimal?),
                                          importeUS = CType(g.Sum(Function(p) p.b.importeUS), Decimal?),
                                          destino,
                                          estadoPago,
                                          glosa,
                                          referenciaDestino,
                                          SaldoMontoNota = CType(SaldoMontoNota, Decimal?),
                                          SaldoMontoNotaUSD = CType(SaldoMontoNotaUSD, Decimal?),
                                          tipoCompra,
                                          sustentado,
                                          IdPadre = CType(IdPadre, Int32?),
                                          situacion,
                                          aprobado,
                                          tieneDetraccion,
                                          AsignacionPorcentaje = CType(AsignacionPorcentaje, Decimal?),
                                          DetraccionPorcentaje = CType(DetraccionPorcentaje, Decimal?),
                                          estadoEntrega,
                                          usuarioActualizacion,
                                          FechaActualizacion = CType(FechaActualizacion, DateTime?)).ToList

                    For Each documentocompraBE In consultaCaja
                        docCompra = New documentocompra
                        docCompra.idDocumento = documentocompraBE.IdDocumento
                        docCompra.codigoLibro = documentocompraBE.codigoLibro
                        docCompra.idEmpresa = documentocompraBE.idEmpresa
                        docCompra.idCentroCosto = documentocompraBE.IdCentroCosto
                        docCompra.fechaDoc = documentocompraBE.FechaDoc
                        docCompra.fechaVcto = documentocompraBE.FechaVcto
                        docCompra.fechaContable = documentocompraBE.fechaContable
                        docCompra.fechaConstancia = documentocompraBE.FechaConstancia
                        docCompra.nroConstancia = documentocompraBE.nroConstancia
                        docCompra.tipoDoc = documentocompraBE.tipoDoc
                        docCompra.serie = documentocompraBE.serie
                        docCompra.numeroDoc = documentocompraBE.numeroDoc
                        docCompra.idProveedor = documentocompraBE.IdProveedor
                        docCompra.monedaDoc = documentocompraBE.monedaDoc
                        docCompra.tasaIgv = documentocompraBE.TasaIgv
                        docCompra.tcDolLoc = documentocompraBE.TcDolLoc
                        docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
                        docCompra.regimen = documentocompraBE.regimen
                        docCompra.tasaRegimen = documentocompraBE.TasaRegimen
                        docCompra.nroRegimen = documentocompraBE.nroRegimen
                        docCompra.bi01 = documentocompraBE.Bi01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.bi03 = documentocompraBE.Bi03
                        docCompra.bi04 = documentocompraBE.Bi04
                        docCompra.isc01 = documentocompraBE.Isc01
                        docCompra.isc02 = documentocompraBE.Isc02
                        docCompra.isc03 = documentocompraBE.Isc03
                        docCompra.igv01 = documentocompraBE.Igv01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.igv03 = documentocompraBE.Igv03
                        docCompra.otc01 = documentocompraBE.Bi02
                        docCompra.otc02 = documentocompraBE.Otc02
                        docCompra.otc03 = documentocompraBE.Otc03
                        docCompra.otc04 = documentocompraBE.Otc04
                        docCompra.bi01us = documentocompraBE.Bi01us
                        docCompra.bi02us = documentocompraBE.Bi02us
                        docCompra.bi03us = documentocompraBE.Bi03us
                        docCompra.bi04us = documentocompraBE.Bi04us
                        docCompra.isc01us = documentocompraBE.Isc01us
                        docCompra.isc02us = documentocompraBE.Isc01us
                        docCompra.isc03us = documentocompraBE.Isc03us
                        docCompra.igv01us = documentocompraBE.Igv01us
                        docCompra.igv02us = documentocompraBE.Igv02us
                        docCompra.igv03us = documentocompraBE.Igv03us
                        docCompra.otc01us = documentocompraBE.Otc01us
                        docCompra.otc02us = documentocompraBE.Otc02us
                        docCompra.otc03us = documentocompraBE.Otc03us
                        docCompra.otc04us = documentocompraBE.Otc04us
                        docCompra.importeTotal = documentocompraBE.importe
                        docCompra.importeUS = documentocompraBE.importeUS
                        docCompra.destino = documentocompraBE.destino
                        docCompra.estadoPago = documentocompraBE.estadoPago
                        docCompra.glosa = documentocompraBE.glosa
                        docCompra.referenciaDestino = documentocompraBE.referenciaDestino
                        docCompra.saldoMontoNota = documentocompraBE.SaldoMontoNota
                        docCompra.saldoMontoNotaUSD = documentocompraBE.SaldoMontoNotaUSD
                        docCompra.tipoCompra = documentocompraBE.tipoCompra
                        docCompra.sustentado = documentocompraBE.sustentado
                        docCompra.estadoEntrega = documentocompraBE.estadoEntrega
                        docCompra.situacion = documentocompraBE.situacion
                        docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
                        docCompra.fechaActualizacion = documentocompraBE.FechaActualizacion
                        'docCompra.NomAlmacenDestino = documentocompraBE.almacenRef.GetValueOrDefault
                        lista.Add(docCompra)
                    Next
                Case "XDia"

                    Dim consultaCaja = (From b In HeliosData.documentocompradetalle
                                        Where
                                             CStr(b.documentocompra.fechaDoc) >= fechaInicio And
                                                                                 CStr(b.documentocompra.fechaDoc) <= fechaFin And
                                                                                listaidPersona.Contains(b.documentocompra.usuarioActualizacion) And
                                                                                  CLng(b.almacenRef) = 6013 And
                                                                                 listaCompra.Contains(b.documentocompra.tipoCompra)
                                        Group New With {b.documentocompra, b} By
                                        IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                        b.documentocompra.codigoLibro,
                                        b.documentocompra.idEmpresa,
                                        IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                        FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                        FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                        FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                        FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                        b.documentocompra.fechaContable,
                                        b.documentocompra.nroConstancia,
                                        b.documentocompra.periodoTributo,
                                        b.documentocompra.tipoDoc,
                                        b.documentocompra.serie,
                                        b.documentocompra.numeroDoc,
                                        IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                        b.documentocompra.idPersona,
                                        b.documentocompra.monedaDoc,
                                        TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                        TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                        Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                        b.documentocompra.tipoRecaudo,
                                        b.documentocompra.regimen,
                                        TasaRegimen = CType(b.documentocompra.tasaRegimen, Decimal?),
                                        b.documentocompra.nroRegimen,
                                        Bi01 = CType(b.documentocompra.bi01, Decimal?),
                                        Bi02 = CType(b.documentocompra.bi02, Decimal?),
                                        Bi03 = CType(b.documentocompra.bi03, Decimal?),
                                        Bi04 = CType(b.documentocompra.bi04, Decimal?),
                                        Isc01 = CType(b.documentocompra.isc01, Decimal?),
                                        Isc02 = CType(b.documentocompra.isc02, Decimal?),
                                        Isc03 = CType(b.documentocompra.isc03, Decimal?),
                                        Igv01 = CType(b.documentocompra.igv01, Decimal?),
                                        Igv02 = CType(b.documentocompra.igv02, Decimal?),
                                        Igv03 = CType(b.documentocompra.igv03, Decimal?),
                                        Otc01 = CType(b.documentocompra.otc01, Decimal?),
                                        Otc02 = CType(b.documentocompra.otc02, Decimal?),
                                        Otc03 = CType(b.documentocompra.otc03, Decimal?),
                                        Otc04 = CType(b.documentocompra.otc04, Decimal?),
                                        Bi01us = CType(b.documentocompra.bi01us, Decimal?),
                                        Bi02us = CType(b.documentocompra.bi02us, Decimal?),
                                        Bi03us = CType(b.documentocompra.bi03us, Decimal?),
                                        Bi04us = CType(b.documentocompra.bi04us, Decimal?),
                                        Isc01us = CType(b.documentocompra.isc01us, Decimal?),
                                        Isc02us = CType(b.documentocompra.isc02us, Decimal?),
                                        Isc03us = CType(b.documentocompra.isc03us, Decimal?),
                                        Igv01us = CType(b.documentocompra.igv01us, Decimal?),
                                        Igv02us = CType(b.documentocompra.igv02us, Decimal?),
                                        Igv03us = CType(b.documentocompra.igv03us, Decimal?),
                                        Otc01us = CType(b.documentocompra.otc01us, Decimal?),
                                        Otc02us = CType(b.documentocompra.otc02us, Decimal?),
                                        Otc03us = CType(b.documentocompra.otc03us, Decimal?),
                                        Otc04us = CType(b.documentocompra.otc04us, Decimal?),
                                        b.importe,
                                        b.importeUS,
                                        b.documentocompra.destino,
                                        b.documentocompra.estadoPago,
                                        b.documentocompra.glosa,
                                        b.documentocompra.referenciaDestino,
                                        SaldoMontoNota = CType(b.documentocompra.saldoMontoNota, Decimal?),
                                        SaldoMontoNotaUSD = CType(b.documentocompra.saldoMontoNotaUSD, Decimal?),
                                        b.documentocompra.tipoCompra,
                                        b.documentocompra.sustentado,
                                        IdPadre = CType(b.documentocompra.idPadre, Int32?),
                                        b.documentocompra.situacion,
                                        b.documentocompra.aprobado,
                                        b.documentocompra.tieneDetraccion,
                                        AsignacionPorcentaje = CType(b.documentocompra.asignacionPorcentaje, Decimal?),
                                        DetraccionPorcentaje = CType(b.documentocompra.detraccionPorcentaje, Decimal?),
                                        b.documentocompra.estadoEntrega,
                                        b.documentocompra.usuarioActualizacion,
                                        FechaActualizacion = CType(b.documentocompra.fechaActualizacion, DateTime?)
                                       Into g = Group
                                        Select
                                         IdDocumento = CType(IdDocumento, Int32?),
                                         codigoLibro,
                                         idEmpresa,
                                         IdCentroCosto = CType(IdCentroCosto, Int32?),
                                         FechaLaboral = CType(FechaLaboral, DateTime?),
                                         FechaDoc = CType(FechaDoc, DateTime?),
                                         FechaVcto = CType(FechaVcto, DateTime?),
                                         FechaConstancia = CType(FechaConstancia, DateTime?),
                                         fechaContable,
                                         nroConstancia,
                                         periodoTributo,
                                         tipoDoc,
                                         serie,
                                         numeroDoc,
                                         IdProveedor = CType(IdProveedor, Int32?),
                                         idPersona,
                                         monedaDoc,
                                         TasaIgv = CType(TasaIgv, Decimal?),
                                         TcDolLoc = CType(TcDolLoc, Decimal?),
                                         Tipocambio = CType(Tipocambio, Decimal?),
                                         tipoRecaudo,
                                         regimen,
                                         TasaRegimen = CType(TasaRegimen, Decimal?),
                                         nroRegimen,
                                         Bi01 = CType(Bi01, Decimal?),
                                         Bi02 = CType(Bi02, Decimal?),
                                         Bi03 = CType(Bi03, Decimal?),
                                         Bi04 = CType(Bi04, Decimal?),
                                         Isc01 = CType(Isc01, Decimal?),
                                         Isc02 = CType(Isc02, Decimal?),
                                         Isc03 = CType(Isc03, Decimal?),
                                         Igv01 = CType(Igv01, Decimal?),
                                         Igv02 = CType(Igv02, Decimal?),
                                         Igv03 = CType(Igv03, Decimal?),
                                         Otc01 = CType(Otc01, Decimal?),
                                         Otc02 = CType(Otc02, Decimal?),
                                         Otc03 = CType(Otc03, Decimal?),
                                         Otc04 = CType(Otc04, Decimal?),
                                         Bi01us = CType(Bi01us, Decimal?),
                                         Bi02us = CType(Bi02us, Decimal?),
                                         Bi03us = CType(Bi03us, Decimal?),
                                         Bi04us = CType(Bi04us, Decimal?),
                                         Isc01us = CType(Isc01us, Decimal?),
                                         Isc02us = CType(Isc02us, Decimal?),
                                         Isc03us = CType(Isc03us, Decimal?),
                                         Igv01us = CType(Igv01us, Decimal?),
                                         Igv02us = CType(Igv02us, Decimal?),
                                         Igv03us = CType(Igv03us, Decimal?),
                                         Otc01us = CType(Otc01us, Decimal?),
                                         Otc02us = CType(Otc02us, Decimal?),
                                         Otc03us = CType(Otc03us, Decimal?),
                                         Otc04us = CType(Otc04us, Decimal?),
                                         importe = CType(g.Sum(Function(p) p.b.importe), Decimal?),
                                         importeUS = CType(g.Sum(Function(p) p.b.importeUS), Decimal?),
                                         destino,
                                         estadoPago,
                                         glosa,
                                         referenciaDestino,
                                         SaldoMontoNota = CType(SaldoMontoNota, Decimal?),
                                         SaldoMontoNotaUSD = CType(SaldoMontoNotaUSD, Decimal?),
                                         tipoCompra,
                                         sustentado,
                                         IdPadre = CType(IdPadre, Int32?),
                                         situacion,
                                         aprobado,
                                         tieneDetraccion,
                                         AsignacionPorcentaje = CType(AsignacionPorcentaje, Decimal?),
                                         DetraccionPorcentaje = CType(DetraccionPorcentaje, Decimal?),
                                         estadoEntrega,
                                         usuarioActualizacion,
                                         FechaActualizacion = CType(FechaActualizacion, DateTime?)).ToList


                    For Each documentocompraBE In consultaCaja
                        docCompra = New documentocompra
                        docCompra.idDocumento = documentocompraBE.IdDocumento
                        docCompra.codigoLibro = documentocompraBE.codigoLibro
                        docCompra.idEmpresa = documentocompraBE.idEmpresa
                        docCompra.idCentroCosto = documentocompraBE.IdCentroCosto
                        docCompra.fechaDoc = documentocompraBE.FechaDoc
                        docCompra.fechaVcto = documentocompraBE.FechaVcto
                        docCompra.fechaContable = documentocompraBE.fechaContable
                        docCompra.fechaConstancia = documentocompraBE.FechaConstancia
                        docCompra.nroConstancia = documentocompraBE.nroConstancia
                        docCompra.tipoDoc = documentocompraBE.tipoDoc
                        docCompra.serie = documentocompraBE.serie
                        docCompra.numeroDoc = documentocompraBE.numeroDoc
                        docCompra.idProveedor = documentocompraBE.IdProveedor
                        docCompra.monedaDoc = documentocompraBE.monedaDoc
                        docCompra.tasaIgv = documentocompraBE.TasaIgv
                        docCompra.tcDolLoc = documentocompraBE.TcDolLoc
                        docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
                        docCompra.regimen = documentocompraBE.regimen
                        docCompra.tasaRegimen = documentocompraBE.TasaRegimen
                        docCompra.nroRegimen = documentocompraBE.nroRegimen
                        docCompra.bi01 = documentocompraBE.Bi01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.bi03 = documentocompraBE.Bi03
                        docCompra.bi04 = documentocompraBE.Bi04
                        docCompra.isc01 = documentocompraBE.Isc01
                        docCompra.isc02 = documentocompraBE.Isc02
                        docCompra.isc03 = documentocompraBE.Isc03
                        docCompra.igv01 = documentocompraBE.Igv01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.igv03 = documentocompraBE.Igv03
                        docCompra.otc01 = documentocompraBE.Bi02
                        docCompra.otc02 = documentocompraBE.Otc02
                        docCompra.otc03 = documentocompraBE.Otc03
                        docCompra.otc04 = documentocompraBE.Otc04
                        docCompra.bi01us = documentocompraBE.Bi01us
                        docCompra.bi02us = documentocompraBE.Bi02us
                        docCompra.bi03us = documentocompraBE.Bi03us
                        docCompra.bi04us = documentocompraBE.Bi04us
                        docCompra.isc01us = documentocompraBE.Isc01us
                        docCompra.isc02us = documentocompraBE.Isc01us
                        docCompra.isc03us = documentocompraBE.Isc03us
                        docCompra.igv01us = documentocompraBE.Igv01us
                        docCompra.igv02us = documentocompraBE.Igv02us
                        docCompra.igv03us = documentocompraBE.Igv03us
                        docCompra.otc01us = documentocompraBE.Otc01us
                        docCompra.otc02us = documentocompraBE.Otc02us
                        docCompra.otc03us = documentocompraBE.Otc03us
                        docCompra.otc04us = documentocompraBE.Otc04us
                        docCompra.importeTotal = documentocompraBE.importe
                        docCompra.importeUS = documentocompraBE.importeUS
                        docCompra.destino = documentocompraBE.destino
                        docCompra.estadoPago = documentocompraBE.estadoPago
                        docCompra.glosa = documentocompraBE.glosa
                        docCompra.referenciaDestino = documentocompraBE.referenciaDestino
                        docCompra.saldoMontoNota = documentocompraBE.SaldoMontoNota
                        docCompra.saldoMontoNotaUSD = documentocompraBE.SaldoMontoNotaUSD
                        docCompra.tipoCompra = documentocompraBE.tipoCompra
                        docCompra.sustentado = documentocompraBE.sustentado
                        docCompra.situacion = documentocompraBE.situacion
                        docCompra.estadoEntrega = documentocompraBE.estadoEntrega
                        docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
                        docCompra.fechaActualizacion = documentocompraBE.FechaActualizacion
                        'docCompra.NomAlmacenDestino = documentocompraBE.almacenRef.GetValueOrDefault
                        lista.Add(docCompra)
                    Next
                Case "XPeriodo"

                    Dim consultaCaja = (From b In HeliosData.documentocompradetalle
                                        Where
                                             b.documentocompra.fechaContable = periodo And
                                                                               listaidPersona.Contains(b.documentocompra.usuarioActualizacion) And
                                                                                 CLng(b.almacenRef) = 6013 And
                                                                                 listaCompra.Contains(b.documentocompra.tipoCompra)
                                        Group New With {b.documentocompra, b} By
                                        IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                        b.documentocompra.codigoLibro,
                                        b.documentocompra.idEmpresa,
                                        IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                        FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                        FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                        FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                        FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                        b.documentocompra.fechaContable,
                                        b.documentocompra.nroConstancia,
                                        b.documentocompra.periodoTributo,
                                        b.documentocompra.tipoDoc,
                                        b.documentocompra.serie,
                                        b.documentocompra.numeroDoc,
                                        IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                        b.documentocompra.idPersona,
                                        b.documentocompra.monedaDoc,
                                        TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                        TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                        Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                        b.documentocompra.tipoRecaudo,
                                        b.documentocompra.regimen,
                                        TasaRegimen = CType(b.documentocompra.tasaRegimen, Decimal?),
                                        b.documentocompra.nroRegimen,
                                        Bi01 = CType(b.documentocompra.bi01, Decimal?),
                                        Bi02 = CType(b.documentocompra.bi02, Decimal?),
                                        Bi03 = CType(b.documentocompra.bi03, Decimal?),
                                        Bi04 = CType(b.documentocompra.bi04, Decimal?),
                                        Isc01 = CType(b.documentocompra.isc01, Decimal?),
                                        Isc02 = CType(b.documentocompra.isc02, Decimal?),
                                        Isc03 = CType(b.documentocompra.isc03, Decimal?),
                                        Igv01 = CType(b.documentocompra.igv01, Decimal?),
                                        Igv02 = CType(b.documentocompra.igv02, Decimal?),
                                        Igv03 = CType(b.documentocompra.igv03, Decimal?),
                                        Otc01 = CType(b.documentocompra.otc01, Decimal?),
                                        Otc02 = CType(b.documentocompra.otc02, Decimal?),
                                        Otc03 = CType(b.documentocompra.otc03, Decimal?),
                                        Otc04 = CType(b.documentocompra.otc04, Decimal?),
                                        Bi01us = CType(b.documentocompra.bi01us, Decimal?),
                                        Bi02us = CType(b.documentocompra.bi02us, Decimal?),
                                        Bi03us = CType(b.documentocompra.bi03us, Decimal?),
                                        Bi04us = CType(b.documentocompra.bi04us, Decimal?),
                                        Isc01us = CType(b.documentocompra.isc01us, Decimal?),
                                        Isc02us = CType(b.documentocompra.isc02us, Decimal?),
                                        Isc03us = CType(b.documentocompra.isc03us, Decimal?),
                                        Igv01us = CType(b.documentocompra.igv01us, Decimal?),
                                        Igv02us = CType(b.documentocompra.igv02us, Decimal?),
                                        Igv03us = CType(b.documentocompra.igv03us, Decimal?),
                                        Otc01us = CType(b.documentocompra.otc01us, Decimal?),
                                        Otc02us = CType(b.documentocompra.otc02us, Decimal?),
                                        Otc03us = CType(b.documentocompra.otc03us, Decimal?),
                                        Otc04us = CType(b.documentocompra.otc04us, Decimal?),
                                        b.importe,
                                        b.importeUS,
                                        b.documentocompra.destino,
                                        b.documentocompra.estadoPago,
                                        b.documentocompra.glosa,
                                        b.documentocompra.referenciaDestino,
                                        SaldoMontoNota = CType(b.documentocompra.saldoMontoNota, Decimal?),
                                        SaldoMontoNotaUSD = CType(b.documentocompra.saldoMontoNotaUSD, Decimal?),
                                        b.documentocompra.tipoCompra,
                                        b.documentocompra.sustentado,
                                        IdPadre = CType(b.documentocompra.idPadre, Int32?),
                                        b.documentocompra.situacion,
                                        b.documentocompra.aprobado,
                                        b.documentocompra.tieneDetraccion,
                                        AsignacionPorcentaje = CType(b.documentocompra.asignacionPorcentaje, Decimal?),
                                        DetraccionPorcentaje = CType(b.documentocompra.detraccionPorcentaje, Decimal?),
                                        b.documentocompra.estadoEntrega,
                                        b.documentocompra.usuarioActualizacion,
                                        FechaActualizacion = CType(b.documentocompra.fechaActualizacion, DateTime?)
                                        Into g = Group
                                        Select
                                        IdDocumento = CType(IdDocumento, Int32?),
                                        codigoLibro,
                                        idEmpresa,
                                        IdCentroCosto = CType(IdCentroCosto, Int32?),
                                        FechaLaboral = CType(FechaLaboral, DateTime?),
                                        FechaDoc = CType(FechaDoc, DateTime?),
                                        FechaVcto = CType(FechaVcto, DateTime?),
                                        FechaConstancia = CType(FechaConstancia, DateTime?),
                                        fechaContable,
                                        nroConstancia,
                                        periodoTributo,
                                        tipoDoc,
                                        serie,
                                        numeroDoc,
                                        IdProveedor = CType(IdProveedor, Int32?),
                                        idPersona,
                                        monedaDoc,
                                        TasaIgv = CType(TasaIgv, Decimal?),
                                        TcDolLoc = CType(TcDolLoc, Decimal?),
                                        Tipocambio = CType(Tipocambio, Decimal?),
                                        tipoRecaudo,
                                        regimen,
                                        TasaRegimen = CType(TasaRegimen, Decimal?),
                                        nroRegimen,
                                        Bi01 = CType(Bi01, Decimal?),
                                        Bi02 = CType(Bi02, Decimal?),
                                        Bi03 = CType(Bi03, Decimal?),
                                        Bi04 = CType(Bi04, Decimal?),
                                        Isc01 = CType(Isc01, Decimal?),
                                        Isc02 = CType(Isc02, Decimal?),
                                        Isc03 = CType(Isc03, Decimal?),
                                        Igv01 = CType(Igv01, Decimal?),
                                        Igv02 = CType(Igv02, Decimal?),
                                        Igv03 = CType(Igv03, Decimal?),
                                        Otc01 = CType(Otc01, Decimal?),
                                        Otc02 = CType(Otc02, Decimal?),
                                        Otc03 = CType(Otc03, Decimal?),
                                        Otc04 = CType(Otc04, Decimal?),
                                        Bi01us = CType(Bi01us, Decimal?),
                                        Bi02us = CType(Bi02us, Decimal?),
                                        Bi03us = CType(Bi03us, Decimal?),
                                        Bi04us = CType(Bi04us, Decimal?),
                                        Isc01us = CType(Isc01us, Decimal?),
                                        Isc02us = CType(Isc02us, Decimal?),
                                        Isc03us = CType(Isc03us, Decimal?),
                                        Igv01us = CType(Igv01us, Decimal?),
                                        Igv02us = CType(Igv02us, Decimal?),
                                        Igv03us = CType(Igv03us, Decimal?),
                                        Otc01us = CType(Otc01us, Decimal?),
                                        Otc02us = CType(Otc02us, Decimal?),
                                        Otc03us = CType(Otc03us, Decimal?),
                                        Otc04us = CType(Otc04us, Decimal?),
                                        importe = CType(g.Sum(Function(p) p.b.importe), Decimal?),
                                        importeUS = CType(g.Sum(Function(p) p.b.importeUS), Decimal?),
                                        destino,
                                        estadoPago,
                                        glosa,
                                        referenciaDestino,
                                        SaldoMontoNota = CType(SaldoMontoNota, Decimal?),
                                        SaldoMontoNotaUSD = CType(SaldoMontoNotaUSD, Decimal?),
                                        tipoCompra,
                                        sustentado,
                                        IdPadre = CType(IdPadre, Int32?),
                                        situacion,
                                        aprobado,
                                        tieneDetraccion,
                                        AsignacionPorcentaje = CType(AsignacionPorcentaje, Decimal?),
                                        DetraccionPorcentaje = CType(DetraccionPorcentaje, Decimal?),
                                        estadoEntrega,
                                        usuarioActualizacion,
                                        FechaActualizacion = CType(FechaActualizacion, DateTime?)).ToList


                    For Each documentocompraBE In consultaCaja
                        docCompra = New documentocompra
                        docCompra.idDocumento = documentocompraBE.IdDocumento
                        docCompra.codigoLibro = documentocompraBE.codigoLibro
                        docCompra.idEmpresa = documentocompraBE.idEmpresa
                        docCompra.idCentroCosto = documentocompraBE.IdCentroCosto
                        docCompra.fechaDoc = documentocompraBE.FechaDoc
                        docCompra.fechaVcto = documentocompraBE.FechaVcto
                        docCompra.fechaContable = documentocompraBE.fechaContable
                        docCompra.fechaConstancia = documentocompraBE.FechaConstancia
                        docCompra.nroConstancia = documentocompraBE.nroConstancia
                        docCompra.tipoDoc = documentocompraBE.tipoDoc
                        docCompra.serie = documentocompraBE.serie
                        docCompra.numeroDoc = documentocompraBE.numeroDoc
                        docCompra.idProveedor = documentocompraBE.IdProveedor
                        docCompra.monedaDoc = documentocompraBE.monedaDoc
                        docCompra.tasaIgv = documentocompraBE.TasaIgv
                        docCompra.tcDolLoc = documentocompraBE.TcDolLoc
                        docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
                        docCompra.regimen = documentocompraBE.regimen
                        docCompra.tasaRegimen = documentocompraBE.TasaRegimen
                        docCompra.nroRegimen = documentocompraBE.nroRegimen
                        docCompra.bi01 = documentocompraBE.Bi01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.bi03 = documentocompraBE.Bi03
                        docCompra.bi04 = documentocompraBE.Bi04
                        docCompra.isc01 = documentocompraBE.Isc01
                        docCompra.isc02 = documentocompraBE.Isc02
                        docCompra.isc03 = documentocompraBE.Isc03
                        docCompra.igv01 = documentocompraBE.Igv01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.igv03 = documentocompraBE.Igv03
                        docCompra.otc01 = documentocompraBE.Bi02
                        docCompra.otc02 = documentocompraBE.Otc02
                        docCompra.otc03 = documentocompraBE.Otc03
                        docCompra.otc04 = documentocompraBE.Otc04
                        docCompra.bi01us = documentocompraBE.Bi01us
                        docCompra.bi02us = documentocompraBE.Bi02us
                        docCompra.bi03us = documentocompraBE.Bi03us
                        docCompra.bi04us = documentocompraBE.Bi04us
                        docCompra.isc01us = documentocompraBE.Isc01us
                        docCompra.isc02us = documentocompraBE.Isc01us
                        docCompra.isc03us = documentocompraBE.Isc03us
                        docCompra.igv01us = documentocompraBE.Igv01us
                        docCompra.igv02us = documentocompraBE.Igv02us
                        docCompra.igv03us = documentocompraBE.Igv03us
                        docCompra.otc01us = documentocompraBE.Otc01us
                        docCompra.otc02us = documentocompraBE.Otc02us
                        docCompra.otc03us = documentocompraBE.Otc03us
                        docCompra.otc04us = documentocompraBE.Otc04us
                        docCompra.importeTotal = documentocompraBE.importe
                        docCompra.importeUS = documentocompraBE.importeUS
                        docCompra.destino = documentocompraBE.destino
                        docCompra.estadoPago = documentocompraBE.estadoPago
                        docCompra.glosa = documentocompraBE.glosa
                        docCompra.referenciaDestino = documentocompraBE.referenciaDestino
                        docCompra.saldoMontoNota = documentocompraBE.SaldoMontoNota
                        docCompra.saldoMontoNotaUSD = documentocompraBE.SaldoMontoNotaUSD
                        docCompra.tipoCompra = documentocompraBE.tipoCompra
                        docCompra.sustentado = documentocompraBE.sustentado
                        docCompra.situacion = documentocompraBE.situacion
                        docCompra.estadoEntrega = documentocompraBE.estadoEntrega
                        docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
                        docCompra.fechaActualizacion = documentocompraBE.FechaActualizacion
                        'docCompra.NomAlmacenDestino = documentocompraBE.almacenRef.GetValueOrDefault
                        lista.Add(docCompra)
                    Next

                    For Each documentocompraBE In consultaCaja
                        docCompra = New documentocompra
                        docCompra.idDocumento = documentocompraBE.IdDocumento
                        docCompra.codigoLibro = documentocompraBE.codigoLibro
                        docCompra.idEmpresa = documentocompraBE.idEmpresa
                        docCompra.idCentroCosto = documentocompraBE.IdCentroCosto
                        docCompra.fechaDoc = documentocompraBE.FechaDoc
                        docCompra.fechaVcto = documentocompraBE.FechaVcto
                        docCompra.fechaContable = documentocompraBE.fechaContable
                        docCompra.fechaConstancia = documentocompraBE.FechaConstancia
                        docCompra.nroConstancia = documentocompraBE.nroConstancia
                        docCompra.tipoDoc = documentocompraBE.tipoDoc
                        docCompra.serie = documentocompraBE.serie
                        docCompra.numeroDoc = documentocompraBE.numeroDoc
                        docCompra.idProveedor = documentocompraBE.IdProveedor
                        docCompra.monedaDoc = documentocompraBE.monedaDoc
                        docCompra.tasaIgv = documentocompraBE.TasaIgv
                        docCompra.tcDolLoc = documentocompraBE.TcDolLoc
                        docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
                        docCompra.regimen = documentocompraBE.regimen
                        docCompra.tasaRegimen = documentocompraBE.TasaRegimen
                        docCompra.nroRegimen = documentocompraBE.nroRegimen
                        docCompra.bi01 = documentocompraBE.Bi01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.bi03 = documentocompraBE.Bi03
                        docCompra.bi04 = documentocompraBE.Bi04
                        docCompra.isc01 = documentocompraBE.Isc01
                        docCompra.isc02 = documentocompraBE.Isc02
                        docCompra.isc03 = documentocompraBE.Isc03
                        docCompra.igv01 = documentocompraBE.Igv01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.igv03 = documentocompraBE.Igv03
                        docCompra.otc01 = documentocompraBE.Bi02
                        docCompra.otc02 = documentocompraBE.Otc02
                        docCompra.otc03 = documentocompraBE.Otc03
                        docCompra.otc04 = documentocompraBE.Otc04
                        docCompra.bi01us = documentocompraBE.Bi01us
                        docCompra.bi02us = documentocompraBE.Bi02us
                        docCompra.bi03us = documentocompraBE.Bi03us
                        docCompra.bi04us = documentocompraBE.Bi04us
                        docCompra.isc01us = documentocompraBE.Isc01us
                        docCompra.isc02us = documentocompraBE.Isc01us
                        docCompra.isc03us = documentocompraBE.Isc03us
                        docCompra.igv01us = documentocompraBE.Igv01us
                        docCompra.igv02us = documentocompraBE.Igv02us
                        docCompra.igv03us = documentocompraBE.Igv03us
                        docCompra.otc01us = documentocompraBE.Otc01us
                        docCompra.otc02us = documentocompraBE.Otc02us
                        docCompra.otc03us = documentocompraBE.Otc03us
                        docCompra.otc04us = documentocompraBE.Otc04us
                        docCompra.importeTotal = documentocompraBE.importe
                        docCompra.importeUS = documentocompraBE.importeUS
                        docCompra.destino = documentocompraBE.destino
                        docCompra.estadoPago = documentocompraBE.estadoPago
                        docCompra.glosa = documentocompraBE.glosa
                        docCompra.referenciaDestino = documentocompraBE.referenciaDestino
                        docCompra.saldoMontoNota = documentocompraBE.SaldoMontoNota
                        docCompra.saldoMontoNotaUSD = documentocompraBE.SaldoMontoNotaUSD
                        docCompra.tipoCompra = documentocompraBE.tipoCompra
                        docCompra.sustentado = documentocompraBE.sustentado
                        docCompra.estadoEntrega = documentocompraBE.estadoEntrega
                        docCompra.situacion = documentocompraBE.situacion
                        docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
                        docCompra.fechaActualizacion = documentocompraBE.FechaActualizacion
                        'docCompra.NomAlmacenDestino = documentocompraBE.almacenRef.GetValueOrDefault
                        lista.Add(docCompra)
                    Next
            End Select



            Return lista

            'HeliosData.SaveChanges()
            'ts.Complete()
        End Using
    End Function

    Function ListaTotalXCompra(listaidPersona As List(Of String), fechaInicio As DateTime, fechaFin As DateTime, periodo As String, tipo As String) As List(Of documentocompra)
        Dim lista As New List(Of documentocompra)
        Dim docCompra As New documentocompra

        Dim listaCompra As New List(Of String)
        listaCompra.Add(TIPO_COMPRA.COMPRA)
        listaCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaCompra.Add(TIPO_COMPRA.OTRAS_SALIDAS)
        listaCompra.Add(TIPO_COMPRA.TRANSFERENCIA_ENTRE_ALMACEN)

        Using ts As New TransactionScope
            Select Case tipo
                Case "XTodo"
                    Dim consultaCaja = (From b In HeliosData.documentocompradetalle
                                        Where
                                             listaidPersona.Contains(b.documentocompra.usuarioActualizacion) And
                                                                                 listaCompra.Contains(b.documentocompra.tipoCompra)
                                        Group New With {b.documentocompra, b} By
                                        IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                        b.documentocompra.codigoLibro,
                                        b.documentocompra.idEmpresa,
                                        IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                        FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                        FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                        FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                        FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                        b.documentocompra.fechaContable,
                                        b.documentocompra.nroConstancia,
                                        b.documentocompra.periodoTributo,
                                        b.documentocompra.tipoDoc,
                                        b.documentocompra.serie,
                                        b.documentocompra.numeroDoc,
                                        IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                        b.documentocompra.idPersona,
                                        b.documentocompra.monedaDoc,
                                        TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                        TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                        Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                        b.documentocompra.tipoRecaudo,
                                        b.documentocompra.regimen,
                                        TasaRegimen = CType(b.documentocompra.tasaRegimen, Decimal?),
                                        b.documentocompra.nroRegimen,
                                        Bi01 = CType(b.documentocompra.bi01, Decimal?),
                                        Bi02 = CType(b.documentocompra.bi02, Decimal?),
                                        Bi03 = CType(b.documentocompra.bi03, Decimal?),
                                        Bi04 = CType(b.documentocompra.bi04, Decimal?),
                                        Isc01 = CType(b.documentocompra.isc01, Decimal?),
                                        Isc02 = CType(b.documentocompra.isc02, Decimal?),
                                        Isc03 = CType(b.documentocompra.isc03, Decimal?),
                                        Igv01 = CType(b.documentocompra.igv01, Decimal?),
                                        Igv02 = CType(b.documentocompra.igv02, Decimal?),
                                        Igv03 = CType(b.documentocompra.igv03, Decimal?),
                                        Otc01 = CType(b.documentocompra.otc01, Decimal?),
                                        Otc02 = CType(b.documentocompra.otc02, Decimal?),
                                        Otc03 = CType(b.documentocompra.otc03, Decimal?),
                                        Otc04 = CType(b.documentocompra.otc04, Decimal?),
                                        Bi01us = CType(b.documentocompra.bi01us, Decimal?),
                                        Bi02us = CType(b.documentocompra.bi02us, Decimal?),
                                        Bi03us = CType(b.documentocompra.bi03us, Decimal?),
                                        Bi04us = CType(b.documentocompra.bi04us, Decimal?),
                                        Isc01us = CType(b.documentocompra.isc01us, Decimal?),
                                        Isc02us = CType(b.documentocompra.isc02us, Decimal?),
                                        Isc03us = CType(b.documentocompra.isc03us, Decimal?),
                                        Igv01us = CType(b.documentocompra.igv01us, Decimal?),
                                        Igv02us = CType(b.documentocompra.igv02us, Decimal?),
                                        Igv03us = CType(b.documentocompra.igv03us, Decimal?),
                                        Otc01us = CType(b.documentocompra.otc01us, Decimal?),
                                        Otc02us = CType(b.documentocompra.otc02us, Decimal?),
                                        Otc03us = CType(b.documentocompra.otc03us, Decimal?),
                                        Otc04us = CType(b.documentocompra.otc04us, Decimal?),
                                        b.importe,
                                        b.importeUS,
                                        b.documentocompra.destino,
                                        b.documentocompra.estadoPago,
                                        b.documentocompra.glosa,
                                        b.documentocompra.referenciaDestino,
                                        SaldoMontoNota = CType(b.documentocompra.saldoMontoNota, Decimal?),
                                        SaldoMontoNotaUSD = CType(b.documentocompra.saldoMontoNotaUSD, Decimal?),
                                        b.documentocompra.tipoCompra,
                                        b.documentocompra.sustentado,
                                        IdPadre = CType(b.documentocompra.idPadre, Int32?),
                                        b.documentocompra.situacion,
                                        b.documentocompra.aprobado,
                                        b.documentocompra.tieneDetraccion,
                                        AsignacionPorcentaje = CType(b.documentocompra.asignacionPorcentaje, Decimal?),
                                        DetraccionPorcentaje = CType(b.documentocompra.detraccionPorcentaje, Decimal?),
                                        b.documentocompra.estadoEntrega,
                                        b.documentocompra.usuarioActualizacion,
                                        FechaActualizacion = CType(b.documentocompra.fechaActualizacion, DateTime?)
                                       Into g = Group
                                        Select
                                          IdDocumento = CType(IdDocumento, Int32?),
                                          codigoLibro,
                                          idEmpresa,
                                          IdCentroCosto = CType(IdCentroCosto, Int32?),
                                          FechaLaboral = CType(FechaLaboral, DateTime?),
                                          FechaDoc = CType(FechaDoc, DateTime?),
                                          FechaVcto = CType(FechaVcto, DateTime?),
                                          FechaConstancia = CType(FechaConstancia, DateTime?),
                                          fechaContable,
                                          nroConstancia,
                                          periodoTributo,
                                          tipoDoc,
                                          serie,
                                          numeroDoc,
                                          IdProveedor = CType(IdProveedor, Int32?),
                                          idPersona,
                                          monedaDoc,
                                          TasaIgv = CType(TasaIgv, Decimal?),
                                          TcDolLoc = CType(TcDolLoc, Decimal?),
                                          Tipocambio = CType(Tipocambio, Decimal?),
                                          tipoRecaudo,
                                          regimen,
                                          TasaRegimen = CType(TasaRegimen, Decimal?),
                                          nroRegimen,
                                          Bi01 = CType(Bi01, Decimal?),
                                          Bi02 = CType(Bi02, Decimal?),
                                          Bi03 = CType(Bi03, Decimal?),
                                          Bi04 = CType(Bi04, Decimal?),
                                          Isc01 = CType(Isc01, Decimal?),
                                          Isc02 = CType(Isc02, Decimal?),
                                          Isc03 = CType(Isc03, Decimal?),
                                          Igv01 = CType(Igv01, Decimal?),
                                          Igv02 = CType(Igv02, Decimal?),
                                          Igv03 = CType(Igv03, Decimal?),
                                          Otc01 = CType(Otc01, Decimal?),
                                          Otc02 = CType(Otc02, Decimal?),
                                          Otc03 = CType(Otc03, Decimal?),
                                          Otc04 = CType(Otc04, Decimal?),
                                          Bi01us = CType(Bi01us, Decimal?),
                                          Bi02us = CType(Bi02us, Decimal?),
                                          Bi03us = CType(Bi03us, Decimal?),
                                          Bi04us = CType(Bi04us, Decimal?),
                                          Isc01us = CType(Isc01us, Decimal?),
                                          Isc02us = CType(Isc02us, Decimal?),
                                          Isc03us = CType(Isc03us, Decimal?),
                                          Igv01us = CType(Igv01us, Decimal?),
                                          Igv02us = CType(Igv02us, Decimal?),
                                          Igv03us = CType(Igv03us, Decimal?),
                                          Otc01us = CType(Otc01us, Decimal?),
                                          Otc02us = CType(Otc02us, Decimal?),
                                          Otc03us = CType(Otc03us, Decimal?),
                                          Otc04us = CType(Otc04us, Decimal?),
                                          importe = CType(g.Sum(Function(p) p.b.importe), Decimal?),
                                          importeUS = CType(g.Sum(Function(p) p.b.importeUS), Decimal?),
                                          destino,
                                          estadoPago,
                                          glosa,
                                          referenciaDestino,
                                          SaldoMontoNota = CType(SaldoMontoNota, Decimal?),
                                          SaldoMontoNotaUSD = CType(SaldoMontoNotaUSD, Decimal?),
                                          tipoCompra,
                                          sustentado,
                                          IdPadre = CType(IdPadre, Int32?),
                                          situacion,
                                          aprobado,
                                          tieneDetraccion,
                                          AsignacionPorcentaje = CType(AsignacionPorcentaje, Decimal?),
                                          DetraccionPorcentaje = CType(DetraccionPorcentaje, Decimal?),
                                          estadoEntrega,
                                          usuarioActualizacion,
                                          FechaActualizacion = CType(FechaActualizacion, DateTime?)).ToList

                    For Each documentocompraBE In consultaCaja
                        docCompra = New documentocompra
                        docCompra.idDocumento = documentocompraBE.IdDocumento
                        docCompra.codigoLibro = documentocompraBE.codigoLibro
                        docCompra.idEmpresa = documentocompraBE.idEmpresa
                        docCompra.idCentroCosto = documentocompraBE.IdCentroCosto
                        docCompra.fechaDoc = documentocompraBE.FechaDoc
                        docCompra.fechaVcto = documentocompraBE.FechaVcto
                        docCompra.fechaContable = documentocompraBE.fechaContable
                        docCompra.fechaConstancia = documentocompraBE.FechaConstancia
                        docCompra.nroConstancia = documentocompraBE.nroConstancia
                        docCompra.tipoDoc = documentocompraBE.tipoDoc
                        docCompra.serie = documentocompraBE.serie
                        docCompra.numeroDoc = documentocompraBE.numeroDoc
                        docCompra.idProveedor = documentocompraBE.IdProveedor
                        docCompra.monedaDoc = documentocompraBE.monedaDoc
                        docCompra.tasaIgv = documentocompraBE.TasaIgv
                        docCompra.tcDolLoc = documentocompraBE.TcDolLoc
                        docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
                        docCompra.regimen = documentocompraBE.regimen
                        docCompra.tasaRegimen = documentocompraBE.TasaRegimen
                        docCompra.nroRegimen = documentocompraBE.nroRegimen
                        docCompra.bi01 = documentocompraBE.Bi01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.bi03 = documentocompraBE.Bi03
                        docCompra.bi04 = documentocompraBE.Bi04
                        docCompra.isc01 = documentocompraBE.Isc01
                        docCompra.isc02 = documentocompraBE.Isc02
                        docCompra.isc03 = documentocompraBE.Isc03
                        docCompra.igv01 = documentocompraBE.Igv01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.igv03 = documentocompraBE.Igv03
                        docCompra.otc01 = documentocompraBE.Bi02
                        docCompra.otc02 = documentocompraBE.Otc02
                        docCompra.otc03 = documentocompraBE.Otc03
                        docCompra.otc04 = documentocompraBE.Otc04
                        docCompra.bi01us = documentocompraBE.Bi01us
                        docCompra.bi02us = documentocompraBE.Bi02us
                        docCompra.bi03us = documentocompraBE.Bi03us
                        docCompra.bi04us = documentocompraBE.Bi04us
                        docCompra.isc01us = documentocompraBE.Isc01us
                        docCompra.isc02us = documentocompraBE.Isc01us
                        docCompra.isc03us = documentocompraBE.Isc03us
                        docCompra.igv01us = documentocompraBE.Igv01us
                        docCompra.igv02us = documentocompraBE.Igv02us
                        docCompra.igv03us = documentocompraBE.Igv03us
                        docCompra.otc01us = documentocompraBE.Otc01us
                        docCompra.otc02us = documentocompraBE.Otc02us
                        docCompra.otc03us = documentocompraBE.Otc03us
                        docCompra.otc04us = documentocompraBE.Otc04us
                        docCompra.importeTotal = documentocompraBE.importe
                        docCompra.importeUS = documentocompraBE.importeUS
                        docCompra.destino = documentocompraBE.destino
                        docCompra.estadoPago = documentocompraBE.estadoPago
                        docCompra.glosa = documentocompraBE.glosa
                        docCompra.referenciaDestino = documentocompraBE.referenciaDestino
                        docCompra.saldoMontoNota = documentocompraBE.SaldoMontoNota
                        docCompra.saldoMontoNotaUSD = documentocompraBE.SaldoMontoNotaUSD
                        docCompra.tipoCompra = documentocompraBE.tipoCompra
                        docCompra.sustentado = documentocompraBE.sustentado
                        docCompra.estadoEntrega = documentocompraBE.estadoEntrega
                        docCompra.situacion = documentocompraBE.situacion
                        docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
                        docCompra.fechaActualizacion = documentocompraBE.FechaActualizacion
                        'docCompra.NomAlmacenDestino = documentocompraBE.almacenRef.GetValueOrDefault
                        lista.Add(docCompra)
                    Next
                Case "XDia"

                    Dim consultaCaja = (From b In HeliosData.documentocompradetalle
                                        Where
                                             CStr(b.documentocompra.fechaDoc) >= fechaInicio And
                                                                                 CStr(b.documentocompra.fechaDoc) <= fechaFin And
                                                                                listaidPersona.Contains(b.documentocompra.usuarioActualizacion) And
                                                                                 listaCompra.Contains(b.documentocompra.tipoCompra)
                                        Group New With {b.documentocompra, b} By
                                        IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                        b.documentocompra.codigoLibro,
                                        b.documentocompra.idEmpresa,
                                        IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                        FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                        FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                        FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                        FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                        b.documentocompra.fechaContable,
                                        b.documentocompra.nroConstancia,
                                        b.documentocompra.periodoTributo,
                                        b.documentocompra.tipoDoc,
                                        b.documentocompra.serie,
                                        b.documentocompra.numeroDoc,
                                        IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                        b.documentocompra.idPersona,
                                        b.documentocompra.monedaDoc,
                                        TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                        TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                        Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                        b.documentocompra.tipoRecaudo,
                                        b.documentocompra.regimen,
                                        TasaRegimen = CType(b.documentocompra.tasaRegimen, Decimal?),
                                        b.documentocompra.nroRegimen,
                                        Bi01 = CType(b.documentocompra.bi01, Decimal?),
                                        Bi02 = CType(b.documentocompra.bi02, Decimal?),
                                        Bi03 = CType(b.documentocompra.bi03, Decimal?),
                                        Bi04 = CType(b.documentocompra.bi04, Decimal?),
                                        Isc01 = CType(b.documentocompra.isc01, Decimal?),
                                        Isc02 = CType(b.documentocompra.isc02, Decimal?),
                                        Isc03 = CType(b.documentocompra.isc03, Decimal?),
                                        Igv01 = CType(b.documentocompra.igv01, Decimal?),
                                        Igv02 = CType(b.documentocompra.igv02, Decimal?),
                                        Igv03 = CType(b.documentocompra.igv03, Decimal?),
                                        Otc01 = CType(b.documentocompra.otc01, Decimal?),
                                        Otc02 = CType(b.documentocompra.otc02, Decimal?),
                                        Otc03 = CType(b.documentocompra.otc03, Decimal?),
                                        Otc04 = CType(b.documentocompra.otc04, Decimal?),
                                        Bi01us = CType(b.documentocompra.bi01us, Decimal?),
                                        Bi02us = CType(b.documentocompra.bi02us, Decimal?),
                                        Bi03us = CType(b.documentocompra.bi03us, Decimal?),
                                        Bi04us = CType(b.documentocompra.bi04us, Decimal?),
                                        Isc01us = CType(b.documentocompra.isc01us, Decimal?),
                                        Isc02us = CType(b.documentocompra.isc02us, Decimal?),
                                        Isc03us = CType(b.documentocompra.isc03us, Decimal?),
                                        Igv01us = CType(b.documentocompra.igv01us, Decimal?),
                                        Igv02us = CType(b.documentocompra.igv02us, Decimal?),
                                        Igv03us = CType(b.documentocompra.igv03us, Decimal?),
                                        Otc01us = CType(b.documentocompra.otc01us, Decimal?),
                                        Otc02us = CType(b.documentocompra.otc02us, Decimal?),
                                        Otc03us = CType(b.documentocompra.otc03us, Decimal?),
                                        Otc04us = CType(b.documentocompra.otc04us, Decimal?),
                                        b.importe,
                                        b.importeUS,
                                        b.documentocompra.destino,
                                        b.documentocompra.estadoPago,
                                        b.documentocompra.glosa,
                                        b.documentocompra.referenciaDestino,
                                        SaldoMontoNota = CType(b.documentocompra.saldoMontoNota, Decimal?),
                                        SaldoMontoNotaUSD = CType(b.documentocompra.saldoMontoNotaUSD, Decimal?),
                                        b.documentocompra.tipoCompra,
                                        b.documentocompra.sustentado,
                                        IdPadre = CType(b.documentocompra.idPadre, Int32?),
                                        b.documentocompra.situacion,
                                        b.documentocompra.aprobado,
                                        b.documentocompra.tieneDetraccion,
                                        AsignacionPorcentaje = CType(b.documentocompra.asignacionPorcentaje, Decimal?),
                                        DetraccionPorcentaje = CType(b.documentocompra.detraccionPorcentaje, Decimal?),
                                        b.documentocompra.estadoEntrega,
                                        b.documentocompra.usuarioActualizacion,
                                        FechaActualizacion = CType(b.documentocompra.fechaActualizacion, DateTime?)
                                       Into g = Group
                                        Select
                                         IdDocumento = CType(IdDocumento, Int32?),
                                         codigoLibro,
                                         idEmpresa,
                                         IdCentroCosto = CType(IdCentroCosto, Int32?),
                                         FechaLaboral = CType(FechaLaboral, DateTime?),
                                         FechaDoc = CType(FechaDoc, DateTime?),
                                         FechaVcto = CType(FechaVcto, DateTime?),
                                         FechaConstancia = CType(FechaConstancia, DateTime?),
                                         fechaContable,
                                         nroConstancia,
                                         periodoTributo,
                                         tipoDoc,
                                         serie,
                                         numeroDoc,
                                         IdProveedor = CType(IdProveedor, Int32?),
                                         idPersona,
                                         monedaDoc,
                                         TasaIgv = CType(TasaIgv, Decimal?),
                                         TcDolLoc = CType(TcDolLoc, Decimal?),
                                         Tipocambio = CType(Tipocambio, Decimal?),
                                         tipoRecaudo,
                                         regimen,
                                         TasaRegimen = CType(TasaRegimen, Decimal?),
                                         nroRegimen,
                                         Bi01 = CType(Bi01, Decimal?),
                                         Bi02 = CType(Bi02, Decimal?),
                                         Bi03 = CType(Bi03, Decimal?),
                                         Bi04 = CType(Bi04, Decimal?),
                                         Isc01 = CType(Isc01, Decimal?),
                                         Isc02 = CType(Isc02, Decimal?),
                                         Isc03 = CType(Isc03, Decimal?),
                                         Igv01 = CType(Igv01, Decimal?),
                                         Igv02 = CType(Igv02, Decimal?),
                                         Igv03 = CType(Igv03, Decimal?),
                                         Otc01 = CType(Otc01, Decimal?),
                                         Otc02 = CType(Otc02, Decimal?),
                                         Otc03 = CType(Otc03, Decimal?),
                                         Otc04 = CType(Otc04, Decimal?),
                                         Bi01us = CType(Bi01us, Decimal?),
                                         Bi02us = CType(Bi02us, Decimal?),
                                         Bi03us = CType(Bi03us, Decimal?),
                                         Bi04us = CType(Bi04us, Decimal?),
                                         Isc01us = CType(Isc01us, Decimal?),
                                         Isc02us = CType(Isc02us, Decimal?),
                                         Isc03us = CType(Isc03us, Decimal?),
                                         Igv01us = CType(Igv01us, Decimal?),
                                         Igv02us = CType(Igv02us, Decimal?),
                                         Igv03us = CType(Igv03us, Decimal?),
                                         Otc01us = CType(Otc01us, Decimal?),
                                         Otc02us = CType(Otc02us, Decimal?),
                                         Otc03us = CType(Otc03us, Decimal?),
                                         Otc04us = CType(Otc04us, Decimal?),
                                         importe = CType(g.Sum(Function(p) p.b.importe), Decimal?),
                                         importeUS = CType(g.Sum(Function(p) p.b.importeUS), Decimal?),
                                         destino,
                                         estadoPago,
                                         glosa,
                                         referenciaDestino,
                                         SaldoMontoNota = CType(SaldoMontoNota, Decimal?),
                                         SaldoMontoNotaUSD = CType(SaldoMontoNotaUSD, Decimal?),
                                         tipoCompra,
                                         sustentado,
                                         IdPadre = CType(IdPadre, Int32?),
                                         situacion,
                                         aprobado,
                                         tieneDetraccion,
                                         AsignacionPorcentaje = CType(AsignacionPorcentaje, Decimal?),
                                         DetraccionPorcentaje = CType(DetraccionPorcentaje, Decimal?),
                                         estadoEntrega,
                                         usuarioActualizacion,
                                         FechaActualizacion = CType(FechaActualizacion, DateTime?)).ToList


                    For Each documentocompraBE In consultaCaja
                        docCompra = New documentocompra
                        docCompra.idDocumento = documentocompraBE.IdDocumento
                        docCompra.codigoLibro = documentocompraBE.codigoLibro
                        docCompra.idEmpresa = documentocompraBE.idEmpresa
                        docCompra.idCentroCosto = documentocompraBE.IdCentroCosto
                        docCompra.fechaDoc = documentocompraBE.FechaDoc
                        docCompra.fechaVcto = documentocompraBE.FechaVcto
                        docCompra.fechaContable = documentocompraBE.fechaContable
                        docCompra.fechaConstancia = documentocompraBE.FechaConstancia
                        docCompra.nroConstancia = documentocompraBE.nroConstancia
                        docCompra.tipoDoc = documentocompraBE.tipoDoc
                        docCompra.serie = documentocompraBE.serie
                        docCompra.numeroDoc = documentocompraBE.numeroDoc
                        docCompra.idProveedor = documentocompraBE.IdProveedor
                        docCompra.monedaDoc = documentocompraBE.monedaDoc
                        docCompra.tasaIgv = documentocompraBE.TasaIgv
                        docCompra.tcDolLoc = documentocompraBE.TcDolLoc
                        docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
                        docCompra.regimen = documentocompraBE.regimen
                        docCompra.tasaRegimen = documentocompraBE.TasaRegimen
                        docCompra.nroRegimen = documentocompraBE.nroRegimen
                        docCompra.bi01 = documentocompraBE.Bi01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.bi03 = documentocompraBE.Bi03
                        docCompra.bi04 = documentocompraBE.Bi04
                        docCompra.isc01 = documentocompraBE.Isc01
                        docCompra.isc02 = documentocompraBE.Isc02
                        docCompra.isc03 = documentocompraBE.Isc03
                        docCompra.igv01 = documentocompraBE.Igv01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.igv03 = documentocompraBE.Igv03
                        docCompra.otc01 = documentocompraBE.Bi02
                        docCompra.otc02 = documentocompraBE.Otc02
                        docCompra.otc03 = documentocompraBE.Otc03
                        docCompra.otc04 = documentocompraBE.Otc04
                        docCompra.bi01us = documentocompraBE.Bi01us
                        docCompra.bi02us = documentocompraBE.Bi02us
                        docCompra.bi03us = documentocompraBE.Bi03us
                        docCompra.bi04us = documentocompraBE.Bi04us
                        docCompra.isc01us = documentocompraBE.Isc01us
                        docCompra.isc02us = documentocompraBE.Isc01us
                        docCompra.isc03us = documentocompraBE.Isc03us
                        docCompra.igv01us = documentocompraBE.Igv01us
                        docCompra.igv02us = documentocompraBE.Igv02us
                        docCompra.igv03us = documentocompraBE.Igv03us
                        docCompra.otc01us = documentocompraBE.Otc01us
                        docCompra.otc02us = documentocompraBE.Otc02us
                        docCompra.otc03us = documentocompraBE.Otc03us
                        docCompra.otc04us = documentocompraBE.Otc04us
                        docCompra.importeTotal = documentocompraBE.importe
                        docCompra.importeUS = documentocompraBE.importeUS
                        docCompra.destino = documentocompraBE.destino
                        docCompra.estadoPago = documentocompraBE.estadoPago
                        docCompra.glosa = documentocompraBE.glosa
                        docCompra.referenciaDestino = documentocompraBE.referenciaDestino
                        docCompra.saldoMontoNota = documentocompraBE.SaldoMontoNota
                        docCompra.saldoMontoNotaUSD = documentocompraBE.SaldoMontoNotaUSD
                        docCompra.tipoCompra = documentocompraBE.tipoCompra
                        docCompra.sustentado = documentocompraBE.sustentado
                        docCompra.situacion = documentocompraBE.situacion
                        docCompra.estadoEntrega = documentocompraBE.estadoEntrega
                        docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
                        docCompra.fechaActualizacion = documentocompraBE.FechaActualizacion
                        'docCompra.NomAlmacenDestino = documentocompraBE.almacenRef.GetValueOrDefault
                        lista.Add(docCompra)
                    Next
                Case "XPeriodo"

                    Dim consultaCaja = (From b In HeliosData.documentocompradetalle
                                        Where
                                             b.documentocompra.fechaContable = periodo And
                                                                               listaidPersona.Contains(b.documentocompra.usuarioActualizacion) And
                                                                                 listaCompra.Contains(b.documentocompra.tipoCompra)
                                        Group New With {b.documentocompra, b} By
                                        IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                        b.documentocompra.codigoLibro,
                                        b.documentocompra.idEmpresa,
                                        IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                        FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                        FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                        FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                        FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                        b.documentocompra.fechaContable,
                                        b.documentocompra.nroConstancia,
                                        b.documentocompra.periodoTributo,
                                        b.documentocompra.tipoDoc,
                                        b.documentocompra.serie,
                                        b.documentocompra.numeroDoc,
                                        IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                        b.documentocompra.idPersona,
                                        b.documentocompra.monedaDoc,
                                        TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                        TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                        Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                        b.documentocompra.tipoRecaudo,
                                        b.documentocompra.regimen,
                                        TasaRegimen = CType(b.documentocompra.tasaRegimen, Decimal?),
                                        b.documentocompra.nroRegimen,
                                        Bi01 = CType(b.documentocompra.bi01, Decimal?),
                                        Bi02 = CType(b.documentocompra.bi02, Decimal?),
                                        Bi03 = CType(b.documentocompra.bi03, Decimal?),
                                        Bi04 = CType(b.documentocompra.bi04, Decimal?),
                                        Isc01 = CType(b.documentocompra.isc01, Decimal?),
                                        Isc02 = CType(b.documentocompra.isc02, Decimal?),
                                        Isc03 = CType(b.documentocompra.isc03, Decimal?),
                                        Igv01 = CType(b.documentocompra.igv01, Decimal?),
                                        Igv02 = CType(b.documentocompra.igv02, Decimal?),
                                        Igv03 = CType(b.documentocompra.igv03, Decimal?),
                                        Otc01 = CType(b.documentocompra.otc01, Decimal?),
                                        Otc02 = CType(b.documentocompra.otc02, Decimal?),
                                        Otc03 = CType(b.documentocompra.otc03, Decimal?),
                                        Otc04 = CType(b.documentocompra.otc04, Decimal?),
                                        Bi01us = CType(b.documentocompra.bi01us, Decimal?),
                                        Bi02us = CType(b.documentocompra.bi02us, Decimal?),
                                        Bi03us = CType(b.documentocompra.bi03us, Decimal?),
                                        Bi04us = CType(b.documentocompra.bi04us, Decimal?),
                                        Isc01us = CType(b.documentocompra.isc01us, Decimal?),
                                        Isc02us = CType(b.documentocompra.isc02us, Decimal?),
                                        Isc03us = CType(b.documentocompra.isc03us, Decimal?),
                                        Igv01us = CType(b.documentocompra.igv01us, Decimal?),
                                        Igv02us = CType(b.documentocompra.igv02us, Decimal?),
                                        Igv03us = CType(b.documentocompra.igv03us, Decimal?),
                                        Otc01us = CType(b.documentocompra.otc01us, Decimal?),
                                        Otc02us = CType(b.documentocompra.otc02us, Decimal?),
                                        Otc03us = CType(b.documentocompra.otc03us, Decimal?),
                                        Otc04us = CType(b.documentocompra.otc04us, Decimal?),
                                        b.importe,
                                        b.importeUS,
                                        b.documentocompra.destino,
                                        b.documentocompra.estadoPago,
                                        b.documentocompra.glosa,
                                        b.documentocompra.referenciaDestino,
                                        SaldoMontoNota = CType(b.documentocompra.saldoMontoNota, Decimal?),
                                        SaldoMontoNotaUSD = CType(b.documentocompra.saldoMontoNotaUSD, Decimal?),
                                        b.documentocompra.tipoCompra,
                                        b.documentocompra.sustentado,
                                        IdPadre = CType(b.documentocompra.idPadre, Int32?),
                                        b.documentocompra.situacion,
                                        b.documentocompra.aprobado,
                                        b.documentocompra.tieneDetraccion,
                                        AsignacionPorcentaje = CType(b.documentocompra.asignacionPorcentaje, Decimal?),
                                        DetraccionPorcentaje = CType(b.documentocompra.detraccionPorcentaje, Decimal?),
                                        b.documentocompra.estadoEntrega,
                                        b.documentocompra.usuarioActualizacion,
                                        FechaActualizacion = CType(b.documentocompra.fechaActualizacion, DateTime?)
                                        Into g = Group
                                        Select
                                        IdDocumento = CType(IdDocumento, Int32?),
                                        codigoLibro,
                                        idEmpresa,
                                        IdCentroCosto = CType(IdCentroCosto, Int32?),
                                        FechaLaboral = CType(FechaLaboral, DateTime?),
                                        FechaDoc = CType(FechaDoc, DateTime?),
                                        FechaVcto = CType(FechaVcto, DateTime?),
                                        FechaConstancia = CType(FechaConstancia, DateTime?),
                                        fechaContable,
                                        nroConstancia,
                                        periodoTributo,
                                        tipoDoc,
                                        serie,
                                        numeroDoc,
                                        IdProveedor = CType(IdProveedor, Int32?),
                                        idPersona,
                                        monedaDoc,
                                        TasaIgv = CType(TasaIgv, Decimal?),
                                        TcDolLoc = CType(TcDolLoc, Decimal?),
                                        Tipocambio = CType(Tipocambio, Decimal?),
                                        tipoRecaudo,
                                        regimen,
                                        TasaRegimen = CType(TasaRegimen, Decimal?),
                                        nroRegimen,
                                        Bi01 = CType(Bi01, Decimal?),
                                        Bi02 = CType(Bi02, Decimal?),
                                        Bi03 = CType(Bi03, Decimal?),
                                        Bi04 = CType(Bi04, Decimal?),
                                        Isc01 = CType(Isc01, Decimal?),
                                        Isc02 = CType(Isc02, Decimal?),
                                        Isc03 = CType(Isc03, Decimal?),
                                        Igv01 = CType(Igv01, Decimal?),
                                        Igv02 = CType(Igv02, Decimal?),
                                        Igv03 = CType(Igv03, Decimal?),
                                        Otc01 = CType(Otc01, Decimal?),
                                        Otc02 = CType(Otc02, Decimal?),
                                        Otc03 = CType(Otc03, Decimal?),
                                        Otc04 = CType(Otc04, Decimal?),
                                        Bi01us = CType(Bi01us, Decimal?),
                                        Bi02us = CType(Bi02us, Decimal?),
                                        Bi03us = CType(Bi03us, Decimal?),
                                        Bi04us = CType(Bi04us, Decimal?),
                                        Isc01us = CType(Isc01us, Decimal?),
                                        Isc02us = CType(Isc02us, Decimal?),
                                        Isc03us = CType(Isc03us, Decimal?),
                                        Igv01us = CType(Igv01us, Decimal?),
                                        Igv02us = CType(Igv02us, Decimal?),
                                        Igv03us = CType(Igv03us, Decimal?),
                                        Otc01us = CType(Otc01us, Decimal?),
                                        Otc02us = CType(Otc02us, Decimal?),
                                        Otc03us = CType(Otc03us, Decimal?),
                                        Otc04us = CType(Otc04us, Decimal?),
                                        importe = CType(g.Sum(Function(p) p.b.importe), Decimal?),
                                        importeUS = CType(g.Sum(Function(p) p.b.importeUS), Decimal?),
                                        destino,
                                        estadoPago,
                                        glosa,
                                        referenciaDestino,
                                        SaldoMontoNota = CType(SaldoMontoNota, Decimal?),
                                        SaldoMontoNotaUSD = CType(SaldoMontoNotaUSD, Decimal?),
                                        tipoCompra,
                                        sustentado,
                                        IdPadre = CType(IdPadre, Int32?),
                                        situacion,
                                        aprobado,
                                        tieneDetraccion,
                                        AsignacionPorcentaje = CType(AsignacionPorcentaje, Decimal?),
                                        DetraccionPorcentaje = CType(DetraccionPorcentaje, Decimal?),
                                        estadoEntrega,
                                        usuarioActualizacion,
                                        FechaActualizacion = CType(FechaActualizacion, DateTime?)).ToList


                    For Each documentocompraBE In consultaCaja
                        docCompra = New documentocompra
                        docCompra.idDocumento = documentocompraBE.IdDocumento
                        docCompra.codigoLibro = documentocompraBE.codigoLibro
                        docCompra.idEmpresa = documentocompraBE.idEmpresa
                        docCompra.idCentroCosto = documentocompraBE.IdCentroCosto
                        docCompra.fechaDoc = documentocompraBE.FechaDoc
                        docCompra.fechaVcto = documentocompraBE.FechaVcto
                        docCompra.fechaContable = documentocompraBE.fechaContable
                        docCompra.fechaConstancia = documentocompraBE.FechaConstancia
                        docCompra.nroConstancia = documentocompraBE.nroConstancia
                        docCompra.tipoDoc = documentocompraBE.tipoDoc
                        docCompra.serie = documentocompraBE.serie
                        docCompra.numeroDoc = documentocompraBE.numeroDoc
                        docCompra.idProveedor = documentocompraBE.IdProveedor
                        docCompra.monedaDoc = documentocompraBE.monedaDoc
                        docCompra.tasaIgv = documentocompraBE.TasaIgv
                        docCompra.tcDolLoc = documentocompraBE.TcDolLoc
                        docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
                        docCompra.regimen = documentocompraBE.regimen
                        docCompra.tasaRegimen = documentocompraBE.TasaRegimen
                        docCompra.nroRegimen = documentocompraBE.nroRegimen
                        docCompra.bi01 = documentocompraBE.Bi01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.bi03 = documentocompraBE.Bi03
                        docCompra.bi04 = documentocompraBE.Bi04
                        docCompra.isc01 = documentocompraBE.Isc01
                        docCompra.isc02 = documentocompraBE.Isc02
                        docCompra.isc03 = documentocompraBE.Isc03
                        docCompra.igv01 = documentocompraBE.Igv01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.igv03 = documentocompraBE.Igv03
                        docCompra.otc01 = documentocompraBE.Bi02
                        docCompra.otc02 = documentocompraBE.Otc02
                        docCompra.otc03 = documentocompraBE.Otc03
                        docCompra.otc04 = documentocompraBE.Otc04
                        docCompra.bi01us = documentocompraBE.Bi01us
                        docCompra.bi02us = documentocompraBE.Bi02us
                        docCompra.bi03us = documentocompraBE.Bi03us
                        docCompra.bi04us = documentocompraBE.Bi04us
                        docCompra.isc01us = documentocompraBE.Isc01us
                        docCompra.isc02us = documentocompraBE.Isc01us
                        docCompra.isc03us = documentocompraBE.Isc03us
                        docCompra.igv01us = documentocompraBE.Igv01us
                        docCompra.igv02us = documentocompraBE.Igv02us
                        docCompra.igv03us = documentocompraBE.Igv03us
                        docCompra.otc01us = documentocompraBE.Otc01us
                        docCompra.otc02us = documentocompraBE.Otc02us
                        docCompra.otc03us = documentocompraBE.Otc03us
                        docCompra.otc04us = documentocompraBE.Otc04us
                        docCompra.importeTotal = documentocompraBE.importe
                        docCompra.importeUS = documentocompraBE.importeUS
                        docCompra.destino = documentocompraBE.destino
                        docCompra.estadoPago = documentocompraBE.estadoPago
                        docCompra.glosa = documentocompraBE.glosa
                        docCompra.referenciaDestino = documentocompraBE.referenciaDestino
                        docCompra.saldoMontoNota = documentocompraBE.SaldoMontoNota
                        docCompra.saldoMontoNotaUSD = documentocompraBE.SaldoMontoNotaUSD
                        docCompra.tipoCompra = documentocompraBE.tipoCompra
                        docCompra.sustentado = documentocompraBE.sustentado
                        docCompra.situacion = documentocompraBE.situacion
                        docCompra.estadoEntrega = documentocompraBE.estadoEntrega
                        docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
                        docCompra.fechaActualizacion = documentocompraBE.FechaActualizacion
                        'docCompra.NomAlmacenDestino = documentocompraBE.almacenRef.GetValueOrDefault
                        lista.Add(docCompra)
                    Next

                    For Each documentocompraBE In consultaCaja
                        docCompra = New documentocompra
                        docCompra.idDocumento = documentocompraBE.IdDocumento
                        docCompra.codigoLibro = documentocompraBE.codigoLibro
                        docCompra.idEmpresa = documentocompraBE.idEmpresa
                        docCompra.idCentroCosto = documentocompraBE.IdCentroCosto
                        docCompra.fechaDoc = documentocompraBE.FechaDoc
                        docCompra.fechaVcto = documentocompraBE.FechaVcto
                        docCompra.fechaContable = documentocompraBE.fechaContable
                        docCompra.fechaConstancia = documentocompraBE.FechaConstancia
                        docCompra.nroConstancia = documentocompraBE.nroConstancia
                        docCompra.tipoDoc = documentocompraBE.tipoDoc
                        docCompra.serie = documentocompraBE.serie
                        docCompra.numeroDoc = documentocompraBE.numeroDoc
                        docCompra.idProveedor = documentocompraBE.IdProveedor
                        docCompra.monedaDoc = documentocompraBE.monedaDoc
                        docCompra.tasaIgv = documentocompraBE.TasaIgv
                        docCompra.tcDolLoc = documentocompraBE.TcDolLoc
                        docCompra.tipoRecaudo = documentocompraBE.tipoRecaudo
                        docCompra.regimen = documentocompraBE.regimen
                        docCompra.tasaRegimen = documentocompraBE.TasaRegimen
                        docCompra.nroRegimen = documentocompraBE.nroRegimen
                        docCompra.bi01 = documentocompraBE.Bi01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.bi03 = documentocompraBE.Bi03
                        docCompra.bi04 = documentocompraBE.Bi04
                        docCompra.isc01 = documentocompraBE.Isc01
                        docCompra.isc02 = documentocompraBE.Isc02
                        docCompra.isc03 = documentocompraBE.Isc03
                        docCompra.igv01 = documentocompraBE.Igv01
                        docCompra.bi02 = documentocompraBE.Bi02
                        docCompra.igv03 = documentocompraBE.Igv03
                        docCompra.otc01 = documentocompraBE.Bi02
                        docCompra.otc02 = documentocompraBE.Otc02
                        docCompra.otc03 = documentocompraBE.Otc03
                        docCompra.otc04 = documentocompraBE.Otc04
                        docCompra.bi01us = documentocompraBE.Bi01us
                        docCompra.bi02us = documentocompraBE.Bi02us
                        docCompra.bi03us = documentocompraBE.Bi03us
                        docCompra.bi04us = documentocompraBE.Bi04us
                        docCompra.isc01us = documentocompraBE.Isc01us
                        docCompra.isc02us = documentocompraBE.Isc01us
                        docCompra.isc03us = documentocompraBE.Isc03us
                        docCompra.igv01us = documentocompraBE.Igv01us
                        docCompra.igv02us = documentocompraBE.Igv02us
                        docCompra.igv03us = documentocompraBE.Igv03us
                        docCompra.otc01us = documentocompraBE.Otc01us
                        docCompra.otc02us = documentocompraBE.Otc02us
                        docCompra.otc03us = documentocompraBE.Otc03us
                        docCompra.otc04us = documentocompraBE.Otc04us
                        docCompra.importeTotal = documentocompraBE.importe
                        docCompra.importeUS = documentocompraBE.importeUS
                        docCompra.destino = documentocompraBE.destino
                        docCompra.estadoPago = documentocompraBE.estadoPago
                        docCompra.glosa = documentocompraBE.glosa
                        docCompra.referenciaDestino = documentocompraBE.referenciaDestino
                        docCompra.saldoMontoNota = documentocompraBE.SaldoMontoNota
                        docCompra.saldoMontoNotaUSD = documentocompraBE.SaldoMontoNotaUSD
                        docCompra.tipoCompra = documentocompraBE.tipoCompra
                        docCompra.sustentado = documentocompraBE.sustentado
                        docCompra.estadoEntrega = documentocompraBE.estadoEntrega
                        docCompra.situacion = documentocompraBE.situacion
                        docCompra.usuarioActualizacion = documentocompraBE.usuarioActualizacion
                        docCompra.fechaActualizacion = documentocompraBE.FechaActualizacion
                        'docCompra.NomAlmacenDestino = documentocompraBE.almacenRef.GetValueOrDefault
                        lista.Add(docCompra)
                    Next
            End Select



            Return lista

            'HeliosData.SaveChanges()
            'ts.Complete()
        End Using
    End Function

    Function ListaTotalXCompraAll(listaidPersona As List(Of String), fechaInicio As DateTime, fechaFin As DateTime, periodo As String, tipo As String, strEmpresa As String, idEstablec As Integer, intAnio As Integer, intMes As Integer, intDia As Integer) As documentocompra
        Dim lista As New List(Of documentocompra)
        Dim docCompra As New documentocompra
        Dim idAlmacenVirtual As Integer
        Dim totalesBL As New almacenBL
        Dim listaCompra As New List(Of String)
        listaCompra.Add(TIPO_COMPRA.COMPRA)
        listaCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaCompra.Add(TIPO_COMPRA.OTRAS_SALIDAS)
        listaCompra.Add(TIPO_COMPRA.TRANSFERENCIA_ENTRE_ALMACEN)

        Dim listaCompraCredito As New List(Of String)
        listaCompraCredito.Add(TIPO_COMPRA.COMPRA)
        listaCompraCredito.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaCompraCredito.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)

        idAlmacenVirtual = totalesBL.GetEsAlmacenVirtualXFull(Gempresas.IdEmpresaRuc, GEstableciento.IdEstablecimiento, "AV").idAlmacen

        Using ts As New TransactionScope
            Select Case tipo
                Case "XTodo"
                    Dim consultaCaja = (From d In HeliosData.documentocompra
                                        Where
                                             listaCompra.Contains(d.tipoCompra) And
                                            d.idEmpresa = strEmpresa And
                                            d.idCentroCosto = idEstablec And
                                            d.fechaDoc.Value.Year = intAnio
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                comprasCredito = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                               listaCompraCredito.Contains(a.tipoCompra) And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                             transferenciaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "TEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                entrdasAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                salidaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OSA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                transferenciaRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                dc.documentocompra.tipoCompra = "TEA" And
                                dc.documentocompra.estadoEntrega = "DC" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                compraTransito = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                CompraTransitoRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                dc.ItemEntregadototal = "S" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docCompra = New documentocompra
                        docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
                        docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
                        docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
                        docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
                        docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
                        docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
                        docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
                    End If

                Case "XDia"
                    Dim consultaCaja = (From d In HeliosData.documentocompra
                                        Where
                                         (d.fechaDoc) >= fechaInicio And
                                               (d.fechaDoc) <= fechaFin And
                                                listaCompra.Contains(d.tipoCompra) And
                                                d.idEmpresa = strEmpresa And
                                                d.idCentroCosto = idEstablec
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                comprasCredito = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                               listaCompraCredito.Contains(a.tipoCompra) And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                             transferenciaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "TEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                entrdasAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                salidaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OSA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                transferenciaRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                dc.documentocompra.tipoCompra = "TEA" And
                                dc.documentocompra.estadoEntrega = "DC" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                compraTransito = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                CompraTransitoRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                dc.ItemEntregadototal = "S" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docCompra = New documentocompra
                        docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
                        docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
                        docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
                        docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
                        docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
                        docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
                        docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
                    End If

                Case "XPeriodo"
                    Dim consultaCaja = (From d In HeliosData.documentocompra
                                        Where
                                                d.fechaDoc.Value.Year = intAnio And
                                                d.fechaDoc.Value.Month = intMes And
                                                listaCompra.Contains(d.tipoCompra) And
                                                d.idEmpresa = strEmpresa And
                                                d.idCentroCosto = idEstablec
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                comprasCredito = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                               listaCompraCredito.Contains(a.tipoCompra) And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                             transferenciaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "TEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                entrdasAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                salidaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OSA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                transferenciaRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                dc.documentocompra.tipoCompra = "TEA" And
                                dc.documentocompra.estadoEntrega = "DC" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                compraTransito = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                CompraTransitoRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                dc.ItemEntregadototal = "S" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docCompra = New documentocompra
                        docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
                        docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
                        docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
                        docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
                        docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
                        docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
                        docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
                    End If

                Case "XHora"
                    Dim consultaCaja = (From d In HeliosData.documentocompra
                                        Where
                                          d.fechaDoc.Value.Year = intAnio And
                                             d.fechaDoc.Value.Month = intMes And
                                             d.fechaDoc.Value.Day = intDia And
                                        d.fechaDoc.Value.Hour >= fechaInicio.Hour And
                                        d.fechaDoc.Value.Hour <= fechaFin.Hour And
                                                listaCompra.Contains(d.tipoCompra) And
                                                d.idEmpresa = strEmpresa And
                                                d.idCentroCosto = idEstablec
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                comprasCredito = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                               listaCompraCredito.Contains(a.tipoCompra) And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                             transferenciaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "TEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                entrdasAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                salidaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OSA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                transferenciaRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                dc.documentocompra.tipoCompra = "TEA" And
                                dc.documentocompra.estadoEntrega = "DC" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                compraTransito = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                CompraTransitoRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                dc.ItemEntregadototal = "S" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docCompra = New documentocompra
                        docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
                        docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
                        docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
                        docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
                        docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
                        docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
                        docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
                    End If

            End Select

            Return docCompra

            'HeliosData.SaveChanges()
            'ts.Complete()
        End Using
    End Function
    'Function ListaTotalXCompraAll(listaidPersona As List(Of String), fechaInicio As DateTime, fechaFin As DateTime, periodo As String, tipo As String, strEmpresa As String, idEstablec As Integer, intAnio As Integer) As documentocompra
    '    Dim lista As New List(Of documentocompra)
    '    Dim docCompra As New documentocompra
    '    Dim idAlmacenVirtual As Integer
    '    Dim totalesBL As New almacenBL
    '    Dim listaCompra As New List(Of String)
    '    listaCompra.Add(TIPO_COMPRA.COMPRA)
    '    listaCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
    '    listaCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
    '    listaCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
    '    listaCompra.Add(TIPO_COMPRA.OTRAS_SALIDAS)
    '    listaCompra.Add(TIPO_COMPRA.TRANSFERENCIA_ENTRE_ALMACEN)

    '    Dim listaCompraCredito As New List(Of String)
    '    listaCompraCredito.Add(TIPO_COMPRA.COMPRA)
    '    listaCompraCredito.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
    '    listaCompraCredito.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)

    '    idAlmacenVirtual = totalesBL.GetEsAlmacenVirtualXFull(Gempresas.IdEmpresaRuc, GEstableciento.IdEstablecimiento, "AV").idAlmacen

    '    Using ts As New TransactionScope
    '        Select Case tipo
    '            Case "XTodo"
    '                Dim consultaCaja = (From d In HeliosData.documentocompra
    '                                    Where
    '                                         listaCompra.Contains(d.tipoCompra) And
    '                                        d.idEmpresa = strEmpresa And
    '                                        d.idCentroCosto = idEstablec And
    '                                        d.fechaDoc.Value.Year = intAnio
    '                                    Group d By d.idEmpresa Into g = Group
    '                                    Select
    '                            comprasCredito = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                           listaCompraCredito.Contains(a.tipoCompra) And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                         transferenciaAlmacen = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                            a.tipoCompra = "TEA" And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                            entrdasAlmacen = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                            a.tipoCompra = "OEA" And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                            salidaAlmacen = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                            a.tipoCompra = "OSA" And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                            transferenciaRecepcion = (CType((Aggregate t1 In
    '                        (From dc In HeliosData.documentocompradetalle
    '                         Where
    '                            dc.documentocompra.tipoCompra = "TEA" And
    '                            dc.documentocompra.estadoEntrega = "DC" And
    '                            listaidPersona.Contains(dc.usuarioModificacion)
    '                         Select New With {
    '                            dc.importe
    '                        }) Into Sum(t1.importe)), Decimal?)),
    '                            compraTransito = (CType((Aggregate t1 In
    '                        (From dc In HeliosData.documentocompradetalle
    '                         Where
    '                            CLng(dc.almacenRef) = idAlmacenVirtual And
    '                            listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
    '                         Select New With {
    '                            dc.importe
    '                        }) Into Sum(t1.importe)), Decimal?)),
    '                            CompraTransitoRecepcion = (CType((Aggregate t1 In
    '                        (From dc In HeliosData.documentocompradetalle
    '                         Where
    '                            CLng(dc.almacenRef) = idAlmacenVirtual And
    '                            dc.ItemEntregadototal = "S" And
    '                            listaidPersona.Contains(dc.usuarioModificacion)
    '                         Select New With {
    '                            dc.importe
    '                        }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

    '                If (Not IsNothing(consultaCaja)) Then
    '                    docCompra = New documentocompra
    '                    docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
    '                    docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
    '                    docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
    '                    docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
    '                    docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
    '                    docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
    '                    docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
    '                End If

    '            Case "XDia"
    '                Dim consultaCaja = (From d In HeliosData.documentocompra
    '                                    Where
    '                                     CStr(d.fechaDoc) >= fechaInicio And
    '                                           CStr(d.fechaDoc) <= fechaFin And
    '                                            listaCompra.Contains(d.tipoCompra) And
    '                                            d.idEmpresa = strEmpresa And
    '                                            d.idCentroCosto = idEstablec
    '                                    Group d By d.idEmpresa Into g = Group
    '                                    Select
    '                            comprasCredito = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                           listaCompraCredito.Contains(a.tipoCompra) And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                         transferenciaAlmacen = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                            a.tipoCompra = "TEA" And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                            entrdasAlmacen = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                            a.tipoCompra = "OEA" And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                            salidaAlmacen = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                            a.tipoCompra = "OSA" And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                            transferenciaRecepcion = (CType((Aggregate t1 In
    '                        (From dc In HeliosData.documentocompradetalle
    '                         Where
    '                            dc.documentocompra.tipoCompra = "TEA" And
    '                            dc.documentocompra.estadoEntrega = "DC" And
    '                            listaidPersona.Contains(dc.usuarioModificacion)
    '                         Select New With {
    '                            dc.importe
    '                        }) Into Sum(t1.importe)), Decimal?)),
    '                            compraTransito = (CType((Aggregate t1 In
    '                        (From dc In HeliosData.documentocompradetalle
    '                         Where
    '                            CLng(dc.almacenRef) = idAlmacenVirtual And
    '                            listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
    '                         Select New With {
    '                            dc.importe
    '                        }) Into Sum(t1.importe)), Decimal?)),
    '                            CompraTransitoRecepcion = (CType((Aggregate t1 In
    '                        (From dc In HeliosData.documentocompradetalle
    '                         Where
    '                            CLng(dc.almacenRef) = idAlmacenVirtual And
    '                            dc.ItemEntregadototal = "S" And
    '                            listaidPersona.Contains(dc.usuarioModificacion)
    '                         Select New With {
    '                            dc.importe
    '                        }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

    '                If (Not IsNothing(consultaCaja)) Then
    '                    docCompra = New documentocompra
    '                    docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
    '                    docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
    '                    docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
    '                    docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
    '                    docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
    '                    docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
    '                    docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
    '                End If

    '            Case "XPeriodo"
    '                Dim consultaCaja = (From d In HeliosData.documentocompra
    '                                    Where
    '                                                         d.fechaContable = periodo And
    '                                            listaCompra.Contains(d.tipoCompra) And
    '                                            d.idEmpresa = strEmpresa And
    '                                            d.idCentroCosto = idEstablec
    '                                    Group d By d.idEmpresa Into g = Group
    '                                    Select
    '                            comprasCredito = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                           listaCompraCredito.Contains(a.tipoCompra) And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                         transferenciaAlmacen = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                            a.tipoCompra = "TEA" And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                            entrdasAlmacen = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                            a.tipoCompra = "OEA" And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                            salidaAlmacen = (CType((Aggregate t1 In
    '                        (From a In HeliosData.documentocompra
    '                         Where
    '                            a.tipoCompra = "OSA" And
    '                            listaidPersona.Contains(a.usuarioActualizacion)
    '                         Select New With {
    '                            a.importeTotal
    '                        }) Into Sum(t1.importeTotal)), Decimal?)),
    '                            transferenciaRecepcion = (CType((Aggregate t1 In
    '                        (From dc In HeliosData.documentocompradetalle
    '                         Where
    '                            dc.documentocompra.tipoCompra = "TEA" And
    '                            dc.documentocompra.estadoEntrega = "DC" And
    '                            listaidPersona.Contains(dc.usuarioModificacion)
    '                         Select New With {
    '                            dc.importe
    '                        }) Into Sum(t1.importe)), Decimal?)),
    '                            compraTransito = (CType((Aggregate t1 In
    '                        (From dc In HeliosData.documentocompradetalle
    '                         Where
    '                            CLng(dc.almacenRef) = idAlmacenVirtual And
    '                            listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
    '                         Select New With {
    '                            dc.importe
    '                        }) Into Sum(t1.importe)), Decimal?)),
    '                            CompraTransitoRecepcion = (CType((Aggregate t1 In
    '                        (From dc In HeliosData.documentocompradetalle
    '                         Where
    '                            CLng(dc.almacenRef) = idAlmacenVirtual And
    '                            dc.ItemEntregadototal = "S" And
    '                            listaidPersona.Contains(dc.usuarioModificacion)
    '                         Select New With {
    '                            dc.importe
    '                        }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

    '                If (Not IsNothing(consultaCaja)) Then
    '                    docCompra = New documentocompra
    '                    docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
    '                    docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
    '                    docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
    '                    docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
    '                    docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
    '                    docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
    '                    docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
    '                End If
    '        End Select

    '        Return docCompra

    '        'HeliosData.SaveChanges()
    '        'ts.Complete()
    '    End Using
    'End Function

    Function ListaCompraAll(listaidPersona As List(Of String), fechaInicio As DateTime, fechaFin As DateTime, periodo As String, tipo As String, strEmpresa As String, idEstablec As Integer, intAnio As Integer) As documentocompra
        Dim lista As New List(Of documentocompra)
        Dim docCompra As New documentocompra
        Dim idAlmacenVirtual As Integer
        Dim totalesBL As New almacenBL
        Dim listaCompra As New List(Of String)
        listaCompra.Add(TIPO_COMPRA.COMPRA)
        listaCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaCompra.Add(TIPO_COMPRA.OTRAS_SALIDAS)
        listaCompra.Add(TIPO_COMPRA.TRANSFERENCIA_ENTRE_ALMACEN)

        Dim listaCompraCredito As New List(Of String)
        listaCompraCredito.Add(TIPO_COMPRA.COMPRA)
        listaCompraCredito.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaCompraCredito.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)

        idAlmacenVirtual = totalesBL.GetEsAlmacenVirtualXFull(Gempresas.IdEmpresaRuc, GEstableciento.IdEstablecimiento, "AV").idAlmacen

        Using ts As New TransactionScope
            Select Case tipo
                Case "XTodo"
                    Dim consultaCaja = (From d In HeliosData.documentocompra
                                        Where
                                             listaCompra.Contains(d.tipoCompra) And
                                            d.idEmpresa = strEmpresa And
                                            d.idCentroCosto = idEstablec And
                                            d.fechaDoc.Value.Year = intAnio
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                comprasCredito = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                               listaCompraCredito.Contains(a.tipoCompra) And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                             transferenciaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "TEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                entrdasAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                salidaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OSA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                transferenciaRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                dc.documentocompra.tipoCompra = "TEA" And
                                dc.documentocompra.estadoEntrega = "DC" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                compraTransito = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                CompraTransitoRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                dc.ItemEntregadototal = "S" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docCompra = New documentocompra
                        docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
                        docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
                        docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
                        docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
                        docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
                        docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
                        docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
                    End If

                Case "XDia"
                    Dim consultaCaja = (From d In HeliosData.documentocompra
                                        Where
                                         CStr(d.fechaDoc) >= fechaInicio And
                                               CStr(d.fechaDoc) <= fechaFin And
                                                listaCompra.Contains(d.tipoCompra) And
                                                d.idEmpresa = strEmpresa And
                                                d.idCentroCosto = idEstablec
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                comprasCredito = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                               listaCompraCredito.Contains(a.tipoCompra) And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                             transferenciaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "TEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                entrdasAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                salidaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OSA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                transferenciaRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                dc.documentocompra.tipoCompra = "TEA" And
                                dc.documentocompra.estadoEntrega = "DC" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                compraTransito = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                CompraTransitoRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                dc.ItemEntregadototal = "S" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docCompra = New documentocompra
                        docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
                        docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
                        docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
                        docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
                        docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
                        docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
                        docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
                    End If

                Case "XPeriodo"
                    Dim consultaCaja = (From d In HeliosData.documentocompra
                                        Where
                                                             d.fechaContable = periodo And
                                                listaCompra.Contains(d.tipoCompra) And
                                                d.idEmpresa = strEmpresa And
                                                d.idCentroCosto = idEstablec
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                comprasCredito = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                               listaCompraCredito.Contains(a.tipoCompra) And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                             transferenciaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "TEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                entrdasAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                salidaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OSA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                transferenciaRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                dc.documentocompra.tipoCompra = "TEA" And
                                dc.documentocompra.estadoEntrega = "DC" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                compraTransito = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                CompraTransitoRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                dc.ItemEntregadototal = "S" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docCompra = New documentocompra
                        docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
                        docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
                        docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
                        docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
                        docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
                        docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
                        docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
                    End If
            End Select

            Return docCompra

            'HeliosData.SaveChanges()
            'ts.Complete()
        End Using
    End Function

    Public Function GetListarComprasPorPeriodoGeneralInfGeneral(strIdEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, strMovimiento As List(Of String), tipo As String, listaUsuario As List(Of String), fechainicio As DateTime, fechaFin As DateTime) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        '  Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra

        Select Case tipo
            Case "XTodo"
                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
                                    On doc.idDocumento Equals compra.idDocumento
                                Join entidad In HeliosData.entidad
                                    On compra.idProveedor Equals entidad.idEntidad
                                Where compra.fechaDoc.Value.Year = fechainicio.Year _
                                And compra.idEmpresa = strIdEmpresa _
                                    And compra.idCentroCosto = intIdEstablecimiento _
                                    And strMovimiento.Contains(compra.tipoCompra) _
                                    And listaUsuario.Contains(compra.usuarioActualizacion) _
                                    And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                strPeriodo = strPeriodo.Replace("/", "")
                Dim consulta2 = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                                 Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                                 Where compra.fechaDoc.Value.Year = fechainicio.Year _
                                    And compra.idEmpresa = strIdEmpresa _
                                    And compra.idCentroCosto = intIdEstablecimiento _
                                    And strMovimiento.Contains(compra.tipoCompra) _
                                    And listaUsuario.Contains(compra.usuarioActualizacion) _
                                    And compra.tieneDetraccion = "S" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                Dim con3 = consulta.Concat(consulta2).OrderBy(Function(o) o.compra.fechaDoc).ToList

                For Each obj In con3
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                    objRecurso.NroDocEntidad = obj.entidad.nrodoc
                    objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                    objRecurso.TipoPersona = obj.entidad.tipoPersona
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    Select Case obj.compra.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.compra.importeTotal * -1
                            objRecurso.importeUS = obj.compra.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    objRecurso.aprobado = obj.compra.aprobado
                    objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XPeriodo"
                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
                                    On doc.idDocumento Equals compra.idDocumento
                                Join entidad In HeliosData.entidad
                                    On compra.idProveedor Equals entidad.idEntidad
                                Where compra.fechaContable = strPeriodo _
                                And compra.idEmpresa = strIdEmpresa _
                                    And compra.idCentroCosto = intIdEstablecimiento _
                                    And strMovimiento.Contains(compra.tipoCompra) _
                                    And listaUsuario.Contains(compra.usuarioActualizacion) _
                                    And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                strPeriodo = strPeriodo.Replace("/", "")
                Dim consulta2 = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                                 Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                                 Where compra.periodoTributo = strPeriodo _
                                    And compra.idEmpresa = strIdEmpresa _
                                    And compra.idCentroCosto = intIdEstablecimiento _
                                    And strMovimiento.Contains(compra.tipoCompra) _
                                    And listaUsuario.Contains(compra.usuarioActualizacion) _
                                    And compra.tieneDetraccion = "S" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                Dim con3 = consulta.Concat(consulta2).OrderBy(Function(o) o.compra.fechaDoc).ToList

                For Each obj In con3
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                    objRecurso.NroDocEntidad = obj.entidad.nrodoc
                    objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                    objRecurso.TipoPersona = obj.entidad.tipoPersona
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    Select Case obj.compra.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.compra.importeTotal * -1
                            objRecurso.importeUS = obj.compra.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    objRecurso.aprobado = obj.compra.aprobado
                    objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XDia"
                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
                                    On doc.idDocumento Equals compra.idDocumento
                                Join entidad In HeliosData.entidad
                                    On compra.idProveedor Equals entidad.idEntidad
                                Where compra.fechaDoc >= fechainicio _
                                And compra.fechaDoc <= fechaFin _
                                And compra.idEmpresa = strIdEmpresa _
                                    And compra.idCentroCosto = intIdEstablecimiento _
                                    And strMovimiento.Contains(compra.tipoCompra) _
                                    And listaUsuario.Contains(compra.usuarioActualizacion) _
                                    And compra.tieneDetraccion = "N" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                strPeriodo = strPeriodo.Replace("/", "")
                Dim consulta2 = (From doc In HeliosData.documento
                                 Join compra In HeliosData.documentocompra
                       On doc.idDocumento Equals compra.idDocumento
                                 Join entidad In HeliosData.entidad
                       On compra.idProveedor Equals entidad.idEntidad
                                 Where compra.fechaDoc >= fechainicio _
                                        And compra.fechaDoc <= fechaFin _
                                    And compra.idEmpresa = strIdEmpresa _
                                    And compra.idCentroCosto = intIdEstablecimiento _
                                    And strMovimiento.Contains(compra.tipoCompra) _
                                    And listaUsuario.Contains(compra.usuarioActualizacion) _
                                    And compra.tieneDetraccion = "S" And compra.situacion = CStr(statusComprobantes.Normal)).ToList

                Dim con3 = consulta.Concat(consulta2).OrderBy(Function(o) o.compra.fechaDoc).ToList

                For Each obj In con3
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.compra.fechaContable
                    objRecurso.periodoTributo = obj.compra.periodoTributo
                    objRecurso.idDocumento = obj.compra.idDocumento
                    objRecurso.tipoCompra = obj.compra.tipoCompra
                    objRecurso.tipoOperacion = obj.doc.tipoOperacion
                    objRecurso.fechaDoc = obj.compra.fechaDoc
                    objRecurso.tipoDoc = obj.compra.tipoDoc
                    objRecurso.serie = obj.compra.serie
                    objRecurso.numeroDoc = obj.compra.numeroDoc
                    objRecurso.tipoDocEntidad = obj.entidad.tipoDoc
                    objRecurso.NroDocEntidad = obj.entidad.nrodoc
                    objRecurso.NombreEntidad = obj.entidad.nombreCompleto
                    objRecurso.TipoPersona = obj.entidad.tipoPersona
                    objRecurso.tcDolLoc = obj.compra.tcDolLoc
                    Select Case obj.compra.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.compra.importeTotal * -1
                            objRecurso.importeUS = obj.compra.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.compra.importeTotal
                            objRecurso.importeUS = obj.compra.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.compra.monedaDoc
                    objRecurso.estadoPago = obj.compra.estadoPago
                    objRecurso.idPadre = obj.compra.idPadre
                    objRecurso.usuarioActualizacion = obj.compra.usuarioActualizacion
                    objRecurso.situacion = obj.compra.situacion
                    objRecurso.aprobado = obj.compra.aprobado
                    objRecurso.tieneDetraccion = obj.compra.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetListarComprasTransitoInfGeneral(strIdEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, strMovimiento As List(Of String), tipo As String, listaUsuario As List(Of String), fechainicio As DateTime, fechaFin As DateTime) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        '  Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra
        Dim totalesBL As New almacenBL

        Select Case tipo
            Case "XTodo"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Join ed In HeliosData.entidad On New With {.IdProveedor = CInt(b.documentocompra.idProveedor)} Equals New With {.IdProveedor = ed.idEntidad}
                                Where
  CLng(b.almacenRef) = (totalesBL.GetEsAlmacenVirtualXFull(Gempresas.IdEmpresaRuc, GEstableciento.IdEstablecimiento, "AV").idAlmacen) And
 listaUsuario.Contains(b.documentocompra.usuarioActualizacion) And
 b.documentocompra.idEmpresa = strIdEmpresa And
 b.documentocompra.idCentroCosto = intIdEstablecimiento And
 b.documentocompra.fechaDoc.Value.Year = fechainicio.Year
                                Group New With {b.documentocompra, ed, b} By
  IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
  b.documentocompra.codigoLibro,
  b.documentocompra.idEmpresa,
  IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
  FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
  FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
  FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
  FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
  b.documentocompra.fechaContable,
  b.documentocompra.nroConstancia,
  b.documentocompra.periodoTributo,
  b.documentocompra.tipoDoc,
  b.documentocompra.serie,
  b.documentocompra.numeroDoc,
  IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
  b.documentocompra.idPersona,
  b.documentocompra.monedaDoc,
  TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
  TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
  Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
  b.documentocompra.tipoCompra,
  ed.nombreCompleto,
  ed.idEntidad,
  b.documentocompra.usuarioActualizacion,
  b.documentocompra.estadoPago
 Into g = Group
                                Select
  IdDocumento = CType(IdDocumento, Int32?),
  codigoLibro,
  idEmpresa,
  IdCentroCosto = CType(IdCentroCosto, Int32?),
  FechaLaboral = CType(FechaLaboral, DateTime?),
  FechaDoc = CType(FechaDoc, DateTime?),
  FechaVcto = CType(FechaVcto, DateTime?),
  FechaConstancia = CType(FechaConstancia, DateTime?),
  fechaContable,
  nroConstancia,
  periodoTributo,
  tipoDoc,
  serie,
  numeroDoc,
  IdProveedor = CType(IdProveedor, Int32?),
  idPersona,
  monedaDoc,
  TasaIgv = CType(TasaIgv, Decimal?),
  TcDolLoc = CType(TcDolLoc, Decimal?),
  Tipocambio = CType(Tipocambio, Decimal?),
  tipoCompra,
  nombreCompleto,
  IdEntidad = CType(idEntidad, Int32?),
  usuarioActualizacion,
  estadoPago,
  Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    'objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = obj.nombreCompleto
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XPeriodo"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Join ed In HeliosData.entidad On New With {.IdProveedor = CInt(b.documentocompra.idProveedor)} Equals New With {.IdProveedor = ed.idEntidad}
                                Where
CLng(b.almacenRef) = (totalesBL.GetEsAlmacenVirtualXFull(Gempresas.IdEmpresaRuc, GEstableciento.IdEstablecimiento, "AV").idAlmacen) And
listaUsuario.Contains(b.usuarioModificacion) And
b.IdEmpresa = strIdEmpresa And
b.IdEstablecimiento = intIdEstablecimiento And
b.documentocompra.fechaContable = strPeriodo
                                Group New With {b.documentocompra, ed, b} By
IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
b.documentocompra.codigoLibro,
b.documentocompra.idEmpresa,
IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
b.documentocompra.fechaContable,
b.documentocompra.nroConstancia,
b.documentocompra.periodoTributo,
b.documentocompra.tipoDoc,
b.documentocompra.serie,
b.documentocompra.numeroDoc,
b.documentocompra.tipoOperacion,
      IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
b.documentocompra.idPersona,
b.documentocompra.monedaDoc,
TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
b.documentocompra.tipoCompra,
ed.nombreCompleto,
ed.idEntidad,
b.documentocompra.usuarioActualizacion,
b.documentocompra.estadoPago
Into g = Group
                                Select
IdDocumento = CType(IdDocumento, Int32?),
codigoLibro,
idEmpresa,
IdCentroCosto = CType(IdCentroCosto, Int32?),
FechaLaboral = CType(FechaLaboral, DateTime?),
FechaDoc = CType(FechaDoc, DateTime?),
FechaVcto = CType(FechaVcto, DateTime?),
FechaConstancia = CType(FechaConstancia, DateTime?),
fechaContable,
nroConstancia,
periodoTributo,
tipoDoc,
serie,
numeroDoc,
tipoOperacion,
IdProveedor = CType(IdProveedor, Int32?),
idPersona,
monedaDoc,
TasaIgv = CType(TasaIgv, Decimal?),
TcDolLoc = CType(TcDolLoc, Decimal?),
Tipocambio = CType(Tipocambio, Decimal?),
tipoCompra,
nombreCompleto,
IdEntidad = CType(idEntidad, Int32?),
usuarioActualizacion,
estadoPago,
Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = obj.nombreCompleto
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XDia"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Join ed In HeliosData.entidad On New With {.IdProveedor = CInt(b.documentocompra.idProveedor)} Equals New With {.IdProveedor = ed.idEntidad}
                                Where
CLng(b.almacenRef) = (totalesBL.GetEsAlmacenVirtualXFull(Gempresas.IdEmpresaRuc, GEstableciento.IdEstablecimiento, "AV").idAlmacen) And
listaUsuario.Contains(b.usuarioModificacion) And
b.IdEmpresa = strIdEmpresa And
b.IdEstablecimiento = intIdEstablecimiento And
b.documentocompra.fechaDoc >= fechainicio And
b.documentocompra.fechaDoc <= fechaFin
                                Group New With {b.documentocompra, ed, b} By
IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
b.documentocompra.codigoLibro,
b.documentocompra.idEmpresa,
IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
b.documentocompra.fechaContable,
b.documentocompra.nroConstancia,
b.documentocompra.periodoTributo,
b.documentocompra.tipoDoc,
b.documentocompra.serie,
b.documentocompra.numeroDoc,
b.documentocompra.tipoOperacion,
      IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
b.documentocompra.idPersona,
b.documentocompra.monedaDoc,
TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
b.documentocompra.tipoCompra,
ed.nombreCompleto,
ed.idEntidad,
b.documentocompra.usuarioActualizacion,
b.documentocompra.estadoPago
Into g = Group
                                Select
IdDocumento = CType(IdDocumento, Int32?),
codigoLibro,
idEmpresa,
IdCentroCosto = CType(IdCentroCosto, Int32?),
FechaLaboral = CType(FechaLaboral, DateTime?),
FechaDoc = CType(FechaDoc, DateTime?),
FechaVcto = CType(FechaVcto, DateTime?),
FechaConstancia = CType(FechaConstancia, DateTime?),
fechaContable,
nroConstancia,
periodoTributo,
tipoDoc,
serie,
numeroDoc,
tipoOperacion,
IdProveedor = CType(IdProveedor, Int32?),
idPersona,
monedaDoc,
TasaIgv = CType(TasaIgv, Decimal?),
TcDolLoc = CType(TcDolLoc, Decimal?),
Tipocambio = CType(Tipocambio, Decimal?),
tipoCompra,
nombreCompleto,
IdEntidad = CType(idEntidad, Int32?),
usuarioActualizacion,
estadoPago,
Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = obj.nombreCompleto
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetListarComprasTransitoInfGeneralRecepcion(strIdEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, strMovimiento As List(Of String), tipo As String, listaUsuario As List(Of String), fechainicio As DateTime, fechaFin As DateTime) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        '  Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra
        Dim totalesBL As New almacenBL

        Select Case tipo
            Case "XTodo"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Join ed In HeliosData.entidad On New With {.IdProveedor = CInt(b.documentocompra.idProveedor)} Equals New With {.IdProveedor = ed.idEntidad}
                                Where
                                  CLng(b.almacenRef) = (totalesBL.GetEsAlmacenVirtualXFull(Gempresas.IdEmpresaRuc, GEstableciento.IdEstablecimiento, "AV").idAlmacen) And
                                 listaUsuario.Contains(b.usuarioModificacion) And
                                 b.documentocompra.idEmpresa = strIdEmpresa And
                                 b.documentocompra.idCentroCosto = intIdEstablecimiento And
                                 b.documentocompra.fechaDoc.Value.Year = fechainicio.Year And
                                 b.ItemEntregadototal = "S"
                                Group New With {b.documentocompra, ed, b} By
                                  IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                  b.documentocompra.codigoLibro,
                                  b.documentocompra.idEmpresa,
                                  IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                  FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                  FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                  FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                  FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                  b.documentocompra.fechaContable,
                                  b.documentocompra.nroConstancia,
                                  b.documentocompra.periodoTributo,
                                  b.documentocompra.tipoDoc,
                                  b.documentocompra.serie,
                                  b.documentocompra.numeroDoc,
                                  IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                  b.documentocompra.idPersona,
                                  b.documentocompra.monedaDoc,
                                  TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                  TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                  Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                  b.documentocompra.tipoCompra,
                                  ed.nombreCompleto,
                                  ed.idEntidad,
                                  b.documentocompra.usuarioActualizacion,
                                  b.documentocompra.estadoPago
                                 Into g = Group
                                Select
                                  IdDocumento = CType(IdDocumento, Int32?),
                                  codigoLibro,
                                  idEmpresa,
                                  IdCentroCosto = CType(IdCentroCosto, Int32?),
                                  FechaLaboral = CType(FechaLaboral, DateTime?),
                                  FechaDoc = CType(FechaDoc, DateTime?),
                                  FechaVcto = CType(FechaVcto, DateTime?),
                                  FechaConstancia = CType(FechaConstancia, DateTime?),
                                  fechaContable,
                                  nroConstancia,
                                  periodoTributo,
                                  tipoDoc,
                                  serie,
                                  numeroDoc,
                                  IdProveedor = CType(IdProveedor, Int32?),
                                  idPersona,
                                  monedaDoc,
                                  TasaIgv = CType(TasaIgv, Decimal?),
                                  TcDolLoc = CType(TcDolLoc, Decimal?),
                                  Tipocambio = CType(Tipocambio, Decimal?),
                                  tipoCompra,
                                  nombreCompleto,
                                  IdEntidad = CType(idEntidad, Int32?),
                                  usuarioActualizacion,
                                  estadoPago,
                                  Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    'objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = obj.nombreCompleto
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XPeriodo"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Join ed In HeliosData.entidad On New With {.IdProveedor = CInt(b.documentocompra.idProveedor)} Equals New With {.IdProveedor = ed.idEntidad}
                                Where
                                CLng(b.almacenRef) = (totalesBL.GetEsAlmacenVirtualXFull(Gempresas.IdEmpresaRuc, GEstableciento.IdEstablecimiento, "AV").idAlmacen) And
                                listaUsuario.Contains(b.usuarioModificacion) And
                                b.IdEmpresa = strIdEmpresa And
                                b.IdEstablecimiento = intIdEstablecimiento And
                                b.documentocompra.fechaContable = strPeriodo And
                                  b.ItemEntregadototal = "S"
                                Group New With {b.documentocompra, ed, b} By
                                IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                b.documentocompra.codigoLibro,
                                b.documentocompra.idEmpresa,
                                IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                b.documentocompra.fechaContable,
                                b.documentocompra.nroConstancia,
                                b.documentocompra.periodoTributo,
                                b.documentocompra.tipoDoc,
                                b.documentocompra.serie,
                                b.documentocompra.numeroDoc,
                                b.documentocompra.tipoOperacion,
                                      IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                b.documentocompra.idPersona,
                                b.documentocompra.monedaDoc,
                                TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                b.documentocompra.tipoCompra,
                                ed.nombreCompleto,
                                ed.idEntidad,
                                b.documentocompra.usuarioActualizacion,
                                b.documentocompra.estadoPago
                                Into g = Group
                                Select
                                IdDocumento = CType(IdDocumento, Int32?),
                                codigoLibro,
                                idEmpresa,
                                IdCentroCosto = CType(IdCentroCosto, Int32?),
                                FechaLaboral = CType(FechaLaboral, DateTime?),
                                FechaDoc = CType(FechaDoc, DateTime?),
                                FechaVcto = CType(FechaVcto, DateTime?),
                                FechaConstancia = CType(FechaConstancia, DateTime?),
                                fechaContable,
                                nroConstancia,
                                periodoTributo,
                                tipoDoc,
                                serie,
                                numeroDoc,
                                tipoOperacion,
                                IdProveedor = CType(IdProveedor, Int32?),
                                idPersona,
                                monedaDoc,
                                TasaIgv = CType(TasaIgv, Decimal?),
                                TcDolLoc = CType(TcDolLoc, Decimal?),
                                Tipocambio = CType(Tipocambio, Decimal?),
                                tipoCompra,
                                nombreCompleto,
                                IdEntidad = CType(idEntidad, Int32?),
                                usuarioActualizacion,
                                estadoPago,
                                Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = obj.nombreCompleto
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XDia"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Join ed In HeliosData.entidad On New With {.IdProveedor = CInt(b.documentocompra.idProveedor)} Equals New With {.IdProveedor = ed.idEntidad}
                                Where
                                CLng(b.almacenRef) = (totalesBL.GetEsAlmacenVirtualXFull(Gempresas.IdEmpresaRuc, GEstableciento.IdEstablecimiento, "AV").idAlmacen) And
                                listaUsuario.Contains(b.usuarioModificacion) And
                                b.IdEmpresa = strIdEmpresa And
                                b.IdEstablecimiento = intIdEstablecimiento And
                                b.documentocompra.fechaDoc >= fechainicio And
                                b.documentocompra.fechaDoc <= fechaFin And
                                 b.ItemEntregadototal = "S"
                                Group New With {b.documentocompra, ed, b} By
                                IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                b.documentocompra.codigoLibro,
                                b.documentocompra.idEmpresa,
                                IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                b.documentocompra.fechaContable,
                                b.documentocompra.nroConstancia,
                                b.documentocompra.periodoTributo,
                                b.documentocompra.tipoDoc,
                                b.documentocompra.serie,
                                b.documentocompra.numeroDoc,
                                b.documentocompra.tipoOperacion,
                                      IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                b.documentocompra.idPersona,
                                b.documentocompra.monedaDoc,
                                TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                b.documentocompra.tipoCompra,
                                ed.nombreCompleto,
                                ed.idEntidad,
                                b.documentocompra.usuarioActualizacion,
                                b.documentocompra.estadoPago
                                Into g = Group
                                Select
                                IdDocumento = CType(IdDocumento, Int32?),
                                codigoLibro,
                                idEmpresa,
                                IdCentroCosto = CType(IdCentroCosto, Int32?),
                                FechaLaboral = CType(FechaLaboral, DateTime?),
                                FechaDoc = CType(FechaDoc, DateTime?),
                                FechaVcto = CType(FechaVcto, DateTime?),
                                FechaConstancia = CType(FechaConstancia, DateTime?),
                                fechaContable,
                                nroConstancia,
                                periodoTributo,
                                tipoDoc,
                                serie,
                                numeroDoc,
                                tipoOperacion,
                                IdProveedor = CType(IdProveedor, Int32?),
                                idPersona,
                                monedaDoc,
                                TasaIgv = CType(TasaIgv, Decimal?),
                                TcDolLoc = CType(TcDolLoc, Decimal?),
                                Tipocambio = CType(Tipocambio, Decimal?),
                                tipoCompra,
                                nombreCompleto,
                                IdEntidad = CType(idEntidad, Int32?),
                                usuarioActualizacion,
                                estadoPago,
                                Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = obj.nombreCompleto
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetListarTransferenciaInfGeneral(strIdEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, strMovimiento As List(Of String), tipo As String, listaUsuario As List(Of String), fechainicio As DateTime, fechaFin As DateTime) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        '  Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra
        Dim totalesBL As New almacenBL

        Select Case tipo
            Case "XTodo"
                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
                     On doc.idDocumento Equals compra.idDocumento
                                Where listaUsuario.Contains(compra.usuarioActualizacion) And
compra.idEmpresa = strIdEmpresa And
compra.idCentroCosto = intIdEstablecimiento And
compra.fechaDoc.Value.Year = fechainicio.Year And
strMovimiento.Contains(compra.tipoCompra)
                                Order By compra.fechaDoc Ascending Select compra).ToList

                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.idDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    'objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.fechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = Nothing
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.tcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.importeTotal * -1
                            objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.importeTotal
                            objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.importeTotal
                            objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XPeriodo"

                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
           On doc.idDocumento Equals compra.idDocumento
                                Where listaUsuario.Contains(compra.usuarioActualizacion) And
compra.idEmpresa = strIdEmpresa And
compra.idCentroCosto = intIdEstablecimiento And
compra.fechaContable = strPeriodo And
strMovimiento.Contains(compra.tipoCompra)
                                Order By compra.fechaDoc Ascending Select compra).ToList

                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.idDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.fechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = Nothing
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.tcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.importeTotal * -1
                            objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.importeTotal
                            objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.importeTotal
                            objRecurso.importeUS = obj.importeUS
                    End Select


                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XDia"

                Dim consulta = (From doc In HeliosData.documento
                                Join compra In HeliosData.documentocompra
          On doc.idDocumento Equals compra.idDocumento
                                Where listaUsuario.Contains(compra.usuarioActualizacion) And
compra.idEmpresa = strIdEmpresa And
compra.idCentroCosto = intIdEstablecimiento And
compra.fechaDoc >= fechainicio And
compra.fechaDoc <= fechaFin And
strMovimiento.Contains(compra.tipoCompra)
                                Order By compra.fechaDoc Ascending Select compra).ToList

                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.idDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.fechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = Nothing
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.tcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.importeTotal * -1
                            objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.importeTotal
                            objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.importeTotal
                            objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function

    Public Function GetListarTransferenciaRecepcionInfGeneral(strIdEmpresa As String, intIdEstablecimiento As Integer, strPeriodo As String, strMovimiento As List(Of String), tipo As String, listaUsuario As List(Of String), fechainicio As DateTime, fechaFin As DateTime) As List(Of documentocompra)
        Dim Lista As New List(Of documentocompra)
        '  Dim listaTipoSituacion As New List(Of String)
        Dim listaTipoCompra As New List(Of String)
        Dim objRecurso As New documentocompra
        Dim totalesBL As New almacenBL

        Select Case tipo
            Case "XTodo"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Where
                                  listaUsuario.Contains(b.usuarioModificacion) And
                                 b.documentocompra.idEmpresa = strIdEmpresa And
                                 b.documentocompra.idCentroCosto = intIdEstablecimiento And
                                 b.documentocompra.fechaDoc.Value.Year = fechainicio.Year And
                                 b.documentocompra.estadoEntrega = "DC" And
                                 b.documentocompra.tipoCompra = "TEA"
                                Group New With {b.documentocompra, b} By
                                  IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                  b.documentocompra.codigoLibro,
                                  b.documentocompra.idEmpresa,
                                  IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                  FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                  FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                  FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                  FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                  b.documentocompra.fechaContable,
                                  b.documentocompra.nroConstancia,
                                  b.documentocompra.periodoTributo,
                                  b.documentocompra.tipoDoc,
                                  b.documentocompra.serie,
                                  b.documentocompra.numeroDoc,
                                  IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                  b.documentocompra.idPersona,
                                  b.documentocompra.monedaDoc,
                                  TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                  TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                  Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                  b.documentocompra.tipoCompra,
                                   b.documentocompra.usuarioActualizacion,
                                  b.documentocompra.estadoPago
                                 Into g = Group
                                Select
                                  IdDocumento = CType(IdDocumento, Int32?),
                                  codigoLibro,
                                  idEmpresa,
                                  IdCentroCosto = CType(IdCentroCosto, Int32?),
                                  FechaLaboral = CType(FechaLaboral, DateTime?),
                                  FechaDoc = CType(FechaDoc, DateTime?),
                                  FechaVcto = CType(FechaVcto, DateTime?),
                                  FechaConstancia = CType(FechaConstancia, DateTime?),
                                  fechaContable,
                                  nroConstancia,
                                  periodoTributo,
                                  tipoDoc,
                                  serie,
                                  numeroDoc,
                                   monedaDoc,
                                  TasaIgv = CType(TasaIgv, Decimal?),
                                  TcDolLoc = CType(TcDolLoc, Decimal?),
                                  Tipocambio = CType(Tipocambio, Decimal?),
                                  tipoCompra,
                                  usuarioActualizacion,
                                  estadoPago,
                                  Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    'objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = Nothing
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XPeriodo"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Join ed In HeliosData.entidad On New With {.IdProveedor = CInt(b.documentocompra.idProveedor)} Equals New With {.IdProveedor = ed.idEntidad}
                                Where
                                listaUsuario.Contains(b.usuarioModificacion) And
                                b.IdEmpresa = strIdEmpresa And
                                b.IdEstablecimiento = intIdEstablecimiento And
                                b.documentocompra.fechaContable = strPeriodo And
                                 b.documentocompra.estadoEntrega = "DC" And
                                 b.documentocompra.tipoCompra = "TEA"
                                Group New With {b.documentocompra, b} By
                                  IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                  b.documentocompra.codigoLibro,
                                  b.documentocompra.idEmpresa,
                                  IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                  FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                  FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                  FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                  FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                  b.documentocompra.fechaContable,
                                  b.documentocompra.nroConstancia,
                                  b.documentocompra.periodoTributo,
                                  b.documentocompra.tipoDoc,
                                  b.documentocompra.serie,
                                  b.documentocompra.numeroDoc,
                                  IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                  b.documentocompra.idPersona,
                                  b.documentocompra.monedaDoc,
                                  TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                  TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                  Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                  b.documentocompra.tipoCompra,
                                   b.documentocompra.usuarioActualizacion,
                                  b.documentocompra.estadoPago
                                 Into g = Group
                                Select
                                  IdDocumento = CType(IdDocumento, Int32?),
                                  codigoLibro,
                                  idEmpresa,
                                  IdCentroCosto = CType(IdCentroCosto, Int32?),
                                  FechaLaboral = CType(FechaLaboral, DateTime?),
                                  FechaDoc = CType(FechaDoc, DateTime?),
                                  FechaVcto = CType(FechaVcto, DateTime?),
                                  FechaConstancia = CType(FechaConstancia, DateTime?),
                                  fechaContable,
                                  nroConstancia,
                                  periodoTributo,
                                  tipoDoc,
                                  serie,
                                  numeroDoc,
                                   monedaDoc,
                                  TasaIgv = CType(TasaIgv, Decimal?),
                                  TcDolLoc = CType(TcDolLoc, Decimal?),
                                  Tipocambio = CType(Tipocambio, Decimal?),
                                  tipoCompra,
                                  usuarioActualizacion,
                                  estadoPago,
                                  Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    'objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = Nothing
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
            Case "XDia"
                Dim consulta = (From b In HeliosData.documentocompradetalle
                                Join ed In HeliosData.entidad On New With {.IdProveedor = CInt(b.documentocompra.idProveedor)} Equals New With {.IdProveedor = ed.idEntidad}
                                Where
                                listaUsuario.Contains(b.usuarioModificacion) And
                                b.IdEmpresa = strIdEmpresa And
                                b.IdEstablecimiento = intIdEstablecimiento And
                                b.documentocompra.fechaDoc >= fechainicio And
                                b.documentocompra.fechaDoc <= fechaFin And
                                 b.documentocompra.estadoEntrega = "DC" And
                                 b.documentocompra.tipoCompra = "TEA"
                                Group New With {b.documentocompra, b} By
                                  IdDocumento = CType(b.documentocompra.idDocumento, Int32?),
                                  b.documentocompra.codigoLibro,
                                  b.documentocompra.idEmpresa,
                                  IdCentroCosto = CType(b.documentocompra.idCentroCosto, Int32?),
                                  FechaLaboral = CType(b.documentocompra.fechaLaboral, DateTime?),
                                  FechaDoc = CType(b.documentocompra.fechaDoc, DateTime?),
                                  FechaVcto = CType(b.documentocompra.fechaVcto, DateTime?),
                                  FechaConstancia = CType(b.documentocompra.fechaConstancia, DateTime?),
                                  b.documentocompra.fechaContable,
                                  b.documentocompra.nroConstancia,
                                  b.documentocompra.periodoTributo,
                                  b.documentocompra.tipoDoc,
                                  b.documentocompra.serie,
                                  b.documentocompra.numeroDoc,
                                  IdProveedor = CType(b.documentocompra.idProveedor, Int32?),
                                  b.documentocompra.idPersona,
                                  b.documentocompra.monedaDoc,
                                  TasaIgv = CType(b.documentocompra.tasaIgv, Decimal?),
                                  TcDolLoc = CType(b.documentocompra.tcDolLoc, Decimal?),
                                  Tipocambio = CType(b.documentocompra.tipocambio, Decimal?),
                                  b.documentocompra.tipoCompra,
                                   b.documentocompra.usuarioActualizacion,
                                  b.documentocompra.estadoPago
                                 Into g = Group
                                Select
                                  IdDocumento = CType(IdDocumento, Int32?),
                                  codigoLibro,
                                  idEmpresa,
                                  IdCentroCosto = CType(IdCentroCosto, Int32?),
                                  FechaLaboral = CType(FechaLaboral, DateTime?),
                                  FechaDoc = CType(FechaDoc, DateTime?),
                                  FechaVcto = CType(FechaVcto, DateTime?),
                                  FechaConstancia = CType(FechaConstancia, DateTime?),
                                  fechaContable,
                                  nroConstancia,
                                  periodoTributo,
                                  tipoDoc,
                                  serie,
                                  numeroDoc,
                                   monedaDoc,
                                  TasaIgv = CType(TasaIgv, Decimal?),
                                  TcDolLoc = CType(TcDolLoc, Decimal?),
                                  Tipocambio = CType(Tipocambio, Decimal?),
                                  tipoCompra,
                                  usuarioActualizacion,
                                  estadoPago,
                                  Column1 = CType(g.Sum(Function(p) p.b.importe), Decimal?)).ToList


                For Each obj In consulta
                    objRecurso = New documentocompra
                    objRecurso.fechaContable = obj.fechaContable
                    objRecurso.periodoTributo = obj.periodoTributo
                    objRecurso.idDocumento = obj.IdDocumento
                    objRecurso.tipoCompra = obj.tipoCompra
                    'objRecurso.tipoOperacion = obj.tipoOperacion
                    objRecurso.fechaDoc = obj.FechaDoc
                    objRecurso.tipoDoc = obj.tipoDoc
                    objRecurso.serie = obj.serie
                    objRecurso.numeroDoc = obj.numeroDoc
                    objRecurso.tipoDocEntidad = obj.tipoDoc
                    objRecurso.NroDocEntidad = obj.numeroDoc
                    objRecurso.NombreEntidad = Nothing
                    'objRecurso.TipoPersona = obj.tipoPersona
                    objRecurso.tcDolLoc = obj.TcDolLoc
                    Select Case obj.tipoDoc
                        Case "07", "87"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault * -1
                            'objRecurso.importeUS = obj.importeUS * -1

                        Case "08", "88"
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                        Case Else
                            objRecurso.importeTotal = obj.Column1.GetValueOrDefault
                            'objRecurso.importeUS = obj.importeUS
                    End Select

                    objRecurso.monedaDoc = obj.monedaDoc
                    objRecurso.estadoPago = obj.estadoPago
                    'objRecurso.idPadre = obj.idPadre
                    objRecurso.usuarioActualizacion = obj.usuarioActualizacion
                    'objRecurso.situacion = obj.situacion
                    'objRecurso.aprobado = obj.aprobado
                    'objRecurso.tieneDetraccion = obj.tieneDetraccion
                    'objRecurso.Atraso = DateDiff(DateInterval.Day, obj.compra.fechaDoc.Value.Date, obj.compra.fechaVcto.Value.Date) 'DateTime.Now.Date
                    Lista.Add(objRecurso)
                Next
        End Select

        Return Lista
    End Function


    Function GetListaSumatoriaCompras(listaidPersona As List(Of String), fechaInicio As DateTime, fechaFin As DateTime, periodo As String, tipo As String, strEmpresa As String, idEstablec As Integer, intAnio As Integer) As documentocompra
        Dim lista As New List(Of documentocompra)
        Dim docCompra As New documentocompra
        Dim idAlmacenVirtual As Integer
        Dim totalesBL As New almacenBL
        Dim listaCompra As New List(Of String)
        listaCompra.Add(TIPO_COMPRA.COMPRA)
        listaCompra.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaCompra.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)
        listaCompra.Add(TIPO_COMPRA.OTRAS_ENTRADAS)
        listaCompra.Add(TIPO_COMPRA.OTRAS_SALIDAS)
        listaCompra.Add(TIPO_COMPRA.TRANSFERENCIA_ENTRE_ALMACEN)

        Dim listaCompraCredito As New List(Of String)
        listaCompraCredito.Add(TIPO_COMPRA.COMPRA)
        listaCompraCredito.Add(TIPO_COMPRA.COMPRA_RECIBO_HONORARIOS)
        listaCompraCredito.Add(TIPO_COMPRA.COMPRA_SERVICIO_PUBLICO)

        idAlmacenVirtual = totalesBL.GetEsAlmacenVirtualXFull(strEmpresa, idEstablec, "AV").idAlmacen

        Using ts As New TransactionScope
            Select Case tipo
                Case "XTodo"
                    Dim consultaCaja = (From d In HeliosData.documentocompra
                                        Where
                                             listaCompra.Contains(d.tipoCompra) And
                                            d.idEmpresa = strEmpresa And
                                            d.idCentroCosto = idEstablec And
                                            d.fechaDoc.Value.Year = intAnio
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                comprasCredito = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                               listaCompraCredito.Contains(a.tipoCompra) And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                             transferenciaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "TEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                entrdasAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                salidaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OSA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                transferenciaRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                dc.documentocompra.tipoCompra = "TEA" And
                                dc.documentocompra.estadoEntrega = "DC" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                compraTransito = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                CompraTransitoRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                dc.ItemEntregadototal = "S" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docCompra = New documentocompra
                        docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
                        docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
                        docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
                        docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
                        docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
                        docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
                        docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
                    End If

                Case "XDia"
                    Dim consultaCaja = (From d In HeliosData.documentocompra
                                        Where
                                         CStr(d.fechaDoc) >= fechaInicio And
                                               CStr(d.fechaDoc) <= fechaFin And
                                                listaCompra.Contains(d.tipoCompra) And
                                                d.idEmpresa = strEmpresa And
                                                d.idCentroCosto = idEstablec
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                comprasCredito = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                               listaCompraCredito.Contains(a.tipoCompra) And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                             transferenciaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "TEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                entrdasAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                salidaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OSA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                transferenciaRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                dc.documentocompra.tipoCompra = "TEA" And
                                dc.documentocompra.estadoEntrega = "DC" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                compraTransito = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                CompraTransitoRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                dc.ItemEntregadototal = "S" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docCompra = New documentocompra
                        docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
                        docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
                        docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
                        docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
                        docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
                        docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
                        docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
                    End If

                Case "XPeriodo"
                    Dim consultaCaja = (From d In HeliosData.documentocompra
                                        Where
                                                             d.fechaContable = periodo And
                                                listaCompra.Contains(d.tipoCompra) And
                                                d.idEmpresa = strEmpresa And
                                                d.idCentroCosto = idEstablec
                                        Group d By d.idEmpresa Into g = Group
                                        Select
                                comprasCredito = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                               listaCompraCredito.Contains(a.tipoCompra) And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                             transferenciaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "TEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                entrdasAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OEA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                salidaAlmacen = (CType((Aggregate t1 In
                            (From a In HeliosData.documentocompra
                             Where
                                a.tipoCompra = "OSA" And
                                listaidPersona.Contains(a.usuarioActualizacion)
                             Select New With {
                                a.importeTotal
                            }) Into Sum(t1.importeTotal)), Decimal?)),
                                transferenciaRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                dc.documentocompra.tipoCompra = "TEA" And
                                dc.documentocompra.estadoEntrega = "DC" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                compraTransito = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                listaidPersona.Contains(dc.documentocompra.usuarioActualizacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?)),
                                CompraTransitoRecepcion = (CType((Aggregate t1 In
                            (From dc In HeliosData.documentocompradetalle
                             Where
                                CLng(dc.almacenRef) = idAlmacenVirtual And
                                dc.ItemEntregadototal = "S" And
                                listaidPersona.Contains(dc.usuarioModificacion)
                             Select New With {
                                dc.importe
                            }) Into Sum(t1.importe)), Decimal?))).FirstOrDefault

                    If (Not IsNothing(consultaCaja)) Then
                        docCompra = New documentocompra
                        docCompra.comprasCredito = consultaCaja.comprasCredito.GetValueOrDefault
                        docCompra.transferenciaAlmacen = consultaCaja.transferenciaAlmacen.GetValueOrDefault
                        docCompra.entrdasAlmacen = consultaCaja.entrdasAlmacen.GetValueOrDefault
                        docCompra.salidaAlmacen = consultaCaja.salidaAlmacen.GetValueOrDefault
                        docCompra.transferenciaRecepcion = consultaCaja.transferenciaRecepcion.GetValueOrDefault
                        docCompra.compraTransito = consultaCaja.compraTransito.GetValueOrDefault
                        docCompra.CompraTransitoRecepcion = consultaCaja.CompraTransitoRecepcion.GetValueOrDefault
                    End If
            End Select

            Return docCompra

            'HeliosData.SaveChanges()
            'ts.Complete()
        End Using
    End Function


End Class
