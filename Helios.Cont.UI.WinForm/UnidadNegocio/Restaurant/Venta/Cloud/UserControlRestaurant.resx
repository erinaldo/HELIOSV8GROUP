<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ImageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ImageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAB4
        DAAAAk1TRnQBSQFMAwEBAAFQAQEBUAEBASMBAAEjAQAE/wEhAQAI/wFCAU0BNgcAATYDAAEoAwABjAMA
        ASMDAAEBAQABIAUAAZABTP8A/wBIAAMhATADHQEpAwcBCv8A/wAmAANHAXADfwGzAzQBUAMKAQ7/AP8A
        IgADIQEwA3sBrwOCAbYDNQFRAwoBDv8A/wAeAAMCAQMDLQFEA3gBrAN4Aa0DNgFTAwoBDv8A/wAeAAMC
        AQMDLwFIA3YBqgN2AaoDNgFUAwoBDhQAAwcBCQMcAScDKQE9AzEBSwMzAU8DLwFHAyQBNQMVARwDAwEE
        /wDlAAMCAQMDMQFKA3IBpwN0AakDNQFSAwoBDgQAAwIBAwMSARgDMAFJA0YBbgNfAZIDagGfA3IBpgNy
        AacDbgGjA2YBmgNXAYcDPQFgAyYBOAMHAQr/AOEAAwEBAgMuAUYDcgGnA3gBrQM0AVADEAEWAyUBNgNM
        AXcDgwG3A48BwQN4AawDXgGQA1ABfQNMAXgDUwGCA2YBmgODAbcDjwHBA28BpAM7AVwDFgEfAwMBBP8A
        3QADAQECAywBQgNzAagDgQG1A0cBcAN2AasDpgHRA14BkAM1AVEDHQEpAxUBHQMUARsDFAEbAxQBGwMX
        ASADJwE5A0sBdgOWAcYDwwHjA1MBggMdASkDBAEG/wDgAAEBAy0BQwONAb8D4AHxA48BwAMrAUADEwEa
        Az4BYgNRAX4DVAGDA1QBgwNUAYMDVAGDA1QBgwNUAYMDVAGDA1oBiwOHAboD4QHyA2QBmAMdASkDAwEE
        /wDZAAMBAQIDLAFCA4EBtQOIAbwDHAEnAxIBGANeAZADhwG6A48BwAOPAcADjwHAA48BwAOPAcADjwHA
        A48BwAOPAcADjwHAA48BwAOUAcQD1wHuA1EBfwMWAR4DAAEB/wDVAAMaASUDXwGRA48BwQMlATYDAAEB
        AwABAQMDBAQBBQMEAQYDBAEGAwQBBgMEAQYDBAEGAwQBBgMEAQYDBAEGAwQBBgMEAQYDBAEGA0kBcgOr
        AdQDOgFaAwcBCf8AwQADUAF9A5YBxwOoAdMDqAHTA6gB0wOoAdMDjwHBA0oBdQMQARUDLQFDA0oBdQMr
        AUADUQF+Ay0BRANLAXYDNwFVA0ABZQNAAWUDNwFVA0sBdgMtAUQDUgGBAykBPQNMAXgDPAFfA50BygNz
        AagDKAE8A0UBbAOiAc4DqAHTA30BsQMrAUD/AK0AA28BpAOIAbwDVwGHA0kBcwNXAYgDlgHGA3QBqQMa
        ASUDAgEDAwsBDwMTARoDCgEOAxUBHAMLAQ8DEwEaAw4BEwMRARcDEQEXAw4EEwEaAwsBDwMVAR0DCgEO
        AxQBGwMOARMDPgFhA48BwQM+AWEDJQE2A0IBaANkAZgDlAHEAz0BYP8ArQADdgGqA2gBmwMnATkDEgEY
        AzoBWgN7Aa8DUwGCAwQBBRAAAyAELgFFAzABSQMwAUkDMAFJAzABSQMwAUkDMAFJAy4BRQMhAS8MAAMV
        ARwDgQG1A1YBhgMaASUDEAEVAzgBVwOHAboDQQFm/wCtAAN2AaoDXwGSAxoBJAQAA0ABZANyAaYDOwFd
        FAADTgF6A3QBqQN9AbEDfQGxA30BsQN9AbEDfQGxA30BsQN2AaoDUAF9DAADAwEEA2MBlgNkAZgDJAE1
        BAADLgFFA4IBtgNBAWb/AK0AA3YBqgNfAZIDGgEkBAADTAF3A28BpAMvAUcUAAMvAUgDPgFhA0ABZQNA
        AWUDQAFlA0ABZQNAAWUDQAFlAz4BYQMwAUkQAANRAX4DagGfAy4BRQQAAy4BRQOCAbYDQQFm/wCtAAN2
        AaoDXwGSAxoBJAQAA1EBfgNvAaQDKgE+BwABAQMGAQgDEgEYAxIBGAMSARgDEgEYAxIBGAMSARgDEgEY
        AxIBGAMSARgDEgEYAxIBGAMSARgDEgEYAxIBGAMGAQgDAAEBA0oBdANtAaEDMgFMBAADLgFFA4IBtgNB
        AWb/AK0AA3YBqgNfAZIDGgEkBAADTgF7A28BpAMrAUEEAAMHAQoDJQE3A1IBgANSAYADUgGAA1IBgANS
        AYADUgGAA1IBgANSAYADUgGAA1IBgANSAYADUgGAA1IBgANSAYADJwE5AwgBCwNMAXcDbAGgAzABSQQA
        Ay4BRQOCAbYDQQFm/wCtAAN2AaoDXwGSAxoBJAQAA0UBbANvAaQDNgFTBAADDAEQAzYBVAOGAbkDhwG6
        A4cBugOHAboDhwG6A4cBugOHAboDhwG6A4cBugOHAboDhwG6A4cBugOHAboDhwG6AzgBVwMNAREDWgGM
        A2gBnAMoATwEAAMuAUUDggG2A0EBZv8ArQADdgGqA18BkgMaASQEAAM2AVMDcgGmA0kBcgMAAQEEAAMB
        AQIDCAELAwoBDgMKAQ4DCgEOAwoBDgMKAQ4DCgEOAwoBDgMKAQ4DCgEOAwoBDgMKAQ4DCgEOAwkBDAMB
        AQIDCgENA3QBqQNeAZADHAEnBAADLgFFA4IBtgNBAWb/AK0AA3QBqQNoAZ0DKgE+AxYBHgMvAUgDeAGs
        A2gBmwMLAQ8DAAEBAwQBBgMIAQsDBAEGAwgBCwMEAQYDBwEKAwYBCAMHAQkDBwEJAwYBCAMHAQoDBAEG
        AwgBCwMEAQUDCAELAwUBBwMrAUEDjwHAA0UBbAMRARcDFQEcAzsBWwOHAboDQAFl/wCtAANqAZ8D1QHs
        A+8B+QPvAfkD7wH5A+MB8wONAb4DNgFTAwgBCwMiATIDOQFZAyEBLwM8AV4DIwEzAzkBWAMrAUEDMgFM
        AzIBTAMrAUADOQFYAyIBMgM8AV8DHwEtAzoBWgMqAT4DeAGtA4YBuQMvAUgDSgF0A88B6gPvAfkDrgHW
        AzoBWv8ArQADFAEbAy4BRgMzAU4DMwFOAzMBTgNCAWgDdgGrA3IBpwMSARgDEAEVAyABLgMSARgDIgEx
        AxMBGgMgAS4DGAEhAxwBJwMcAScDGAEhAyABLgMSARkDIgEyAxEBFwMhAS8DOQFZA68B1wNJAXMDFQEc
        Ax8BLAMyAU0DMgFNAygBOwMIAQv/AK0AAwIBAwMGAQgDBwEKAwcBCgMHAQoDDAEQAz0BYAOUAcQDWQGK
        AwcBCgMOARMDPAFeA0UBbANDAWoDRQFsA0QBawNEAWsDRAFrA0QBawNFAWwDQwFqA0UBbQNDAWoDUgGA
        A6cB0gN0AakDJAE1AwMEBAEGAwcBCgMHAQkDBQEHAwABAf8AxAABAQMUARsDRwFxA58BzANYAYkDEgEY
        AyIBMgNcAY4DfwGzA4YBuQOGAbkDhgG5A4YBuQOGAbkDhgG5A4YBuQOGAbkDiAG7A7QB2gOUAcUDLgFG
        AwgBC/8A3QADAgEDAxgBIQNHAXEDlAHEA3IBpgM7AVwDKgE+AyoBPwMrAUADKwFAAysBQAMrAUADKwFA
        Ay4BRQNAAWQDewGwA9QB6wOFAbgDMgFMAwoBDv8A5QADAgEDAxQBGwM9AWADcgGmA4sBvQNoAZwDSgF0
        AzgBVgMuAUUDKwFBAzABSQM9AWADVQGEA3QBqQOHAboDXwGSAywBQgMHAQr/APAAAQEDCAELAykBPQNO
        AXoDagGfA3QBqQNyAaYDcAGlA28BpANvAaQDcgGnA3IBpwNiAZQDPwFjAxsBJgMBAQL/APwAAQEDBwEJ
        Ax8BLQM2AVQDRAFrA0wBeANOAXsDSgF0Az8BYwMuAUYDFwEgAwEBAv8A/wD/AP8A/wD/AP8A/wD/AP8A
        /wD/ANAAAUIBTQE+BwABPgMAASgDAAGMAwABIwMAAQEBAAEBBQABvAECFgAD/wEABP8B4A8AAY8D/wHg
        DwABhwP/AeAPAAGDA/8B4A8AAYED/wHgDwABwAH4AQMB/wHgDwAB4AFAAQAB/wHgDwAB8AIAAT8B4A8A
        AfgCAAEfAeAPAAH8AgABDwHgDwAB/AIAAQcB4A8AAfwCAAEHAeAPAAGAAwABIA8AAYADAAEgDwABgAF4
        AQEBwAEgDwABiAH4AQEBwgEgDwABiAH4AQEB4gEgDwABiAGAAQABAgEgDwABiAGAAQABAgEgDwABiAGA
        AQABAgEgDwABiAFAAQABAgEgDwABgAMAASAPAAGAAwABIA8AAYADAAEgDwABgAMAASAPAAH8AgABDwHg
        DwAB/gIAAR8B4A8AAf8CAAE/AeAPAAH/AYABAAF/AeAPAAH/AeABAQH/AeAPAAT/AeAPAAT/AeAPAAT/
        AeAPAAT/AeAPAAT/AeAPAAs=
</value>
  </data>
</root>