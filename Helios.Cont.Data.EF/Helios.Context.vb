'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Manual changes to this file may cause unexpected behavior in your application.
'     Manual changes to this file will be overwritten if the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports Helios.Cont.Business.Entity
Imports System.Data.Entity.Core.Objects
Imports System.Linq

Partial Public Class HELIOSEntities
    Inherits DbContext

    Public Sub New()
        MyBase.New("name=HELIOSEntities")
        MyBase.Configuration.LazyLoadingEnabled = False
		MyBase.Configuration.ProxyCreationEnabled = false 
    End Sub

    Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
        Throw New UnintentionalCodeFirstException()
    End Sub

    Public Overridable Property LiquidacionPlaneacion() As DbSet(Of LiquidacionPlaneacion)
    Public Overridable Property accionistasOtros() As DbSet(Of accionistasOtros)
    Public Overridable Property Actividades() As DbSet(Of Actividades)
    Public Overridable Property actividadGasto() As DbSet(Of actividadGasto)
    Public Overridable Property actividadPersonal() As DbSet(Of actividadPersonal)
    Public Overridable Property actividadRecurso() As DbSet(Of actividadRecurso)
    Public Overridable Property actividadRecursoCalculo() As DbSet(Of actividadRecursoCalculo)
    Public Overridable Property actividadSeguimiento() As DbSet(Of actividadSeguimiento)
    Public Overridable Property ActivoDistribucion() As DbSet(Of ActivoDistribucion)
    Public Overridable Property activoInmovilizado() As DbSet(Of activoInmovilizado)
    Public Overridable Property activosFijos() As DbSet(Of activosFijos)
    Public Overridable Property activosfijosDatosRelacionados() As DbSet(Of activosfijosDatosRelacionados)
    Public Overridable Property almacen() As DbSet(Of almacen)
    Public Overridable Property almacenPM() As DbSet(Of almacenPM)
    Public Overridable Property anticipos() As DbSet(Of anticipos)
    Public Overridable Property areaOperativa() As DbSet(Of areaOperativa)
    Public Overridable Property articuloplantilla() As DbSet(Of articuloplantilla)
    Public Overridable Property asiento() As DbSet(Of asiento)
    Public Overridable Property asientoContablePlantilla() As DbSet(Of asientoContablePlantilla)
    Public Overridable Property asistenciaTrabajador() As DbSet(Of asistenciaTrabajador)
    Public Overridable Property asistenciaTrabajadorConcepto() As DbSet(Of asistenciaTrabajadorConcepto)
    Public Overridable Property beneficio() As DbSet(Of beneficio)
    Public Overridable Property beneficioConsumo() As DbSet(Of beneficioConsumo)
    Public Overridable Property beneficioDetalle() As DbSet(Of beneficioDetalle)
    Public Overridable Property beneficioProduccionConsumo() As DbSet(Of beneficioProduccionConsumo)
    Public Overridable Property blocDetalle() As DbSet(Of blocDetalle)
    Public Overridable Property blocOcurrencias() As DbSet(Of blocOcurrencias)
    Public Overridable Property cajaUsuario() As DbSet(Of cajaUsuario)
    Public Overridable Property cajaUsuariodetalle() As DbSet(Of cajaUsuariodetalle)
    Public Overridable Property cajaUsuarioDineroEntregado() As DbSet(Of cajaUsuarioDineroEntregado)
    Public Overridable Property caracteristicaItem() As DbSet(Of caracteristicaItem)
    Public Overridable Property categoriaInfraestructura() As DbSet(Of categoriaInfraestructura)
    Public Overridable Property centrocosto() As DbSet(Of centrocosto)
    Public Overridable Property centroCostoHorario() As DbSet(Of centroCostoHorario)
    Public Overridable Property centroCostosXNComercial() As DbSet(Of centroCostosXNComercial)
    Public Overridable Property cierreCaja() As DbSet(Of cierreCaja)
    Public Overridable Property cierrecontable() As DbSet(Of cierrecontable)
    Public Overridable Property cierreCostoVenta() As DbSet(Of cierreCostoVenta)
    Public Overridable Property cierreEntregables() As DbSet(Of cierreEntregables)
    Public Overridable Property cierreinventario() As DbSet(Of cierreinventario)
    Public Overridable Property cierreResultados() As DbSet(Of cierreResultados)
    Public Overridable Property clasehorario_actividadPersonal() As DbSet(Of clasehorario_actividadPersonal)
    Public Overridable Property clasehorarios() As DbSet(Of clasehorarios)
    Public Overridable Property clientecontrato() As DbSet(Of clientecontrato)
    Public Overridable Property clientecontratodetalle() As DbSet(Of clientecontratodetalle)
    Public Overridable Property clientesSoftPack() As DbSet(Of clientesSoftPack)
    Public Overridable Property comercioEspecializado_Precio() As DbSet(Of comercioEspecializado_Precio)
    Public Overridable Property Compensacion() As DbSet(Of Compensacion)
    Public Overridable Property componente() As DbSet(Of componente)
    Public Overridable Property componenteXDistribucion() As DbSet(Of componenteXDistribucion)
    Public Overridable Property composicion() As DbSet(Of composicion)
    Public Overridable Property compraexterna_sc() As DbSet(Of compraexterna_sc)
    Public Overridable Property compraexternadetalle() As DbSet(Of compraexternadetalle)
    Public Overridable Property comprasexternas_cc() As DbSet(Of comprasexternas_cc)
    Public Overridable Property conceptosActivos() As DbSet(Of conceptosActivos)
    Public Overridable Property conceptosDetalleActivo() As DbSet(Of conceptosDetalleActivo)
    Public Overridable Property conceptosInversiones() As DbSet(Of conceptosInversiones)
    Public Overridable Property configuracionInicio() As DbSet(Of configuracionInicio)
    Public Overridable Property configuracionPrecio() As DbSet(Of configuracionPrecio)
    Public Overridable Property configuracionPrecioProducto() As DbSet(Of configuracionPrecioProducto)
    Public Overridable Property configuracionReserva() As DbSet(Of configuracionReserva)
    Public Overridable Property controlInversionesMoviliarias() As DbSet(Of controlInversionesMoviliarias)
    Public Overridable Property correoEntidades() As DbSet(Of correoEntidades)
    Public Overridable Property Cronograma() As DbSet(Of Cronograma)
    Public Overridable Property CronogramaRepartos() As DbSet(Of CronogramaRepartos)
    Public Overridable Property cuentaMascara() As DbSet(Of cuentaMascara)
    Public Overridable Property cuentaplancontable() As DbSet(Of cuentaplancontable)
    Public Overridable Property cuentaplanContableEmpresa() As DbSet(Of cuentaplanContableEmpresa)
    Public Overridable Property datosGenerales() As DbSet(Of datosGenerales)
    Public Overridable Property detallecompraexterna_sc() As DbSet(Of detallecompraexterna_sc)
    Public Overridable Property detalleHojaGasto() As DbSet(Of detalleHojaGasto)
    Public Overridable Property detalleitem_equivalencias() As DbSet(Of detalleitem_equivalencias)
    Public Overridable Property detalleitem_precios() As DbSet(Of detalleitem_precios)
    Public Overridable Property detalleitemcatalogo_comision() As DbSet(Of detalleitemcatalogo_comision)
    Public Overridable Property detalleitemcatalogo_comisiondetalle() As DbSet(Of detalleitemcatalogo_comisiondetalle)
    Public Overridable Property detalleitemequivalencia_beneficio() As DbSet(Of detalleitemequivalencia_beneficio)
    Public Overridable Property detalleitemequivalencia_catalogos() As DbSet(Of detalleitemequivalencia_catalogos)
    Public Overridable Property detalleitemequivalencia_precios() As DbSet(Of detalleitemequivalencia_precios)
    Public Overridable Property detalleitems() As DbSet(Of detalleitems)
    Public Overridable Property detalleitems_conexo() As DbSet(Of detalleitems_conexo)
    Public Overridable Property detalleitemsModifica() As DbSet(Of detalleitemsModifica)
    Public Overridable Property distribucionComponente() As DbSet(Of distribucionComponente)
    Public Overridable Property distribucionInfraestructura() As DbSet(Of distribucionInfraestructura)
    Public Overridable Property distribucionNumeracionAO() As DbSet(Of distribucionNumeracionAO)
    Public Overridable Property distribucionTipoServicio() As DbSet(Of distribucionTipoServicio)
    Public Overridable Property distritos() As DbSet(Of distritos)
    Public Overridable Property documento() As DbSet(Of documento)
    Public Overridable Property documentoAnticipo() As DbSet(Of documentoAnticipo)
    Public Overridable Property documentoAnticipoConciliacion() As DbSet(Of documentoAnticipoConciliacion)
    Public Overridable Property documentoAnticipoConciliacionCompra() As DbSet(Of documentoAnticipoConciliacionCompra)
    Public Overridable Property documentoAnticipoDetalle() As DbSet(Of documentoAnticipoDetalle)
    Public Overridable Property documentoAportes() As DbSet(Of documentoAportes)
    Public Overridable Property documentoAportesDetalle() As DbSet(Of documentoAportesDetalle)
    Public Overridable Property documentoCaja() As DbSet(Of documentoCaja)
    Public Overridable Property documentoCajaDetalle() As DbSet(Of documentoCajaDetalle)
    Public Overridable Property documentocompra() As DbSet(Of documentocompra)
    Public Overridable Property documentocompra_sc() As DbSet(Of documentocompra_sc)
    Public Overridable Property documentocompradetalle() As DbSet(Of documentocompradetalle)
    Public Overridable Property documentocompradetalle_sc() As DbSet(Of documentocompradetalle_sc)
    Public Overridable Property documentoconsumodirecto() As DbSet(Of documentoconsumodirecto)
    Public Overridable Property documentoEntregaDetalle() As DbSet(Of documentoEntregaDetalle)
    Public Overridable Property documentoEntregaProductos() As DbSet(Of documentoEntregaProductos)
    Public Overridable Property documentoGuia() As DbSet(Of documentoGuia)
    Public Overridable Property documentoguiaDetalle() As DbSet(Of documentoguiaDetalle)
    Public Overridable Property documentoguiaDetalleCondicion() As DbSet(Of documentoguiaDetalleCondicion)
    Public Overridable Property documentoGuiaProperties() As DbSet(Of documentoGuiaProperties)
    Public Overridable Property documentoLibroDiario() As DbSet(Of documentoLibroDiario)
    Public Overridable Property documentoLibroDiarioDetalle() As DbSet(Of documentoLibroDiarioDetalle)
    Public Overridable Property documentoNotas() As DbSet(Of documentoNotas)
    Public Overridable Property documentoNotasAbarrotes() As DbSet(Of documentoNotasAbarrotes)
    Public Overridable Property documentoNotasdetalle() As DbSet(Of documentoNotasdetalle)
    Public Overridable Property documentoObligacionDetalle() As DbSet(Of documentoObligacionDetalle)
    Public Overridable Property documentoObligacionTributaria() As DbSet(Of documentoObligacionTributaria)
    Public Overridable Property documentoOperacionesPrestamo() As DbSet(Of documentoOperacionesPrestamo)
    Public Overridable Property documentoOtrosDatos() As DbSet(Of documentoOtrosDatos)
    Public Overridable Property documentoPedido() As DbSet(Of documentoPedido)
    Public Overridable Property documentoPedidoDet() As DbSet(Of documentoPedidoDet)
    Public Overridable Property documentoPrestamoDetalle() As DbSet(Of documentoPrestamoDetalle)
    Public Overridable Property documentoPrestamos() As DbSet(Of documentoPrestamos)
    Public Overridable Property documentoventa() As DbSet(Of documentoventa)
    Public Overridable Property documentoVenta_sc() As DbSet(Of documentoVenta_sc)
    Public Overridable Property documentoventaAbarrotes() As DbSet(Of documentoventaAbarrotes)
    Public Overridable Property documentoventaAbarrotesDet() As DbSet(Of documentoventaAbarrotesDet)
    Public Overridable Property documentoventadetalle() As DbSet(Of documentoventadetalle)
    Public Overridable Property documentoVentaDetalle_sc() As DbSet(Of documentoVentaDetalle_sc)
    Public Overridable Property documentoVentaExterna() As DbSet(Of documentoVentaExterna)
    Public Overridable Property documentoVentaExterna_sc() As DbSet(Of documentoVentaExterna_sc)
    Public Overridable Property documentoVentaExternaDetalle() As DbSet(Of documentoVentaExternaDetalle)
    Public Overridable Property documentoVentaExternaDetalle_sc() As DbSet(Of documentoVentaExternaDetalle_sc)
    Public Overridable Property documentoventaTransporte() As DbSet(Of documentoventaTransporte)
    Public Overridable Property documentoventaTransporteDetalle() As DbSet(Of documentoventaTransporteDetalle)
    Public Overridable Property empresa() As DbSet(Of empresa)
    Public Overridable Property empresaCierreMensual() As DbSet(Of empresaCierreMensual)
    Public Overridable Property EmpresaEmail() As DbSet(Of EmpresaEmail)
    Public Overridable Property empresaPeriodo() As DbSet(Of empresaPeriodo)
    Public Overridable Property EmpresaSeries() As DbSet(Of EmpresaSeries)
    Public Overridable Property EmpresaSoporte() As DbSet(Of EmpresaSoporte)
    Public Overridable Property entesRegaludoresTC() As DbSet(Of entesRegaludoresTC)
    Public Overridable Property entidad() As DbSet(Of entidad)
    Public Overridable Property EntidadAfiliacionBeneficio() As DbSet(Of EntidadAfiliacionBeneficio)
    Public Overridable Property entidadAtributos() As DbSet(Of entidadAtributos)
    Public Overridable Property entidadBancaria() As DbSet(Of entidadBancaria)
    Public Overridable Property Entidadmembresia_Gym() As DbSet(Of Entidadmembresia_Gym)
    Public Overridable Property estadosFinancieros() As DbSet(Of estadosFinancieros)
    Public Overridable Property estadosFinancierosConfiguracionPagos() As DbSet(Of estadosFinancierosConfiguracionPagos)
    Public Overridable Property hojaPlaneamiento() As DbSet(Of hojaPlaneamiento)
    Public Overridable Property informacionComplementaria() As DbSet(Of informacionComplementaria)
    Public Overridable Property infraestructura() As DbSet(Of infraestructura)
    Public Overridable Property ingresoSunat() As DbSet(Of ingresoSunat)
    Public Overridable Property inventario() As DbSet(Of inventario)
    Public Overridable Property InventarioDetalleSalida() As DbSet(Of InventarioDetalleSalida)
    Public Overridable Property InventarioMovimiento() As DbSet(Of InventarioMovimiento)
    Public Overridable Property InventarioTotal() As DbSet(Of InventarioTotal)
    Public Overridable Property inventarioTransito() As DbSet(Of inventarioTransito)
    Public Overridable Property item() As DbSet(Of item)
    Public Overridable Property itemServicio() As DbSet(Of itemServicio)
    Public Overridable Property jerarquia() As DbSet(Of jerarquia)
    Public Overridable Property laborRecurso() As DbSet(Of laborRecurso)
    Public Overridable Property laborRecursoPersona() As DbSet(Of laborRecursoPersona)
    Public Overridable Property listadoPrecios() As DbSet(Of listadoPrecios)
    Public Overridable Property LoteDetalle() As DbSet(Of LoteDetalle)
    Public Overridable Property mascaracontable() As DbSet(Of mascaracontable)
    Public Overridable Property mascaraContable2() As DbSet(Of mascaraContable2)
    Public Overridable Property mascaraContableExistencia() As DbSet(Of mascaraContableExistencia)
    Public Overridable Property mascaraGastosEmpresa() As DbSet(Of mascaraGastosEmpresa)
    Public Overridable Property mascaraGeneral() As DbSet(Of mascaraGeneral)
    Public Overridable Property mascaraGeneralExistencia() As DbSet(Of mascaraGeneralExistencia)
    Public Overridable Property mascaraProdTerminado() As DbSet(Of mascaraProdTerminado)
    Public Overridable Property mascaraProdTerminadoEmpresa() As DbSet(Of mascaraProdTerminadoEmpresa)
    Public Overridable Property mascaraServicios() As DbSet(Of mascaraServicios)
    Public Overridable Property membresia_congelamiento() As DbSet(Of membresia_congelamiento)
    Public Overridable Property membresia_Gym() As DbSet(Of membresia_Gym)
    Public Overridable Property mensajeriaGOP() As DbSet(Of mensajeriaGOP)
    Public Overridable Property moduloApp() As DbSet(Of moduloApp)
    Public Overridable Property moduloConfiguracion() As DbSet(Of moduloConfiguracion)
    Public Overridable Property movimiento() As DbSet(Of movimiento)
    Public Overridable Property movimientocajaextranjera() As DbSet(Of movimientocajaextranjera)
    Public Overridable Property negocioComercial() As DbSet(Of negocioComercial)
    Public Overridable Property negocioComercialDetalle() As DbSet(Of negocioComercialDetalle)
    Public Overridable Property notificacionAlmacen() As DbSet(Of notificacionAlmacen)
    Public Overridable Property notificacionAlmacenDetalle() As DbSet(Of notificacionAlmacenDetalle)
    Public Overridable Property numeracionBoletas() As DbSet(Of numeracionBoletas)
    Public Overridable Property ocupacion() As DbSet(Of ocupacion)
    Public Overridable Property ocupacionInfraestructura() As DbSet(Of ocupacionInfraestructura)
    Public Overridable Property oferta() As DbSet(Of oferta)
    Public Overridable Property ofertadetalle() As DbSet(Of ofertadetalle)
    Public Overridable Property ordenCompras() As DbSet(Of ordenCompras)
    Public Overridable Property ordenDetalle() As DbSet(Of ordenDetalle)
    Public Overridable Property organizacion() As DbSet(Of organizacion)
    Public Overridable Property otrasEntradas() As DbSet(Of otrasEntradas)
    Public Overridable Property otrasEntradasDetalle() As DbSet(Of otrasEntradasDetalle)
    Public Overridable Property otrasSalidas() As DbSet(Of otrasSalidas)
    Public Overridable Property otrasSalidasDetalle() As DbSet(Of otrasSalidasDetalle)
    Public Overridable Property perfilAnexo() As DbSet(Of perfilAnexo)
    Public Overridable Property Persona() As DbSet(Of Persona)
    Public Overridable Property personaBeneficio() As DbSet(Of personaBeneficio)
    Public Overridable Property PL_LiquidacionIgv() As DbSet(Of PL_LiquidacionIgv)
    Public Overridable Property plancontable() As DbSet(Of plancontable)
    Public Overridable Property preEvento() As DbSet(Of preEvento)
    Public Overridable Property prestamos() As DbSet(Of prestamos)
    Public Overridable Property presupuesto() As DbSet(Of presupuesto)
    Public Overridable Property productoBeneficio() As DbSet(Of productoBeneficio)
    Public Overridable Property productoTerminado() As DbSet(Of productoTerminado)
    Public Overridable Property ProductoXAreaOperativa() As DbSet(Of ProductoXAreaOperativa)
    Public Overridable Property provincias() As DbSet(Of provincias)
    Public Overridable Property proyectoAvance() As DbSet(Of proyectoAvance)
    Public Overridable Property proyectoDetalleInfo() As DbSet(Of proyectoDetalleInfo)
    Public Overridable Property proyectoListaMateriales() As DbSet(Of proyectoListaMateriales)
    Public Overridable Property ProyectoPlaneacion() As DbSet(Of ProyectoPlaneacion)
    Public Overridable Property recursoCosto() As DbSet(Of recursoCosto)
    Public Overridable Property recursoCosto_compraDetalle() As DbSet(Of recursoCosto_compraDetalle)
    Public Overridable Property recursoCostoDetalle() As DbSet(Of recursoCostoDetalle)
    Public Overridable Property recursoCostoLote() As DbSet(Of recursoCostoLote)
    Public Overridable Property recursoCostoLoteTalla() As DbSet(Of recursoCostoLoteTalla)
    Public Overridable Property regiones() As DbSet(Of regiones)
    Public Overridable Property registroautorizacion_desembolso() As DbSet(Of registroautorizacion_desembolso)
    Public Overridable Property registrocomision_autorizacion() As DbSet(Of registrocomision_autorizacion)
    Public Overridable Property registrocomision_usuarios() As DbSet(Of registrocomision_usuarios)
    Public Overridable Property registrocomision_usuarios_detalle() As DbSet(Of registrocomision_usuarios_detalle)
    Public Overridable Property remuneracionPlanilla() As DbSet(Of remuneracionPlanilla)
    Public Overridable Property remuneracionPlanillaDetalle() As DbSet(Of remuneracionPlanillaDetalle)
    Public Overridable Property ruta_horarios() As DbSet(Of ruta_horarios)
    Public Overridable Property ruta_HorarioServicios() As DbSet(Of ruta_HorarioServicios)
    Public Overridable Property rutaProgramacionSalidas() As DbSet(Of rutaProgramacionSalidas)
    Public Overridable Property rutas() As DbSet(Of rutas)
    Public Overridable Property rutaTareoAutos() As DbSet(Of rutaTareoAutos)
    Public Overridable Property rutaTareoDetalle() As DbSet(Of rutaTareoDetalle)
    Public Overridable Property rutaTareoEncomienda() As DbSet(Of rutaTareoEncomienda)
    Public Overridable Property rutaTareoEncomiendaDetalle() As DbSet(Of rutaTareoEncomiendaDetalle)
    Public Overridable Property rutaTareoTripulantes() As DbSet(Of rutaTareoTripulantes)
    Public Overridable Property saldoInicio() As DbSet(Of saldoInicio)
    Public Overridable Property saldoInicioDetalle() As DbSet(Of saldoInicioDetalle)
    Public Overridable Property servicio() As DbSet(Of servicio)
    Public Overridable Property servicioInfraestructura() As DbSet(Of servicioInfraestructura)
    Public Overridable Property servicioInfraestructuraDet() As DbSet(Of servicioInfraestructuraDet)
    Public Overridable Property sist_recaudacion() As DbSet(Of sist_recaudacion)
    Public Overridable Property sysdiagrams() As DbSet(Of sysdiagrams)
    Public Overridable Property systemCode() As DbSet(Of systemCode)
    Public Overridable Property tabla() As DbSet(Of tabla)
    Public Overridable Property tabladetalle() As DbSet(Of tabladetalle)
    Public Overridable Property talla() As DbSet(Of talla)
    Public Overridable Property talla_equivalencias() As DbSet(Of talla_equivalencias)
    Public Overridable Property tasaITF() As DbSet(Of tasaITF)
    Public Overridable Property tipoCambio() As DbSet(Of tipoCambio)
    Public Overridable Property tipocambioTransaccion() As DbSet(Of tipocambioTransaccion)
    Public Overridable Property tipoServicioInfraestructura() As DbSet(Of tipoServicioInfraestructura)
    Public Overridable Property totalesAlmacen() As DbSet(Of totalesAlmacen)
    Public Overridable Property totalesAlmacenOthers() As DbSet(Of totalesAlmacenOthers)
    Public Overridable Property totalesCaja() As DbSet(Of totalesCaja)
    Public Overridable Property totalesLiquidacion() As DbSet(Of totalesLiquidacion)
    Public Overridable Property totalesLiquidacionEmpresa() As DbSet(Of totalesLiquidacionEmpresa)
    Public Overridable Property totalinventario() As DbSet(Of totalinventario)
    Public Overridable Property totalLiquidacionUtilidades() As DbSet(Of totalLiquidacionUtilidades)
    Public Overridable Property Trabajador_PL() As DbSet(Of Trabajador_PL)
    Public Overridable Property trabajadorOcupacion_PL() As DbSet(Of trabajadorOcupacion_PL)
    Public Overridable Property ubigeo() As DbSet(Of ubigeo)
    Public Overridable Property UsuariosEmpresa() As DbSet(Of UsuariosEmpresa)
    Public Overridable Property vehiculoAsiento_Precios() As DbSet(Of vehiculoAsiento_Precios)
    Public Overridable Property vehiculoAsientos() As DbSet(Of vehiculoAsientos)
    Public Overridable Property ventaDetalle_oferta() As DbSet(Of ventaDetalle_oferta)

    <DbFunction("HELIOSEntities", "iter_charlist_to_tbl")>
    Public Overridable Function iter_charlist_to_tbl(list As String, delimiter As String) As IQueryable(Of iter_charlist_to_tbl_Result)
        Dim listParameter As ObjectParameter = If(list IsNot Nothing, New ObjectParameter("list", list), New ObjectParameter("list", GetType(String)))

        Dim delimiterParameter As ObjectParameter = If(delimiter IsNot Nothing, New ObjectParameter("delimiter", delimiter), New ObjectParameter("delimiter", GetType(String)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of iter_charlist_to_tbl_Result)("[HELIOSEntities].[iter_charlist_to_tbl](@list, @delimiter)", listParameter, delimiterParameter)
    End Function

    Public Overridable Function GetSaldobyCuentaFinanciera(idEntidad As Nullable(Of Integer), periodo_Ant As String, periodo_Actual As String) As ObjectResult(Of GetSaldobyCuentaFinanciera_Result)
        Dim idEntidadParameter As ObjectParameter = If(idEntidad.HasValue, New ObjectParameter("idEntidad", idEntidad), New ObjectParameter("idEntidad", GetType(Integer)))

        Dim periodo_AntParameter As ObjectParameter = If(periodo_Ant IsNot Nothing, New ObjectParameter("periodo_Ant", periodo_Ant), New ObjectParameter("periodo_Ant", GetType(String)))

        Dim periodo_ActualParameter As ObjectParameter = If(periodo_Actual IsNot Nothing, New ObjectParameter("periodo_Actual", periodo_Actual), New ObjectParameter("periodo_Actual", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetSaldobyCuentaFinanciera_Result)("GetSaldobyCuentaFinanciera", idEntidadParameter, periodo_AntParameter, periodo_ActualParameter)
    End Function

    Public Overridable Function GetSaldoCuentasFinancieraCajeroActivo(idEmpresa As String, idEstable As Nullable(Of Integer), periodo_Ant As String, periodo_Actual As Nullable(Of Date), tipoCuenta As String, idCajaUsuario As Nullable(Of Integer)) As ObjectResult(Of GetSaldoCuentasFinancieraCajeroActivo_Result)
        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Dim idEstableParameter As ObjectParameter = If(idEstable.HasValue, New ObjectParameter("idEstable", idEstable), New ObjectParameter("idEstable", GetType(Integer)))

        Dim periodo_AntParameter As ObjectParameter = If(periodo_Ant IsNot Nothing, New ObjectParameter("periodo_Ant", periodo_Ant), New ObjectParameter("periodo_Ant", GetType(String)))

        Dim periodo_ActualParameter As ObjectParameter = If(periodo_Actual.HasValue, New ObjectParameter("periodo_Actual", periodo_Actual), New ObjectParameter("periodo_Actual", GetType(Date)))

        Dim tipoCuentaParameter As ObjectParameter = If(tipoCuenta IsNot Nothing, New ObjectParameter("tipoCuenta", tipoCuenta), New ObjectParameter("tipoCuenta", GetType(String)))

        Dim idCajaUsuarioParameter As ObjectParameter = If(idCajaUsuario.HasValue, New ObjectParameter("IdCajaUsuario", idCajaUsuario), New ObjectParameter("IdCajaUsuario", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetSaldoCuentasFinancieraCajeroActivo_Result)("GetSaldoCuentasFinancieraCajeroActivo", idEmpresaParameter, idEstableParameter, periodo_AntParameter, periodo_ActualParameter, tipoCuentaParameter, idCajaUsuarioParameter)
    End Function

    Public Overridable Function GetSaldoCuentasFinancieraEmpresa(idEmpresa As String, periodo_Ant As String, periodo_Actual As String) As ObjectResult(Of GetSaldoCuentasFinancieraEmpresa_Result)
        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Dim periodo_AntParameter As ObjectParameter = If(periodo_Ant IsNot Nothing, New ObjectParameter("periodo_Ant", periodo_Ant), New ObjectParameter("periodo_Ant", GetType(String)))

        Dim periodo_ActualParameter As ObjectParameter = If(periodo_Actual IsNot Nothing, New ObjectParameter("periodo_Actual", periodo_Actual), New ObjectParameter("periodo_Actual", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetSaldoCuentasFinancieraEmpresa_Result)("GetSaldoCuentasFinancieraEmpresa", idEmpresaParameter, periodo_AntParameter, periodo_ActualParameter)
    End Function

    Public Overridable Function GetSaldoCuentasFinancieraEmpresaXtipo(idEmpresa As String, periodo_Ant As String, periodo_Actual As String, tipoCuenta As String) As ObjectResult(Of GetSaldoCuentasFinancieraEmpresaXtipo_Result)
        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Dim periodo_AntParameter As ObjectParameter = If(periodo_Ant IsNot Nothing, New ObjectParameter("periodo_Ant", periodo_Ant), New ObjectParameter("periodo_Ant", GetType(String)))

        Dim periodo_ActualParameter As ObjectParameter = If(periodo_Actual IsNot Nothing, New ObjectParameter("periodo_Actual", periodo_Actual), New ObjectParameter("periodo_Actual", GetType(String)))

        Dim tipoCuentaParameter As ObjectParameter = If(tipoCuenta IsNot Nothing, New ObjectParameter("tipoCuenta", tipoCuenta), New ObjectParameter("tipoCuenta", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetSaldoCuentasFinancieraEmpresaXtipo_Result)("GetSaldoCuentasFinancieraEmpresaXtipo", idEmpresaParameter, periodo_AntParameter, periodo_ActualParameter, tipoCuentaParameter)
    End Function

    Public Overridable Function GetSaldoCuentasFinancieraEmpresaXtipoFecha(idEmpresa As String, idEstable As Nullable(Of Integer), periodo_Ant As String, periodo_Actual As Nullable(Of Date), tipoCuenta As String) As ObjectResult(Of GetSaldoCuentasFinancieraEmpresaXtipoFecha_Result)
        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Dim idEstableParameter As ObjectParameter = If(idEstable.HasValue, New ObjectParameter("idEstable", idEstable), New ObjectParameter("idEstable", GetType(Integer)))

        Dim periodo_AntParameter As ObjectParameter = If(periodo_Ant IsNot Nothing, New ObjectParameter("periodo_Ant", periodo_Ant), New ObjectParameter("periodo_Ant", GetType(String)))

        Dim periodo_ActualParameter As ObjectParameter = If(periodo_Actual.HasValue, New ObjectParameter("periodo_Actual", periodo_Actual), New ObjectParameter("periodo_Actual", GetType(Date)))

        Dim tipoCuentaParameter As ObjectParameter = If(tipoCuenta IsNot Nothing, New ObjectParameter("tipoCuenta", tipoCuenta), New ObjectParameter("tipoCuenta", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetSaldoCuentasFinancieraEmpresaXtipoFecha_Result)("GetSaldoCuentasFinancieraEmpresaXtipoFecha", idEmpresaParameter, idEstableParameter, periodo_AntParameter, periodo_ActualParameter, tipoCuentaParameter)
    End Function

    Public Overridable Function GetSaldoCuentasFinancieraEmpresaXtipoXIdCaja(idEmpresa As String, periodo_Ant As String, periodo_Actual As String, tipoCuenta As String, idCajaUsuario As Nullable(Of Integer)) As ObjectResult(Of GetSaldoCuentasFinancieraEmpresaXtipoXIdCaja_Result)
        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Dim periodo_AntParameter As ObjectParameter = If(periodo_Ant IsNot Nothing, New ObjectParameter("periodo_Ant", periodo_Ant), New ObjectParameter("periodo_Ant", GetType(String)))

        Dim periodo_ActualParameter As ObjectParameter = If(periodo_Actual IsNot Nothing, New ObjectParameter("periodo_Actual", periodo_Actual), New ObjectParameter("periodo_Actual", GetType(String)))

        Dim tipoCuentaParameter As ObjectParameter = If(tipoCuenta IsNot Nothing, New ObjectParameter("tipoCuenta", tipoCuenta), New ObjectParameter("tipoCuenta", GetType(String)))

        Dim idCajaUsuarioParameter As ObjectParameter = If(idCajaUsuario.HasValue, New ObjectParameter("IdCajaUsuario", idCajaUsuario), New ObjectParameter("IdCajaUsuario", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetSaldoCuentasFinancieraEmpresaXtipoXIdCaja_Result)("GetSaldoCuentasFinancieraEmpresaXtipoXIdCaja", idEmpresaParameter, periodo_AntParameter, periodo_ActualParameter, tipoCuentaParameter, idCajaUsuarioParameter)
    End Function

    Public Overridable Function ListaDistribucionInfraestructura(idEmprersa As String, idEstablecimiento As Nullable(Of Integer), tipoVenta As String, estadoDistribucion As String, estado As String, listaDist As String, tipoConsulta As Nullable(Of Integer), tipoBusqueda As Nullable(Of Integer)) As ObjectResult(Of ListaDistribucionInfraestructura_Result)
        Dim idEmprersaParameter As ObjectParameter = If(idEmprersa IsNot Nothing, New ObjectParameter("idEmprersa", idEmprersa), New ObjectParameter("idEmprersa", GetType(String)))

        Dim idEstablecimientoParameter As ObjectParameter = If(idEstablecimiento.HasValue, New ObjectParameter("idEstablecimiento", idEstablecimiento), New ObjectParameter("idEstablecimiento", GetType(Integer)))

        Dim tipoVentaParameter As ObjectParameter = If(tipoVenta IsNot Nothing, New ObjectParameter("tipoVenta", tipoVenta), New ObjectParameter("tipoVenta", GetType(String)))

        Dim estadoDistribucionParameter As ObjectParameter = If(estadoDistribucion IsNot Nothing, New ObjectParameter("estadoDistribucion", estadoDistribucion), New ObjectParameter("estadoDistribucion", GetType(String)))

        Dim estadoParameter As ObjectParameter = If(estado IsNot Nothing, New ObjectParameter("estado", estado), New ObjectParameter("estado", GetType(String)))

        Dim listaDistParameter As ObjectParameter = If(listaDist IsNot Nothing, New ObjectParameter("listaDist", listaDist), New ObjectParameter("listaDist", GetType(String)))

        Dim tipoConsultaParameter As ObjectParameter = If(tipoConsulta.HasValue, New ObjectParameter("tipoConsulta", tipoConsulta), New ObjectParameter("tipoConsulta", GetType(Integer)))

        Dim tipoBusquedaParameter As ObjectParameter = If(tipoBusqueda.HasValue, New ObjectParameter("tipoBusqueda", tipoBusqueda), New ObjectParameter("tipoBusqueda", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ListaDistribucionInfraestructura_Result)("ListaDistribucionInfraestructura", idEmprersaParameter, idEstablecimientoParameter, tipoVentaParameter, estadoDistribucionParameter, estadoParameter, listaDistParameter, tipoConsultaParameter, tipoBusquedaParameter)
    End Function

    Public Overridable Function ListaDistribucionInfraestructuraAndHospedados(idEmprersa As String, idEstablecimiento As Nullable(Of Integer), tipoVenta As String, estadoDistribucion As String, estado As String, listaDist As String, tipoConsulta As Nullable(Of Integer), tipoBusqueda As Nullable(Of Integer)) As ObjectResult(Of ListaDistribucionInfraestructuraAndHospedados_Result)
        Dim idEmprersaParameter As ObjectParameter = If(idEmprersa IsNot Nothing, New ObjectParameter("idEmprersa", idEmprersa), New ObjectParameter("idEmprersa", GetType(String)))

        Dim idEstablecimientoParameter As ObjectParameter = If(idEstablecimiento.HasValue, New ObjectParameter("idEstablecimiento", idEstablecimiento), New ObjectParameter("idEstablecimiento", GetType(Integer)))

        Dim tipoVentaParameter As ObjectParameter = If(tipoVenta IsNot Nothing, New ObjectParameter("tipoVenta", tipoVenta), New ObjectParameter("tipoVenta", GetType(String)))

        Dim estadoDistribucionParameter As ObjectParameter = If(estadoDistribucion IsNot Nothing, New ObjectParameter("estadoDistribucion", estadoDistribucion), New ObjectParameter("estadoDistribucion", GetType(String)))

        Dim estadoParameter As ObjectParameter = If(estado IsNot Nothing, New ObjectParameter("estado", estado), New ObjectParameter("estado", GetType(String)))

        Dim listaDistParameter As ObjectParameter = If(listaDist IsNot Nothing, New ObjectParameter("listaDist", listaDist), New ObjectParameter("listaDist", GetType(String)))

        Dim tipoConsultaParameter As ObjectParameter = If(tipoConsulta.HasValue, New ObjectParameter("tipoConsulta", tipoConsulta), New ObjectParameter("tipoConsulta", GetType(Integer)))

        Dim tipoBusquedaParameter As ObjectParameter = If(tipoBusqueda.HasValue, New ObjectParameter("tipoBusqueda", tipoBusqueda), New ObjectParameter("tipoBusqueda", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ListaDistribucionInfraestructuraAndHospedados_Result)("ListaDistribucionInfraestructuraAndHospedados", idEmprersaParameter, idEstablecimientoParameter, tipoVentaParameter, estadoDistribucionParameter, estadoParameter, listaDistParameter, tipoConsultaParameter, tipoBusquedaParameter)
    End Function

    Public Overridable Function ListaDocumentoCaja(listaParametros As String) As ObjectResult(Of ListaDocumentoCaja_Result)
        Dim listaParametrosParameter As ObjectParameter = If(listaParametros IsNot Nothing, New ObjectParameter("listaParametros", listaParametros), New ObjectParameter("listaParametros", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ListaDocumentoCaja_Result)("ListaDocumentoCaja", listaParametrosParameter)
    End Function

    Public Overridable Function ListaInfraestructura(idEmprersa As String, idEstablecimiento As Nullable(Of Integer), tipoVenta As String, estadoDistribucion As String, estado As String, listaDist As String, tipoConsulta As Nullable(Of Integer), tipoBusqueda As Nullable(Of Integer)) As ObjectResult(Of ListaInfraestructura_Result)
        Dim idEmprersaParameter As ObjectParameter = If(idEmprersa IsNot Nothing, New ObjectParameter("idEmprersa", idEmprersa), New ObjectParameter("idEmprersa", GetType(String)))

        Dim idEstablecimientoParameter As ObjectParameter = If(idEstablecimiento.HasValue, New ObjectParameter("idEstablecimiento", idEstablecimiento), New ObjectParameter("idEstablecimiento", GetType(Integer)))

        Dim tipoVentaParameter As ObjectParameter = If(tipoVenta IsNot Nothing, New ObjectParameter("tipoVenta", tipoVenta), New ObjectParameter("tipoVenta", GetType(String)))

        Dim estadoDistribucionParameter As ObjectParameter = If(estadoDistribucion IsNot Nothing, New ObjectParameter("estadoDistribucion", estadoDistribucion), New ObjectParameter("estadoDistribucion", GetType(String)))

        Dim estadoParameter As ObjectParameter = If(estado IsNot Nothing, New ObjectParameter("estado", estado), New ObjectParameter("estado", GetType(String)))

        Dim listaDistParameter As ObjectParameter = If(listaDist IsNot Nothing, New ObjectParameter("listaDist", listaDist), New ObjectParameter("listaDist", GetType(String)))

        Dim tipoConsultaParameter As ObjectParameter = If(tipoConsulta.HasValue, New ObjectParameter("tipoConsulta", tipoConsulta), New ObjectParameter("tipoConsulta", GetType(Integer)))

        Dim tipoBusquedaParameter As ObjectParameter = If(tipoBusqueda.HasValue, New ObjectParameter("tipoBusqueda", tipoBusqueda), New ObjectParameter("tipoBusqueda", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ListaInfraestructura_Result)("ListaInfraestructura", idEmprersaParameter, idEstablecimientoParameter, tipoVentaParameter, estadoDistribucionParameter, estadoParameter, listaDistParameter, tipoConsultaParameter, tipoBusquedaParameter)
    End Function

    Public Overridable Function ListaInfraestructuraTransporte(idEmprersa As String, idEstablecimiento As Nullable(Of Integer), tipoVenta As String, estadoDistribucion As String, estado As String, listaDist As String, tipoConsulta As Nullable(Of Integer), tipoBusqueda As Nullable(Of Integer)) As ObjectResult(Of ListaInfraestructuraTransporte_Result)
        Dim idEmprersaParameter As ObjectParameter = If(idEmprersa IsNot Nothing, New ObjectParameter("idEmprersa", idEmprersa), New ObjectParameter("idEmprersa", GetType(String)))

        Dim idEstablecimientoParameter As ObjectParameter = If(idEstablecimiento.HasValue, New ObjectParameter("idEstablecimiento", idEstablecimiento), New ObjectParameter("idEstablecimiento", GetType(Integer)))

        Dim tipoVentaParameter As ObjectParameter = If(tipoVenta IsNot Nothing, New ObjectParameter("tipoVenta", tipoVenta), New ObjectParameter("tipoVenta", GetType(String)))

        Dim estadoDistribucionParameter As ObjectParameter = If(estadoDistribucion IsNot Nothing, New ObjectParameter("estadoDistribucion", estadoDistribucion), New ObjectParameter("estadoDistribucion", GetType(String)))

        Dim estadoParameter As ObjectParameter = If(estado IsNot Nothing, New ObjectParameter("estado", estado), New ObjectParameter("estado", GetType(String)))

        Dim listaDistParameter As ObjectParameter = If(listaDist IsNot Nothing, New ObjectParameter("listaDist", listaDist), New ObjectParameter("listaDist", GetType(String)))

        Dim tipoConsultaParameter As ObjectParameter = If(tipoConsulta.HasValue, New ObjectParameter("tipoConsulta", tipoConsulta), New ObjectParameter("tipoConsulta", GetType(Integer)))

        Dim tipoBusquedaParameter As ObjectParameter = If(tipoBusqueda.HasValue, New ObjectParameter("tipoBusqueda", tipoBusqueda), New ObjectParameter("tipoBusqueda", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ListaInfraestructuraTransporte_Result)("ListaInfraestructuraTransporte", idEmprersaParameter, idEstablecimientoParameter, tipoVentaParameter, estadoDistribucionParameter, estadoParameter, listaDistParameter, tipoConsultaParameter, tipoBusquedaParameter)
    End Function

    Public Overridable Function ListaPersonalAperturaEntregasXendir() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ListaPersonalAperturaEntregasXendir")
    End Function

    Public Overridable Function ListaPersonasXCaja(estado As String, idEmpresa As String, idEstablec As Nullable(Of Integer)) As ObjectResult(Of ListaPersonasXCaja_Result)
        Dim estadoParameter As ObjectParameter = If(estado IsNot Nothing, New ObjectParameter("Estado", estado), New ObjectParameter("Estado", GetType(String)))

        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Dim idEstablecParameter As ObjectParameter = If(idEstablec.HasValue, New ObjectParameter("idEstablec", idEstablec), New ObjectParameter("idEstablec", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ListaPersonasXCaja_Result)("ListaPersonasXCaja", estadoParameter, idEmpresaParameter, idEstablecParameter)
    End Function

    Public Overridable Function ListaTransporteXProgramacion(idEmprersa As String, idEstablecimiento As Nullable(Of Integer), tipoVenta As String, estadoDistribucion As String, estado As String, listaDist As String, tipoConsulta As Nullable(Of Integer), tipoBusqueda As Nullable(Of Integer)) As ObjectResult(Of ListaTransporteXProgramacion_Result)
        Dim idEmprersaParameter As ObjectParameter = If(idEmprersa IsNot Nothing, New ObjectParameter("idEmprersa", idEmprersa), New ObjectParameter("idEmprersa", GetType(String)))

        Dim idEstablecimientoParameter As ObjectParameter = If(idEstablecimiento.HasValue, New ObjectParameter("idEstablecimiento", idEstablecimiento), New ObjectParameter("idEstablecimiento", GetType(Integer)))

        Dim tipoVentaParameter As ObjectParameter = If(tipoVenta IsNot Nothing, New ObjectParameter("tipoVenta", tipoVenta), New ObjectParameter("tipoVenta", GetType(String)))

        Dim estadoDistribucionParameter As ObjectParameter = If(estadoDistribucion IsNot Nothing, New ObjectParameter("estadoDistribucion", estadoDistribucion), New ObjectParameter("estadoDistribucion", GetType(String)))

        Dim estadoParameter As ObjectParameter = If(estado IsNot Nothing, New ObjectParameter("estado", estado), New ObjectParameter("estado", GetType(String)))

        Dim listaDistParameter As ObjectParameter = If(listaDist IsNot Nothing, New ObjectParameter("listaDist", listaDist), New ObjectParameter("listaDist", GetType(String)))

        Dim tipoConsultaParameter As ObjectParameter = If(tipoConsulta.HasValue, New ObjectParameter("tipoConsulta", tipoConsulta), New ObjectParameter("tipoConsulta", GetType(Integer)))

        Dim tipoBusquedaParameter As ObjectParameter = If(tipoBusqueda.HasValue, New ObjectParameter("tipoBusqueda", tipoBusqueda), New ObjectParameter("tipoBusqueda", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ListaTransporteXProgramacion_Result)("ListaTransporteXProgramacion", idEmprersaParameter, idEstablecimientoParameter, tipoVentaParameter, estadoDistribucionParameter, estadoParameter, listaDistParameter, tipoConsultaParameter, tipoBusquedaParameter)
    End Function

    Public Overridable Function MovimientosAlmacenXfecha(anio As Nullable(Of Integer), mes As Nullable(Of Integer), dia As Nullable(Of Integer), idEmpresa As String, establecimiento As Nullable(Of Integer), tipomovimiento As String, tipoConsulta As String) As ObjectResult(Of MovimientosAlmacenXfecha_Result)
        Dim anioParameter As ObjectParameter = If(anio.HasValue, New ObjectParameter("anio", anio), New ObjectParameter("anio", GetType(Integer)))

        Dim mesParameter As ObjectParameter = If(mes.HasValue, New ObjectParameter("mes", mes), New ObjectParameter("mes", GetType(Integer)))

        Dim diaParameter As ObjectParameter = If(dia.HasValue, New ObjectParameter("dia", dia), New ObjectParameter("dia", GetType(Integer)))

        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Dim establecimientoParameter As ObjectParameter = If(establecimiento.HasValue, New ObjectParameter("establecimiento", establecimiento), New ObjectParameter("establecimiento", GetType(Integer)))

        Dim tipomovimientoParameter As ObjectParameter = If(tipomovimiento IsNot Nothing, New ObjectParameter("tipomovimiento", tipomovimiento), New ObjectParameter("tipomovimiento", GetType(String)))

        Dim tipoConsultaParameter As ObjectParameter = If(tipoConsulta IsNot Nothing, New ObjectParameter("tipoConsulta", tipoConsulta), New ObjectParameter("tipoConsulta", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of MovimientosAlmacenXfecha_Result)("MovimientosAlmacenXfecha", anioParameter, mesParameter, diaParameter, idEmpresaParameter, establecimientoParameter, tipomovimientoParameter, tipoConsultaParameter)
    End Function

    Public Overridable Function MovimientosAlmacenXPeriodo(periodo As String, establecimiento As Nullable(Of Integer), idEmpresa As String, tipoConsulta As String) As ObjectResult(Of MovimientosAlmacenXPeriodo_Result)
        Dim periodoParameter As ObjectParameter = If(periodo IsNot Nothing, New ObjectParameter("periodo", periodo), New ObjectParameter("periodo", GetType(String)))

        Dim establecimientoParameter As ObjectParameter = If(establecimiento.HasValue, New ObjectParameter("establecimiento", establecimiento), New ObjectParameter("establecimiento", GetType(Integer)))

        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Dim tipoConsultaParameter As ObjectParameter = If(tipoConsulta IsNot Nothing, New ObjectParameter("tipoConsulta", tipoConsulta), New ObjectParameter("tipoConsulta", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of MovimientosAlmacenXPeriodo_Result)("MovimientosAlmacenXPeriodo", periodoParameter, establecimientoParameter, idEmpresaParameter, tipoConsultaParameter)
    End Function

    Public Overridable Function MovimientosTransferenciaXAlmacen(periodo As String, establecimiento As Nullable(Of Integer)) As ObjectResult(Of MovimientosTransferenciaXAlmacen_Result)
        Dim periodoParameter As ObjectParameter = If(periodo IsNot Nothing, New ObjectParameter("periodo", periodo), New ObjectParameter("periodo", GetType(String)))

        Dim establecimientoParameter As ObjectParameter = If(establecimiento.HasValue, New ObjectParameter("establecimiento", establecimiento), New ObjectParameter("establecimiento", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of MovimientosTransferenciaXAlmacen_Result)("MovimientosTransferenciaXAlmacen", periodoParameter, establecimientoParameter)
    End Function

    Public Overridable Function MovimientosTransferenciaXAlmacen_Full(establecimiento As Nullable(Of Integer)) As ObjectResult(Of MovimientosTransferenciaXAlmacen_Full_Result)
        Dim establecimientoParameter As ObjectParameter = If(establecimiento.HasValue, New ObjectParameter("establecimiento", establecimiento), New ObjectParameter("establecimiento", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of MovimientosTransferenciaXAlmacen_Full_Result)("MovimientosTransferenciaXAlmacen_Full", establecimientoParameter)
    End Function

    Public Overridable Function ns_txt_file_read(os_file_name As String, text_file As ObjectParameter) As Integer
        Dim os_file_nameParameter As ObjectParameter = If(os_file_name IsNot Nothing, New ObjectParameter("os_file_name", os_file_name), New ObjectParameter("os_file_name", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ns_txt_file_read", os_file_nameParameter, text_file)
    End Function

    Public Overridable Function sp_alterdiagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function sp_creatediagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function sp_dropdiagram(diagramname As String, owner_id As Nullable(Of Integer)) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_helpdiagramdefinition(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagramdefinition_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagramdefinition_Result)("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_helpdiagrams(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagrams_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagrams_Result)("sp_helpdiagrams", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_renamediagram(diagramname As String, owner_id As Nullable(Of Integer), new_diagramname As String) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim new_diagramnameParameter As ObjectParameter = If(new_diagramname IsNot Nothing, New ObjectParameter("new_diagramname", new_diagramname), New ObjectParameter("new_diagramname", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter)
    End Function

    Public Overridable Function sp_upgraddiagrams() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_upgraddiagrams")
    End Function

    Public Overridable Function usp_EditarDetalleVenta(idDocumento As Nullable(Of Integer)) As ObjectResult(Of usp_EditarDetalleVenta_Result)
        Dim idDocumentoParameter As ObjectParameter = If(idDocumento.HasValue, New ObjectParameter("idDocumento", idDocumento), New ObjectParameter("idDocumento", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_EditarDetalleVenta_Result)("usp_EditarDetalleVenta", idDocumentoParameter)
    End Function

    Public Overridable Function usp_GetClientesXcobrar(anio As String, empresa As String) As ObjectResult(Of usp_GetClientesXcobrar_Result)
        Dim anioParameter As ObjectParameter = If(anio IsNot Nothing, New ObjectParameter("Anio", anio), New ObjectParameter("Anio", GetType(String)))

        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("Empresa", empresa), New ObjectParameter("Empresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetClientesXcobrar_Result)("usp_GetClientesXcobrar", anioParameter, empresaParameter)
    End Function

    Public Overridable Function usp_GetCuentasXcobrarXclienteAnual(idEntidad As Nullable(Of Integer), anio As Nullable(Of Integer)) As ObjectResult(Of usp_GetCuentasXcobrarXclienteAnual_Result)
        Dim idEntidadParameter As ObjectParameter = If(idEntidad.HasValue, New ObjectParameter("idEntidad", idEntidad), New ObjectParameter("idEntidad", GetType(Integer)))

        Dim anioParameter As ObjectParameter = If(anio.HasValue, New ObjectParameter("anio", anio), New ObjectParameter("anio", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetCuentasXcobrarXclienteAnual_Result)("usp_GetCuentasXcobrarXclienteAnual", idEntidadParameter, anioParameter)
    End Function

    Public Overridable Function usp_GetCuentasXpagarXComprobanteAnual(anio As Nullable(Of Integer), empresa As String) As ObjectResult(Of usp_GetCuentasXpagarXComprobanteAnual_Result)
        Dim anioParameter As ObjectParameter = If(anio.HasValue, New ObjectParameter("anio", anio), New ObjectParameter("anio", GetType(Integer)))

        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetCuentasXpagarXComprobanteAnual_Result)("usp_GetCuentasXpagarXComprobanteAnual", anioParameter, empresaParameter)
    End Function

    Public Overridable Function usp_GetCuentasXpagarXproveedorAnual(idEntidad As Nullable(Of Integer), anio As Nullable(Of Integer)) As ObjectResult(Of usp_GetCuentasXpagarXproveedorAnual_Result)
        Dim idEntidadParameter As ObjectParameter = If(idEntidad.HasValue, New ObjectParameter("idEntidad", idEntidad), New ObjectParameter("idEntidad", GetType(Integer)))

        Dim anioParameter As ObjectParameter = If(anio.HasValue, New ObjectParameter("anio", anio), New ObjectParameter("anio", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetCuentasXpagarXproveedorAnual_Result)("usp_GetCuentasXpagarXproveedorAnual", idEntidadParameter, anioParameter)
    End Function

    Public Overridable Function usp_GetProductInventoryID(idProducto As Nullable(Of Integer), almacen As Nullable(Of Integer)) As ObjectResult(Of usp_GetProductInventoryID_Result)
        Dim idProductoParameter As ObjectParameter = If(idProducto.HasValue, New ObjectParameter("idProducto", idProducto), New ObjectParameter("idProducto", GetType(Integer)))

        Dim almacenParameter As ObjectParameter = If(almacen.HasValue, New ObjectParameter("almacen", almacen), New ObjectParameter("almacen", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetProductInventoryID_Result)("usp_GetProductInventoryID", idProductoParameter, almacenParameter)
    End Function

    Public Overridable Function usp_GetProductsByEstable(tipoexistencia As String, searchText As String) As ObjectResult(Of usp_GetProductsByEstable_Result)
        Dim tipoexistenciaParameter As ObjectParameter = If(tipoexistencia IsNot Nothing, New ObjectParameter("tipoexistencia", tipoexistencia), New ObjectParameter("tipoexistencia", GetType(String)))

        Dim searchTextParameter As ObjectParameter = If(searchText IsNot Nothing, New ObjectParameter("searchText", searchText), New ObjectParameter("searchText", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetProductsByEstable_Result)("usp_GetProductsByEstable", tipoexistenciaParameter, searchTextParameter)
    End Function

    Public Overridable Function usp_GetProductsEmpresa(empresa As String, tipoexistencia As String) As ObjectResult(Of usp_GetProductsEmpresa_Result)
        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Dim tipoexistenciaParameter As ObjectParameter = If(tipoexistencia IsNot Nothing, New ObjectParameter("tipoexistencia", tipoexistencia), New ObjectParameter("tipoexistencia", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetProductsEmpresa_Result)("usp_GetProductsEmpresa", empresaParameter, tipoexistenciaParameter)
    End Function

    Public Overridable Function usp_GetProductsEmpresaWithParameters(empresa As String, tipoexistencia As String, searchText As String) As ObjectResult(Of usp_GetProductsEmpresaWithParameters_Result)
        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Dim tipoexistenciaParameter As ObjectParameter = If(tipoexistencia IsNot Nothing, New ObjectParameter("tipoexistencia", tipoexistencia), New ObjectParameter("tipoexistencia", GetType(String)))

        Dim searchTextParameter As ObjectParameter = If(searchText IsNot Nothing, New ObjectParameter("searchText", searchText), New ObjectParameter("searchText", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetProductsEmpresaWithParameters_Result)("usp_GetProductsEmpresaWithParameters", empresaParameter, tipoexistenciaParameter, searchTextParameter)
    End Function

    Public Overridable Function usp_GetProductsServicioEmpresa(empresa As String, tipoexistencia As String) As ObjectResult(Of usp_GetProductsServicioEmpresa_Result)
        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Dim tipoexistenciaParameter As ObjectParameter = If(tipoexistencia IsNot Nothing, New ObjectParameter("tipoexistencia", tipoexistencia), New ObjectParameter("tipoexistencia", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetProductsServicioEmpresa_Result)("usp_GetProductsServicioEmpresa", empresaParameter, tipoexistenciaParameter)
    End Function

    Public Overridable Function usp_GetProductsSistema(search As String, idempresa As String) As ObjectResult(Of usp_GetProductsSistema_Result)
        Dim searchParameter As ObjectParameter = If(search IsNot Nothing, New ObjectParameter("search", search), New ObjectParameter("search", GetType(String)))

        Dim idempresaParameter As ObjectParameter = If(idempresa IsNot Nothing, New ObjectParameter("idempresa", idempresa), New ObjectParameter("idempresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetProductsSistema_Result)("usp_GetProductsSistema", searchParameter, idempresaParameter)
    End Function

    Public Overridable Function usp_GetProductsWithParameters(empresa As String, tipoexistencia As String, searchText As String) As ObjectResult(Of usp_GetProductsWithParameters_Result)
        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Dim tipoexistenciaParameter As ObjectParameter = If(tipoexistencia IsNot Nothing, New ObjectParameter("tipoexistencia", tipoexistencia), New ObjectParameter("tipoexistencia", GetType(String)))

        Dim searchTextParameter As ObjectParameter = If(searchText IsNot Nothing, New ObjectParameter("searchText", searchText), New ObjectParameter("searchText", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetProductsWithParameters_Result)("usp_GetProductsWithParameters", empresaParameter, tipoexistenciaParameter, searchTextParameter)
    End Function

    Public Overridable Function usp_GetProveedoresXpagar(anio As String, empresa As String) As ObjectResult(Of usp_GetProveedoresXpagar_Result)
        Dim anioParameter As ObjectParameter = If(anio IsNot Nothing, New ObjectParameter("Anio", anio), New ObjectParameter("Anio", GetType(String)))

        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("Empresa", empresa), New ObjectParameter("Empresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetProveedoresXpagar_Result)("usp_GetProveedoresXpagar", anioParameter, empresaParameter)
    End Function

    Public Overridable Function usp_GetRecursosByProyectoGeneral(idProy As Nullable(Of Integer)) As ObjectResult(Of usp_GetRecursosByProyectoGeneral_Result)
        Dim idProyParameter As ObjectParameter = If(idProy.HasValue, New ObjectParameter("idProy", idProy), New ObjectParameter("idProy", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetRecursosByProyectoGeneral_Result)("usp_GetRecursosByProyectoGeneral", idProyParameter)
    End Function

    Public Overridable Function usp_GetValidacionLotes(iditem As Nullable(Of Integer), fecha As Nullable(Of Date)) As ObjectResult(Of usp_GetValidacionLotes_Result)
        Dim iditemParameter As ObjectParameter = If(iditem.HasValue, New ObjectParameter("iditem", iditem), New ObjectParameter("iditem", GetType(Integer)))

        Dim fechaParameter As ObjectParameter = If(fecha.HasValue, New ObjectParameter("fecha", fecha), New ObjectParameter("fecha", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetValidacionLotes_Result)("usp_GetValidacionLotes", iditemParameter, fechaParameter)
    End Function

    Public Overridable Function usp_GetValidacionLotesAlmacen(iditem As Nullable(Of Integer), fecha As Nullable(Of Date), idAlmacen As Nullable(Of Integer)) As ObjectResult(Of usp_GetValidacionLotesAlmacen_Result)
        Dim iditemParameter As ObjectParameter = If(iditem.HasValue, New ObjectParameter("iditem", iditem), New ObjectParameter("iditem", GetType(Integer)))

        Dim fechaParameter As ObjectParameter = If(fecha.HasValue, New ObjectParameter("fecha", fecha), New ObjectParameter("fecha", GetType(Date)))

        Dim idAlmacenParameter As ObjectParameter = If(idAlmacen.HasValue, New ObjectParameter("idAlmacen", idAlmacen), New ObjectParameter("idAlmacen", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_GetValidacionLotesAlmacen_Result)("usp_GetValidacionLotesAlmacen", iditemParameter, fechaParameter, idAlmacenParameter)
    End Function

    Public Overridable Function usp_HojaTrabajoCompras(periodo As String, empresa As String) As ObjectResult(Of usp_HojaTrabajoCompras_Result)
        Dim periodoParameter As ObjectParameter = If(periodo IsNot Nothing, New ObjectParameter("periodo", periodo), New ObjectParameter("periodo", GetType(String)))

        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_HojaTrabajoCompras_Result)("usp_HojaTrabajoCompras", periodoParameter, empresaParameter)
    End Function

    Public Overridable Function usp_HojaTrabajoMensual(anio_anterior As Nullable(Of Integer), mes_anterior As Nullable(Of Integer), anio_actual As Nullable(Of Integer), mes_actual As Nullable(Of Integer), empresa As String) As ObjectResult(Of usp_HojaTrabajoMensual_Result)
        Dim anio_anteriorParameter As ObjectParameter = If(anio_anterior.HasValue, New ObjectParameter("anio_anterior", anio_anterior), New ObjectParameter("anio_anterior", GetType(Integer)))

        Dim mes_anteriorParameter As ObjectParameter = If(mes_anterior.HasValue, New ObjectParameter("mes_anterior", mes_anterior), New ObjectParameter("mes_anterior", GetType(Integer)))

        Dim anio_actualParameter As ObjectParameter = If(anio_actual.HasValue, New ObjectParameter("anio_actual", anio_actual), New ObjectParameter("anio_actual", GetType(Integer)))

        Dim mes_actualParameter As ObjectParameter = If(mes_actual.HasValue, New ObjectParameter("mes_actual", mes_actual), New ObjectParameter("mes_actual", GetType(Integer)))

        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_HojaTrabajoMensual_Result)("usp_HojaTrabajoMensual", anio_anteriorParameter, mes_anteriorParameter, anio_actualParameter, mes_actualParameter, empresaParameter)
    End Function

    Public Overridable Function usp_HojaTrabajoMensual_Tributario(periodo_anterior As String, periodo_actual As String, empresa As String) As ObjectResult(Of usp_HojaTrabajoMensual_Tributario_Result)
        Dim periodo_anteriorParameter As ObjectParameter = If(periodo_anterior IsNot Nothing, New ObjectParameter("periodo_anterior", periodo_anterior), New ObjectParameter("periodo_anterior", GetType(String)))

        Dim periodo_actualParameter As ObjectParameter = If(periodo_actual IsNot Nothing, New ObjectParameter("periodo_actual", periodo_actual), New ObjectParameter("periodo_actual", GetType(String)))

        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_HojaTrabajoMensual_Tributario_Result)("usp_HojaTrabajoMensual_Tributario", periodo_anteriorParameter, periodo_actualParameter, empresaParameter)
    End Function

    Public Overridable Function usp_HojaTrabajoXmodulo(periodo As String, empresa As String, tipo As String) As ObjectResult(Of usp_HojaTrabajoXmodulo_Result)
        Dim periodoParameter As ObjectParameter = If(periodo IsNot Nothing, New ObjectParameter("periodo", periodo), New ObjectParameter("periodo", GetType(String)))

        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Dim tipoParameter As ObjectParameter = If(tipo IsNot Nothing, New ObjectParameter("tipo", tipo), New ObjectParameter("tipo", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_HojaTrabajoXmodulo_Result)("usp_HojaTrabajoXmodulo", periodoParameter, empresaParameter, tipoParameter)
    End Function

    Public Overridable Function usp_insertarCategoriaInicio(idEmpresa As String, idUnidad As Nullable(Of Integer)) As Integer
        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Dim idUnidadParameter As ObjectParameter = If(idUnidad.HasValue, New ObjectParameter("idUnidad", idUnidad), New ObjectParameter("idUnidad", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("usp_insertarCategoriaInicio", idEmpresaParameter, idUnidadParameter)
    End Function

    Public Overridable Function usp_insertarEntidadInicio(idEmpresa As String) As Integer
        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("usp_insertarEntidadInicio", idEmpresaParameter)
    End Function

    Public Overridable Function usp_insertarNumeracion(idEmpresa As String) As Integer
        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("usp_insertarNumeracion", idEmpresaParameter)
    End Function

    Public Overridable Function usp_PleLibroDiario(periodo As String, idEmpresa As String) As ObjectResult(Of usp_PleLibroDiario_Result)
        Dim periodoParameter As ObjectParameter = If(periodo IsNot Nothing, New ObjectParameter("periodo", periodo), New ObjectParameter("periodo", GetType(String)))

        Dim idEmpresaParameter As ObjectParameter = If(idEmpresa IsNot Nothing, New ObjectParameter("idEmpresa", idEmpresa), New ObjectParameter("idEmpresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_PleLibroDiario_Result)("usp_PleLibroDiario", periodoParameter, idEmpresaParameter)
    End Function

    Public Overridable Function usp_ReporteHojaTrabajoAnual(periodo_anterior As String, anioActual As Nullable(Of Integer), empresa As String) As ObjectResult(Of usp_ReporteHojaTrabajoAnual_Result)
        Dim periodo_anteriorParameter As ObjectParameter = If(periodo_anterior IsNot Nothing, New ObjectParameter("periodo_anterior", periodo_anterior), New ObjectParameter("periodo_anterior", GetType(String)))

        Dim anioActualParameter As ObjectParameter = If(anioActual.HasValue, New ObjectParameter("anioActual", anioActual), New ObjectParameter("anioActual", GetType(Integer)))

        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_ReporteHojaTrabajoAnual_Result)("usp_ReporteHojaTrabajoAnual", periodo_anteriorParameter, anioActualParameter, empresaParameter)
    End Function

    Public Overridable Function usp_ReporteHojaTrabajoMensual(periodo_anterior As String, periodo_actual As String, empresa As String) As ObjectResult(Of usp_ReporteHojaTrabajoMensual_Result)
        Dim periodo_anteriorParameter As ObjectParameter = If(periodo_anterior IsNot Nothing, New ObjectParameter("periodo_anterior", periodo_anterior), New ObjectParameter("periodo_anterior", GetType(String)))

        Dim periodo_actualParameter As ObjectParameter = If(periodo_actual IsNot Nothing, New ObjectParameter("periodo_actual", periodo_actual), New ObjectParameter("periodo_actual", GetType(String)))

        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_ReporteHojaTrabajoMensual_Result)("usp_ReporteHojaTrabajoMensual", periodo_anteriorParameter, periodo_actualParameter, empresaParameter)
    End Function

    Public Overridable Function usp_ReporteHojaTrabajoMensual_V2(periodo_anterior As String, anioActual As Nullable(Of Integer), mesActual As Nullable(Of Integer), empresa As String) As ObjectResult(Of usp_ReporteHojaTrabajoMensual_V2_Result)
        Dim periodo_anteriorParameter As ObjectParameter = If(periodo_anterior IsNot Nothing, New ObjectParameter("periodo_anterior", periodo_anterior), New ObjectParameter("periodo_anterior", GetType(String)))

        Dim anioActualParameter As ObjectParameter = If(anioActual.HasValue, New ObjectParameter("anioActual", anioActual), New ObjectParameter("anioActual", GetType(Integer)))

        Dim mesActualParameter As ObjectParameter = If(mesActual.HasValue, New ObjectParameter("mesActual", mesActual), New ObjectParameter("mesActual", GetType(Integer)))

        Dim empresaParameter As ObjectParameter = If(empresa IsNot Nothing, New ObjectParameter("empresa", empresa), New ObjectParameter("empresa", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_ReporteHojaTrabajoMensual_V2_Result)("usp_ReporteHojaTrabajoMensual_V2", periodo_anteriorParameter, anioActualParameter, mesActualParameter, empresaParameter)
    End Function

    Public Overridable Function usp_ResumenDetailVenta(idcajausuario As Nullable(Of Integer), idPersona As Nullable(Of Integer)) As ObjectResult(Of usp_ResumenDetailVenta_Result)
        Dim idcajausuarioParameter As ObjectParameter = If(idcajausuario.HasValue, New ObjectParameter("idcajausuario", idcajausuario), New ObjectParameter("idcajausuario", GetType(Integer)))

        Dim idPersonaParameter As ObjectParameter = If(idPersona.HasValue, New ObjectParameter("idPersona", idPersona), New ObjectParameter("idPersona", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_ResumenDetailVenta_Result)("usp_ResumenDetailVenta", idcajausuarioParameter, idPersonaParameter)
    End Function

    Public Overridable Function usp_ResumenTransaccionesXusuarioCaja(idPersona As Nullable(Of Integer), idCajaUser As Nullable(Of Integer)) As ObjectResult(Of usp_ResumenTransaccionesXusuarioCaja_Result)
        Dim idPersonaParameter As ObjectParameter = If(idPersona.HasValue, New ObjectParameter("idPersona", idPersona), New ObjectParameter("idPersona", GetType(Integer)))

        Dim idCajaUserParameter As ObjectParameter = If(idCajaUser.HasValue, New ObjectParameter("idCajaUser", idCajaUser), New ObjectParameter("idCajaUser", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_ResumenTransaccionesXusuarioCaja_Result)("usp_ResumenTransaccionesXusuarioCaja", idPersonaParameter, idCajaUserParameter)
    End Function

    Public Overridable Function usp_ResumenTransaccionesXusuarioCajaXCierre(idPersona As Nullable(Of Integer), idCajaUser As Nullable(Of Integer), fechaRegistro As Nullable(Of Date)) As ObjectResult(Of usp_ResumenTransaccionesXusuarioCajaXCierre_Result)
        Dim idPersonaParameter As ObjectParameter = If(idPersona.HasValue, New ObjectParameter("idPersona", idPersona), New ObjectParameter("idPersona", GetType(Integer)))

        Dim idCajaUserParameter As ObjectParameter = If(idCajaUser.HasValue, New ObjectParameter("idCajaUser", idCajaUser), New ObjectParameter("idCajaUser", GetType(Integer)))

        Dim fechaRegistroParameter As ObjectParameter = If(fechaRegistro.HasValue, New ObjectParameter("fechaRegistro", fechaRegistro), New ObjectParameter("fechaRegistro", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_ResumenTransaccionesXusuarioCajaXCierre_Result)("usp_ResumenTransaccionesXusuarioCajaXCierre", idPersonaParameter, idCajaUserParameter, fechaRegistroParameter)
    End Function

    Public Overridable Function uspListarDetalleCompraPoridDocumento(iddocumento As Nullable(Of Integer)) As ObjectResult(Of uspListarDetalleCompraPoridDocumento_Result)
        Dim iddocumentoParameter As ObjectParameter = If(iddocumento.HasValue, New ObjectParameter("iddocumento", iddocumento), New ObjectParameter("iddocumento", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of uspListarDetalleCompraPoridDocumento_Result)("uspListarDetalleCompraPoridDocumento", iddocumentoParameter)
    End Function

    Public Overridable Function uspListarDetalleCompraPoridDocumentoControl(iddocumento As Nullable(Of Integer)) As ObjectResult(Of uspListarDetalleCompraPoridDocumentoControl_Result)
        Dim iddocumentoParameter As ObjectParameter = If(iddocumento.HasValue, New ObjectParameter("iddocumento", iddocumento), New ObjectParameter("iddocumento", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of uspListarDetalleCompraPoridDocumentoControl_Result)("uspListarDetalleCompraPoridDocumentoControl", iddocumentoParameter)
    End Function

End Class
